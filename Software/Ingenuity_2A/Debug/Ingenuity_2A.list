
Ingenuity_2A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b910  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  0800baa0  0800baa0  0000caa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0d8  0800c0d8  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0d8  0800c0d8  0000d0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0e0  0800c0e0  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0e0  0800c0e0  0000d0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c0e4  0800c0e4  0000d0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c0e8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  200001d4  0800c2bc  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  0800c2bc  0000e690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2d7  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000334c  00000000  00000000  000284db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  0002b828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000139e  00000000  00000000  0002d138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e89c  00000000  00000000  0002e4d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d6ae  00000000  00000000  0004cd72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3556  00000000  00000000  0006a420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d976  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008288  00000000  00000000  0012d9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00135c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ba88 	.word	0x0800ba88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800ba88 	.word	0x0800ba88

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <inString>:
#include "decodeInstruction.h"


// int used as bool in this function

int inString (char c, char* str){
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
	char* currentChar = str;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	60fb      	str	r3, [r7, #12]

	while (*currentChar != '\0') {
 8001014:	e009      	b.n	800102a <inString+0x26>
		if(*currentChar == c) {
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	79fa      	ldrb	r2, [r7, #7]
 800101c:	429a      	cmp	r2, r3
 800101e:	d101      	bne.n	8001024 <inString+0x20>
			return 1;
 8001020:	2301      	movs	r3, #1
 8001022:	e007      	b.n	8001034 <inString+0x30>
		}
		currentChar++;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3301      	adds	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
	while (*currentChar != '\0') {
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f1      	bne.n	8001016 <inString+0x12>
	}
	return 0;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <isFloat>:


int isFloat (char* str){
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	char* currentChar = str;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	617b      	str	r3, [r7, #20]
	char* numbers = "0123456789";
 800104c:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <isFloat+0x8c>)
 800104e:	60fb      	str	r3, [r7, #12]

	int etat = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]

	while (*currentChar != '\0') {
 8001054:	e031      	b.n	80010ba <isFloat+0x7a>
		switch (etat) {
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <isFloat+0x24>
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d012      	beq.n	8001088 <isFloat+0x48>
 8001062:	e027      	b.n	80010b4 <isFloat+0x74>
		case 0:
			if (*currentChar == '.') {
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b2e      	cmp	r3, #46	@ 0x2e
 800106a:	d102      	bne.n	8001072 <isFloat+0x32>
				etat = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	613b      	str	r3, [r7, #16]
			} else if (inString(*currentChar, numbers)) {
				//ok
			} else {
				return 0;
			}
			break;
 8001070:	e01d      	b.n	80010ae <isFloat+0x6e>
			} else if (inString(*currentChar, numbers)) {
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	68f9      	ldr	r1, [r7, #12]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ffc3 	bl	8001004 <inString>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d114      	bne.n	80010ae <isFloat+0x6e>
				return 0;
 8001084:	2300      	movs	r3, #0
 8001086:	e01d      	b.n	80010c4 <isFloat+0x84>

		case 1:
			if (*currentChar == '\0') {
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d103      	bne.n	8001098 <isFloat+0x58>
				etat = 2;
 8001090:	2302      	movs	r3, #2
 8001092:	613b      	str	r3, [r7, #16]
				return 1;
 8001094:	2301      	movs	r3, #1
 8001096:	e015      	b.n	80010c4 <isFloat+0x84>
			} else if (inString(*currentChar, numbers)) {
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	68f9      	ldr	r1, [r7, #12]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ffb0 	bl	8001004 <inString>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d103      	bne.n	80010b2 <isFloat+0x72>
				//ok
			} else {
				return 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e00a      	b.n	80010c4 <isFloat+0x84>
			break;
 80010ae:	bf00      	nop
 80010b0:	e000      	b.n	80010b4 <isFloat+0x74>
			}
			break;
 80010b2:	bf00      	nop
		}
	currentChar++;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	3301      	adds	r3, #1
 80010b8:	617b      	str	r3, [r7, #20]
	while (*currentChar != '\0') {
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1c9      	bne.n	8001056 <isFloat+0x16>
	}
	return 1;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	0800baa0 	.word	0x0800baa0

080010d0 <printLabelValue>:



void printLabelValue(LabelValue lv) {
 80010d0:	b084      	sub	sp, #16
 80010d2:	b580      	push	{r7, lr}
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	f107 0c08 	add.w	ip, r7, #8
 80010da:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	printf("LabelValue structure instance. Label: %s, Value: %f", lv.label, lv.value);
 80010de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fa41 	bl	8000568 <__aeabi_f2d>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	f107 0108 	add.w	r1, r7, #8
 80010ee:	4804      	ldr	r0, [pc, #16]	@ (8001100 <printLabelValue+0x30>)
 80010f0:	f007 fe1e 	bl	8008d30 <iprintf>
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010fc:	b004      	add	sp, #16
 80010fe:	4770      	bx	lr
 8001100:	0800baac 	.word	0x0800baac

08001104 <checkInstruction>:


LabelValue checkInstruction(char* instruction){
 8001104:	b5b0      	push	{r4, r5, r7, lr}
 8001106:	b0d6      	sub	sp, #344	@ 0x158
 8001108:	af00      	add	r7, sp, #0
 800110a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800110e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001112:	6018      	str	r0, [r3, #0]
 8001114:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001118:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800111c:	6019      	str	r1, [r3, #0]
	char* i = instruction;
 800111e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001122:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	char* caracteresPermisLabel = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
 800112c:	4b81      	ldr	r3, [pc, #516]	@ (8001334 <checkInstruction+0x230>)
 800112e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	char* caracteresPermisValue = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.";
 8001132:	4b81      	ldr	r3, [pc, #516]	@ (8001338 <checkInstruction+0x234>)
 8001134:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

	char caractereDelimitation = '=';
 8001138:	233d      	movs	r3, #61	@ 0x3d
 800113a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	char label[100];
	char value[100];

	int indiceLabel = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
	int indiceValue = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

	int etat = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

	while(etat != 2) {
 8001150:	e074      	b.n	800123c <checkInstruction+0x138>
		switch (etat) {
 8001152:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001156:	2b00      	cmp	r3, #0
 8001158:	d004      	beq.n	8001164 <checkInstruction+0x60>
 800115a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800115e:	2b01      	cmp	r3, #1
 8001160:	d032      	beq.n	80011c8 <checkInstruction+0xc4>
 8001162:	e066      	b.n	8001232 <checkInstruction+0x12e>
		case 0:
			if(*i == '\0'){
 8001164:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d05e      	beq.n	800122c <checkInstruction+0x128>
				//error case
			} else if(*i == caractereDelimitation){
 800116e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8001178:	429a      	cmp	r2, r3
 800117a:	d10a      	bne.n	8001192 <checkInstruction+0x8e>
				etat = 1;
 800117c:	2301      	movs	r3, #1
 800117e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
				label[indiceLabel] = '\0';
 8001182:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 8001186:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800118a:	4413      	add	r3, r2
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
				label[indiceLabel] = *i;
				indiceLabel++;
			} else {
				//error case
			}
			break;
 8001190:	e04c      	b.n	800122c <checkInstruction+0x128>
			} else if (inString(*i, caracteresPermisLabel)) {
 8001192:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff31 	bl	8001004 <inString>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d041      	beq.n	800122c <checkInstruction+0x128>
				label[indiceLabel] = *i;
 80011a8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80011ac:	7819      	ldrb	r1, [r3, #0]
 80011ae:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 80011b2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80011b6:	4413      	add	r3, r2
 80011b8:	460a      	mov	r2, r1
 80011ba:	701a      	strb	r2, [r3, #0]
				indiceLabel++;
 80011bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80011c0:	3301      	adds	r3, #1
 80011c2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
			break;
 80011c6:	e031      	b.n	800122c <checkInstruction+0x128>

		case 1:
			if(*i == '\0'){
 80011c8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10a      	bne.n	80011e8 <checkInstruction+0xe4>
				etat = 2;
 80011d2:	2302      	movs	r3, #2
 80011d4:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
				value[indiceValue] = '\0';
 80011d8:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80011dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80011e0:	4413      	add	r3, r2
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
				value[indiceValue] = *i;
				indiceValue++;
			} else {
				//error case
			}
			break;
 80011e6:	e023      	b.n	8001230 <checkInstruction+0x12c>
			} else if(*i == caractereDelimitation){
 80011e8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d01c      	beq.n	8001230 <checkInstruction+0x12c>
			} else if (inString(*i, caracteresPermisValue)) {
 80011f6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff feff 	bl	8001004 <inString>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d011      	beq.n	8001230 <checkInstruction+0x12c>
				value[indiceValue] = *i;
 800120c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001210:	7819      	ldrb	r1, [r3, #0]
 8001212:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8001216:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800121a:	4413      	add	r3, r2
 800121c:	460a      	mov	r2, r1
 800121e:	701a      	strb	r2, [r3, #0]
				indiceValue++;
 8001220:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001224:	3301      	adds	r3, #1
 8001226:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
			break;
 800122a:	e001      	b.n	8001230 <checkInstruction+0x12c>
			break;
 800122c:	bf00      	nop
 800122e:	e000      	b.n	8001232 <checkInstruction+0x12e>
			break;
 8001230:	bf00      	nop
		}
	i++;
 8001232:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001236:	3301      	adds	r3, #1
 8001238:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	while(etat != 2) {
 800123c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001240:	2b02      	cmp	r3, #2
 8001242:	d186      	bne.n	8001152 <checkInstruction+0x4e>
	}
	if (etat == 2) {
 8001244:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001248:	2b02      	cmp	r3, #2
 800124a:	d150      	bne.n	80012ee <checkInstruction+0x1ea>
		if (isFloat(value)) {
 800124c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fef5 	bl	8001040 <isFloat>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d025      	beq.n	80012a8 <checkInstruction+0x1a4>
			LabelValue result;
			strcpy(result.label, label);
 800125c:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f007 ff5b 	bl	8009122 <strcpy>
			result.value = strtof(value, NULL);
 800126c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f006 fdca 	bl	8007e0c <strtof>
 8001278:	eef0 7a40 	vmov.f32	s15, s0
 800127c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001280:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001284:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
			return result;
 8001288:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800128c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001296:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	2368      	movs	r3, #104	@ 0x68
 80012a0:	461a      	mov	r2, r3
 80012a2:	f007 ff46 	bl	8009132 <memcpy>
			.value = NAN
		};

		return result;
	}
}
 80012a6:	e03c      	b.n	8001322 <checkInstruction+0x21e>
			strcpy(result.label, "LABELVALUE ERROR: VALUE FIELD NOT FLOAT");
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4a23      	ldr	r2, [pc, #140]	@ (800133c <checkInstruction+0x238>)
 80012ae:	461c      	mov	r4, r3
 80012b0:	4615      	mov	r5, r2
 80012b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012be:	e884 0003 	stmia.w	r4, {r0, r1}
			result.value = NAN;
 80012c2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80012c6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80012ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001340 <checkInstruction+0x23c>)
 80012cc:	665a      	str	r2, [r3, #100]	@ 0x64
			return result;
 80012ce:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80012d2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80012dc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	2368      	movs	r3, #104	@ 0x68
 80012e6:	461a      	mov	r2, r3
 80012e8:	f007 ff23 	bl	8009132 <memcpy>
}
 80012ec:	e019      	b.n	8001322 <checkInstruction+0x21e>
		LabelValue result = {
 80012ee:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80012f2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80012f6:	4a13      	ldr	r2, [pc, #76]	@ (8001344 <checkInstruction+0x240>)
 80012f8:	4618      	mov	r0, r3
 80012fa:	4611      	mov	r1, r2
 80012fc:	2368      	movs	r3, #104	@ 0x68
 80012fe:	461a      	mov	r2, r3
 8001300:	f007 ff17 	bl	8009132 <memcpy>
		return result;
 8001304:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001308:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001312:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	2368      	movs	r3, #104	@ 0x68
 800131c:	461a      	mov	r2, r3
 800131e:	f007 ff08 	bl	8009132 <memcpy>
}
 8001322:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001326:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8001330:	46bd      	mov	sp, r7
 8001332:	bdb0      	pop	{r4, r5, r7, pc}
 8001334:	0800bae0 	.word	0x0800bae0
 8001338:	0800bb20 	.word	0x0800bb20
 800133c:	0800bb60 	.word	0x0800bb60
 8001340:	7fc00000 	.word	0x7fc00000
 8001344:	0800bb88 	.word	0x0800bb88

08001348 <applyLabelValue>:
	return arrayOfInstructions;
}



 int applyLabelValue(LabelValue lv, DictOfFloatVariables dictOfVar) {
 8001348:	b084      	sub	sp, #16
 800134a:	b580      	push	{r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	f107 0c18 	add.w	ip, r7, #24
 8001354:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 char * nameOfVariableToBeChanged = lv.label;
 8001358:	f107 0318 	add.w	r3, r7, #24
 800135c:	60bb      	str	r3, [r7, #8]
	 float newValue = lv.value;
 800135e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001360:	607b      	str	r3, [r7, #4]

	 int i = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]

	 //strcmp: equal strings => returns 0
	 //strcmp: difft strings => returns 1

	 while (i < dictOfVar.n && strcmp(nameOfVariableToBeChanged, dictOfVar.variableNames[i])) {
 8001366:	e002      	b.n	800136e <applyLabelValue+0x26>
		 i++;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3301      	adds	r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
	 while (i < dictOfVar.n && strcmp(nameOfVariableToBeChanged, dictOfVar.variableNames[i])) {
 800136e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	429a      	cmp	r2, r3
 8001376:	da0c      	bge.n	8001392 <applyLabelValue+0x4a>
 8001378:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	68b8      	ldr	r0, [r7, #8]
 8001388:	f7fe ff22 	bl	80001d0 <strcmp>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1ea      	bne.n	8001368 <applyLabelValue+0x20>
	 }

	 if (i == dictOfVar.n) {
 8001392:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	429a      	cmp	r2, r3
 800139a:	d101      	bne.n	80013a0 <applyLabelValue+0x58>
		 // Error case
		 return 1;
 800139c:	2301      	movs	r3, #1
 800139e:	e00a      	b.n	80013b6 <applyLabelValue+0x6e>
	 } else {
		 float* pointerToVariableAddress = dictOfVar.variables[i];
 80013a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	603b      	str	r3, [r7, #0]

		 *pointerToVariableAddress = newValue;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	601a      	str	r2, [r3, #0]
	 }
	 return 0;
 80013b4:	2300      	movs	r3, #0
 }
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013c0:	b004      	add	sp, #16
 80013c2:	4770      	bx	lr

080013c4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80013cc:	1d39      	adds	r1, r7, #4
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	2201      	movs	r2, #1
 80013d4:	4803      	ldr	r0, [pc, #12]	@ (80013e4 <__io_putchar+0x20>)
 80013d6:	f004 fb0b 	bl	80059f0 <HAL_UART_Transmit>
  return ch;
 80013da:	687b      	ldr	r3, [r7, #4]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000358 	.word	0x20000358

080013e8 <__io_getchar>:

int __io_getchar(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	71fb      	strb	r3, [r7, #7]
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 80013f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001420 <__io_getchar+0x38>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2208      	movs	r2, #8
 80013f8:	621a      	str	r2, [r3, #32]
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80013fa:	1df9      	adds	r1, r7, #7
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	2201      	movs	r2, #1
 8001402:	4807      	ldr	r0, [pc, #28]	@ (8001420 <__io_getchar+0x38>)
 8001404:	f004 fb7d 	bl	8005b02 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001408:	1df9      	adds	r1, r7, #7
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	2201      	movs	r2, #1
 8001410:	4803      	ldr	r0, [pc, #12]	@ (8001420 <__io_getchar+0x38>)
 8001412:	f004 faed 	bl	80059f0 <HAL_UART_Transmit>
  return ch;
 8001416:	79fb      	ldrb	r3, [r7, #7]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000358 	.word	0x20000358

08001424 <HAL_UART_RxCpltCallback>:
int UARTReceiverState = 0;

volatile int flagUART1 = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	// Re-enable UART interrupt reception
	HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 800142c:	2201      	movs	r2, #1
 800142e:	4911      	ldr	r1, [pc, #68]	@ (8001474 <HAL_UART_RxCpltCallback+0x50>)
 8001430:	4811      	ldr	r0, [pc, #68]	@ (8001478 <HAL_UART_RxCpltCallback+0x54>)
 8001432:	f004 fc2f 	bl	8005c94 <HAL_UART_Receive_IT>

	instruction[indexInstruction] = rx_char;
 8001436:	4b11      	ldr	r3, [pc, #68]	@ (800147c <HAL_UART_RxCpltCallback+0x58>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a0e      	ldr	r2, [pc, #56]	@ (8001474 <HAL_UART_RxCpltCallback+0x50>)
 800143c:	7811      	ldrb	r1, [r2, #0]
 800143e:	4a10      	ldr	r2, [pc, #64]	@ (8001480 <HAL_UART_RxCpltCallback+0x5c>)
 8001440:	54d1      	strb	r1, [r2, r3]
	indexInstruction++;
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <HAL_UART_RxCpltCallback+0x58>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	4a0c      	ldr	r2, [pc, #48]	@ (800147c <HAL_UART_RxCpltCallback+0x58>)
 800144a:	6013      	str	r3, [r2, #0]

	if (rx_char == '#')
 800144c:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <HAL_UART_RxCpltCallback+0x50>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b23      	cmp	r3, #35	@ 0x23
 8001452:	d10a      	bne.n	800146a <HAL_UART_RxCpltCallback+0x46>
	{
		instruction[indexInstruction] = 0; // 0 character for the printf
 8001454:	4b09      	ldr	r3, [pc, #36]	@ (800147c <HAL_UART_RxCpltCallback+0x58>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a09      	ldr	r2, [pc, #36]	@ (8001480 <HAL_UART_RxCpltCallback+0x5c>)
 800145a:	2100      	movs	r1, #0
 800145c:	54d1      	strb	r1, [r2, r3]
		indexInstruction = 0;
 800145e:	4b07      	ldr	r3, [pc, #28]	@ (800147c <HAL_UART_RxCpltCallback+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
		flagUART1 = 1;
 8001464:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <HAL_UART_RxCpltCallback+0x60>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]
	}
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000468 	.word	0x20000468
 8001478:	200003e0 	.word	0x200003e0
 800147c:	20000534 	.word	0x20000534
 8001480:	2000046c 	.word	0x2000046c
 8001484:	20000538 	.word	0x20000538

08001488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b0bf      	sub	sp, #252	@ 0xfc
 800148c:	af1a      	add	r7, sp, #104	@ 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148e:	f000 fe58 	bl	8002142 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001492:	f000 f89d 	bl	80015d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001496:	f000 fac1 	bl	8001a1c <MX_GPIO_Init>
  MX_ADC1_Init();
 800149a:	f000 f8e9 	bl	8001670 <MX_ADC1_Init>
  MX_I2C1_Init();
 800149e:	f000 f95d 	bl	800175c <MX_I2C1_Init>
  MX_SPI1_Init();
 80014a2:	f000 f99b 	bl	80017dc <MX_SPI1_Init>
  MX_TIM2_Init();
 80014a6:	f000 f9d7 	bl	8001858 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80014aa:	f000 fa57 	bl	800195c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80014ae:	f000 fa85 	bl	80019bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


	printf("--------------EXECUTION BEGINS--------------\r\n\n");
 80014b2:	483f      	ldr	r0, [pc, #252]	@ (80015b0 <main+0x128>)
 80014b4:	f007 fca4 	bl	8008e00 <puts>

	// We define the dictionary of variables that can get modified by receiving a UART signal
	float height = 0.0;
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	float LEDState = 0.0;
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	char* variableNames[2] = {"height", "LEDState"};
 80014c8:	4a3a      	ldr	r2, [pc, #232]	@ (80015b4 <main+0x12c>)
 80014ca:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80014ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014d2:	e883 0003 	stmia.w	r3, {r0, r1}
	float* variablePointers[2] = {&height, &LEDState};
 80014d6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80014da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014dc:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80014e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
	DictOfFloatVariables dictOfVariables = {
 80014e2:	2302      	movs	r3, #2
 80014e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80014e6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80014ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80014ec:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80014f0:	677b      	str	r3, [r7, #116]	@ 0x74
	*/


	// Important, initiate character reception.
	// This line also being in HAL_UART_RxCpltCallback's body ensures continuous reception
	HAL_UART_Receive_IT(&huart1, &rx_char, 1);
 80014f2:	2201      	movs	r2, #1
 80014f4:	4930      	ldr	r1, [pc, #192]	@ (80015b8 <main+0x130>)
 80014f6:	4831      	ldr	r0, [pc, #196]	@ (80015bc <main+0x134>)
 80014f8:	f004 fbcc 	bl	8005c94 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // This is a test to check that instructions can correctly be received
	  // by UART and affect change (modified variables, LED toggled)
	  if (flagUART1 == 1) {
 80014fc:	4b30      	ldr	r3, [pc, #192]	@ (80015c0 <main+0x138>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d1fb      	bne.n	80014fc <main+0x74>
		  printf("instruction = %s\r\n", instruction);
 8001504:	492f      	ldr	r1, [pc, #188]	@ (80015c4 <main+0x13c>)
 8001506:	4830      	ldr	r0, [pc, #192]	@ (80015c8 <main+0x140>)
 8001508:	f007 fc12 	bl	8008d30 <iprintf>

		  flagUART1 = 0;
 800150c:	4b2c      	ldr	r3, [pc, #176]	@ (80015c0 <main+0x138>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]

		  LabelValue lv = checkInstruction(instruction);
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	492b      	ldr	r1, [pc, #172]	@ (80015c4 <main+0x13c>)
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fdf4 	bl	8001104 <checkInstruction>
		  printLabelValue(lv);
 800151c:	4668      	mov	r0, sp
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	2258      	movs	r2, #88	@ 0x58
 8001524:	4619      	mov	r1, r3
 8001526:	f007 fe04 	bl	8009132 <memcpy>
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800152e:	f7ff fdcf 	bl	80010d0 <printLabelValue>

		  printf("height = %f\r\n", height);
 8001532:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff f816 	bl	8000568 <__aeabi_f2d>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4822      	ldr	r0, [pc, #136]	@ (80015cc <main+0x144>)
 8001542:	f007 fbf5 	bl	8008d30 <iprintf>
		  applyLabelValue(lv, dictOfVariables);
 8001546:	ac16      	add	r4, sp, #88	@ 0x58
 8001548:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800154c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001550:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001554:	4668      	mov	r0, sp
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	2258      	movs	r2, #88	@ 0x58
 800155c:	4619      	mov	r1, r3
 800155e:	f007 fde8 	bl	8009132 <memcpy>
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001566:	f7ff feef 	bl	8001348 <applyLabelValue>
		  printf("height = %f\r\n", height);
 800156a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe fffa 	bl	8000568 <__aeabi_f2d>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4814      	ldr	r0, [pc, #80]	@ (80015cc <main+0x144>)
 800157a:	f007 fbd9 	bl	8008d30 <iprintf>

		  // This will not be the final use of height, it is just a test
		  if(height >= 1) {
 800157e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001582:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158e:	db07      	blt.n	80015a0 <main+0x118>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001590:	2201      	movs	r2, #1
 8001592:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001596:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800159a:	f002 f8f9 	bl	8003790 <HAL_GPIO_WritePin>
 800159e:	e7ad      	b.n	80014fc <main+0x74>
		  } else {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015aa:	f002 f8f1 	bl	8003790 <HAL_GPIO_WritePin>
	  if (flagUART1 == 1) {
 80015ae:	e7a5      	b.n	80014fc <main+0x74>
 80015b0:	0800bbf0 	.word	0x0800bbf0
 80015b4:	0800bc58 	.word	0x0800bc58
 80015b8:	20000468 	.word	0x20000468
 80015bc:	20000358 	.word	0x20000358
 80015c0:	20000538 	.word	0x20000538
 80015c4:	2000046c 	.word	0x2000046c
 80015c8:	0800bc20 	.word	0x0800bc20
 80015cc:	0800bc34 	.word	0x0800bc34

080015d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b096      	sub	sp, #88	@ 0x58
 80015d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	2244      	movs	r2, #68	@ 0x44
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f007 fd0e 	bl	8009000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	463b      	mov	r3, r7
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80015f6:	f002 fa23 	bl	8003a40 <HAL_PWREx_ControlVoltageScaling>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001600:	f000 fa6e 	bl	8001ae0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001604:	2310      	movs	r3, #16
 8001606:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001608:	2301      	movs	r3, #1
 800160a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001610:	2360      	movs	r3, #96	@ 0x60
 8001612:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001614:	2302      	movs	r3, #2
 8001616:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001618:	2301      	movs	r3, #1
 800161a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 800161c:	2301      	movs	r3, #1
 800161e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001620:	2328      	movs	r3, #40	@ 0x28
 8001622:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001624:	2302      	movs	r3, #2
 8001626:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001628:	2302      	movs	r3, #2
 800162a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4618      	mov	r0, r3
 8001632:	f002 fa5b 	bl	8003aec <HAL_RCC_OscConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800163c:	f000 fa50 	bl	8001ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001640:	230f      	movs	r3, #15
 8001642:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001644:	2303      	movs	r3, #3
 8001646:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001654:	463b      	mov	r3, r7
 8001656:	2104      	movs	r1, #4
 8001658:	4618      	mov	r0, r3
 800165a:	f002 fea9 	bl	80043b0 <HAL_RCC_ClockConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001664:	f000 fa3c 	bl	8001ae0 <Error_Handler>
  }
}
 8001668:	bf00      	nop
 800166a:	3758      	adds	r7, #88	@ 0x58
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	@ 0x28
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
 8001690:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001692:	4b2f      	ldr	r3, [pc, #188]	@ (8001750 <MX_ADC1_Init+0xe0>)
 8001694:	4a2f      	ldr	r2, [pc, #188]	@ (8001754 <MX_ADC1_Init+0xe4>)
 8001696:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001698:	4b2d      	ldr	r3, [pc, #180]	@ (8001750 <MX_ADC1_Init+0xe0>)
 800169a:	2200      	movs	r2, #0
 800169c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800169e:	4b2c      	ldr	r3, [pc, #176]	@ (8001750 <MX_ADC1_Init+0xe0>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001750 <MX_ADC1_Init+0xe0>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016aa:	4b29      	ldr	r3, [pc, #164]	@ (8001750 <MX_ADC1_Init+0xe0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016b0:	4b27      	ldr	r3, [pc, #156]	@ (8001750 <MX_ADC1_Init+0xe0>)
 80016b2:	2204      	movs	r2, #4
 80016b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016b6:	4b26      	ldr	r3, [pc, #152]	@ (8001750 <MX_ADC1_Init+0xe0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016bc:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <MX_ADC1_Init+0xe0>)
 80016be:	2200      	movs	r2, #0
 80016c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80016c2:	4b23      	ldr	r3, [pc, #140]	@ (8001750 <MX_ADC1_Init+0xe0>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016c8:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <MX_ADC1_Init+0xe0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001750 <MX_ADC1_Init+0xe0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <MX_ADC1_Init+0xe0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001750 <MX_ADC1_Init+0xe0>)
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001750 <MX_ADC1_Init+0xe0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80016ea:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <MX_ADC1_Init+0xe0>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016f2:	4817      	ldr	r0, [pc, #92]	@ (8001750 <MX_ADC1_Init+0xe0>)
 80016f4:	f000 ff3a 	bl	800256c <HAL_ADC_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80016fe:	f000 f9ef 	bl	8001ae0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	4810      	ldr	r0, [pc, #64]	@ (8001750 <MX_ADC1_Init+0xe0>)
 800170e:	f001 fc99 	bl	8003044 <HAL_ADCEx_MultiModeConfigChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001718:	f000 f9e2 	bl	8001ae0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800171c:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <MX_ADC1_Init+0xe8>)
 800171e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001720:	2306      	movs	r3, #6
 8001722:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001728:	237f      	movs	r3, #127	@ 0x7f
 800172a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800172c:	2304      	movs	r3, #4
 800172e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	@ (8001750 <MX_ADC1_Init+0xe0>)
 800173a:	f001 f861 	bl	8002800 <HAL_ADC_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001744:	f000 f9cc 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	3728      	adds	r7, #40	@ 0x28
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200001f0 	.word	0x200001f0
 8001754:	50040000 	.word	0x50040000
 8001758:	3ef08000 	.word	0x3ef08000

0800175c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001760:	4b1b      	ldr	r3, [pc, #108]	@ (80017d0 <MX_I2C1_Init+0x74>)
 8001762:	4a1c      	ldr	r2, [pc, #112]	@ (80017d4 <MX_I2C1_Init+0x78>)
 8001764:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001766:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <MX_I2C1_Init+0x74>)
 8001768:	4a1b      	ldr	r2, [pc, #108]	@ (80017d8 <MX_I2C1_Init+0x7c>)
 800176a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800176c:	4b18      	ldr	r3, [pc, #96]	@ (80017d0 <MX_I2C1_Init+0x74>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001772:	4b17      	ldr	r3, [pc, #92]	@ (80017d0 <MX_I2C1_Init+0x74>)
 8001774:	2201      	movs	r2, #1
 8001776:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001778:	4b15      	ldr	r3, [pc, #84]	@ (80017d0 <MX_I2C1_Init+0x74>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800177e:	4b14      	ldr	r3, [pc, #80]	@ (80017d0 <MX_I2C1_Init+0x74>)
 8001780:	2200      	movs	r2, #0
 8001782:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001784:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <MX_I2C1_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800178a:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <MX_I2C1_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001790:	4b0f      	ldr	r3, [pc, #60]	@ (80017d0 <MX_I2C1_Init+0x74>)
 8001792:	2200      	movs	r2, #0
 8001794:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001796:	480e      	ldr	r0, [pc, #56]	@ (80017d0 <MX_I2C1_Init+0x74>)
 8001798:	f002 f812 	bl	80037c0 <HAL_I2C_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017a2:	f000 f99d 	bl	8001ae0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017a6:	2100      	movs	r1, #0
 80017a8:	4809      	ldr	r0, [pc, #36]	@ (80017d0 <MX_I2C1_Init+0x74>)
 80017aa:	f002 f8a4 	bl	80038f6 <HAL_I2CEx_ConfigAnalogFilter>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017b4:	f000 f994 	bl	8001ae0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017b8:	2100      	movs	r1, #0
 80017ba:	4805      	ldr	r0, [pc, #20]	@ (80017d0 <MX_I2C1_Init+0x74>)
 80017bc:	f002 f8e6 	bl	800398c <HAL_I2CEx_ConfigDigitalFilter>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017c6:	f000 f98b 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000254 	.word	0x20000254
 80017d4:	40005400 	.word	0x40005400
 80017d8:	10909cec 	.word	0x10909cec

080017dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <MX_SPI1_Init+0x74>)
 80017e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001854 <MX_SPI1_Init+0x78>)
 80017e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <MX_SPI1_Init+0x74>)
 80017e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ee:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <MX_SPI1_Init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80017f4:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <MX_SPI1_Init+0x74>)
 80017f6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80017fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017fc:	4b14      	ldr	r3, [pc, #80]	@ (8001850 <MX_SPI1_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001802:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <MX_SPI1_Init+0x74>)
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001808:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <MX_SPI1_Init+0x74>)
 800180a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800180e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001810:	4b0f      	ldr	r3, [pc, #60]	@ (8001850 <MX_SPI1_Init+0x74>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001816:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <MX_SPI1_Init+0x74>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800181c:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <MX_SPI1_Init+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001822:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <MX_SPI1_Init+0x74>)
 8001824:	2200      	movs	r2, #0
 8001826:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001828:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <MX_SPI1_Init+0x74>)
 800182a:	2207      	movs	r2, #7
 800182c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800182e:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <MX_SPI1_Init+0x74>)
 8001830:	2200      	movs	r2, #0
 8001832:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <MX_SPI1_Init+0x74>)
 8001836:	2208      	movs	r2, #8
 8001838:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800183a:	4805      	ldr	r0, [pc, #20]	@ (8001850 <MX_SPI1_Init+0x74>)
 800183c:	f003 f962 	bl	8004b04 <HAL_SPI_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001846:	f000 f94b 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200002a8 	.word	0x200002a8
 8001854:	40013000 	.word	0x40013000

08001858 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08e      	sub	sp, #56	@ 0x38
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001878:	463b      	mov	r3, r7
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]
 8001886:	615a      	str	r2, [r3, #20]
 8001888:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800188a:	4b33      	ldr	r3, [pc, #204]	@ (8001958 <MX_TIM2_Init+0x100>)
 800188c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001890:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 8001892:	4b31      	ldr	r3, [pc, #196]	@ (8001958 <MX_TIM2_Init+0x100>)
 8001894:	2250      	movs	r2, #80	@ 0x50
 8001896:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001898:	4b2f      	ldr	r3, [pc, #188]	@ (8001958 <MX_TIM2_Init+0x100>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800189e:	4b2e      	ldr	r3, [pc, #184]	@ (8001958 <MX_TIM2_Init+0x100>)
 80018a0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80018a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001958 <MX_TIM2_Init+0x100>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001958 <MX_TIM2_Init+0x100>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018b2:	4829      	ldr	r0, [pc, #164]	@ (8001958 <MX_TIM2_Init+0x100>)
 80018b4:	f003 f9c9 	bl	8004c4a <HAL_TIM_Base_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80018be:	f000 f90f 	bl	8001ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018cc:	4619      	mov	r1, r3
 80018ce:	4822      	ldr	r0, [pc, #136]	@ (8001958 <MX_TIM2_Init+0x100>)
 80018d0:	f003 fb88 	bl	8004fe4 <HAL_TIM_ConfigClockSource>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80018da:	f000 f901 	bl	8001ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018de:	481e      	ldr	r0, [pc, #120]	@ (8001958 <MX_TIM2_Init+0x100>)
 80018e0:	f003 fa0a 	bl	8004cf8 <HAL_TIM_PWM_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80018ea:	f000 f8f9 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018f6:	f107 031c 	add.w	r3, r7, #28
 80018fa:	4619      	mov	r1, r3
 80018fc:	4816      	ldr	r0, [pc, #88]	@ (8001958 <MX_TIM2_Init+0x100>)
 80018fe:	f003 ffc3 	bl	8005888 <HAL_TIMEx_MasterConfigSynchronization>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001908:	f000 f8ea 	bl	8001ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800190c:	2360      	movs	r3, #96	@ 0x60
 800190e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800191c:	463b      	mov	r3, r7
 800191e:	2200      	movs	r2, #0
 8001920:	4619      	mov	r1, r3
 8001922:	480d      	ldr	r0, [pc, #52]	@ (8001958 <MX_TIM2_Init+0x100>)
 8001924:	f003 fa4a 	bl	8004dbc <HAL_TIM_PWM_ConfigChannel>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800192e:	f000 f8d7 	bl	8001ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001932:	463b      	mov	r3, r7
 8001934:	2204      	movs	r2, #4
 8001936:	4619      	mov	r1, r3
 8001938:	4807      	ldr	r0, [pc, #28]	@ (8001958 <MX_TIM2_Init+0x100>)
 800193a:	f003 fa3f 	bl	8004dbc <HAL_TIM_PWM_ConfigChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001944:	f000 f8cc 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001948:	4803      	ldr	r0, [pc, #12]	@ (8001958 <MX_TIM2_Init+0x100>)
 800194a:	f000 f9eb 	bl	8001d24 <HAL_TIM_MspPostInit>

}
 800194e:	bf00      	nop
 8001950:	3738      	adds	r7, #56	@ 0x38
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000030c 	.word	0x2000030c

0800195c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001960:	4b14      	ldr	r3, [pc, #80]	@ (80019b4 <MX_USART1_UART_Init+0x58>)
 8001962:	4a15      	ldr	r2, [pc, #84]	@ (80019b8 <MX_USART1_UART_Init+0x5c>)
 8001964:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001966:	4b13      	ldr	r3, [pc, #76]	@ (80019b4 <MX_USART1_UART_Init+0x58>)
 8001968:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800196c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <MX_USART1_UART_Init+0x58>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001974:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <MX_USART1_UART_Init+0x58>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800197a:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <MX_USART1_UART_Init+0x58>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001980:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <MX_USART1_UART_Init+0x58>)
 8001982:	220c      	movs	r2, #12
 8001984:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001986:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <MX_USART1_UART_Init+0x58>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800198c:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <MX_USART1_UART_Init+0x58>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001992:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <MX_USART1_UART_Init+0x58>)
 8001994:	2200      	movs	r2, #0
 8001996:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <MX_USART1_UART_Init+0x58>)
 800199a:	2200      	movs	r2, #0
 800199c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800199e:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <MX_USART1_UART_Init+0x58>)
 80019a0:	f003 ffd8 	bl	8005954 <HAL_UART_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80019aa:	f000 f899 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000358 	.word	0x20000358
 80019b8:	40013800 	.word	0x40013800

080019bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019c0:	4b14      	ldr	r3, [pc, #80]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019c2:	4a15      	ldr	r2, [pc, #84]	@ (8001a18 <MX_USART2_UART_Init+0x5c>)
 80019c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019c6:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ce:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019da:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019e2:	220c      	movs	r2, #12
 80019e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ec:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019f2:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019f8:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019fe:	4805      	ldr	r0, [pc, #20]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 8001a00:	f003 ffa8 	bl	8005954 <HAL_UART_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a0a:	f000 f869 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200003e0 	.word	0x200003e0
 8001a18:	40004400 	.word	0x40004400

08001a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	4b29      	ldr	r3, [pc, #164]	@ (8001ad8 <MX_GPIO_Init+0xbc>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a36:	4a28      	ldr	r2, [pc, #160]	@ (8001ad8 <MX_GPIO_Init+0xbc>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a3e:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <MX_GPIO_Init+0xbc>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4a:	4b23      	ldr	r3, [pc, #140]	@ (8001ad8 <MX_GPIO_Init+0xbc>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4e:	4a22      	ldr	r2, [pc, #136]	@ (8001ad8 <MX_GPIO_Init+0xbc>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a56:	4b20      	ldr	r3, [pc, #128]	@ (8001ad8 <MX_GPIO_Init+0xbc>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a6c:	f001 fe90 	bl	8003790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2118      	movs	r1, #24
 8001a74:	4819      	ldr	r0, [pc, #100]	@ (8001adc <MX_GPIO_Init+0xc0>)
 8001a76:	f001 fe8b 	bl	8003790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8001a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a80:	2301      	movs	r3, #1
 8001a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	4619      	mov	r1, r3
 8001a92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a96:	f001 fd09 	bl	80034ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8001a9a:	2318      	movs	r3, #24
 8001a9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aaa:	f107 030c 	add.w	r3, r7, #12
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480a      	ldr	r0, [pc, #40]	@ (8001adc <MX_GPIO_Init+0xc0>)
 8001ab2:	f001 fcfb 	bl	80034ac <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_INT_Pin */
  GPIO_InitStruct.Pin = TOF_INT_Pin;
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TOF_INT_GPIO_Port, &GPIO_InitStruct);
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4804      	ldr	r0, [pc, #16]	@ (8001adc <MX_GPIO_Init+0xc0>)
 8001acc:	f001 fcee 	bl	80034ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ad0:	bf00      	nop
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	48000400 	.word	0x48000400

08001ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
}
 8001ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <Error_Handler+0x8>

08001aec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <HAL_MspInit+0x44>)
 8001af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b30 <HAL_MspInit+0x44>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001afe:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <HAL_MspInit+0x44>)
 8001b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_MspInit+0x44>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0e:	4a08      	ldr	r2, [pc, #32]	@ (8001b30 <HAL_MspInit+0x44>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_MspInit+0x44>)
 8001b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	@ 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a15      	ldr	r2, [pc, #84]	@ (8001ba8 <HAL_ADC_MspInit+0x74>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d123      	bne.n	8001b9e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b56:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <HAL_ADC_MspInit+0x78>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5a:	4a14      	ldr	r2, [pc, #80]	@ (8001bac <HAL_ADC_MspInit+0x78>)
 8001b5c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b62:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <HAL_ADC_MspInit+0x78>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <HAL_ADC_MspInit+0x78>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b72:	4a0e      	ldr	r2, [pc, #56]	@ (8001bac <HAL_ADC_MspInit+0x78>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bac <HAL_ADC_MspInit+0x78>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = BATTERIE_Pin;
 8001b86:	2301      	movs	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b8a:	230b      	movs	r3, #11
 8001b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATTERIE_GPIO_Port, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	@ (8001bb0 <HAL_ADC_MspInit+0x7c>)
 8001b9a:	f001 fc87 	bl	80034ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	3728      	adds	r7, #40	@ 0x28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	50040000 	.word	0x50040000
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	48000400 	.word	0x48000400

08001bb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b096      	sub	sp, #88	@ 0x58
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bcc:	f107 0310 	add.w	r3, r7, #16
 8001bd0:	2234      	movs	r2, #52	@ 0x34
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f007 fa13 	bl	8009000 <memset>
  if(hi2c->Instance==I2C1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1e      	ldr	r2, [pc, #120]	@ (8001c58 <HAL_I2C_MspInit+0xa4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d135      	bne.n	8001c50 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001be4:	2340      	movs	r3, #64	@ 0x40
 8001be6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001be8:	2300      	movs	r3, #0
 8001bea:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bec:	f107 0310 	add.w	r3, r7, #16
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f002 fe01 	bl	80047f8 <HAL_RCCEx_PeriphCLKConfig>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001bfc:	f7ff ff70 	bl	8001ae0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c00:	4b16      	ldr	r3, [pc, #88]	@ (8001c5c <HAL_I2C_MspInit+0xa8>)
 8001c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c04:	4a15      	ldr	r2, [pc, #84]	@ (8001c5c <HAL_I2C_MspInit+0xa8>)
 8001c06:	f043 0302 	orr.w	r3, r3, #2
 8001c0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c0c:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <HAL_I2C_MspInit+0xa8>)
 8001c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c18:	23c0      	movs	r3, #192	@ 0xc0
 8001c1a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c1c:	2312      	movs	r3, #18
 8001c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c28:	2304      	movs	r3, #4
 8001c2a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001c30:	4619      	mov	r1, r3
 8001c32:	480b      	ldr	r0, [pc, #44]	@ (8001c60 <HAL_I2C_MspInit+0xac>)
 8001c34:	f001 fc3a 	bl	80034ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <HAL_I2C_MspInit+0xa8>)
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3c:	4a07      	ldr	r2, [pc, #28]	@ (8001c5c <HAL_I2C_MspInit+0xa8>)
 8001c3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c44:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <HAL_I2C_MspInit+0xa8>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c50:	bf00      	nop
 8001c52:	3758      	adds	r7, #88	@ 0x58
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40005400 	.word	0x40005400
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	48000400 	.word	0x48000400

08001c64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	@ 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a17      	ldr	r2, [pc, #92]	@ (8001ce0 <HAL_SPI_MspInit+0x7c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d128      	bne.n	8001cd8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c86:	4b17      	ldr	r3, [pc, #92]	@ (8001ce4 <HAL_SPI_MspInit+0x80>)
 8001c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c8a:	4a16      	ldr	r2, [pc, #88]	@ (8001ce4 <HAL_SPI_MspInit+0x80>)
 8001c8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c90:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c92:	4b14      	ldr	r3, [pc, #80]	@ (8001ce4 <HAL_SPI_MspInit+0x80>)
 8001c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <HAL_SPI_MspInit+0x80>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca2:	4a10      	ldr	r2, [pc, #64]	@ (8001ce4 <HAL_SPI_MspInit+0x80>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001caa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <HAL_SPI_MspInit+0x80>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cb6:	23f0      	movs	r3, #240	@ 0xf0
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cd4:	f001 fbea 	bl	80034ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cd8:	bf00      	nop
 8001cda:	3728      	adds	r7, #40	@ 0x28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40013000 	.word	0x40013000
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cf8:	d10b      	bne.n	8001d12 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cfa:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <HAL_TIM_Base_MspInit+0x38>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfe:	4a08      	ldr	r2, [pc, #32]	@ (8001d20 <HAL_TIM_Base_MspInit+0x38>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d06:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <HAL_TIM_Base_MspInit+0x38>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000

08001d24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 030c 	add.w	r3, r7, #12
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d44:	d11c      	bne.n	8001d80 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <HAL_TIM_MspPostInit+0x64>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d88 <HAL_TIM_MspPostInit+0x64>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d52:	4b0d      	ldr	r3, [pc, #52]	@ (8001d88 <HAL_TIM_MspPostInit+0x64>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-CK_IN     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	f107 030c 	add.w	r3, r7, #12
 8001d76:	4619      	mov	r1, r3
 8001d78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d7c:	f001 fb96 	bl	80034ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d80:	bf00      	nop
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000

08001d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b098      	sub	sp, #96	@ 0x60
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001da4:	f107 0318 	add.w	r3, r7, #24
 8001da8:	2234      	movs	r2, #52	@ 0x34
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f007 f927 	bl	8009000 <memset>
  if(huart->Instance==USART1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a42      	ldr	r2, [pc, #264]	@ (8001ec0 <HAL_UART_MspInit+0x134>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d138      	bne.n	8001e2e <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc4:	f107 0318 	add.w	r3, r7, #24
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f002 fd15 	bl	80047f8 <HAL_RCCEx_PeriphCLKConfig>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dd4:	f7ff fe84 	bl	8001ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dd8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ec4 <HAL_UART_MspInit+0x138>)
 8001dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ddc:	4a39      	ldr	r2, [pc, #228]	@ (8001ec4 <HAL_UART_MspInit+0x138>)
 8001dde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001de2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001de4:	4b37      	ldr	r3, [pc, #220]	@ (8001ec4 <HAL_UART_MspInit+0x138>)
 8001de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df0:	4b34      	ldr	r3, [pc, #208]	@ (8001ec4 <HAL_UART_MspInit+0x138>)
 8001df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df4:	4a33      	ldr	r2, [pc, #204]	@ (8001ec4 <HAL_UART_MspInit+0x138>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dfc:	4b31      	ldr	r3, [pc, #196]	@ (8001ec4 <HAL_UART_MspInit+0x138>)
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e08:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e16:	2303      	movs	r3, #3
 8001e18:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e1a:	2307      	movs	r3, #7
 8001e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e22:	4619      	mov	r1, r3
 8001e24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e28:	f001 fb40 	bl	80034ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e2c:	e043      	b.n	8001eb6 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a25      	ldr	r2, [pc, #148]	@ (8001ec8 <HAL_UART_MspInit+0x13c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d13e      	bne.n	8001eb6 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e40:	f107 0318 	add.w	r3, r7, #24
 8001e44:	4618      	mov	r0, r3
 8001e46:	f002 fcd7 	bl	80047f8 <HAL_RCCEx_PeriphCLKConfig>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8001e50:	f7ff fe46 	bl	8001ae0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec4 <HAL_UART_MspInit+0x138>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e58:	4a1a      	ldr	r2, [pc, #104]	@ (8001ec4 <HAL_UART_MspInit+0x138>)
 8001e5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e60:	4b18      	ldr	r3, [pc, #96]	@ (8001ec4 <HAL_UART_MspInit+0x138>)
 8001e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6c:	4b15      	ldr	r3, [pc, #84]	@ (8001ec4 <HAL_UART_MspInit+0x138>)
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e70:	4a14      	ldr	r2, [pc, #80]	@ (8001ec4 <HAL_UART_MspInit+0x138>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e78:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <HAL_UART_MspInit+0x138>)
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e84:	230c      	movs	r3, #12
 8001e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e94:	2307      	movs	r3, #7
 8001e96:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e98:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ea2:	f001 fb03 	bl	80034ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2026      	movs	r0, #38	@ 0x26
 8001eac:	f001 fa49 	bl	8003342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001eb0:	2026      	movs	r0, #38	@ 0x26
 8001eb2:	f001 fa62 	bl	800337a <HAL_NVIC_EnableIRQ>
}
 8001eb6:	bf00      	nop
 8001eb8:	3760      	adds	r7, #96	@ 0x60
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40013800 	.word	0x40013800
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40004400 	.word	0x40004400

08001ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <NMI_Handler+0x4>

08001ed4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <HardFault_Handler+0x4>

08001edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <MemManage_Handler+0x4>

08001ee4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee8:	bf00      	nop
 8001eea:	e7fd      	b.n	8001ee8 <BusFault_Handler+0x4>

08001eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <UsageFault_Handler+0x4>

08001ef4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f22:	f000 f963 	bl	80021ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f30:	4802      	ldr	r0, [pc, #8]	@ (8001f3c <USART2_IRQHandler+0x10>)
 8001f32:	f003 fefb 	bl	8005d2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200003e0 	.word	0x200003e0

08001f40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return 1;
 8001f44:	2301      	movs	r3, #1
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <_kill>:

int _kill(int pid, int sig)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f5a:	f007 f8b5 	bl	80090c8 <__errno>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2216      	movs	r2, #22
 8001f62:	601a      	str	r2, [r3, #0]
  return -1;
 8001f64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <_exit>:

void _exit (int status)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f78:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ffe7 	bl	8001f50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f82:	bf00      	nop
 8001f84:	e7fd      	b.n	8001f82 <_exit+0x12>

08001f86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b086      	sub	sp, #24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	e00a      	b.n	8001fae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f98:	f7ff fa26 	bl	80013e8 <__io_getchar>
 8001f9c:	4601      	mov	r1, r0
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	60ba      	str	r2, [r7, #8]
 8001fa4:	b2ca      	uxtb	r2, r1
 8001fa6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	3301      	adds	r3, #1
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	dbf0      	blt.n	8001f98 <_read+0x12>
  }

  return len;
 8001fb6:	687b      	ldr	r3, [r7, #4]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	e009      	b.n	8001fe6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	60ba      	str	r2, [r7, #8]
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff f9f2 	bl	80013c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	dbf1      	blt.n	8001fd2 <_write+0x12>
  }
  return len;
 8001fee:	687b      	ldr	r3, [r7, #4]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <_close>:

int _close(int file)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002000:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002020:	605a      	str	r2, [r3, #4]
  return 0;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <_isatty>:

int _isatty(int file)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002038:	2301      	movs	r3, #1
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002046:	b480      	push	{r7}
 8002048:	b085      	sub	sp, #20
 800204a:	af00      	add	r7, sp, #0
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002068:	4a14      	ldr	r2, [pc, #80]	@ (80020bc <_sbrk+0x5c>)
 800206a:	4b15      	ldr	r3, [pc, #84]	@ (80020c0 <_sbrk+0x60>)
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002074:	4b13      	ldr	r3, [pc, #76]	@ (80020c4 <_sbrk+0x64>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d102      	bne.n	8002082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800207c:	4b11      	ldr	r3, [pc, #68]	@ (80020c4 <_sbrk+0x64>)
 800207e:	4a12      	ldr	r2, [pc, #72]	@ (80020c8 <_sbrk+0x68>)
 8002080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002082:	4b10      	ldr	r3, [pc, #64]	@ (80020c4 <_sbrk+0x64>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	429a      	cmp	r2, r3
 800208e:	d207      	bcs.n	80020a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002090:	f007 f81a 	bl	80090c8 <__errno>
 8002094:	4603      	mov	r3, r0
 8002096:	220c      	movs	r2, #12
 8002098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800209a:	f04f 33ff 	mov.w	r3, #4294967295
 800209e:	e009      	b.n	80020b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a0:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <_sbrk+0x64>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020a6:	4b07      	ldr	r3, [pc, #28]	@ (80020c4 <_sbrk+0x64>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	4a05      	ldr	r2, [pc, #20]	@ (80020c4 <_sbrk+0x64>)
 80020b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020b2:	68fb      	ldr	r3, [r7, #12]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	2000a000 	.word	0x2000a000
 80020c0:	00000400 	.word	0x00000400
 80020c4:	2000053c 	.word	0x2000053c
 80020c8:	20000690 	.word	0x20000690

080020cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020d0:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <SystemInit+0x20>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d6:	4a05      	ldr	r2, [pc, #20]	@ (80020ec <SystemInit+0x20>)
 80020d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002128 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020f4:	f7ff ffea 	bl	80020cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020f8:	480c      	ldr	r0, [pc, #48]	@ (800212c <LoopForever+0x6>)
  ldr r1, =_edata
 80020fa:	490d      	ldr	r1, [pc, #52]	@ (8002130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002134 <LoopForever+0xe>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002100:	e002      	b.n	8002108 <LoopCopyDataInit>

08002102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002106:	3304      	adds	r3, #4

08002108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800210c:	d3f9      	bcc.n	8002102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002110:	4c0a      	ldr	r4, [pc, #40]	@ (800213c <LoopForever+0x16>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002114:	e001      	b.n	800211a <LoopFillZerobss>

08002116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002118:	3204      	adds	r2, #4

0800211a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800211c:	d3fb      	bcc.n	8002116 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800211e:	f006 ffd9 	bl	80090d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002122:	f7ff f9b1 	bl	8001488 <main>

08002126 <LoopForever>:

LoopForever:
    b LoopForever
 8002126:	e7fe      	b.n	8002126 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002128:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800212c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002130:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002134:	0800c0e8 	.word	0x0800c0e8
  ldr r2, =_sbss
 8002138:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800213c:	20000690 	.word	0x20000690

08002140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002140:	e7fe      	b.n	8002140 <ADC1_2_IRQHandler>

08002142 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800214c:	2003      	movs	r0, #3
 800214e:	f001 f8ed 	bl	800332c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002152:	200f      	movs	r0, #15
 8002154:	f000 f80e 	bl	8002174 <HAL_InitTick>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	71fb      	strb	r3, [r7, #7]
 8002162:	e001      	b.n	8002168 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002164:	f7ff fcc2 	bl	8001aec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002168:	79fb      	ldrb	r3, [r7, #7]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002180:	4b17      	ldr	r3, [pc, #92]	@ (80021e0 <HAL_InitTick+0x6c>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d023      	beq.n	80021d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002188:	4b16      	ldr	r3, [pc, #88]	@ (80021e4 <HAL_InitTick+0x70>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <HAL_InitTick+0x6c>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4619      	mov	r1, r3
 8002192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002196:	fbb3 f3f1 	udiv	r3, r3, r1
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	f001 f8f9 	bl	8003396 <HAL_SYSTICK_Config>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10f      	bne.n	80021ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b0f      	cmp	r3, #15
 80021ae:	d809      	bhi.n	80021c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b0:	2200      	movs	r2, #0
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295
 80021b8:	f001 f8c3 	bl	8003342 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021bc:	4a0a      	ldr	r2, [pc, #40]	@ (80021e8 <HAL_InitTick+0x74>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e007      	b.n	80021d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	e004      	b.n	80021d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	e001      	b.n	80021d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000008 	.word	0x20000008
 80021e4:	20000000 	.word	0x20000000
 80021e8:	20000004 	.word	0x20000004

080021ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021f0:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_IncTick+0x20>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <HAL_IncTick+0x24>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	4a04      	ldr	r2, [pc, #16]	@ (8002210 <HAL_IncTick+0x24>)
 80021fe:	6013      	str	r3, [r2, #0]
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000008 	.word	0x20000008
 8002210:	20000540 	.word	0x20000540

08002214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return uwTick;
 8002218:	4b03      	ldr	r3, [pc, #12]	@ (8002228 <HAL_GetTick+0x14>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000540 	.word	0x20000540

0800222c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	609a      	str	r2, [r3, #8]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	609a      	str	r2, [r3, #8]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3360      	adds	r3, #96	@ 0x60
 80022a6:	461a      	mov	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b08      	ldr	r3, [pc, #32]	@ (80022d8 <LL_ADC_SetOffset+0x44>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022cc:	bf00      	nop
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	03fff000 	.word	0x03fff000

080022dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3360      	adds	r3, #96	@ 0x60
 80022ea:	461a      	mov	r2, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002308:	b480      	push	{r7}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	3360      	adds	r3, #96	@ 0x60
 8002318:	461a      	mov	r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	431a      	orrs	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002332:	bf00      	nop
 8002334:	371c      	adds	r7, #28
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	615a      	str	r2, [r3, #20]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3330      	adds	r3, #48	@ 0x30
 8002374:	461a      	mov	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	4413      	add	r3, r2
 8002382:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	211f      	movs	r1, #31
 8002390:	fa01 f303 	lsl.w	r3, r1, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	401a      	ands	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	0e9b      	lsrs	r3, r3, #26
 800239c:	f003 011f 	and.w	r1, r3, #31
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	431a      	orrs	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023b0:	bf00      	nop
 80023b2:	371c      	adds	r7, #28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3314      	adds	r3, #20
 80023cc:	461a      	mov	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	0e5b      	lsrs	r3, r3, #25
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	4413      	add	r3, r2
 80023da:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	0d1b      	lsrs	r3, r3, #20
 80023e4:	f003 031f 	and.w	r3, r3, #31
 80023e8:	2107      	movs	r1, #7
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	401a      	ands	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	0d1b      	lsrs	r3, r3, #20
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002400:	431a      	orrs	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002406:	bf00      	nop
 8002408:	371c      	adds	r7, #28
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242c:	43db      	mvns	r3, r3
 800242e:	401a      	ands	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f003 0318 	and.w	r3, r3, #24
 8002436:	4908      	ldr	r1, [pc, #32]	@ (8002458 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002438:	40d9      	lsrs	r1, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	400b      	ands	r3, r1
 800243e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002442:	431a      	orrs	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800244a:	bf00      	nop
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	0007ffff 	.word	0x0007ffff

0800245c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800246c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6093      	str	r3, [r2, #8]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002494:	d101      	bne.n	800249a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80024b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024e4:	d101      	bne.n	80024ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <LL_ADC_IsEnabled+0x18>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <LL_ADC_IsEnabled+0x1a>
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b04      	cmp	r3, #4
 8002530:	d101      	bne.n	8002536 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b08      	cmp	r3, #8
 8002556:	d101      	bne.n	800255c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b089      	sub	sp, #36	@ 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e12b      	b.n	80027de <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002590:	2b00      	cmp	r3, #0
 8002592:	d109      	bne.n	80025a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff facd 	bl	8001b34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff67 	bl	8002480 <LL_ADC_IsDeepPowerDownEnabled>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d004      	beq.n	80025c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff4d 	bl	800245c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ff82 	bl	80024d0 <LL_ADC_IsInternalRegulatorEnabled>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d115      	bne.n	80025fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff ff66 	bl	80024a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025dc:	4b82      	ldr	r3, [pc, #520]	@ (80027e8 <HAL_ADC_Init+0x27c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	099b      	lsrs	r3, r3, #6
 80025e2:	4a82      	ldr	r2, [pc, #520]	@ (80027ec <HAL_ADC_Init+0x280>)
 80025e4:	fba2 2303 	umull	r2, r3, r2, r3
 80025e8:	099b      	lsrs	r3, r3, #6
 80025ea:	3301      	adds	r3, #1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025f0:	e002      	b.n	80025f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f9      	bne.n	80025f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff ff64 	bl	80024d0 <LL_ADC_IsInternalRegulatorEnabled>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10d      	bne.n	800262a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002612:	f043 0210 	orr.w	r2, r3, #16
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261e:	f043 0201 	orr.w	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff ff75 	bl	800251e <LL_ADC_REG_IsConversionOngoing>
 8002634:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	2b00      	cmp	r3, #0
 8002640:	f040 80c4 	bne.w	80027cc <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f040 80c0 	bne.w	80027cc <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002650:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002654:	f043 0202 	orr.w	r2, r3, #2
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff49 	bl	80024f8 <LL_ADC_IsEnabled>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d110      	bne.n	800268e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800266c:	4860      	ldr	r0, [pc, #384]	@ (80027f0 <HAL_ADC_Init+0x284>)
 800266e:	f7ff ff43 	bl	80024f8 <LL_ADC_IsEnabled>
 8002672:	4604      	mov	r4, r0
 8002674:	485f      	ldr	r0, [pc, #380]	@ (80027f4 <HAL_ADC_Init+0x288>)
 8002676:	f7ff ff3f 	bl	80024f8 <LL_ADC_IsEnabled>
 800267a:	4603      	mov	r3, r0
 800267c:	4323      	orrs	r3, r4
 800267e:	2b00      	cmp	r3, #0
 8002680:	d105      	bne.n	800268e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4619      	mov	r1, r3
 8002688:	485b      	ldr	r0, [pc, #364]	@ (80027f8 <HAL_ADC_Init+0x28c>)
 800268a:	f7ff fdcf 	bl	800222c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	7e5b      	ldrb	r3, [r3, #25]
 8002692:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002698:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800269e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026a4:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ac:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d106      	bne.n	80026ca <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	3b01      	subs	r3, #1
 80026c2:	045b      	lsls	r3, r3, #17
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d6:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026de:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	4b43      	ldr	r3, [pc, #268]	@ (80027fc <HAL_ADC_Init+0x290>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	69b9      	ldr	r1, [r7, #24]
 80026f6:	430b      	orrs	r3, r1
 80026f8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff ff20 	bl	8002544 <LL_ADC_INJ_IsConversionOngoing>
 8002704:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d13d      	bne.n	8002788 <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d13a      	bne.n	8002788 <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002716:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800271e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800272e:	f023 0302 	bic.w	r3, r3, #2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	69b9      	ldr	r1, [r7, #24]
 8002738:	430b      	orrs	r3, r1
 800273a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002742:	2b01      	cmp	r3, #1
 8002744:	d118      	bne.n	8002778 <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002750:	f023 0304 	bic.w	r3, r3, #4
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800275c:	4311      	orrs	r1, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002762:	4311      	orrs	r1, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002768:	430a      	orrs	r2, r1
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 0201 	orr.w	r2, r2, #1
 8002774:	611a      	str	r2, [r3, #16]
 8002776:	e007      	b.n	8002788 <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d10c      	bne.n	80027aa <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	f023 010f 	bic.w	r1, r3, #15
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	1e5a      	subs	r2, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80027a8:	e007      	b.n	80027ba <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 020f 	bic.w	r2, r2, #15
 80027b8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027be:	f023 0303 	bic.w	r3, r3, #3
 80027c2:	f043 0201 	orr.w	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	655a      	str	r2, [r3, #84]	@ 0x54
 80027ca:	e007      	b.n	80027dc <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d0:	f043 0210 	orr.w	r2, r3, #16
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3724      	adds	r7, #36	@ 0x24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd90      	pop	{r4, r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000000 	.word	0x20000000
 80027ec:	053e2d63 	.word	0x053e2d63
 80027f0:	50040000 	.word	0x50040000
 80027f4:	50040100 	.word	0x50040100
 80027f8:	50040300 	.word	0x50040300
 80027fc:	fff0c007 	.word	0xfff0c007

08002800 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b0b6      	sub	sp, #216	@ 0xd8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002810:	2300      	movs	r3, #0
 8002812:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x22>
 800281e:	2302      	movs	r3, #2
 8002820:	e3d5      	b.n	8002fce <HAL_ADC_ConfigChannel+0x7ce>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fe75 	bl	800251e <LL_ADC_REG_IsConversionOngoing>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	f040 83ba 	bne.w	8002fb0 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b05      	cmp	r3, #5
 800284a:	d824      	bhi.n	8002896 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	3b02      	subs	r3, #2
 8002852:	2b03      	cmp	r3, #3
 8002854:	d81b      	bhi.n	800288e <HAL_ADC_ConfigChannel+0x8e>
 8002856:	a201      	add	r2, pc, #4	@ (adr r2, 800285c <HAL_ADC_ConfigChannel+0x5c>)
 8002858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285c:	0800286d 	.word	0x0800286d
 8002860:	08002875 	.word	0x08002875
 8002864:	0800287d 	.word	0x0800287d
 8002868:	08002885 	.word	0x08002885
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800286c:	230c      	movs	r3, #12
 800286e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002872:	e010      	b.n	8002896 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002874:	2312      	movs	r3, #18
 8002876:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800287a:	e00c      	b.n	8002896 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800287c:	2318      	movs	r3, #24
 800287e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002882:	e008      	b.n	8002896 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002884:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002888:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800288c:	e003      	b.n	8002896 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800288e:	2306      	movs	r3, #6
 8002890:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002894:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80028a4:	f7ff fd5e 	bl	8002364 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff fe36 	bl	800251e <LL_ADC_REG_IsConversionOngoing>
 80028b2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fe42 	bl	8002544 <LL_ADC_INJ_IsConversionOngoing>
 80028c0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f040 81bf 	bne.w	8002c4c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 81ba 	bne.w	8002c4c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028e0:	d10f      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2200      	movs	r2, #0
 80028ec:	4619      	mov	r1, r3
 80028ee:	f7ff fd65 	bl	80023bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fd1f 	bl	800233e <LL_ADC_SetSamplingTimeCommonConfig>
 8002900:	e00e      	b.n	8002920 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6819      	ldr	r1, [r3, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	461a      	mov	r2, r3
 8002910:	f7ff fd54 	bl	80023bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fd0f 	bl	800233e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	695a      	ldr	r2, [r3, #20]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	08db      	lsrs	r3, r3, #3
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b04      	cmp	r3, #4
 8002940:	d00a      	beq.n	8002958 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6919      	ldr	r1, [r3, #16]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002952:	f7ff fc9f 	bl	8002294 <LL_ADC_SetOffset>
 8002956:	e179      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fcbc 	bl	80022dc <LL_ADC_GetOffsetChannel>
 8002964:	4603      	mov	r3, r0
 8002966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10a      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x184>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2100      	movs	r1, #0
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fcb1 	bl	80022dc <LL_ADC_GetOffsetChannel>
 800297a:	4603      	mov	r3, r0
 800297c:	0e9b      	lsrs	r3, r3, #26
 800297e:	f003 021f 	and.w	r2, r3, #31
 8002982:	e01e      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x1c2>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2100      	movs	r1, #0
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fca6 	bl	80022dc <LL_ADC_GetOffsetChannel>
 8002990:	4603      	mov	r3, r0
 8002992:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80029b2:	2320      	movs	r3, #32
 80029b4:	e004      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80029b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029ba:	fab3 f383 	clz	r3, r3
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d105      	bne.n	80029da <HAL_ADC_ConfigChannel+0x1da>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	0e9b      	lsrs	r3, r3, #26
 80029d4:	f003 031f 	and.w	r3, r3, #31
 80029d8:	e018      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x20c>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80029ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80029f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80029fe:	2320      	movs	r3, #32
 8002a00:	e004      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002a02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d106      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2200      	movs	r2, #0
 8002a16:	2100      	movs	r1, #0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fc75 	bl	8002308 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2101      	movs	r1, #1
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fc59 	bl	80022dc <LL_ADC_GetOffsetChannel>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x24a>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2101      	movs	r1, #1
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fc4e 	bl	80022dc <LL_ADC_GetOffsetChannel>
 8002a40:	4603      	mov	r3, r0
 8002a42:	0e9b      	lsrs	r3, r3, #26
 8002a44:	f003 021f 	and.w	r2, r3, #31
 8002a48:	e01e      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x288>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2101      	movs	r1, #1
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fc43 	bl	80022dc <LL_ADC_GetOffsetChannel>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002a70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002a78:	2320      	movs	r3, #32
 8002a7a:	e004      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002a7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d105      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x2a0>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	0e9b      	lsrs	r3, r3, #26
 8002a9a:	f003 031f 	and.w	r3, r3, #31
 8002a9e:	e018      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x2d2>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002aac:	fa93 f3a3 	rbit	r3, r3
 8002ab0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002ab4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ab8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002abc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002ac4:	2320      	movs	r3, #32
 8002ac6:	e004      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002acc:	fab3 f383 	clz	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d106      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2200      	movs	r2, #0
 8002adc:	2101      	movs	r1, #1
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fc12 	bl	8002308 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2102      	movs	r1, #2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fbf6 	bl	80022dc <LL_ADC_GetOffsetChannel>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10a      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x310>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2102      	movs	r1, #2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fbeb 	bl	80022dc <LL_ADC_GetOffsetChannel>
 8002b06:	4603      	mov	r3, r0
 8002b08:	0e9b      	lsrs	r3, r3, #26
 8002b0a:	f003 021f 	and.w	r2, r3, #31
 8002b0e:	e01e      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x34e>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2102      	movs	r1, #2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fbe0 	bl	80022dc <LL_ADC_GetOffsetChannel>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b26:	fa93 f3a3 	rbit	r3, r3
 8002b2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002b2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002b3e:	2320      	movs	r3, #32
 8002b40:	e004      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d105      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x366>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	0e9b      	lsrs	r3, r3, #26
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	e014      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x390>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002b74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002b7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002b82:	2320      	movs	r3, #32
 8002b84:	e004      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002b86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b8a:	fab3 f383 	clz	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d106      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2102      	movs	r1, #2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fbb3 	bl	8002308 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2103      	movs	r1, #3
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fb97 	bl	80022dc <LL_ADC_GetOffsetChannel>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x3ce>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2103      	movs	r1, #3
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fb8c 	bl	80022dc <LL_ADC_GetOffsetChannel>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	0e9b      	lsrs	r3, r3, #26
 8002bc8:	f003 021f 	and.w	r2, r3, #31
 8002bcc:	e017      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x3fe>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2103      	movs	r1, #3
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fb81 	bl	80022dc <LL_ADC_GetOffsetChannel>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002be6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002be8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002bea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002bf0:	2320      	movs	r3, #32
 8002bf2:	e003      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002bf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d105      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x416>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	0e9b      	lsrs	r3, r3, #26
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	e011      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x43a>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002c24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c26:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002c28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002c2e:	2320      	movs	r3, #32
 8002c30:	e003      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002c32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c34:	fab3 f383 	clz	r3, r3
 8002c38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d106      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2200      	movs	r2, #0
 8002c44:	2103      	movs	r1, #3
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fb5e 	bl	8002308 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fc51 	bl	80024f8 <LL_ADC_IsEnabled>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f040 813f 	bne.w	8002edc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6819      	ldr	r1, [r3, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f7ff fbd2 	bl	8002414 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4a8e      	ldr	r2, [pc, #568]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x6b0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	f040 8130 	bne.w	8002edc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10b      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x4a4>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	0e9b      	lsrs	r3, r3, #26
 8002c92:	3301      	adds	r3, #1
 8002c94:	f003 031f 	and.w	r3, r3, #31
 8002c98:	2b09      	cmp	r3, #9
 8002c9a:	bf94      	ite	ls
 8002c9c:	2301      	movls	r3, #1
 8002c9e:	2300      	movhi	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	e019      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x4d8>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002cb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002cbc:	2320      	movs	r3, #32
 8002cbe:	e003      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002cc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	3301      	adds	r3, #1
 8002cca:	f003 031f 	and.w	r3, r3, #31
 8002cce:	2b09      	cmp	r3, #9
 8002cd0:	bf94      	ite	ls
 8002cd2:	2301      	movls	r3, #1
 8002cd4:	2300      	movhi	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d079      	beq.n	8002dd0 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d107      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x4f8>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	0e9b      	lsrs	r3, r3, #26
 8002cee:	3301      	adds	r3, #1
 8002cf0:	069b      	lsls	r3, r3, #26
 8002cf2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cf6:	e015      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x524>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d08:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002d0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002d10:	2320      	movs	r3, #32
 8002d12:	e003      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002d14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d16:	fab3 f383 	clz	r3, r3
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	069b      	lsls	r3, r3, #26
 8002d20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d109      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x544>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	0e9b      	lsrs	r3, r3, #26
 8002d36:	3301      	adds	r3, #1
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d42:	e017      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x574>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d54:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002d56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002d5c:	2320      	movs	r3, #32
 8002d5e:	e003      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f003 031f 	and.w	r3, r3, #31
 8002d6e:	2101      	movs	r1, #1
 8002d70:	fa01 f303 	lsl.w	r3, r1, r3
 8002d74:	ea42 0103 	orr.w	r1, r2, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x59a>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	0e9b      	lsrs	r3, r3, #26
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f003 021f 	and.w	r2, r3, #31
 8002d90:	4613      	mov	r3, r2
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	4413      	add	r3, r2
 8002d96:	051b      	lsls	r3, r3, #20
 8002d98:	e018      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x5cc>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002daa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002db2:	2320      	movs	r3, #32
 8002db4:	e003      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db8:	fab3 f383 	clz	r3, r3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	f003 021f 	and.w	r2, r3, #31
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	e080      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d107      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x5ec>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0e9b      	lsrs	r3, r3, #26
 8002de2:	3301      	adds	r3, #1
 8002de4:	069b      	lsls	r3, r3, #26
 8002de6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dea:	e015      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x618>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002e04:	2320      	movs	r3, #32
 8002e06:	e003      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	3301      	adds	r3, #1
 8002e12:	069b      	lsls	r3, r3, #26
 8002e14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x638>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	0e9b      	lsrs	r3, r3, #26
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	2101      	movs	r1, #1
 8002e32:	fa01 f303 	lsl.w	r3, r1, r3
 8002e36:	e017      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x668>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	61bb      	str	r3, [r7, #24]
  return result;
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002e50:	2320      	movs	r3, #32
 8002e52:	e003      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	f003 031f 	and.w	r3, r3, #31
 8002e62:	2101      	movs	r1, #1
 8002e64:	fa01 f303 	lsl.w	r3, r1, r3
 8002e68:	ea42 0103 	orr.w	r1, r2, r3
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10d      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x694>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	0e9b      	lsrs	r3, r3, #26
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f003 021f 	and.w	r2, r3, #31
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	3b1e      	subs	r3, #30
 8002e8c:	051b      	lsls	r3, r3, #20
 8002e8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e92:	e01d      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x6d0>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	fa93 f3a3 	rbit	r3, r3
 8002ea0:	60fb      	str	r3, [r7, #12]
  return result;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d103      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002eac:	2320      	movs	r3, #32
 8002eae:	e005      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x6bc>
 8002eb0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	f003 021f 	and.w	r2, r3, #31
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3b1e      	subs	r3, #30
 8002eca:	051b      	lsls	r3, r3, #20
 8002ecc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f7ff fa70 	bl	80023bc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fd8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d06c      	beq.n	8002fc2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ee8:	483c      	ldr	r0, [pc, #240]	@ (8002fdc <HAL_ADC_ConfigChannel+0x7dc>)
 8002eea:	f7ff f9c5 	bl	8002278 <LL_ADC_GetCommonPathInternalCh>
 8002eee:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a3a      	ldr	r2, [pc, #232]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d127      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002efc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d121      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a35      	ldr	r2, [pc, #212]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x7e4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d157      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	482f      	ldr	r0, [pc, #188]	@ (8002fdc <HAL_ADC_ConfigChannel+0x7dc>)
 8002f1e:	f7ff f998 	bl	8002252 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f22:	4b31      	ldr	r3, [pc, #196]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x7e8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	099b      	lsrs	r3, r3, #6
 8002f28:	4a30      	ldr	r2, [pc, #192]	@ (8002fec <HAL_ADC_ConfigChannel+0x7ec>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	099b      	lsrs	r3, r3, #6
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f3c:	e002      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	3b01      	subs	r3, #1
 8002f42:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f9      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f4a:	e03a      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a27      	ldr	r2, [pc, #156]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x7f0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d113      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10d      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x7e4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d12a      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f74:	4619      	mov	r1, r3
 8002f76:	4819      	ldr	r0, [pc, #100]	@ (8002fdc <HAL_ADC_ConfigChannel+0x7dc>)
 8002f78:	f7ff f96b 	bl	8002252 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f7c:	e021      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x7f4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d11c      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d116      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a12      	ldr	r2, [pc, #72]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x7e4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d111      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fa2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	480c      	ldr	r0, [pc, #48]	@ (8002fdc <HAL_ADC_ConfigChannel+0x7dc>)
 8002faa:	f7ff f952 	bl	8002252 <LL_ADC_SetCommonPathInternalCh>
 8002fae:	e008      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb4:	f043 0220 	orr.w	r2, r3, #32
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fca:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	37d8      	adds	r7, #216	@ 0xd8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	80080000 	.word	0x80080000
 8002fdc:	50040300 	.word	0x50040300
 8002fe0:	c7520000 	.word	0xc7520000
 8002fe4:	50040000 	.word	0x50040000
 8002fe8:	20000000 	.word	0x20000000
 8002fec:	053e2d63 	.word	0x053e2d63
 8002ff0:	cb840000 	.word	0xcb840000
 8002ff4:	80000001 	.word	0x80000001

08002ff8 <LL_ADC_IsEnabled>:
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <LL_ADC_IsEnabled+0x18>
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <LL_ADC_IsEnabled+0x1a>
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <LL_ADC_REG_IsConversionOngoing>:
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b04      	cmp	r3, #4
 8003030:	d101      	bne.n	8003036 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b09f      	sub	sp, #124	@ 0x7c
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800305e:	2302      	movs	r3, #2
 8003060:	e089      	b.n	8003176 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800306a:	2300      	movs	r3, #0
 800306c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800306e:	2300      	movs	r3, #0
 8003070:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a42      	ldr	r2, [pc, #264]	@ (8003180 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d102      	bne.n	8003082 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800307c:	4b41      	ldr	r3, [pc, #260]	@ (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	e001      	b.n	8003086 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003082:	2300      	movs	r3, #0
 8003084:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10b      	bne.n	80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e068      	b.n	8003176 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff ffb9 	bl	800301e <LL_ADC_REG_IsConversionOngoing>
 80030ac:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff ffb3 	bl	800301e <LL_ADC_REG_IsConversionOngoing>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d14a      	bne.n	8003154 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80030be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d147      	bne.n	8003154 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030c4:	4b30      	ldr	r3, [pc, #192]	@ (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80030c6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d027      	beq.n	8003120 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80030d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030e2:	035b      	lsls	r3, r3, #13
 80030e4:	430b      	orrs	r3, r1
 80030e6:	431a      	orrs	r2, r3
 80030e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ec:	4824      	ldr	r0, [pc, #144]	@ (8003180 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80030ee:	f7ff ff83 	bl	8002ff8 <LL_ADC_IsEnabled>
 80030f2:	4604      	mov	r4, r0
 80030f4:	4823      	ldr	r0, [pc, #140]	@ (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80030f6:	f7ff ff7f 	bl	8002ff8 <LL_ADC_IsEnabled>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4323      	orrs	r3, r4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d132      	bne.n	8003168 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003102:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800310a:	f023 030f 	bic.w	r3, r3, #15
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	6811      	ldr	r1, [r2, #0]
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	6892      	ldr	r2, [r2, #8]
 8003116:	430a      	orrs	r2, r1
 8003118:	431a      	orrs	r2, r3
 800311a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800311c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800311e:	e023      	b.n	8003168 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003120:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003128:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800312a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800312c:	4814      	ldr	r0, [pc, #80]	@ (8003180 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800312e:	f7ff ff63 	bl	8002ff8 <LL_ADC_IsEnabled>
 8003132:	4604      	mov	r4, r0
 8003134:	4813      	ldr	r0, [pc, #76]	@ (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003136:	f7ff ff5f 	bl	8002ff8 <LL_ADC_IsEnabled>
 800313a:	4603      	mov	r3, r0
 800313c:	4323      	orrs	r3, r4
 800313e:	2b00      	cmp	r3, #0
 8003140:	d112      	bne.n	8003168 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800314a:	f023 030f 	bic.w	r3, r3, #15
 800314e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003150:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003152:	e009      	b.n	8003168 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003158:	f043 0220 	orr.w	r2, r3, #32
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003166:	e000      	b.n	800316a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003168:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003172:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003176:	4618      	mov	r0, r3
 8003178:	377c      	adds	r7, #124	@ 0x7c
 800317a:	46bd      	mov	sp, r7
 800317c:	bd90      	pop	{r4, r7, pc}
 800317e:	bf00      	nop
 8003180:	50040000 	.word	0x50040000
 8003184:	50040100 	.word	0x50040100
 8003188:	50040300 	.word	0x50040300

0800318c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800319c:	4b0c      	ldr	r3, [pc, #48]	@ (80031d0 <__NVIC_SetPriorityGrouping+0x44>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031a8:	4013      	ands	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031be:	4a04      	ldr	r2, [pc, #16]	@ (80031d0 <__NVIC_SetPriorityGrouping+0x44>)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	60d3      	str	r3, [r2, #12]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d8:	4b04      	ldr	r3, [pc, #16]	@ (80031ec <__NVIC_GetPriorityGrouping+0x18>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	0a1b      	lsrs	r3, r3, #8
 80031de:	f003 0307 	and.w	r3, r3, #7
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	db0b      	blt.n	800321a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	f003 021f 	and.w	r2, r3, #31
 8003208:	4907      	ldr	r1, [pc, #28]	@ (8003228 <__NVIC_EnableIRQ+0x38>)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	2001      	movs	r0, #1
 8003212:	fa00 f202 	lsl.w	r2, r0, r2
 8003216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	e000e100 	.word	0xe000e100

0800322c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	6039      	str	r1, [r7, #0]
 8003236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323c:	2b00      	cmp	r3, #0
 800323e:	db0a      	blt.n	8003256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	b2da      	uxtb	r2, r3
 8003244:	490c      	ldr	r1, [pc, #48]	@ (8003278 <__NVIC_SetPriority+0x4c>)
 8003246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324a:	0112      	lsls	r2, r2, #4
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	440b      	add	r3, r1
 8003250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003254:	e00a      	b.n	800326c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	4908      	ldr	r1, [pc, #32]	@ (800327c <__NVIC_SetPriority+0x50>)
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	3b04      	subs	r3, #4
 8003264:	0112      	lsls	r2, r2, #4
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	440b      	add	r3, r1
 800326a:	761a      	strb	r2, [r3, #24]
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000e100 	.word	0xe000e100
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003280:	b480      	push	{r7}
 8003282:	b089      	sub	sp, #36	@ 0x24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f1c3 0307 	rsb	r3, r3, #7
 800329a:	2b04      	cmp	r3, #4
 800329c:	bf28      	it	cs
 800329e:	2304      	movcs	r3, #4
 80032a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3304      	adds	r3, #4
 80032a6:	2b06      	cmp	r3, #6
 80032a8:	d902      	bls.n	80032b0 <NVIC_EncodePriority+0x30>
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3b03      	subs	r3, #3
 80032ae:	e000      	b.n	80032b2 <NVIC_EncodePriority+0x32>
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b4:	f04f 32ff 	mov.w	r2, #4294967295
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43da      	mvns	r2, r3
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	401a      	ands	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032c8:	f04f 31ff 	mov.w	r1, #4294967295
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	fa01 f303 	lsl.w	r3, r1, r3
 80032d2:	43d9      	mvns	r1, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d8:	4313      	orrs	r3, r2
         );
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3724      	adds	r7, #36	@ 0x24
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032f8:	d301      	bcc.n	80032fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032fa:	2301      	movs	r3, #1
 80032fc:	e00f      	b.n	800331e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003328 <SysTick_Config+0x40>)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3b01      	subs	r3, #1
 8003304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003306:	210f      	movs	r1, #15
 8003308:	f04f 30ff 	mov.w	r0, #4294967295
 800330c:	f7ff ff8e 	bl	800322c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003310:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <SysTick_Config+0x40>)
 8003312:	2200      	movs	r2, #0
 8003314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003316:	4b04      	ldr	r3, [pc, #16]	@ (8003328 <SysTick_Config+0x40>)
 8003318:	2207      	movs	r2, #7
 800331a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	e000e010 	.word	0xe000e010

0800332c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff ff29 	bl	800318c <__NVIC_SetPriorityGrouping>
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b086      	sub	sp, #24
 8003346:	af00      	add	r7, sp, #0
 8003348:	4603      	mov	r3, r0
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003354:	f7ff ff3e 	bl	80031d4 <__NVIC_GetPriorityGrouping>
 8003358:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	6978      	ldr	r0, [r7, #20]
 8003360:	f7ff ff8e 	bl	8003280 <NVIC_EncodePriority>
 8003364:	4602      	mov	r2, r0
 8003366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336a:	4611      	mov	r1, r2
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff ff5d 	bl	800322c <__NVIC_SetPriority>
}
 8003372:	bf00      	nop
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	4603      	mov	r3, r0
 8003382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ff31 	bl	80031f0 <__NVIC_EnableIRQ>
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ffa2 	bl	80032e8 <SysTick_Config>
 80033a4:	4603      	mov	r3, r0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d008      	beq.n	80033d8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2204      	movs	r2, #4
 80033ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e022      	b.n	800341e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 020e 	bic.w	r2, r2, #14
 80033e6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fc:	f003 021c 	and.w	r2, r3, #28
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003404:	2101      	movs	r1, #1
 8003406:	fa01 f202 	lsl.w	r2, r1, r2
 800340a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800341c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d005      	beq.n	800344e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2204      	movs	r2, #4
 8003446:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]
 800344c:	e029      	b.n	80034a2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 020e 	bic.w	r2, r2, #14
 800345c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0201 	bic.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003472:	f003 021c 	and.w	r2, r3, #28
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	2101      	movs	r1, #1
 800347c:	fa01 f202 	lsl.w	r2, r1, r2
 8003480:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	4798      	blx	r3
    }
  }
  return status;
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ba:	e14e      	b.n	800375a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	2101      	movs	r1, #1
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	fa01 f303 	lsl.w	r3, r1, r3
 80034c8:	4013      	ands	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8140 	beq.w	8003754 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d005      	beq.n	80034ec <HAL_GPIO_Init+0x40>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d130      	bne.n	800354e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	2203      	movs	r2, #3
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003522:	2201      	movs	r2, #1
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4013      	ands	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	091b      	lsrs	r3, r3, #4
 8003538:	f003 0201 	and.w	r2, r3, #1
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	2b03      	cmp	r3, #3
 8003558:	d017      	beq.n	800358a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	2203      	movs	r2, #3
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d123      	bne.n	80035de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	08da      	lsrs	r2, r3, #3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3208      	adds	r2, #8
 800359e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	220f      	movs	r2, #15
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4013      	ands	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	08da      	lsrs	r2, r3, #3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3208      	adds	r2, #8
 80035d8:	6939      	ldr	r1, [r7, #16]
 80035da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	2203      	movs	r2, #3
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4013      	ands	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 0203 	and.w	r2, r3, #3
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 809a 	beq.w	8003754 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003620:	4b55      	ldr	r3, [pc, #340]	@ (8003778 <HAL_GPIO_Init+0x2cc>)
 8003622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003624:	4a54      	ldr	r2, [pc, #336]	@ (8003778 <HAL_GPIO_Init+0x2cc>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6613      	str	r3, [r2, #96]	@ 0x60
 800362c:	4b52      	ldr	r3, [pc, #328]	@ (8003778 <HAL_GPIO_Init+0x2cc>)
 800362e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003638:	4a50      	ldr	r2, [pc, #320]	@ (800377c <HAL_GPIO_Init+0x2d0>)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	089b      	lsrs	r3, r3, #2
 800363e:	3302      	adds	r3, #2
 8003640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003644:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f003 0303 	and.w	r3, r3, #3
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	220f      	movs	r2, #15
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4013      	ands	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003662:	d013      	beq.n	800368c <HAL_GPIO_Init+0x1e0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a46      	ldr	r2, [pc, #280]	@ (8003780 <HAL_GPIO_Init+0x2d4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00d      	beq.n	8003688 <HAL_GPIO_Init+0x1dc>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a45      	ldr	r2, [pc, #276]	@ (8003784 <HAL_GPIO_Init+0x2d8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d007      	beq.n	8003684 <HAL_GPIO_Init+0x1d8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a44      	ldr	r2, [pc, #272]	@ (8003788 <HAL_GPIO_Init+0x2dc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d101      	bne.n	8003680 <HAL_GPIO_Init+0x1d4>
 800367c:	2303      	movs	r3, #3
 800367e:	e006      	b.n	800368e <HAL_GPIO_Init+0x1e2>
 8003680:	2307      	movs	r3, #7
 8003682:	e004      	b.n	800368e <HAL_GPIO_Init+0x1e2>
 8003684:	2302      	movs	r3, #2
 8003686:	e002      	b.n	800368e <HAL_GPIO_Init+0x1e2>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <HAL_GPIO_Init+0x1e2>
 800368c:	2300      	movs	r3, #0
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	f002 0203 	and.w	r2, r2, #3
 8003694:	0092      	lsls	r2, r2, #2
 8003696:	4093      	lsls	r3, r2
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800369e:	4937      	ldr	r1, [pc, #220]	@ (800377c <HAL_GPIO_Init+0x2d0>)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	089b      	lsrs	r3, r3, #2
 80036a4:	3302      	adds	r3, #2
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036ac:	4b37      	ldr	r3, [pc, #220]	@ (800378c <HAL_GPIO_Init+0x2e0>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4013      	ands	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036d0:	4a2e      	ldr	r2, [pc, #184]	@ (800378c <HAL_GPIO_Init+0x2e0>)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036d6:	4b2d      	ldr	r3, [pc, #180]	@ (800378c <HAL_GPIO_Init+0x2e0>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	43db      	mvns	r3, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4013      	ands	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036fa:	4a24      	ldr	r2, [pc, #144]	@ (800378c <HAL_GPIO_Init+0x2e0>)
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003700:	4b22      	ldr	r3, [pc, #136]	@ (800378c <HAL_GPIO_Init+0x2e0>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	43db      	mvns	r3, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003724:	4a19      	ldr	r2, [pc, #100]	@ (800378c <HAL_GPIO_Init+0x2e0>)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800372a:	4b18      	ldr	r3, [pc, #96]	@ (800378c <HAL_GPIO_Init+0x2e0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	43db      	mvns	r3, r3
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4013      	ands	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800374e:	4a0f      	ldr	r2, [pc, #60]	@ (800378c <HAL_GPIO_Init+0x2e0>)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	3301      	adds	r3, #1
 8003758:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	f47f aea9 	bne.w	80034bc <HAL_GPIO_Init+0x10>
  }
}
 800376a:	bf00      	nop
 800376c:	bf00      	nop
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40021000 	.word	0x40021000
 800377c:	40010000 	.word	0x40010000
 8003780:	48000400 	.word	0x48000400
 8003784:	48000800 	.word	0x48000800
 8003788:	48000c00 	.word	0x48000c00
 800378c:	40010400 	.word	0x40010400

08003790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	807b      	strh	r3, [r7, #2]
 800379c:	4613      	mov	r3, r2
 800379e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037a0:	787b      	ldrb	r3, [r7, #1]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037a6:	887a      	ldrh	r2, [r7, #2]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037ac:	e002      	b.n	80037b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e08d      	b.n	80038ee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fe f9e4 	bl	8001bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2224      	movs	r2, #36	@ 0x24
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0201 	bic.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003810:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003820:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d107      	bne.n	800383a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	e006      	b.n	8003848 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003846:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d108      	bne.n	8003862 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800385e:	605a      	str	r2, [r3, #4]
 8003860:	e007      	b.n	8003872 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003870:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6812      	ldr	r2, [r2, #0]
 800387c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003880:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003884:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003894:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69d9      	ldr	r1, [r3, #28]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1a      	ldr	r2, [r3, #32]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b20      	cmp	r3, #32
 800390a:	d138      	bne.n	800397e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003916:	2302      	movs	r3, #2
 8003918:	e032      	b.n	8003980 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2224      	movs	r2, #36	@ 0x24
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003948:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6819      	ldr	r1, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0201 	orr.w	r2, r2, #1
 8003968:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	e000      	b.n	8003980 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800397e:	2302      	movs	r3, #2
  }
}
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d139      	bne.n	8003a16 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e033      	b.n	8003a18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2224      	movs	r2, #36	@ 0x24
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f042 0201 	orr.w	r2, r2, #1
 8003a00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e000      	b.n	8003a18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a16:	2302      	movs	r3, #2
  }
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a28:	4b04      	ldr	r3, [pc, #16]	@ (8003a3c <HAL_PWREx_GetVoltageRange+0x18>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40007000 	.word	0x40007000

08003a40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a4e:	d130      	bne.n	8003ab2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a50:	4b23      	ldr	r3, [pc, #140]	@ (8003ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a5c:	d038      	beq.n	8003ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a66:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ae4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2232      	movs	r2, #50	@ 0x32
 8003a74:	fb02 f303 	mul.w	r3, r2, r3
 8003a78:	4a1b      	ldr	r2, [pc, #108]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	0c9b      	lsrs	r3, r3, #18
 8003a80:	3301      	adds	r3, #1
 8003a82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a84:	e002      	b.n	8003a8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a8c:	4b14      	ldr	r3, [pc, #80]	@ (8003ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a98:	d102      	bne.n	8003aa0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f2      	bne.n	8003a86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aac:	d110      	bne.n	8003ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e00f      	b.n	8003ad2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003abe:	d007      	beq.n	8003ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ac0:	4b07      	ldr	r3, [pc, #28]	@ (8003ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ac8:	4a05      	ldr	r2, [pc, #20]	@ (8003ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ace:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40007000 	.word	0x40007000
 8003ae4:	20000000 	.word	0x20000000
 8003ae8:	431bde83 	.word	0x431bde83

08003aec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08a      	sub	sp, #40	@ 0x28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d102      	bne.n	8003b00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f000 bc4f 	b.w	800439e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b00:	4b97      	ldr	r3, [pc, #604]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 030c 	and.w	r3, r3, #12
 8003b08:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b0a:	4b95      	ldr	r3, [pc, #596]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 80e6 	beq.w	8003cee <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d007      	beq.n	8003b38 <HAL_RCC_OscConfig+0x4c>
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	2b0c      	cmp	r3, #12
 8003b2c:	f040 808d 	bne.w	8003c4a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	f040 8089 	bne.w	8003c4a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b38:	4b89      	ldr	r3, [pc, #548]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d006      	beq.n	8003b52 <HAL_RCC_OscConfig+0x66>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d102      	bne.n	8003b52 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f000 bc26 	b.w	800439e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b56:	4b82      	ldr	r3, [pc, #520]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d004      	beq.n	8003b6c <HAL_RCC_OscConfig+0x80>
 8003b62:	4b7f      	ldr	r3, [pc, #508]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b6a:	e005      	b.n	8003b78 <HAL_RCC_OscConfig+0x8c>
 8003b6c:	4b7c      	ldr	r3, [pc, #496]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b72:	091b      	lsrs	r3, r3, #4
 8003b74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d224      	bcs.n	8003bc6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fdd9 	bl	8004738 <RCC_SetFlashLatencyFromMSIRange>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f000 bc06 	b.w	800439e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b92:	4b73      	ldr	r3, [pc, #460]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a72      	ldr	r2, [pc, #456]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003b98:	f043 0308 	orr.w	r3, r3, #8
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	4b70      	ldr	r3, [pc, #448]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	496d      	ldr	r1, [pc, #436]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bb0:	4b6b      	ldr	r3, [pc, #428]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	4968      	ldr	r1, [pc, #416]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	604b      	str	r3, [r1, #4]
 8003bc4:	e025      	b.n	8003c12 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bc6:	4b66      	ldr	r3, [pc, #408]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a65      	ldr	r2, [pc, #404]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003bcc:	f043 0308 	orr.w	r3, r3, #8
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	4b63      	ldr	r3, [pc, #396]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bde:	4960      	ldr	r1, [pc, #384]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003be4:	4b5e      	ldr	r3, [pc, #376]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	021b      	lsls	r3, r3, #8
 8003bf2:	495b      	ldr	r1, [pc, #364]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fd98 	bl	8004738 <RCC_SetFlashLatencyFromMSIRange>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e3c5      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c12:	f000 fccd 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 8003c16:	4602      	mov	r2, r0
 8003c18:	4b51      	ldr	r3, [pc, #324]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	091b      	lsrs	r3, r3, #4
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	4950      	ldr	r1, [pc, #320]	@ (8003d64 <HAL_RCC_OscConfig+0x278>)
 8003c24:	5ccb      	ldrb	r3, [r1, r3]
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2e:	4a4e      	ldr	r2, [pc, #312]	@ (8003d68 <HAL_RCC_OscConfig+0x27c>)
 8003c30:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c32:	4b4e      	ldr	r3, [pc, #312]	@ (8003d6c <HAL_RCC_OscConfig+0x280>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fe fa9c 	bl	8002174 <HAL_InitTick>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003c40:	7dfb      	ldrb	r3, [r7, #23]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d052      	beq.n	8003cec <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
 8003c48:	e3a9      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d032      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c52:	4b43      	ldr	r3, [pc, #268]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a42      	ldr	r2, [pc, #264]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c5e:	f7fe fad9 	bl	8002214 <HAL_GetTick>
 8003c62:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c66:	f7fe fad5 	bl	8002214 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e392      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c78:	4b39      	ldr	r3, [pc, #228]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c84:	4b36      	ldr	r3, [pc, #216]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a35      	ldr	r2, [pc, #212]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003c8a:	f043 0308 	orr.w	r3, r3, #8
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	4b33      	ldr	r3, [pc, #204]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	4930      	ldr	r1, [pc, #192]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	021b      	lsls	r3, r3, #8
 8003cb0:	492b      	ldr	r1, [pc, #172]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	604b      	str	r3, [r1, #4]
 8003cb6:	e01a      	b.n	8003cee <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cb8:	4b29      	ldr	r3, [pc, #164]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a28      	ldr	r2, [pc, #160]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003cbe:	f023 0301 	bic.w	r3, r3, #1
 8003cc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cc4:	f7fe faa6 	bl	8002214 <HAL_GetTick>
 8003cc8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ccc:	f7fe faa2 	bl	8002214 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e35f      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cde:	4b20      	ldr	r3, [pc, #128]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x1e0>
 8003cea:	e000      	b.n	8003cee <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d073      	beq.n	8003de2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCC_OscConfig+0x220>
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	2b0c      	cmp	r3, #12
 8003d04:	d10e      	bne.n	8003d24 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d10b      	bne.n	8003d24 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0c:	4b14      	ldr	r3, [pc, #80]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d063      	beq.n	8003de0 <HAL_RCC_OscConfig+0x2f4>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d15f      	bne.n	8003de0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e33c      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d2c:	d106      	bne.n	8003d3c <HAL_RCC_OscConfig+0x250>
 8003d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a0b      	ldr	r2, [pc, #44]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e025      	b.n	8003d88 <HAL_RCC_OscConfig+0x29c>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d44:	d114      	bne.n	8003d70 <HAL_RCC_OscConfig+0x284>
 8003d46:	4b06      	ldr	r3, [pc, #24]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a05      	ldr	r2, [pc, #20]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003d4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	4b03      	ldr	r3, [pc, #12]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a02      	ldr	r2, [pc, #8]	@ (8003d60 <HAL_RCC_OscConfig+0x274>)
 8003d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	e013      	b.n	8003d88 <HAL_RCC_OscConfig+0x29c>
 8003d60:	40021000 	.word	0x40021000
 8003d64:	0800bc60 	.word	0x0800bc60
 8003d68:	20000000 	.word	0x20000000
 8003d6c:	20000004 	.word	0x20000004
 8003d70:	4b8f      	ldr	r3, [pc, #572]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a8e      	ldr	r2, [pc, #568]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003d76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	4b8c      	ldr	r3, [pc, #560]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a8b      	ldr	r2, [pc, #556]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003d82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d013      	beq.n	8003db8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fe fa40 	bl	8002214 <HAL_GetTick>
 8003d94:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d98:	f7fe fa3c 	bl	8002214 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	@ 0x64
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e2f9      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003daa:	4b81      	ldr	r3, [pc, #516]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0x2ac>
 8003db6:	e014      	b.n	8003de2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fe fa2c 	bl	8002214 <HAL_GetTick>
 8003dbc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc0:	f7fe fa28 	bl	8002214 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b64      	cmp	r3, #100	@ 0x64
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e2e5      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dd2:	4b77      	ldr	r3, [pc, #476]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x2d4>
 8003dde:	e000      	b.n	8003de2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d060      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d005      	beq.n	8003e00 <HAL_RCC_OscConfig+0x314>
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	2b0c      	cmp	r3, #12
 8003df8:	d119      	bne.n	8003e2e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d116      	bne.n	8003e2e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e00:	4b6b      	ldr	r3, [pc, #428]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_RCC_OscConfig+0x32c>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e2c2      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e18:	4b65      	ldr	r3, [pc, #404]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	061b      	lsls	r3, r3, #24
 8003e26:	4962      	ldr	r1, [pc, #392]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e2c:	e040      	b.n	8003eb0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d023      	beq.n	8003e7e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e36:	4b5e      	ldr	r3, [pc, #376]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a5d      	ldr	r2, [pc, #372]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e42:	f7fe f9e7 	bl	8002214 <HAL_GetTick>
 8003e46:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e4a:	f7fe f9e3 	bl	8002214 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e2a0      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e5c:	4b54      	ldr	r3, [pc, #336]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e68:	4b51      	ldr	r3, [pc, #324]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	061b      	lsls	r3, r3, #24
 8003e76:	494e      	ldr	r1, [pc, #312]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	604b      	str	r3, [r1, #4]
 8003e7c:	e018      	b.n	8003eb0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e7e:	4b4c      	ldr	r3, [pc, #304]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a4b      	ldr	r2, [pc, #300]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003e84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8a:	f7fe f9c3 	bl	8002214 <HAL_GetTick>
 8003e8e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e92:	f7fe f9bf 	bl	8002214 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e27c      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ea4:	4b42      	ldr	r3, [pc, #264]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f0      	bne.n	8003e92 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8082 	beq.w	8003fc2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d05f      	beq.n	8003f86 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ecc:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d037      	beq.n	8003f4c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d006      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e254      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d01b      	beq.n	8003f36 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8003efe:	4b2c      	ldr	r3, [pc, #176]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f04:	4a2a      	ldr	r2, [pc, #168]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f0e:	f7fe f981 	bl	8002214 <HAL_GetTick>
 8003f12:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f16:	f7fe f97d 	bl	8002214 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b11      	cmp	r3, #17
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e23a      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f28:	4b21      	ldr	r3, [pc, #132]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1ef      	bne.n	8003f16 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003f36:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f3c:	f023 0210 	bic.w	r2, r3, #16
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	491a      	ldr	r1, [pc, #104]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f4c:	4b18      	ldr	r3, [pc, #96]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f52:	4a17      	ldr	r2, [pc, #92]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5c:	f7fe f95a 	bl	8002214 <HAL_GetTick>
 8003f60:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f64:	f7fe f956 	bl	8002214 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b11      	cmp	r3, #17
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e213      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f76:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0ef      	beq.n	8003f64 <HAL_RCC_OscConfig+0x478>
 8003f84:	e01d      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f86:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f8c:	4a08      	ldr	r2, [pc, #32]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c4>)
 8003f8e:	f023 0301 	bic.w	r3, r3, #1
 8003f92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f96:	f7fe f93d 	bl	8002214 <HAL_GetTick>
 8003f9a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f9c:	e00a      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f9e:	f7fe f939 	bl	8002214 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b11      	cmp	r3, #17
 8003faa:	d903      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e1f6      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
 8003fb0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fb4:	4ba9      	ldr	r3, [pc, #676]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 8003fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1ed      	bne.n	8003f9e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 80bd 	beq.w	800414a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fd6:	4ba1      	ldr	r3, [pc, #644]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10e      	bne.n	8004000 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe2:	4b9e      	ldr	r3, [pc, #632]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe6:	4a9d      	ldr	r2, [pc, #628]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 8003fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fec:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fee:	4b9b      	ldr	r3, [pc, #620]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004000:	4b97      	ldr	r3, [pc, #604]	@ (8004260 <HAL_RCC_OscConfig+0x774>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d118      	bne.n	800403e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800400c:	4b94      	ldr	r3, [pc, #592]	@ (8004260 <HAL_RCC_OscConfig+0x774>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a93      	ldr	r2, [pc, #588]	@ (8004260 <HAL_RCC_OscConfig+0x774>)
 8004012:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004016:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004018:	f7fe f8fc 	bl	8002214 <HAL_GetTick>
 800401c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004020:	f7fe f8f8 	bl	8002214 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e1b5      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004032:	4b8b      	ldr	r3, [pc, #556]	@ (8004260 <HAL_RCC_OscConfig+0x774>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d02c      	beq.n	80040a4 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800404a:	4b84      	ldr	r3, [pc, #528]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004050:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405c:	497f      	ldr	r1, [pc, #508]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d010      	beq.n	8004092 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004070:	4b7a      	ldr	r3, [pc, #488]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004076:	4a79      	ldr	r2, [pc, #484]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 8004078:	f043 0304 	orr.w	r3, r3, #4
 800407c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004080:	4b76      	ldr	r3, [pc, #472]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004086:	4a75      	ldr	r2, [pc, #468]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004090:	e018      	b.n	80040c4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004092:	4b72      	ldr	r3, [pc, #456]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004098:	4a70      	ldr	r2, [pc, #448]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040a2:	e00f      	b.n	80040c4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80040a4:	4b6d      	ldr	r3, [pc, #436]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040aa:	4a6c      	ldr	r2, [pc, #432]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 80040ac:	f023 0301 	bic.w	r3, r3, #1
 80040b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80040b4:	4b69      	ldr	r3, [pc, #420]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ba:	4a68      	ldr	r2, [pc, #416]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 80040bc:	f023 0304 	bic.w	r3, r3, #4
 80040c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d016      	beq.n	80040fa <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040cc:	f7fe f8a2 	bl	8002214 <HAL_GetTick>
 80040d0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040d2:	e00a      	b.n	80040ea <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d4:	f7fe f89e 	bl	8002214 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e159      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ea:	4b5c      	ldr	r3, [pc, #368]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 80040ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ed      	beq.n	80040d4 <HAL_RCC_OscConfig+0x5e8>
 80040f8:	e01d      	b.n	8004136 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fa:	f7fe f88b 	bl	8002214 <HAL_GetTick>
 80040fe:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004100:	e00a      	b.n	8004118 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7fe f887 	bl	8002214 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004110:	4293      	cmp	r3, r2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e142      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004118:	4b50      	ldr	r3, [pc, #320]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1ed      	bne.n	8004102 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004126:	4b4d      	ldr	r3, [pc, #308]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 8004128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800412c:	4a4b      	ldr	r2, [pc, #300]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 800412e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004132:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004136:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800413a:	2b01      	cmp	r3, #1
 800413c:	d105      	bne.n	800414a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413e:	4b47      	ldr	r3, [pc, #284]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004142:	4a46      	ldr	r2, [pc, #280]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 8004144:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004148:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b00      	cmp	r3, #0
 8004154:	d03c      	beq.n	80041d0 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415a:	2b00      	cmp	r3, #0
 800415c:	d01c      	beq.n	8004198 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800415e:	4b3f      	ldr	r3, [pc, #252]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 8004160:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004164:	4a3d      	ldr	r2, [pc, #244]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 8004166:	f043 0301 	orr.w	r3, r3, #1
 800416a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416e:	f7fe f851 	bl	8002214 <HAL_GetTick>
 8004172:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004176:	f7fe f84d 	bl	8002214 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e10a      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004188:	4b34      	ldr	r3, [pc, #208]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 800418a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0ef      	beq.n	8004176 <HAL_RCC_OscConfig+0x68a>
 8004196:	e01b      	b.n	80041d0 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004198:	4b30      	ldr	r3, [pc, #192]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 800419a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800419e:	4a2f      	ldr	r2, [pc, #188]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 80041a0:	f023 0301 	bic.w	r3, r3, #1
 80041a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a8:	f7fe f834 	bl	8002214 <HAL_GetTick>
 80041ac:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041b0:	f7fe f830 	bl	8002214 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e0ed      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041c2:	4b26      	ldr	r3, [pc, #152]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 80041c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1ef      	bne.n	80041b0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 80e1 	beq.w	800439c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041de:	2b02      	cmp	r3, #2
 80041e0:	f040 80b5 	bne.w	800434e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041e4:	4b1d      	ldr	r3, [pc, #116]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	f003 0203 	and.w	r2, r3, #3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d124      	bne.n	8004242 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004202:	3b01      	subs	r3, #1
 8004204:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004206:	429a      	cmp	r2, r3
 8004208:	d11b      	bne.n	8004242 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004214:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004216:	429a      	cmp	r2, r3
 8004218:	d113      	bne.n	8004242 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004224:	085b      	lsrs	r3, r3, #1
 8004226:	3b01      	subs	r3, #1
 8004228:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800422a:	429a      	cmp	r2, r3
 800422c:	d109      	bne.n	8004242 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004238:	085b      	lsrs	r3, r3, #1
 800423a:	3b01      	subs	r3, #1
 800423c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800423e:	429a      	cmp	r2, r3
 8004240:	d05f      	beq.n	8004302 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	2b0c      	cmp	r3, #12
 8004246:	d05a      	beq.n	80042fe <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004248:	4b04      	ldr	r3, [pc, #16]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a03      	ldr	r2, [pc, #12]	@ (800425c <HAL_RCC_OscConfig+0x770>)
 800424e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004252:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004254:	f7fd ffde 	bl	8002214 <HAL_GetTick>
 8004258:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800425a:	e00c      	b.n	8004276 <HAL_RCC_OscConfig+0x78a>
 800425c:	40021000 	.word	0x40021000
 8004260:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004264:	f7fd ffd6 	bl	8002214 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e093      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004276:	4b4c      	ldr	r3, [pc, #304]	@ (80043a8 <HAL_RCC_OscConfig+0x8bc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004282:	4b49      	ldr	r3, [pc, #292]	@ (80043a8 <HAL_RCC_OscConfig+0x8bc>)
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	4b49      	ldr	r3, [pc, #292]	@ (80043ac <HAL_RCC_OscConfig+0x8c0>)
 8004288:	4013      	ands	r3, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004292:	3a01      	subs	r2, #1
 8004294:	0112      	lsls	r2, r2, #4
 8004296:	4311      	orrs	r1, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800429c:	0212      	lsls	r2, r2, #8
 800429e:	4311      	orrs	r1, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042a4:	0852      	lsrs	r2, r2, #1
 80042a6:	3a01      	subs	r2, #1
 80042a8:	0552      	lsls	r2, r2, #21
 80042aa:	4311      	orrs	r1, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80042b0:	0852      	lsrs	r2, r2, #1
 80042b2:	3a01      	subs	r2, #1
 80042b4:	0652      	lsls	r2, r2, #25
 80042b6:	430a      	orrs	r2, r1
 80042b8:	493b      	ldr	r1, [pc, #236]	@ (80043a8 <HAL_RCC_OscConfig+0x8bc>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042be:	4b3a      	ldr	r3, [pc, #232]	@ (80043a8 <HAL_RCC_OscConfig+0x8bc>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a39      	ldr	r2, [pc, #228]	@ (80043a8 <HAL_RCC_OscConfig+0x8bc>)
 80042c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042c8:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042ca:	4b37      	ldr	r3, [pc, #220]	@ (80043a8 <HAL_RCC_OscConfig+0x8bc>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	4a36      	ldr	r2, [pc, #216]	@ (80043a8 <HAL_RCC_OscConfig+0x8bc>)
 80042d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042d4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042d6:	f7fd ff9d 	bl	8002214 <HAL_GetTick>
 80042da:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042de:	f7fd ff99 	bl	8002214 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e056      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042f0:	4b2d      	ldr	r3, [pc, #180]	@ (80043a8 <HAL_RCC_OscConfig+0x8bc>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0f0      	beq.n	80042de <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042fc:	e04e      	b.n	800439c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e04d      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004302:	4b29      	ldr	r3, [pc, #164]	@ (80043a8 <HAL_RCC_OscConfig+0x8bc>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d146      	bne.n	800439c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800430e:	4b26      	ldr	r3, [pc, #152]	@ (80043a8 <HAL_RCC_OscConfig+0x8bc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a25      	ldr	r2, [pc, #148]	@ (80043a8 <HAL_RCC_OscConfig+0x8bc>)
 8004314:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004318:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800431a:	4b23      	ldr	r3, [pc, #140]	@ (80043a8 <HAL_RCC_OscConfig+0x8bc>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	4a22      	ldr	r2, [pc, #136]	@ (80043a8 <HAL_RCC_OscConfig+0x8bc>)
 8004320:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004324:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004326:	f7fd ff75 	bl	8002214 <HAL_GetTick>
 800432a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800432e:	f7fd ff71 	bl	8002214 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e02e      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004340:	4b19      	ldr	r3, [pc, #100]	@ (80043a8 <HAL_RCC_OscConfig+0x8bc>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0f0      	beq.n	800432e <HAL_RCC_OscConfig+0x842>
 800434c:	e026      	b.n	800439c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	2b0c      	cmp	r3, #12
 8004352:	d021      	beq.n	8004398 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004354:	4b14      	ldr	r3, [pc, #80]	@ (80043a8 <HAL_RCC_OscConfig+0x8bc>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a13      	ldr	r2, [pc, #76]	@ (80043a8 <HAL_RCC_OscConfig+0x8bc>)
 800435a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800435e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004360:	f7fd ff58 	bl	8002214 <HAL_GetTick>
 8004364:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004368:	f7fd ff54 	bl	8002214 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e011      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800437a:	4b0b      	ldr	r3, [pc, #44]	@ (80043a8 <HAL_RCC_OscConfig+0x8bc>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8004386:	4b08      	ldr	r3, [pc, #32]	@ (80043a8 <HAL_RCC_OscConfig+0x8bc>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	4a07      	ldr	r2, [pc, #28]	@ (80043a8 <HAL_RCC_OscConfig+0x8bc>)
 800438c:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8004390:	f023 0303 	bic.w	r3, r3, #3
 8004394:	60d3      	str	r3, [r2, #12]
 8004396:	e001      	b.n	800439c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3728      	adds	r7, #40	@ 0x28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40021000 	.word	0x40021000
 80043ac:	f99f808c 	.word	0xf99f808c

080043b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0e7      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043c4:	4b75      	ldr	r3, [pc, #468]	@ (800459c <HAL_RCC_ClockConfig+0x1ec>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d910      	bls.n	80043f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d2:	4b72      	ldr	r3, [pc, #456]	@ (800459c <HAL_RCC_ClockConfig+0x1ec>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 0207 	bic.w	r2, r3, #7
 80043da:	4970      	ldr	r1, [pc, #448]	@ (800459c <HAL_RCC_ClockConfig+0x1ec>)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e2:	4b6e      	ldr	r3, [pc, #440]	@ (800459c <HAL_RCC_ClockConfig+0x1ec>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d001      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0cf      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d010      	beq.n	8004422 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	4b66      	ldr	r3, [pc, #408]	@ (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800440c:	429a      	cmp	r2, r3
 800440e:	d908      	bls.n	8004422 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004410:	4b63      	ldr	r3, [pc, #396]	@ (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4960      	ldr	r1, [pc, #384]	@ (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 800441e:	4313      	orrs	r3, r2
 8004420:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d04c      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b03      	cmp	r3, #3
 8004434:	d107      	bne.n	8004446 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004436:	4b5a      	ldr	r3, [pc, #360]	@ (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d121      	bne.n	8004486 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e0a6      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d107      	bne.n	800445e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800444e:	4b54      	ldr	r3, [pc, #336]	@ (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d115      	bne.n	8004486 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e09a      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d107      	bne.n	8004476 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004466:	4b4e      	ldr	r3, [pc, #312]	@ (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e08e      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004476:	4b4a      	ldr	r3, [pc, #296]	@ (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e086      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004486:	4b46      	ldr	r3, [pc, #280]	@ (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f023 0203 	bic.w	r2, r3, #3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4943      	ldr	r1, [pc, #268]	@ (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004494:	4313      	orrs	r3, r2
 8004496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004498:	f7fd febc 	bl	8002214 <HAL_GetTick>
 800449c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449e:	e00a      	b.n	80044b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a0:	f7fd feb8 	bl	8002214 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e06e      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b6:	4b3a      	ldr	r3, [pc, #232]	@ (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 020c 	and.w	r2, r3, #12
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d1eb      	bne.n	80044a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d010      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	4b31      	ldr	r3, [pc, #196]	@ (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d208      	bcs.n	80044f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044e4:	4b2e      	ldr	r3, [pc, #184]	@ (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	492b      	ldr	r1, [pc, #172]	@ (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044f6:	4b29      	ldr	r3, [pc, #164]	@ (800459c <HAL_RCC_ClockConfig+0x1ec>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d210      	bcs.n	8004526 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004504:	4b25      	ldr	r3, [pc, #148]	@ (800459c <HAL_RCC_ClockConfig+0x1ec>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f023 0207 	bic.w	r2, r3, #7
 800450c:	4923      	ldr	r1, [pc, #140]	@ (800459c <HAL_RCC_ClockConfig+0x1ec>)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	4313      	orrs	r3, r2
 8004512:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004514:	4b21      	ldr	r3, [pc, #132]	@ (800459c <HAL_RCC_ClockConfig+0x1ec>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d001      	beq.n	8004526 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e036      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d008      	beq.n	8004544 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004532:	4b1b      	ldr	r3, [pc, #108]	@ (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	4918      	ldr	r1, [pc, #96]	@ (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004540:	4313      	orrs	r3, r2
 8004542:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b00      	cmp	r3, #0
 800454e:	d009      	beq.n	8004564 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004550:	4b13      	ldr	r3, [pc, #76]	@ (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	4910      	ldr	r1, [pc, #64]	@ (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004560:	4313      	orrs	r3, r2
 8004562:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004564:	f000 f824 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 8004568:	4602      	mov	r2, r0
 800456a:	4b0d      	ldr	r3, [pc, #52]	@ (80045a0 <HAL_RCC_ClockConfig+0x1f0>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	091b      	lsrs	r3, r3, #4
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	490b      	ldr	r1, [pc, #44]	@ (80045a4 <HAL_RCC_ClockConfig+0x1f4>)
 8004576:	5ccb      	ldrb	r3, [r1, r3]
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	fa22 f303 	lsr.w	r3, r2, r3
 8004580:	4a09      	ldr	r2, [pc, #36]	@ (80045a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004582:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004584:	4b09      	ldr	r3, [pc, #36]	@ (80045ac <HAL_RCC_ClockConfig+0x1fc>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f7fd fdf3 	bl	8002174 <HAL_InitTick>
 800458e:	4603      	mov	r3, r0
 8004590:	72fb      	strb	r3, [r7, #11]

  return status;
 8004592:	7afb      	ldrb	r3, [r7, #11]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40022000 	.word	0x40022000
 80045a0:	40021000 	.word	0x40021000
 80045a4:	0800bc60 	.word	0x0800bc60
 80045a8:	20000000 	.word	0x20000000
 80045ac:	20000004 	.word	0x20000004

080045b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b089      	sub	sp, #36	@ 0x24
 80045b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	2300      	movs	r3, #0
 80045bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045be:	4b3e      	ldr	r3, [pc, #248]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045c8:	4b3b      	ldr	r3, [pc, #236]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f003 0303 	and.w	r3, r3, #3
 80045d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_GetSysClockFreq+0x34>
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b0c      	cmp	r3, #12
 80045dc:	d121      	bne.n	8004622 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d11e      	bne.n	8004622 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045e4:	4b34      	ldr	r3, [pc, #208]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d107      	bne.n	8004600 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045f0:	4b31      	ldr	r3, [pc, #196]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045f6:	0a1b      	lsrs	r3, r3, #8
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	61fb      	str	r3, [r7, #28]
 80045fe:	e005      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004600:	4b2d      	ldr	r3, [pc, #180]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	091b      	lsrs	r3, r3, #4
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800460c:	4a2b      	ldr	r2, [pc, #172]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004614:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10d      	bne.n	8004638 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004620:	e00a      	b.n	8004638 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	2b04      	cmp	r3, #4
 8004626:	d102      	bne.n	800462e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004628:	4b25      	ldr	r3, [pc, #148]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	e004      	b.n	8004638 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b08      	cmp	r3, #8
 8004632:	d101      	bne.n	8004638 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004634:	4b23      	ldr	r3, [pc, #140]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004636:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	2b0c      	cmp	r3, #12
 800463c:	d134      	bne.n	80046a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800463e:	4b1e      	ldr	r3, [pc, #120]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d003      	beq.n	8004656 <HAL_RCC_GetSysClockFreq+0xa6>
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b03      	cmp	r3, #3
 8004652:	d003      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0xac>
 8004654:	e005      	b.n	8004662 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004656:	4b1a      	ldr	r3, [pc, #104]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004658:	617b      	str	r3, [r7, #20]
      break;
 800465a:	e005      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800465c:	4b19      	ldr	r3, [pc, #100]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800465e:	617b      	str	r3, [r7, #20]
      break;
 8004660:	e002      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	617b      	str	r3, [r7, #20]
      break;
 8004666:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004668:	4b13      	ldr	r3, [pc, #76]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	3301      	adds	r3, #1
 8004674:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004676:	4b10      	ldr	r3, [pc, #64]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	0a1b      	lsrs	r3, r3, #8
 800467c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	fb03 f202 	mul.w	r2, r3, r2
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	fbb2 f3f3 	udiv	r3, r2, r3
 800468c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800468e:	4b0a      	ldr	r3, [pc, #40]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	0e5b      	lsrs	r3, r3, #25
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	3301      	adds	r3, #1
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80046a8:	69bb      	ldr	r3, [r7, #24]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3724      	adds	r7, #36	@ 0x24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40021000 	.word	0x40021000
 80046bc:	0800bc78 	.word	0x0800bc78
 80046c0:	00f42400 	.word	0x00f42400
 80046c4:	007a1200 	.word	0x007a1200

080046c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046cc:	4b03      	ldr	r3, [pc, #12]	@ (80046dc <HAL_RCC_GetHCLKFreq+0x14>)
 80046ce:	681b      	ldr	r3, [r3, #0]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000000 	.word	0x20000000

080046e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046e4:	f7ff fff0 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 80046e8:	4602      	mov	r2, r0
 80046ea:	4b06      	ldr	r3, [pc, #24]	@ (8004704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	4904      	ldr	r1, [pc, #16]	@ (8004708 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046f6:	5ccb      	ldrb	r3, [r1, r3]
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004700:	4618      	mov	r0, r3
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40021000 	.word	0x40021000
 8004708:	0800bc70 	.word	0x0800bc70

0800470c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004710:	f7ff ffda 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 8004714:	4602      	mov	r2, r0
 8004716:	4b06      	ldr	r3, [pc, #24]	@ (8004730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	0adb      	lsrs	r3, r3, #11
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	4904      	ldr	r1, [pc, #16]	@ (8004734 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004722:	5ccb      	ldrb	r3, [r1, r3]
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000
 8004734:	0800bc70 	.word	0x0800bc70

08004738 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004740:	2300      	movs	r3, #0
 8004742:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004744:	4b2a      	ldr	r3, [pc, #168]	@ (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004750:	f7ff f968 	bl	8003a24 <HAL_PWREx_GetVoltageRange>
 8004754:	6178      	str	r0, [r7, #20]
 8004756:	e014      	b.n	8004782 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004758:	4b25      	ldr	r3, [pc, #148]	@ (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800475a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800475c:	4a24      	ldr	r2, [pc, #144]	@ (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800475e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004762:	6593      	str	r3, [r2, #88]	@ 0x58
 8004764:	4b22      	ldr	r3, [pc, #136]	@ (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004770:	f7ff f958 	bl	8003a24 <HAL_PWREx_GetVoltageRange>
 8004774:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004776:	4b1e      	ldr	r3, [pc, #120]	@ (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477a:	4a1d      	ldr	r2, [pc, #116]	@ (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800477c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004780:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004788:	d10b      	bne.n	80047a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b80      	cmp	r3, #128	@ 0x80
 800478e:	d919      	bls.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2ba0      	cmp	r3, #160	@ 0xa0
 8004794:	d902      	bls.n	800479c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004796:	2302      	movs	r3, #2
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	e013      	b.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800479c:	2301      	movs	r3, #1
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	e010      	b.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b80      	cmp	r3, #128	@ 0x80
 80047a6:	d902      	bls.n	80047ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80047a8:	2303      	movs	r3, #3
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	e00a      	b.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b80      	cmp	r3, #128	@ 0x80
 80047b2:	d102      	bne.n	80047ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047b4:	2302      	movs	r3, #2
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	e004      	b.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b70      	cmp	r3, #112	@ 0x70
 80047be:	d101      	bne.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047c0:	2301      	movs	r3, #1
 80047c2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047c4:	4b0b      	ldr	r3, [pc, #44]	@ (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f023 0207 	bic.w	r2, r3, #7
 80047cc:	4909      	ldr	r1, [pc, #36]	@ (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047d4:	4b07      	ldr	r3, [pc, #28]	@ (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d001      	beq.n	80047e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40021000 	.word	0x40021000
 80047f4:	40022000 	.word	0x40022000

080047f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004800:	2300      	movs	r3, #0
 8004802:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004804:	2300      	movs	r3, #0
 8004806:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 809e 	beq.w	8004952 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004816:	2300      	movs	r3, #0
 8004818:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800481a:	4b46      	ldr	r3, [pc, #280]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800481c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x34>
 800482a:	2300      	movs	r3, #0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00d      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004830:	4b40      	ldr	r3, [pc, #256]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004834:	4a3f      	ldr	r2, [pc, #252]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800483a:	6593      	str	r3, [r2, #88]	@ 0x58
 800483c:	4b3d      	ldr	r3, [pc, #244]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800483e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004844:	60bb      	str	r3, [r7, #8]
 8004846:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004848:	2301      	movs	r3, #1
 800484a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800484c:	4b3a      	ldr	r3, [pc, #232]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a39      	ldr	r2, [pc, #228]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004852:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004856:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004858:	f7fd fcdc 	bl	8002214 <HAL_GetTick>
 800485c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800485e:	e009      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004860:	f7fd fcd8 	bl	8002214 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d902      	bls.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	74fb      	strb	r3, [r7, #19]
        break;
 8004872:	e005      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004874:	4b30      	ldr	r3, [pc, #192]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0ef      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8004880:	7cfb      	ldrb	r3, [r7, #19]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d15a      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004886:	4b2b      	ldr	r3, [pc, #172]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800488c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004890:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01e      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d019      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048a2:	4b24      	ldr	r3, [pc, #144]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80048a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048ae:	4b21      	ldr	r3, [pc, #132]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80048b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80048b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048be:	4b1d      	ldr	r3, [pc, #116]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80048c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80048c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048ce:	4a19      	ldr	r2, [pc, #100]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d016      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e0:	f7fd fc98 	bl	8002214 <HAL_GetTick>
 80048e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048e6:	e00b      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e8:	f7fd fc94 	bl	8002214 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d902      	bls.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	74fb      	strb	r3, [r7, #19]
            break;
 80048fe:	e006      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004900:	4b0c      	ldr	r3, [pc, #48]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0ec      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800490e:	7cfb      	ldrb	r3, [r7, #19]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10b      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004914:	4b07      	ldr	r3, [pc, #28]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004922:	4904      	ldr	r1, [pc, #16]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800492a:	e009      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800492c:	7cfb      	ldrb	r3, [r7, #19]
 800492e:	74bb      	strb	r3, [r7, #18]
 8004930:	e006      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004932:	bf00      	nop
 8004934:	40021000 	.word	0x40021000
 8004938:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493c:	7cfb      	ldrb	r3, [r7, #19]
 800493e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004940:	7c7b      	ldrb	r3, [r7, #17]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d105      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004946:	4b6e      	ldr	r3, [pc, #440]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494a:	4a6d      	ldr	r2, [pc, #436]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800494c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004950:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800495e:	4b68      	ldr	r3, [pc, #416]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004964:	f023 0203 	bic.w	r2, r3, #3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	4964      	ldr	r1, [pc, #400]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004980:	4b5f      	ldr	r3, [pc, #380]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004986:	f023 020c 	bic.w	r2, r3, #12
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	495c      	ldr	r1, [pc, #368]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049a2:	4b57      	ldr	r3, [pc, #348]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4953      	ldr	r1, [pc, #332]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0320 	and.w	r3, r3, #32
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049c4:	4b4e      	ldr	r3, [pc, #312]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	494b      	ldr	r1, [pc, #300]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049e6:	4b46      	ldr	r3, [pc, #280]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	4942      	ldr	r1, [pc, #264]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a08:	4b3d      	ldr	r3, [pc, #244]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	493a      	ldr	r1, [pc, #232]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a2a:	4b35      	ldr	r3, [pc, #212]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a30:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	4931      	ldr	r1, [pc, #196]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00a      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a4c:	4b2c      	ldr	r3, [pc, #176]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a52:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	4929      	ldr	r1, [pc, #164]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a6e:	4b24      	ldr	r3, [pc, #144]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	4920      	ldr	r1, [pc, #128]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d015      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a90:	4b1b      	ldr	r3, [pc, #108]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9e:	4918      	ldr	r1, [pc, #96]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004aae:	d105      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ab0:	4b13      	ldr	r3, [pc, #76]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4a12      	ldr	r2, [pc, #72]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ab6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004aba:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d015      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ace:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad6:	490a      	ldr	r1, [pc, #40]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ae6:	d105      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae8:	4b05      	ldr	r3, [pc, #20]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4a04      	ldr	r2, [pc, #16]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004aee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004af2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004af4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	40021000 	.word	0x40021000

08004b04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e095      	b.n	8004c42 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d108      	bne.n	8004b30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b26:	d009      	beq.n	8004b3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	61da      	str	r2, [r3, #28]
 8004b2e:	e005      	b.n	8004b3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d106      	bne.n	8004b5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fd f884 	bl	8001c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b7c:	d902      	bls.n	8004b84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	e002      	b.n	8004b8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004b92:	d007      	beq.n	8004ba4 <HAL_SPI_Init+0xa0>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b9c:	d002      	beq.n	8004ba4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be6:	ea42 0103 	orr.w	r1, r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	0c1b      	lsrs	r3, r3, #16
 8004c00:	f003 0204 	and.w	r2, r3, #4
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c08:	f003 0310 	and.w	r3, r3, #16
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004c20:	ea42 0103 	orr.w	r1, r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b082      	sub	sp, #8
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e049      	b.n	8004cf0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d106      	bne.n	8004c76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7fd f839 	bl	8001ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2202      	movs	r2, #2
 8004c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3304      	adds	r3, #4
 8004c86:	4619      	mov	r1, r3
 8004c88:	4610      	mov	r0, r2
 8004c8a:	f000 fa75 	bl	8005178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e049      	b.n	8004d9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d106      	bne.n	8004d24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f841 	bl	8004da6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3304      	adds	r3, #4
 8004d34:	4619      	mov	r1, r3
 8004d36:	4610      	mov	r0, r2
 8004d38:	f000 fa1e 	bl	8005178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
	...

08004dbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e0ff      	b.n	8004fda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b14      	cmp	r3, #20
 8004de6:	f200 80f0 	bhi.w	8004fca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004dea:	a201      	add	r2, pc, #4	@ (adr r2, 8004df0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e45 	.word	0x08004e45
 8004df4:	08004fcb 	.word	0x08004fcb
 8004df8:	08004fcb 	.word	0x08004fcb
 8004dfc:	08004fcb 	.word	0x08004fcb
 8004e00:	08004e85 	.word	0x08004e85
 8004e04:	08004fcb 	.word	0x08004fcb
 8004e08:	08004fcb 	.word	0x08004fcb
 8004e0c:	08004fcb 	.word	0x08004fcb
 8004e10:	08004ec7 	.word	0x08004ec7
 8004e14:	08004fcb 	.word	0x08004fcb
 8004e18:	08004fcb 	.word	0x08004fcb
 8004e1c:	08004fcb 	.word	0x08004fcb
 8004e20:	08004f07 	.word	0x08004f07
 8004e24:	08004fcb 	.word	0x08004fcb
 8004e28:	08004fcb 	.word	0x08004fcb
 8004e2c:	08004fcb 	.word	0x08004fcb
 8004e30:	08004f49 	.word	0x08004f49
 8004e34:	08004fcb 	.word	0x08004fcb
 8004e38:	08004fcb 	.word	0x08004fcb
 8004e3c:	08004fcb 	.word	0x08004fcb
 8004e40:	08004f89 	.word	0x08004f89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68b9      	ldr	r1, [r7, #8]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fa04 	bl	8005258 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699a      	ldr	r2, [r3, #24]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0208 	orr.w	r2, r2, #8
 8004e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699a      	ldr	r2, [r3, #24]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0204 	bic.w	r2, r2, #4
 8004e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6999      	ldr	r1, [r3, #24]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	619a      	str	r2, [r3, #24]
      break;
 8004e82:	e0a5      	b.n	8004fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68b9      	ldr	r1, [r7, #8]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fa60 	bl	8005350 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6999      	ldr	r1, [r3, #24]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	021a      	lsls	r2, r3, #8
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	619a      	str	r2, [r3, #24]
      break;
 8004ec4:	e084      	b.n	8004fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68b9      	ldr	r1, [r7, #8]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 fab9 	bl	8005444 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f042 0208 	orr.w	r2, r2, #8
 8004ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69da      	ldr	r2, [r3, #28]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0204 	bic.w	r2, r2, #4
 8004ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69d9      	ldr	r1, [r3, #28]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	61da      	str	r2, [r3, #28]
      break;
 8004f04:	e064      	b.n	8004fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 fb11 	bl	8005534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69da      	ldr	r2, [r3, #28]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69d9      	ldr	r1, [r3, #28]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	021a      	lsls	r2, r3, #8
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	61da      	str	r2, [r3, #28]
      break;
 8004f46:	e043      	b.n	8004fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68b9      	ldr	r1, [r7, #8]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fb4e 	bl	80055f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0208 	orr.w	r2, r2, #8
 8004f62:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0204 	bic.w	r2, r2, #4
 8004f72:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004f86:	e023      	b.n	8004fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fb86 	bl	80056a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fa2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fb2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	021a      	lsls	r2, r3, #8
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004fc8:	e002      	b.n	8004fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8004fce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop

08004fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_TIM_ConfigClockSource+0x1c>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e0b6      	b.n	800516e <HAL_TIM_ConfigClockSource+0x18a>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800501e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800502a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800503c:	d03e      	beq.n	80050bc <HAL_TIM_ConfigClockSource+0xd8>
 800503e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005042:	f200 8087 	bhi.w	8005154 <HAL_TIM_ConfigClockSource+0x170>
 8005046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800504a:	f000 8086 	beq.w	800515a <HAL_TIM_ConfigClockSource+0x176>
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005052:	d87f      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x170>
 8005054:	2b70      	cmp	r3, #112	@ 0x70
 8005056:	d01a      	beq.n	800508e <HAL_TIM_ConfigClockSource+0xaa>
 8005058:	2b70      	cmp	r3, #112	@ 0x70
 800505a:	d87b      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x170>
 800505c:	2b60      	cmp	r3, #96	@ 0x60
 800505e:	d050      	beq.n	8005102 <HAL_TIM_ConfigClockSource+0x11e>
 8005060:	2b60      	cmp	r3, #96	@ 0x60
 8005062:	d877      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x170>
 8005064:	2b50      	cmp	r3, #80	@ 0x50
 8005066:	d03c      	beq.n	80050e2 <HAL_TIM_ConfigClockSource+0xfe>
 8005068:	2b50      	cmp	r3, #80	@ 0x50
 800506a:	d873      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x170>
 800506c:	2b40      	cmp	r3, #64	@ 0x40
 800506e:	d058      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0x13e>
 8005070:	2b40      	cmp	r3, #64	@ 0x40
 8005072:	d86f      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x170>
 8005074:	2b30      	cmp	r3, #48	@ 0x30
 8005076:	d064      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x15e>
 8005078:	2b30      	cmp	r3, #48	@ 0x30
 800507a:	d86b      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x170>
 800507c:	2b20      	cmp	r3, #32
 800507e:	d060      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x15e>
 8005080:	2b20      	cmp	r3, #32
 8005082:	d867      	bhi.n	8005154 <HAL_TIM_ConfigClockSource+0x170>
 8005084:	2b00      	cmp	r3, #0
 8005086:	d05c      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x15e>
 8005088:	2b10      	cmp	r3, #16
 800508a:	d05a      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x15e>
 800508c:	e062      	b.n	8005154 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800509e:	f000 fbd3 	bl	8005848 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	609a      	str	r2, [r3, #8]
      break;
 80050ba:	e04f      	b.n	800515c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050cc:	f000 fbbc 	bl	8005848 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050de:	609a      	str	r2, [r3, #8]
      break;
 80050e0:	e03c      	b.n	800515c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ee:	461a      	mov	r2, r3
 80050f0:	f000 fb30 	bl	8005754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2150      	movs	r1, #80	@ 0x50
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fb89 	bl	8005812 <TIM_ITRx_SetConfig>
      break;
 8005100:	e02c      	b.n	800515c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800510e:	461a      	mov	r2, r3
 8005110:	f000 fb4f 	bl	80057b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2160      	movs	r1, #96	@ 0x60
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fb79 	bl	8005812 <TIM_ITRx_SetConfig>
      break;
 8005120:	e01c      	b.n	800515c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800512e:	461a      	mov	r2, r3
 8005130:	f000 fb10 	bl	8005754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2140      	movs	r1, #64	@ 0x40
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fb69 	bl	8005812 <TIM_ITRx_SetConfig>
      break;
 8005140:	e00c      	b.n	800515c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4619      	mov	r1, r3
 800514c:	4610      	mov	r0, r2
 800514e:	f000 fb60 	bl	8005812 <TIM_ITRx_SetConfig>
      break;
 8005152:	e003      	b.n	800515c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	73fb      	strb	r3, [r7, #15]
      break;
 8005158:	e000      	b.n	800515c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800515a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800516c:	7bfb      	ldrb	r3, [r7, #15]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
	...

08005178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a30      	ldr	r2, [pc, #192]	@ (800524c <TIM_Base_SetConfig+0xd4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d003      	beq.n	8005198 <TIM_Base_SetConfig+0x20>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005196:	d108      	bne.n	80051aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800519e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a27      	ldr	r2, [pc, #156]	@ (800524c <TIM_Base_SetConfig+0xd4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00b      	beq.n	80051ca <TIM_Base_SetConfig+0x52>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051b8:	d007      	beq.n	80051ca <TIM_Base_SetConfig+0x52>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a24      	ldr	r2, [pc, #144]	@ (8005250 <TIM_Base_SetConfig+0xd8>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d003      	beq.n	80051ca <TIM_Base_SetConfig+0x52>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a23      	ldr	r2, [pc, #140]	@ (8005254 <TIM_Base_SetConfig+0xdc>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d108      	bne.n	80051dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4313      	orrs	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a12      	ldr	r2, [pc, #72]	@ (800524c <TIM_Base_SetConfig+0xd4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d007      	beq.n	8005218 <TIM_Base_SetConfig+0xa0>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a11      	ldr	r2, [pc, #68]	@ (8005250 <TIM_Base_SetConfig+0xd8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <TIM_Base_SetConfig+0xa0>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a10      	ldr	r2, [pc, #64]	@ (8005254 <TIM_Base_SetConfig+0xdc>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d103      	bne.n	8005220 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	691a      	ldr	r2, [r3, #16]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b01      	cmp	r3, #1
 8005230:	d105      	bne.n	800523e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f023 0201 	bic.w	r2, r3, #1
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	611a      	str	r2, [r3, #16]
  }
}
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40012c00 	.word	0x40012c00
 8005250:	40014000 	.word	0x40014000
 8005254:	40014400 	.word	0x40014400

08005258 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	f023 0201 	bic.w	r2, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800528a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0303 	bic.w	r3, r3, #3
 8005292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f023 0302 	bic.w	r3, r3, #2
 80052a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a24      	ldr	r2, [pc, #144]	@ (8005344 <TIM_OC1_SetConfig+0xec>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d007      	beq.n	80052c8 <TIM_OC1_SetConfig+0x70>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a23      	ldr	r2, [pc, #140]	@ (8005348 <TIM_OC1_SetConfig+0xf0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d003      	beq.n	80052c8 <TIM_OC1_SetConfig+0x70>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a22      	ldr	r2, [pc, #136]	@ (800534c <TIM_OC1_SetConfig+0xf4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d10c      	bne.n	80052e2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f023 0308 	bic.w	r3, r3, #8
 80052ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f023 0304 	bic.w	r3, r3, #4
 80052e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a17      	ldr	r2, [pc, #92]	@ (8005344 <TIM_OC1_SetConfig+0xec>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d007      	beq.n	80052fa <TIM_OC1_SetConfig+0xa2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a16      	ldr	r2, [pc, #88]	@ (8005348 <TIM_OC1_SetConfig+0xf0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d003      	beq.n	80052fa <TIM_OC1_SetConfig+0xa2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a15      	ldr	r2, [pc, #84]	@ (800534c <TIM_OC1_SetConfig+0xf4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d111      	bne.n	800531e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	621a      	str	r2, [r3, #32]
}
 8005338:	bf00      	nop
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	40012c00 	.word	0x40012c00
 8005348:	40014000 	.word	0x40014000
 800534c:	40014400 	.word	0x40014400

08005350 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	f023 0210 	bic.w	r2, r3, #16
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800537e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800538a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	021b      	lsls	r3, r3, #8
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f023 0320 	bic.w	r3, r3, #32
 800539e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a22      	ldr	r2, [pc, #136]	@ (8005438 <TIM_OC2_SetConfig+0xe8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d10d      	bne.n	80053d0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a19      	ldr	r2, [pc, #100]	@ (8005438 <TIM_OC2_SetConfig+0xe8>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d007      	beq.n	80053e8 <TIM_OC2_SetConfig+0x98>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a18      	ldr	r2, [pc, #96]	@ (800543c <TIM_OC2_SetConfig+0xec>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d003      	beq.n	80053e8 <TIM_OC2_SetConfig+0x98>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a17      	ldr	r2, [pc, #92]	@ (8005440 <TIM_OC2_SetConfig+0xf0>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d113      	bne.n	8005410 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	621a      	str	r2, [r3, #32]
}
 800542a:	bf00      	nop
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	40012c00 	.word	0x40012c00
 800543c:	40014000 	.word	0x40014000
 8005440:	40014400 	.word	0x40014400

08005444 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0303 	bic.w	r3, r3, #3
 800547e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	021b      	lsls	r3, r3, #8
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a21      	ldr	r2, [pc, #132]	@ (8005528 <TIM_OC3_SetConfig+0xe4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d10d      	bne.n	80054c2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	021b      	lsls	r3, r3, #8
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a18      	ldr	r2, [pc, #96]	@ (8005528 <TIM_OC3_SetConfig+0xe4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d007      	beq.n	80054da <TIM_OC3_SetConfig+0x96>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a17      	ldr	r2, [pc, #92]	@ (800552c <TIM_OC3_SetConfig+0xe8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d003      	beq.n	80054da <TIM_OC3_SetConfig+0x96>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a16      	ldr	r2, [pc, #88]	@ (8005530 <TIM_OC3_SetConfig+0xec>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d113      	bne.n	8005502 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	621a      	str	r2, [r3, #32]
}
 800551c:	bf00      	nop
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	40012c00 	.word	0x40012c00
 800552c:	40014000 	.word	0x40014000
 8005530:	40014400 	.word	0x40014400

08005534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800556e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	031b      	lsls	r3, r3, #12
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a14      	ldr	r2, [pc, #80]	@ (80055e4 <TIM_OC4_SetConfig+0xb0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d007      	beq.n	80055a8 <TIM_OC4_SetConfig+0x74>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a13      	ldr	r2, [pc, #76]	@ (80055e8 <TIM_OC4_SetConfig+0xb4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d003      	beq.n	80055a8 <TIM_OC4_SetConfig+0x74>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a12      	ldr	r2, [pc, #72]	@ (80055ec <TIM_OC4_SetConfig+0xb8>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d109      	bne.n	80055bc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	019b      	lsls	r3, r3, #6
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	621a      	str	r2, [r3, #32]
}
 80055d6:	bf00      	nop
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40012c00 	.word	0x40012c00
 80055e8:	40014000 	.word	0x40014000
 80055ec:	40014400 	.word	0x40014400

080055f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800561e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005634:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	041b      	lsls	r3, r3, #16
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a13      	ldr	r2, [pc, #76]	@ (8005694 <TIM_OC5_SetConfig+0xa4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d007      	beq.n	800565a <TIM_OC5_SetConfig+0x6a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a12      	ldr	r2, [pc, #72]	@ (8005698 <TIM_OC5_SetConfig+0xa8>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d003      	beq.n	800565a <TIM_OC5_SetConfig+0x6a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a11      	ldr	r2, [pc, #68]	@ (800569c <TIM_OC5_SetConfig+0xac>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d109      	bne.n	800566e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005660:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	021b      	lsls	r3, r3, #8
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	621a      	str	r2, [r3, #32]
}
 8005688:	bf00      	nop
 800568a:	371c      	adds	r7, #28
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	40012c00 	.word	0x40012c00
 8005698:	40014000 	.word	0x40014000
 800569c:	40014400 	.word	0x40014400

080056a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	021b      	lsls	r3, r3, #8
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4313      	orrs	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80056e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	051b      	lsls	r3, r3, #20
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a14      	ldr	r2, [pc, #80]	@ (8005748 <TIM_OC6_SetConfig+0xa8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d007      	beq.n	800570c <TIM_OC6_SetConfig+0x6c>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a13      	ldr	r2, [pc, #76]	@ (800574c <TIM_OC6_SetConfig+0xac>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_OC6_SetConfig+0x6c>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a12      	ldr	r2, [pc, #72]	@ (8005750 <TIM_OC6_SetConfig+0xb0>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d109      	bne.n	8005720 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005712:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	029b      	lsls	r3, r3, #10
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	621a      	str	r2, [r3, #32]
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40012c00 	.word	0x40012c00
 800574c:	40014000 	.word	0x40014000
 8005750:	40014400 	.word	0x40014400

08005754 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	f023 0201 	bic.w	r2, r3, #1
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800577e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f023 030a 	bic.w	r3, r3, #10
 8005790:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	621a      	str	r2, [r3, #32]
}
 80057a6:	bf00      	nop
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b087      	sub	sp, #28
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	f023 0210 	bic.w	r2, r3, #16
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	031b      	lsls	r3, r3, #12
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	621a      	str	r2, [r3, #32]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005812:	b480      	push	{r7}
 8005814:	b085      	sub	sp, #20
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005828:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	f043 0307 	orr.w	r3, r3, #7
 8005834:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	609a      	str	r2, [r3, #8]
}
 800583c:	bf00      	nop
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005862:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	021a      	lsls	r2, r3, #8
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	431a      	orrs	r2, r3
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4313      	orrs	r3, r2
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	609a      	str	r2, [r3, #8]
}
 800587c:	bf00      	nop
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005898:	2b01      	cmp	r3, #1
 800589a:	d101      	bne.n	80058a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800589c:	2302      	movs	r3, #2
 800589e:	e04f      	b.n	8005940 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a21      	ldr	r2, [pc, #132]	@ (800594c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d108      	bne.n	80058dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a14      	ldr	r2, [pc, #80]	@ (800594c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d009      	beq.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005908:	d004      	beq.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a10      	ldr	r2, [pc, #64]	@ (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d10c      	bne.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800591a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	4313      	orrs	r3, r2
 8005924:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	40012c00 	.word	0x40012c00
 8005950:	40014000 	.word	0x40014000

08005954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e040      	b.n	80059e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800596a:	2b00      	cmp	r3, #0
 800596c:	d106      	bne.n	800597c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7fc fa08 	bl	8001d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2224      	movs	r2, #36	@ 0x24
 8005980:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0201 	bic.w	r2, r2, #1
 8005990:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 ff46 	bl	800682c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fce9 	bl	8006378 <UART_SetConfig>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e01b      	b.n	80059e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0201 	orr.w	r2, r2, #1
 80059de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 ffc5 	bl	8006970 <UART_CheckIdleState>
 80059e6:	4603      	mov	r3, r0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08a      	sub	sp, #40	@ 0x28
 80059f4:	af02      	add	r7, sp, #8
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	4613      	mov	r3, r2
 80059fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a04:	2b20      	cmp	r3, #32
 8005a06:	d177      	bne.n	8005af8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <HAL_UART_Transmit+0x24>
 8005a0e:	88fb      	ldrh	r3, [r7, #6]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e070      	b.n	8005afa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2221      	movs	r2, #33	@ 0x21
 8005a24:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a26:	f7fc fbf5 	bl	8002214 <HAL_GetTick>
 8005a2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	88fa      	ldrh	r2, [r7, #6]
 8005a30:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	88fa      	ldrh	r2, [r7, #6]
 8005a38:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a44:	d108      	bne.n	8005a58 <HAL_UART_Transmit+0x68>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d104      	bne.n	8005a58 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	e003      	b.n	8005a60 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a60:	e02f      	b.n	8005ac2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2180      	movs	r1, #128	@ 0x80
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f001 f827 	bl	8006ac0 <UART_WaitOnFlagUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d004      	beq.n	8005a82 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e03b      	b.n	8005afa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10b      	bne.n	8005aa0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	881a      	ldrh	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a94:	b292      	uxth	r2, r2
 8005a96:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	3302      	adds	r3, #2
 8005a9c:	61bb      	str	r3, [r7, #24]
 8005a9e:	e007      	b.n	8005ab0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	781a      	ldrb	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	3301      	adds	r3, #1
 8005aae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1c9      	bne.n	8005a62 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	2140      	movs	r1, #64	@ 0x40
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 fff1 	bl	8006ac0 <UART_WaitOnFlagUntilTimeout>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d004      	beq.n	8005aee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e005      	b.n	8005afa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	e000      	b.n	8005afa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005af8:	2302      	movs	r3, #2
  }
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3720      	adds	r7, #32
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b08a      	sub	sp, #40	@ 0x28
 8005b06:	af02      	add	r7, sp, #8
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	603b      	str	r3, [r7, #0]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	f040 80b6 	bne.w	8005c8a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <HAL_UART_Receive+0x28>
 8005b24:	88fb      	ldrh	r3, [r7, #6]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e0ae      	b.n	8005c8c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2222      	movs	r2, #34	@ 0x22
 8005b3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b44:	f7fc fb66 	bl	8002214 <HAL_GetTick>
 8005b48:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	88fa      	ldrh	r2, [r7, #6]
 8005b4e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	88fa      	ldrh	r2, [r7, #6]
 8005b56:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b62:	d10e      	bne.n	8005b82 <HAL_UART_Receive+0x80>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d105      	bne.n	8005b78 <HAL_UART_Receive+0x76>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005b72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b76:	e02d      	b.n	8005bd4 <HAL_UART_Receive+0xd2>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	22ff      	movs	r2, #255	@ 0xff
 8005b7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b80:	e028      	b.n	8005bd4 <HAL_UART_Receive+0xd2>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10d      	bne.n	8005ba6 <HAL_UART_Receive+0xa4>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d104      	bne.n	8005b9c <HAL_UART_Receive+0x9a>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	22ff      	movs	r2, #255	@ 0xff
 8005b96:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b9a:	e01b      	b.n	8005bd4 <HAL_UART_Receive+0xd2>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	227f      	movs	r2, #127	@ 0x7f
 8005ba0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ba4:	e016      	b.n	8005bd4 <HAL_UART_Receive+0xd2>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bae:	d10d      	bne.n	8005bcc <HAL_UART_Receive+0xca>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d104      	bne.n	8005bc2 <HAL_UART_Receive+0xc0>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	227f      	movs	r2, #127	@ 0x7f
 8005bbc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bc0:	e008      	b.n	8005bd4 <HAL_UART_Receive+0xd2>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	223f      	movs	r2, #63	@ 0x3f
 8005bc6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005bca:	e003      	b.n	8005bd4 <HAL_UART_Receive+0xd2>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005bda:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005be4:	d108      	bne.n	8005bf8 <HAL_UART_Receive+0xf6>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d104      	bne.n	8005bf8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	61bb      	str	r3, [r7, #24]
 8005bf6:	e003      	b.n	8005c00 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005c00:	e037      	b.n	8005c72 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2120      	movs	r1, #32
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 ff57 	bl	8006ac0 <UART_WaitOnFlagUntilTimeout>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e033      	b.n	8005c8c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10c      	bne.n	8005c44 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	8a7b      	ldrh	r3, [r7, #18]
 8005c34:	4013      	ands	r3, r2
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	3302      	adds	r3, #2
 8005c40:	61bb      	str	r3, [r7, #24]
 8005c42:	e00d      	b.n	8005c60 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	8a7b      	ldrh	r3, [r7, #18]
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	4013      	ands	r3, r2
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1c1      	bne.n	8005c02 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	e000      	b.n	8005c8c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005c8a:	2302      	movs	r3, #2
  }
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3720      	adds	r7, #32
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08a      	sub	sp, #40	@ 0x28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ca8:	2b20      	cmp	r3, #32
 8005caa:	d137      	bne.n	8005d1c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <HAL_UART_Receive_IT+0x24>
 8005cb2:	88fb      	ldrh	r3, [r7, #6]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e030      	b.n	8005d1e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a18      	ldr	r2, [pc, #96]	@ (8005d28 <HAL_UART_Receive_IT+0x94>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d01f      	beq.n	8005d0c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d018      	beq.n	8005d0c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	e853 3f00 	ldrex	r3, [r3]
 8005ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf8:	623b      	str	r3, [r7, #32]
 8005cfa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfc:	69f9      	ldr	r1, [r7, #28]
 8005cfe:	6a3a      	ldr	r2, [r7, #32]
 8005d00:	e841 2300 	strex	r3, r2, [r1]
 8005d04:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1e6      	bne.n	8005cda <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d0c:	88fb      	ldrh	r3, [r7, #6]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	68b9      	ldr	r1, [r7, #8]
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 ff42 	bl	8006b9c <UART_Start_Receive_IT>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	e000      	b.n	8005d1e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d1c:	2302      	movs	r3, #2
  }
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3728      	adds	r7, #40	@ 0x28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	40008000 	.word	0x40008000

08005d2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b0ba      	sub	sp, #232	@ 0xe8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005d56:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005d60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d115      	bne.n	8005d94 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00f      	beq.n	8005d94 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d78:	f003 0320 	and.w	r3, r3, #32
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d009      	beq.n	8005d94 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 82ca 	beq.w	800631e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	4798      	blx	r3
      }
      return;
 8005d92:	e2c4      	b.n	800631e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005d94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 8117 	beq.w	8005fcc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d106      	bne.n	8005db8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005daa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005dae:	4b85      	ldr	r3, [pc, #532]	@ (8005fc4 <HAL_UART_IRQHandler+0x298>)
 8005db0:	4013      	ands	r3, r2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 810a 	beq.w	8005fcc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d011      	beq.n	8005de8 <HAL_UART_IRQHandler+0xbc>
 8005dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00b      	beq.n	8005de8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dde:	f043 0201 	orr.w	r2, r3, #1
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d011      	beq.n	8005e18 <HAL_UART_IRQHandler+0xec>
 8005df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00b      	beq.n	8005e18 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2202      	movs	r2, #2
 8005e06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e0e:	f043 0204 	orr.w	r2, r3, #4
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d011      	beq.n	8005e48 <HAL_UART_IRQHandler+0x11c>
 8005e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00b      	beq.n	8005e48 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2204      	movs	r2, #4
 8005e36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e3e:	f043 0202 	orr.w	r2, r3, #2
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e4c:	f003 0308 	and.w	r3, r3, #8
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d017      	beq.n	8005e84 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d105      	bne.n	8005e6c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e64:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00b      	beq.n	8005e84 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2208      	movs	r2, #8
 8005e72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e7a:	f043 0208 	orr.w	r2, r3, #8
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d012      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x18a>
 8005e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00c      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ea4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eac:	f043 0220 	orr.w	r2, r3, #32
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 8230 	beq.w	8006322 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec6:	f003 0320 	and.w	r3, r3, #32
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00d      	beq.n	8005eea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d007      	beq.n	8005eea <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ef0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005efe:	2b40      	cmp	r3, #64	@ 0x40
 8005f00:	d005      	beq.n	8005f0e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f06:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d04f      	beq.n	8005fae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 ff0a 	bl	8006d28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f1e:	2b40      	cmp	r3, #64	@ 0x40
 8005f20:	d141      	bne.n	8005fa6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3308      	adds	r3, #8
 8005f28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3308      	adds	r3, #8
 8005f4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005f4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005f52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005f5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1d9      	bne.n	8005f22 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d013      	beq.n	8005f9e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f7a:	4a13      	ldr	r2, [pc, #76]	@ (8005fc8 <HAL_UART_IRQHandler+0x29c>)
 8005f7c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fd fa51 	bl	800342a <HAL_DMA_Abort_IT>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d017      	beq.n	8005fbe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005f98:	4610      	mov	r0, r2
 8005f9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f9c:	e00f      	b.n	8005fbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f9d4 	bl	800634c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa4:	e00b      	b.n	8005fbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f9d0 	bl	800634c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fac:	e007      	b.n	8005fbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f9cc 	bl	800634c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005fbc:	e1b1      	b.n	8006322 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fbe:	bf00      	nop
    return;
 8005fc0:	e1af      	b.n	8006322 <HAL_UART_IRQHandler+0x5f6>
 8005fc2:	bf00      	nop
 8005fc4:	04000120 	.word	0x04000120
 8005fc8:	08006df1 	.word	0x08006df1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	f040 816a 	bne.w	80062aa <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fda:	f003 0310 	and.w	r3, r3, #16
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 8163 	beq.w	80062aa <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 815c 	beq.w	80062aa <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2210      	movs	r2, #16
 8005ff8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006004:	2b40      	cmp	r3, #64	@ 0x40
 8006006:	f040 80d4 	bne.w	80061b2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006016:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 80ad 	beq.w	800617a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006026:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800602a:	429a      	cmp	r2, r3
 800602c:	f080 80a5 	bcs.w	800617a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006036:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0320 	and.w	r3, r3, #32
 8006046:	2b00      	cmp	r3, #0
 8006048:	f040 8086 	bne.w	8006158 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006054:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006060:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006068:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	461a      	mov	r2, r3
 8006072:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006076:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800607a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006082:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006086:	e841 2300 	strex	r3, r2, [r1]
 800608a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800608e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1da      	bne.n	800604c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3308      	adds	r3, #8
 800609c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80060a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060a8:	f023 0301 	bic.w	r3, r3, #1
 80060ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3308      	adds	r3, #8
 80060b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80060ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80060be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80060c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80060cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e1      	bne.n	8006096 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3308      	adds	r3, #8
 80060d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80060e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3308      	adds	r3, #8
 80060f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80060f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80060f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80060fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80060fe:	e841 2300 	strex	r3, r2, [r1]
 8006102:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006104:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1e3      	bne.n	80060d2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2220      	movs	r2, #32
 800610e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006128:	f023 0310 	bic.w	r3, r3, #16
 800612c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	461a      	mov	r2, r3
 8006136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800613a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800613c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006140:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e4      	bne.n	8006118 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006152:	4618      	mov	r0, r3
 8006154:	f7fd f92b 	bl	80033ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2202      	movs	r2, #2
 800615c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800616a:	b29b      	uxth	r3, r3
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	b29b      	uxth	r3, r3
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f8f4 	bl	8006360 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006178:	e0d5      	b.n	8006326 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006180:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006184:	429a      	cmp	r2, r3
 8006186:	f040 80ce 	bne.w	8006326 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0320 	and.w	r3, r3, #32
 8006196:	2b20      	cmp	r3, #32
 8006198:	f040 80c5 	bne.w	8006326 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80061a8:	4619      	mov	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f8d8 	bl	8006360 <HAL_UARTEx_RxEventCallback>
      return;
 80061b0:	e0b9      	b.n	8006326 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80061be:	b29b      	uxth	r3, r3
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 80ab 	beq.w	800632a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80061d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 80a6 	beq.w	800632a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e6:	e853 3f00 	ldrex	r3, [r3]
 80061ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006200:	647b      	str	r3, [r7, #68]	@ 0x44
 8006202:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006204:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006206:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006208:	e841 2300 	strex	r3, r2, [r1]
 800620c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800620e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1e4      	bne.n	80061de <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3308      	adds	r3, #8
 800621a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	623b      	str	r3, [r7, #32]
   return(result);
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	f023 0301 	bic.w	r3, r3, #1
 800622a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3308      	adds	r3, #8
 8006234:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006238:	633a      	str	r2, [r7, #48]	@ 0x30
 800623a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800623e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006240:	e841 2300 	strex	r3, r2, [r1]
 8006244:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e3      	bne.n	8006214 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2220      	movs	r2, #32
 8006250:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	60fb      	str	r3, [r7, #12]
   return(result);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f023 0310 	bic.w	r3, r3, #16
 8006274:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	461a      	mov	r2, r3
 800627e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006282:	61fb      	str	r3, [r7, #28]
 8006284:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	69b9      	ldr	r1, [r7, #24]
 8006288:	69fa      	ldr	r2, [r7, #28]
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	617b      	str	r3, [r7, #20]
   return(result);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e4      	bne.n	8006260 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2202      	movs	r2, #2
 800629a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800629c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f85c 	bl	8006360 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062a8:	e03f      	b.n	800632a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00e      	beq.n	80062d4 <HAL_UART_IRQHandler+0x5a8>
 80062b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d008      	beq.n	80062d4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80062ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 ff8b 	bl	80071e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062d2:	e02d      	b.n	8006330 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80062d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00e      	beq.n	80062fe <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80062e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d008      	beq.n	80062fe <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d01c      	beq.n	800632e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	4798      	blx	r3
    }
    return;
 80062fc:	e017      	b.n	800632e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006306:	2b00      	cmp	r3, #0
 8006308:	d012      	beq.n	8006330 <HAL_UART_IRQHandler+0x604>
 800630a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800630e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00c      	beq.n	8006330 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fd80 	bl	8006e1c <UART_EndTransmit_IT>
    return;
 800631c:	e008      	b.n	8006330 <HAL_UART_IRQHandler+0x604>
      return;
 800631e:	bf00      	nop
 8006320:	e006      	b.n	8006330 <HAL_UART_IRQHandler+0x604>
    return;
 8006322:	bf00      	nop
 8006324:	e004      	b.n	8006330 <HAL_UART_IRQHandler+0x604>
      return;
 8006326:	bf00      	nop
 8006328:	e002      	b.n	8006330 <HAL_UART_IRQHandler+0x604>
      return;
 800632a:	bf00      	nop
 800632c:	e000      	b.n	8006330 <HAL_UART_IRQHandler+0x604>
    return;
 800632e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006330:	37e8      	adds	r7, #232	@ 0xe8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop

08006338 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800637c:	b08a      	sub	sp, #40	@ 0x28
 800637e:	af00      	add	r7, sp, #0
 8006380:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	431a      	orrs	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	431a      	orrs	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	4313      	orrs	r3, r2
 800639e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	4b9e      	ldr	r3, [pc, #632]	@ (8006620 <UART_SetConfig+0x2a8>)
 80063a8:	4013      	ands	r3, r2
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	6812      	ldr	r2, [r2, #0]
 80063ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063b0:	430b      	orrs	r3, r1
 80063b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	68da      	ldr	r2, [r3, #12]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a93      	ldr	r2, [pc, #588]	@ (8006624 <UART_SetConfig+0x2ac>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d004      	beq.n	80063e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063e0:	4313      	orrs	r3, r2
 80063e2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f4:	430a      	orrs	r2, r1
 80063f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a8a      	ldr	r2, [pc, #552]	@ (8006628 <UART_SetConfig+0x2b0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d126      	bne.n	8006450 <UART_SetConfig+0xd8>
 8006402:	4b8a      	ldr	r3, [pc, #552]	@ (800662c <UART_SetConfig+0x2b4>)
 8006404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006408:	f003 0303 	and.w	r3, r3, #3
 800640c:	2b03      	cmp	r3, #3
 800640e:	d81b      	bhi.n	8006448 <UART_SetConfig+0xd0>
 8006410:	a201      	add	r2, pc, #4	@ (adr r2, 8006418 <UART_SetConfig+0xa0>)
 8006412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006416:	bf00      	nop
 8006418:	08006429 	.word	0x08006429
 800641c:	08006439 	.word	0x08006439
 8006420:	08006431 	.word	0x08006431
 8006424:	08006441 	.word	0x08006441
 8006428:	2301      	movs	r3, #1
 800642a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800642e:	e0ab      	b.n	8006588 <UART_SetConfig+0x210>
 8006430:	2302      	movs	r3, #2
 8006432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006436:	e0a7      	b.n	8006588 <UART_SetConfig+0x210>
 8006438:	2304      	movs	r3, #4
 800643a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800643e:	e0a3      	b.n	8006588 <UART_SetConfig+0x210>
 8006440:	2308      	movs	r3, #8
 8006442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006446:	e09f      	b.n	8006588 <UART_SetConfig+0x210>
 8006448:	2310      	movs	r3, #16
 800644a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800644e:	e09b      	b.n	8006588 <UART_SetConfig+0x210>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a76      	ldr	r2, [pc, #472]	@ (8006630 <UART_SetConfig+0x2b8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d138      	bne.n	80064cc <UART_SetConfig+0x154>
 800645a:	4b74      	ldr	r3, [pc, #464]	@ (800662c <UART_SetConfig+0x2b4>)
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006460:	f003 030c 	and.w	r3, r3, #12
 8006464:	2b0c      	cmp	r3, #12
 8006466:	d82d      	bhi.n	80064c4 <UART_SetConfig+0x14c>
 8006468:	a201      	add	r2, pc, #4	@ (adr r2, 8006470 <UART_SetConfig+0xf8>)
 800646a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646e:	bf00      	nop
 8006470:	080064a5 	.word	0x080064a5
 8006474:	080064c5 	.word	0x080064c5
 8006478:	080064c5 	.word	0x080064c5
 800647c:	080064c5 	.word	0x080064c5
 8006480:	080064b5 	.word	0x080064b5
 8006484:	080064c5 	.word	0x080064c5
 8006488:	080064c5 	.word	0x080064c5
 800648c:	080064c5 	.word	0x080064c5
 8006490:	080064ad 	.word	0x080064ad
 8006494:	080064c5 	.word	0x080064c5
 8006498:	080064c5 	.word	0x080064c5
 800649c:	080064c5 	.word	0x080064c5
 80064a0:	080064bd 	.word	0x080064bd
 80064a4:	2300      	movs	r3, #0
 80064a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064aa:	e06d      	b.n	8006588 <UART_SetConfig+0x210>
 80064ac:	2302      	movs	r3, #2
 80064ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064b2:	e069      	b.n	8006588 <UART_SetConfig+0x210>
 80064b4:	2304      	movs	r3, #4
 80064b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ba:	e065      	b.n	8006588 <UART_SetConfig+0x210>
 80064bc:	2308      	movs	r3, #8
 80064be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064c2:	e061      	b.n	8006588 <UART_SetConfig+0x210>
 80064c4:	2310      	movs	r3, #16
 80064c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ca:	e05d      	b.n	8006588 <UART_SetConfig+0x210>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a58      	ldr	r2, [pc, #352]	@ (8006634 <UART_SetConfig+0x2bc>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d125      	bne.n	8006522 <UART_SetConfig+0x1aa>
 80064d6:	4b55      	ldr	r3, [pc, #340]	@ (800662c <UART_SetConfig+0x2b4>)
 80064d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80064e0:	2b30      	cmp	r3, #48	@ 0x30
 80064e2:	d016      	beq.n	8006512 <UART_SetConfig+0x19a>
 80064e4:	2b30      	cmp	r3, #48	@ 0x30
 80064e6:	d818      	bhi.n	800651a <UART_SetConfig+0x1a2>
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d00a      	beq.n	8006502 <UART_SetConfig+0x18a>
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	d814      	bhi.n	800651a <UART_SetConfig+0x1a2>
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <UART_SetConfig+0x182>
 80064f4:	2b10      	cmp	r3, #16
 80064f6:	d008      	beq.n	800650a <UART_SetConfig+0x192>
 80064f8:	e00f      	b.n	800651a <UART_SetConfig+0x1a2>
 80064fa:	2300      	movs	r3, #0
 80064fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006500:	e042      	b.n	8006588 <UART_SetConfig+0x210>
 8006502:	2302      	movs	r3, #2
 8006504:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006508:	e03e      	b.n	8006588 <UART_SetConfig+0x210>
 800650a:	2304      	movs	r3, #4
 800650c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006510:	e03a      	b.n	8006588 <UART_SetConfig+0x210>
 8006512:	2308      	movs	r3, #8
 8006514:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006518:	e036      	b.n	8006588 <UART_SetConfig+0x210>
 800651a:	2310      	movs	r3, #16
 800651c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006520:	e032      	b.n	8006588 <UART_SetConfig+0x210>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a3f      	ldr	r2, [pc, #252]	@ (8006624 <UART_SetConfig+0x2ac>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d12a      	bne.n	8006582 <UART_SetConfig+0x20a>
 800652c:	4b3f      	ldr	r3, [pc, #252]	@ (800662c <UART_SetConfig+0x2b4>)
 800652e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006532:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006536:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800653a:	d01a      	beq.n	8006572 <UART_SetConfig+0x1fa>
 800653c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006540:	d81b      	bhi.n	800657a <UART_SetConfig+0x202>
 8006542:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006546:	d00c      	beq.n	8006562 <UART_SetConfig+0x1ea>
 8006548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800654c:	d815      	bhi.n	800657a <UART_SetConfig+0x202>
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <UART_SetConfig+0x1e2>
 8006552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006556:	d008      	beq.n	800656a <UART_SetConfig+0x1f2>
 8006558:	e00f      	b.n	800657a <UART_SetConfig+0x202>
 800655a:	2300      	movs	r3, #0
 800655c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006560:	e012      	b.n	8006588 <UART_SetConfig+0x210>
 8006562:	2302      	movs	r3, #2
 8006564:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006568:	e00e      	b.n	8006588 <UART_SetConfig+0x210>
 800656a:	2304      	movs	r3, #4
 800656c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006570:	e00a      	b.n	8006588 <UART_SetConfig+0x210>
 8006572:	2308      	movs	r3, #8
 8006574:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006578:	e006      	b.n	8006588 <UART_SetConfig+0x210>
 800657a:	2310      	movs	r3, #16
 800657c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006580:	e002      	b.n	8006588 <UART_SetConfig+0x210>
 8006582:	2310      	movs	r3, #16
 8006584:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a25      	ldr	r2, [pc, #148]	@ (8006624 <UART_SetConfig+0x2ac>)
 800658e:	4293      	cmp	r3, r2
 8006590:	f040 808a 	bne.w	80066a8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006594:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006598:	2b08      	cmp	r3, #8
 800659a:	d824      	bhi.n	80065e6 <UART_SetConfig+0x26e>
 800659c:	a201      	add	r2, pc, #4	@ (adr r2, 80065a4 <UART_SetConfig+0x22c>)
 800659e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a2:	bf00      	nop
 80065a4:	080065c9 	.word	0x080065c9
 80065a8:	080065e7 	.word	0x080065e7
 80065ac:	080065d1 	.word	0x080065d1
 80065b0:	080065e7 	.word	0x080065e7
 80065b4:	080065d7 	.word	0x080065d7
 80065b8:	080065e7 	.word	0x080065e7
 80065bc:	080065e7 	.word	0x080065e7
 80065c0:	080065e7 	.word	0x080065e7
 80065c4:	080065df 	.word	0x080065df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c8:	f7fe f88a 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 80065cc:	61f8      	str	r0, [r7, #28]
        break;
 80065ce:	e010      	b.n	80065f2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065d0:	4b19      	ldr	r3, [pc, #100]	@ (8006638 <UART_SetConfig+0x2c0>)
 80065d2:	61fb      	str	r3, [r7, #28]
        break;
 80065d4:	e00d      	b.n	80065f2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065d6:	f7fd ffeb 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 80065da:	61f8      	str	r0, [r7, #28]
        break;
 80065dc:	e009      	b.n	80065f2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065e2:	61fb      	str	r3, [r7, #28]
        break;
 80065e4:	e005      	b.n	80065f2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80065f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 8109 	beq.w	800680c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	4613      	mov	r3, r2
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	4413      	add	r3, r2
 8006604:	69fa      	ldr	r2, [r7, #28]
 8006606:	429a      	cmp	r2, r3
 8006608:	d305      	bcc.n	8006616 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006610:	69fa      	ldr	r2, [r7, #28]
 8006612:	429a      	cmp	r2, r3
 8006614:	d912      	bls.n	800663c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800661c:	e0f6      	b.n	800680c <UART_SetConfig+0x494>
 800661e:	bf00      	nop
 8006620:	efff69f3 	.word	0xefff69f3
 8006624:	40008000 	.word	0x40008000
 8006628:	40013800 	.word	0x40013800
 800662c:	40021000 	.word	0x40021000
 8006630:	40004400 	.word	0x40004400
 8006634:	40004800 	.word	0x40004800
 8006638:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	2200      	movs	r2, #0
 8006640:	461c      	mov	r4, r3
 8006642:	4615      	mov	r5, r2
 8006644:	f04f 0200 	mov.w	r2, #0
 8006648:	f04f 0300 	mov.w	r3, #0
 800664c:	022b      	lsls	r3, r5, #8
 800664e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006652:	0222      	lsls	r2, r4, #8
 8006654:	68f9      	ldr	r1, [r7, #12]
 8006656:	6849      	ldr	r1, [r1, #4]
 8006658:	0849      	lsrs	r1, r1, #1
 800665a:	2000      	movs	r0, #0
 800665c:	4688      	mov	r8, r1
 800665e:	4681      	mov	r9, r0
 8006660:	eb12 0a08 	adds.w	sl, r2, r8
 8006664:	eb43 0b09 	adc.w	fp, r3, r9
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	607a      	str	r2, [r7, #4]
 8006672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006676:	4650      	mov	r0, sl
 8006678:	4659      	mov	r1, fp
 800667a:	f7fa fb15 	bl	8000ca8 <__aeabi_uldivmod>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	4613      	mov	r3, r2
 8006684:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800668c:	d308      	bcc.n	80066a0 <UART_SetConfig+0x328>
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006694:	d204      	bcs.n	80066a0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	60da      	str	r2, [r3, #12]
 800669e:	e0b5      	b.n	800680c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80066a6:	e0b1      	b.n	800680c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066b0:	d15d      	bne.n	800676e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80066b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80066b6:	2b08      	cmp	r3, #8
 80066b8:	d827      	bhi.n	800670a <UART_SetConfig+0x392>
 80066ba:	a201      	add	r2, pc, #4	@ (adr r2, 80066c0 <UART_SetConfig+0x348>)
 80066bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c0:	080066e5 	.word	0x080066e5
 80066c4:	080066ed 	.word	0x080066ed
 80066c8:	080066f5 	.word	0x080066f5
 80066cc:	0800670b 	.word	0x0800670b
 80066d0:	080066fb 	.word	0x080066fb
 80066d4:	0800670b 	.word	0x0800670b
 80066d8:	0800670b 	.word	0x0800670b
 80066dc:	0800670b 	.word	0x0800670b
 80066e0:	08006703 	.word	0x08006703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066e4:	f7fd fffc 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 80066e8:	61f8      	str	r0, [r7, #28]
        break;
 80066ea:	e014      	b.n	8006716 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066ec:	f7fe f80e 	bl	800470c <HAL_RCC_GetPCLK2Freq>
 80066f0:	61f8      	str	r0, [r7, #28]
        break;
 80066f2:	e010      	b.n	8006716 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066f4:	4b4c      	ldr	r3, [pc, #304]	@ (8006828 <UART_SetConfig+0x4b0>)
 80066f6:	61fb      	str	r3, [r7, #28]
        break;
 80066f8:	e00d      	b.n	8006716 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066fa:	f7fd ff59 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 80066fe:	61f8      	str	r0, [r7, #28]
        break;
 8006700:	e009      	b.n	8006716 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006706:	61fb      	str	r3, [r7, #28]
        break;
 8006708:	e005      	b.n	8006716 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006714:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d077      	beq.n	800680c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	005a      	lsls	r2, r3, #1
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	085b      	lsrs	r3, r3, #1
 8006726:	441a      	add	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006730:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	2b0f      	cmp	r3, #15
 8006736:	d916      	bls.n	8006766 <UART_SetConfig+0x3ee>
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800673e:	d212      	bcs.n	8006766 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	b29b      	uxth	r3, r3
 8006744:	f023 030f 	bic.w	r3, r3, #15
 8006748:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	085b      	lsrs	r3, r3, #1
 800674e:	b29b      	uxth	r3, r3
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	b29a      	uxth	r2, r3
 8006756:	8afb      	ldrh	r3, [r7, #22]
 8006758:	4313      	orrs	r3, r2
 800675a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	8afa      	ldrh	r2, [r7, #22]
 8006762:	60da      	str	r2, [r3, #12]
 8006764:	e052      	b.n	800680c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800676c:	e04e      	b.n	800680c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800676e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006772:	2b08      	cmp	r3, #8
 8006774:	d827      	bhi.n	80067c6 <UART_SetConfig+0x44e>
 8006776:	a201      	add	r2, pc, #4	@ (adr r2, 800677c <UART_SetConfig+0x404>)
 8006778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677c:	080067a1 	.word	0x080067a1
 8006780:	080067a9 	.word	0x080067a9
 8006784:	080067b1 	.word	0x080067b1
 8006788:	080067c7 	.word	0x080067c7
 800678c:	080067b7 	.word	0x080067b7
 8006790:	080067c7 	.word	0x080067c7
 8006794:	080067c7 	.word	0x080067c7
 8006798:	080067c7 	.word	0x080067c7
 800679c:	080067bf 	.word	0x080067bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067a0:	f7fd ff9e 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 80067a4:	61f8      	str	r0, [r7, #28]
        break;
 80067a6:	e014      	b.n	80067d2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067a8:	f7fd ffb0 	bl	800470c <HAL_RCC_GetPCLK2Freq>
 80067ac:	61f8      	str	r0, [r7, #28]
        break;
 80067ae:	e010      	b.n	80067d2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006828 <UART_SetConfig+0x4b0>)
 80067b2:	61fb      	str	r3, [r7, #28]
        break;
 80067b4:	e00d      	b.n	80067d2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067b6:	f7fd fefb 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 80067ba:	61f8      	str	r0, [r7, #28]
        break;
 80067bc:	e009      	b.n	80067d2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067c2:	61fb      	str	r3, [r7, #28]
        break;
 80067c4:	e005      	b.n	80067d2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80067d0:	bf00      	nop
    }

    if (pclk != 0U)
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d019      	beq.n	800680c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	085a      	lsrs	r2, r3, #1
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	441a      	add	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	2b0f      	cmp	r3, #15
 80067f0:	d909      	bls.n	8006806 <UART_SetConfig+0x48e>
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067f8:	d205      	bcs.n	8006806 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	60da      	str	r2, [r3, #12]
 8006804:	e002      	b.n	800680c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006818:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800681c:	4618      	mov	r0, r3
 800681e:	3728      	adds	r7, #40	@ 0x28
 8006820:	46bd      	mov	sp, r7
 8006822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006826:	bf00      	nop
 8006828:	00f42400 	.word	0x00f42400

0800682c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006838:	f003 0308 	and.w	r3, r3, #8
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00a      	beq.n	8006878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00a      	beq.n	800689a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689e:	f003 0304 	and.w	r3, r3, #4
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c0:	f003 0310 	and.w	r3, r3, #16
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00a      	beq.n	80068de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e2:	f003 0320 	and.w	r3, r3, #32
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	d01a      	beq.n	8006942 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006926:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800692a:	d10a      	bne.n	8006942 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	605a      	str	r2, [r3, #4]
  }
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b098      	sub	sp, #96	@ 0x60
 8006974:	af02      	add	r7, sp, #8
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006980:	f7fb fc48 	bl	8002214 <HAL_GetTick>
 8006984:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0308 	and.w	r3, r3, #8
 8006990:	2b08      	cmp	r3, #8
 8006992:	d12e      	bne.n	80069f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006994:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800699c:	2200      	movs	r2, #0
 800699e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f88c 	bl	8006ac0 <UART_WaitOnFlagUntilTimeout>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d021      	beq.n	80069f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b6:	e853 3f00 	ldrex	r3, [r3]
 80069ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	461a      	mov	r2, r3
 80069ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80069ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e6      	bne.n	80069ae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2220      	movs	r2, #32
 80069e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e062      	b.n	8006ab8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	d149      	bne.n	8006a94 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f856 	bl	8006ac0 <UART_WaitOnFlagUntilTimeout>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d03c      	beq.n	8006a94 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a22:	e853 3f00 	ldrex	r3, [r3]
 8006a26:	623b      	str	r3, [r7, #32]
   return(result);
 8006a28:	6a3b      	ldr	r3, [r7, #32]
 8006a2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	461a      	mov	r2, r3
 8006a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a38:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a40:	e841 2300 	strex	r3, r2, [r1]
 8006a44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1e6      	bne.n	8006a1a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3308      	adds	r3, #8
 8006a52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	e853 3f00 	ldrex	r3, [r3]
 8006a5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 0301 	bic.w	r3, r3, #1
 8006a62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3308      	adds	r3, #8
 8006a6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a6c:	61fa      	str	r2, [r7, #28]
 8006a6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	69b9      	ldr	r1, [r7, #24]
 8006a72:	69fa      	ldr	r2, [r7, #28]
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	617b      	str	r3, [r7, #20]
   return(result);
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e5      	bne.n	8006a4c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e011      	b.n	8006ab8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2220      	movs	r2, #32
 8006a98:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3758      	adds	r7, #88	@ 0x58
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	4613      	mov	r3, r2
 8006ace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ad0:	e04f      	b.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad8:	d04b      	beq.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ada:	f7fb fb9b 	bl	8002214 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d302      	bcc.n	8006af0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e04e      	b.n	8006b92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0304 	and.w	r3, r3, #4
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d037      	beq.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2b80      	cmp	r3, #128	@ 0x80
 8006b06:	d034      	beq.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2b40      	cmp	r3, #64	@ 0x40
 8006b0c:	d031      	beq.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	d110      	bne.n	8006b3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2208      	movs	r2, #8
 8006b22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f000 f8ff 	bl	8006d28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2208      	movs	r2, #8
 8006b2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e029      	b.n	8006b92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b4c:	d111      	bne.n	8006b72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 f8e5 	bl	8006d28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e00f      	b.n	8006b92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	69da      	ldr	r2, [r3, #28]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	bf0c      	ite	eq
 8006b82:	2301      	moveq	r3, #1
 8006b84:	2300      	movne	r3, #0
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d0a0      	beq.n	8006ad2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
	...

08006b9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b097      	sub	sp, #92	@ 0x5c
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	88fa      	ldrh	r2, [r7, #6]
 8006bb4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	88fa      	ldrh	r2, [r7, #6]
 8006bbc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bce:	d10e      	bne.n	8006bee <UART_Start_Receive_IT+0x52>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d105      	bne.n	8006be4 <UART_Start_Receive_IT+0x48>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006bde:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006be2:	e02d      	b.n	8006c40 <UART_Start_Receive_IT+0xa4>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	22ff      	movs	r2, #255	@ 0xff
 8006be8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006bec:	e028      	b.n	8006c40 <UART_Start_Receive_IT+0xa4>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10d      	bne.n	8006c12 <UART_Start_Receive_IT+0x76>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d104      	bne.n	8006c08 <UART_Start_Receive_IT+0x6c>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	22ff      	movs	r2, #255	@ 0xff
 8006c02:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006c06:	e01b      	b.n	8006c40 <UART_Start_Receive_IT+0xa4>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	227f      	movs	r2, #127	@ 0x7f
 8006c0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006c10:	e016      	b.n	8006c40 <UART_Start_Receive_IT+0xa4>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c1a:	d10d      	bne.n	8006c38 <UART_Start_Receive_IT+0x9c>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d104      	bne.n	8006c2e <UART_Start_Receive_IT+0x92>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	227f      	movs	r2, #127	@ 0x7f
 8006c28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006c2c:	e008      	b.n	8006c40 <UART_Start_Receive_IT+0xa4>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	223f      	movs	r2, #63	@ 0x3f
 8006c32:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006c36:	e003      	b.n	8006c40 <UART_Start_Receive_IT+0xa4>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2222      	movs	r2, #34	@ 0x22
 8006c4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3308      	adds	r3, #8
 8006c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c5a:	e853 3f00 	ldrex	r3, [r3]
 8006c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c62:	f043 0301 	orr.w	r3, r3, #1
 8006c66:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006c70:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006c72:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006c76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e5      	bne.n	8006c50 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c8c:	d107      	bne.n	8006c9e <UART_Start_Receive_IT+0x102>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d103      	bne.n	8006c9e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	4a21      	ldr	r2, [pc, #132]	@ (8006d20 <UART_Start_Receive_IT+0x184>)
 8006c9a:	669a      	str	r2, [r3, #104]	@ 0x68
 8006c9c:	e002      	b.n	8006ca4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4a20      	ldr	r2, [pc, #128]	@ (8006d24 <UART_Start_Receive_IT+0x188>)
 8006ca2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d019      	beq.n	8006ce0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb4:	e853 3f00 	ldrex	r3, [r3]
 8006cb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ccc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006cd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006cd2:	e841 2300 	strex	r3, r2, [r1]
 8006cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1e6      	bne.n	8006cac <UART_Start_Receive_IT+0x110>
 8006cde:	e018      	b.n	8006d12 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	e853 3f00 	ldrex	r3, [r3]
 8006cec:	613b      	str	r3, [r7, #16]
   return(result);
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f043 0320 	orr.w	r3, r3, #32
 8006cf4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cfe:	623b      	str	r3, [r7, #32]
 8006d00:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d02:	69f9      	ldr	r1, [r7, #28]
 8006d04:	6a3a      	ldr	r2, [r7, #32]
 8006d06:	e841 2300 	strex	r3, r2, [r1]
 8006d0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1e6      	bne.n	8006ce0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	375c      	adds	r7, #92	@ 0x5c
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	0800702d 	.word	0x0800702d
 8006d24:	08006e71 	.word	0x08006e71

08006d28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b095      	sub	sp, #84	@ 0x54
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d50:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d56:	e841 2300 	strex	r3, r2, [r1]
 8006d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1e6      	bne.n	8006d30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3308      	adds	r3, #8
 8006d68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	f023 0301 	bic.w	r3, r3, #1
 8006d78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	3308      	adds	r3, #8
 8006d80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d8a:	e841 2300 	strex	r3, r2, [r1]
 8006d8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1e5      	bne.n	8006d62 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d118      	bne.n	8006dd0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	e853 3f00 	ldrex	r3, [r3]
 8006daa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f023 0310 	bic.w	r3, r3, #16
 8006db2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	461a      	mov	r2, r3
 8006dba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dbc:	61bb      	str	r3, [r7, #24]
 8006dbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc0:	6979      	ldr	r1, [r7, #20]
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	e841 2300 	strex	r3, r2, [r1]
 8006dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1e6      	bne.n	8006d9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006de4:	bf00      	nop
 8006de6:	3754      	adds	r7, #84	@ 0x54
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f7ff fa9c 	bl	800634c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e14:	bf00      	nop
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b088      	sub	sp, #32
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	e853 3f00 	ldrex	r3, [r3]
 8006e30:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e38:	61fb      	str	r3, [r7, #28]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	61bb      	str	r3, [r7, #24]
 8006e44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	6979      	ldr	r1, [r7, #20]
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e6      	bne.n	8006e24 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7ff fa68 	bl	8006338 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e68:	bf00      	nop
 8006e6a:	3720      	adds	r7, #32
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b09c      	sub	sp, #112	@ 0x70
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e7e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e88:	2b22      	cmp	r3, #34	@ 0x22
 8006e8a:	f040 80be 	bne.w	800700a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006e94:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e98:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006e9c:	b2d9      	uxtb	r1, r3
 8006e9e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ea8:	400a      	ands	r2, r1
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f040 80a3 	bne.w	800701e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ee6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ee8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ef6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ef8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006efc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006efe:	e841 2300 	strex	r3, r2, [r1]
 8006f02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1e6      	bne.n	8006ed8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3308      	adds	r3, #8
 8006f10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f1c:	f023 0301 	bic.w	r3, r3, #1
 8006f20:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3308      	adds	r3, #8
 8006f28:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e5      	bne.n	8006f0a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a34      	ldr	r2, [pc, #208]	@ (8007028 <UART_RxISR_8BIT+0x1b8>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d01f      	beq.n	8006f9c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d018      	beq.n	8006f9c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f72:	e853 3f00 	ldrex	r3, [r3]
 8006f76:	623b      	str	r3, [r7, #32]
   return(result);
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	461a      	mov	r2, r3
 8006f86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f88:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f90:	e841 2300 	strex	r3, r2, [r1]
 8006f94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e6      	bne.n	8006f6a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d12e      	bne.n	8007002 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 0310 	bic.w	r3, r3, #16
 8006fbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fc8:	61fb      	str	r3, [r7, #28]
 8006fca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fcc:	69b9      	ldr	r1, [r7, #24]
 8006fce:	69fa      	ldr	r2, [r7, #28]
 8006fd0:	e841 2300 	strex	r3, r2, [r1]
 8006fd4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e6      	bne.n	8006faa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f003 0310 	and.w	r3, r3, #16
 8006fe6:	2b10      	cmp	r3, #16
 8006fe8:	d103      	bne.n	8006ff2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2210      	movs	r2, #16
 8006ff0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7ff f9b0 	bl	8006360 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007000:	e00d      	b.n	800701e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7fa fa0e 	bl	8001424 <HAL_UART_RxCpltCallback>
}
 8007008:	e009      	b.n	800701e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	8b1b      	ldrh	r3, [r3, #24]
 8007010:	b29a      	uxth	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0208 	orr.w	r2, r2, #8
 800701a:	b292      	uxth	r2, r2
 800701c:	831a      	strh	r2, [r3, #24]
}
 800701e:	bf00      	nop
 8007020:	3770      	adds	r7, #112	@ 0x70
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	40008000 	.word	0x40008000

0800702c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b09c      	sub	sp, #112	@ 0x70
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800703a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007044:	2b22      	cmp	r3, #34	@ 0x22
 8007046:	f040 80be 	bne.w	80071c6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007050:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007058:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800705a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800705e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007062:	4013      	ands	r3, r2
 8007064:	b29a      	uxth	r2, r3
 8007066:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007068:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800706e:	1c9a      	adds	r2, r3, #2
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800707a:	b29b      	uxth	r3, r3
 800707c:	3b01      	subs	r3, #1
 800707e:	b29a      	uxth	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800708c:	b29b      	uxth	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	f040 80a3 	bne.w	80071da <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80070a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80070b4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80070b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80070ba:	e841 2300 	strex	r3, r2, [r1]
 80070be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80070c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1e6      	bne.n	8007094 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3308      	adds	r3, #8
 80070cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d8:	f023 0301 	bic.w	r3, r3, #1
 80070dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3308      	adds	r3, #8
 80070e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80070e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80070e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e5      	bne.n	80070c6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2220      	movs	r2, #32
 80070fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a34      	ldr	r2, [pc, #208]	@ (80071e4 <UART_RxISR_16BIT+0x1b8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d01f      	beq.n	8007158 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d018      	beq.n	8007158 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	e853 3f00 	ldrex	r3, [r3]
 8007132:	61fb      	str	r3, [r7, #28]
   return(result);
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800713a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	461a      	mov	r2, r3
 8007142:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007144:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007146:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007148:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800714a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800714c:	e841 2300 	strex	r3, r2, [r1]
 8007150:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1e6      	bne.n	8007126 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800715c:	2b01      	cmp	r3, #1
 800715e:	d12e      	bne.n	80071be <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	e853 3f00 	ldrex	r3, [r3]
 8007172:	60bb      	str	r3, [r7, #8]
   return(result);
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f023 0310 	bic.w	r3, r3, #16
 800717a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	461a      	mov	r2, r3
 8007182:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007184:	61bb      	str	r3, [r7, #24]
 8007186:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007188:	6979      	ldr	r1, [r7, #20]
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	e841 2300 	strex	r3, r2, [r1]
 8007190:	613b      	str	r3, [r7, #16]
   return(result);
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1e6      	bne.n	8007166 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	f003 0310 	and.w	r3, r3, #16
 80071a2:	2b10      	cmp	r3, #16
 80071a4:	d103      	bne.n	80071ae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2210      	movs	r2, #16
 80071ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80071b4:	4619      	mov	r1, r3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7ff f8d2 	bl	8006360 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071bc:	e00d      	b.n	80071da <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7fa f930 	bl	8001424 <HAL_UART_RxCpltCallback>
}
 80071c4:	e009      	b.n	80071da <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	8b1b      	ldrh	r3, [r3, #24]
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 0208 	orr.w	r2, r2, #8
 80071d6:	b292      	uxth	r2, r2
 80071d8:	831a      	strh	r2, [r3, #24]
}
 80071da:	bf00      	nop
 80071dc:	3770      	adds	r7, #112	@ 0x70
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	40008000 	.word	0x40008000

080071e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <sulp>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	4604      	mov	r4, r0
 8007200:	460d      	mov	r5, r1
 8007202:	ec45 4b10 	vmov	d0, r4, r5
 8007206:	4616      	mov	r6, r2
 8007208:	f003 fdbe 	bl	800ad88 <__ulp>
 800720c:	ec51 0b10 	vmov	r0, r1, d0
 8007210:	b17e      	cbz	r6, 8007232 <sulp+0x36>
 8007212:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007216:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800721a:	2b00      	cmp	r3, #0
 800721c:	dd09      	ble.n	8007232 <sulp+0x36>
 800721e:	051b      	lsls	r3, r3, #20
 8007220:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007224:	2400      	movs	r4, #0
 8007226:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800722a:	4622      	mov	r2, r4
 800722c:	462b      	mov	r3, r5
 800722e:	f7f9 f9f3 	bl	8000618 <__aeabi_dmul>
 8007232:	ec41 0b10 	vmov	d0, r0, r1
 8007236:	bd70      	pop	{r4, r5, r6, pc}

08007238 <_strtod_l>:
 8007238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723c:	b09f      	sub	sp, #124	@ 0x7c
 800723e:	460c      	mov	r4, r1
 8007240:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007242:	2200      	movs	r2, #0
 8007244:	921a      	str	r2, [sp, #104]	@ 0x68
 8007246:	9005      	str	r0, [sp, #20]
 8007248:	f04f 0a00 	mov.w	sl, #0
 800724c:	f04f 0b00 	mov.w	fp, #0
 8007250:	460a      	mov	r2, r1
 8007252:	9219      	str	r2, [sp, #100]	@ 0x64
 8007254:	7811      	ldrb	r1, [r2, #0]
 8007256:	292b      	cmp	r1, #43	@ 0x2b
 8007258:	d04a      	beq.n	80072f0 <_strtod_l+0xb8>
 800725a:	d838      	bhi.n	80072ce <_strtod_l+0x96>
 800725c:	290d      	cmp	r1, #13
 800725e:	d832      	bhi.n	80072c6 <_strtod_l+0x8e>
 8007260:	2908      	cmp	r1, #8
 8007262:	d832      	bhi.n	80072ca <_strtod_l+0x92>
 8007264:	2900      	cmp	r1, #0
 8007266:	d03b      	beq.n	80072e0 <_strtod_l+0xa8>
 8007268:	2200      	movs	r2, #0
 800726a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800726c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800726e:	782a      	ldrb	r2, [r5, #0]
 8007270:	2a30      	cmp	r2, #48	@ 0x30
 8007272:	f040 80b3 	bne.w	80073dc <_strtod_l+0x1a4>
 8007276:	786a      	ldrb	r2, [r5, #1]
 8007278:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800727c:	2a58      	cmp	r2, #88	@ 0x58
 800727e:	d16e      	bne.n	800735e <_strtod_l+0x126>
 8007280:	9302      	str	r3, [sp, #8]
 8007282:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007284:	9301      	str	r3, [sp, #4]
 8007286:	ab1a      	add	r3, sp, #104	@ 0x68
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	4a8e      	ldr	r2, [pc, #568]	@ (80074c4 <_strtod_l+0x28c>)
 800728c:	9805      	ldr	r0, [sp, #20]
 800728e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007290:	a919      	add	r1, sp, #100	@ 0x64
 8007292:	f002 fe6b 	bl	8009f6c <__gethex>
 8007296:	f010 060f 	ands.w	r6, r0, #15
 800729a:	4604      	mov	r4, r0
 800729c:	d005      	beq.n	80072aa <_strtod_l+0x72>
 800729e:	2e06      	cmp	r6, #6
 80072a0:	d128      	bne.n	80072f4 <_strtod_l+0xbc>
 80072a2:	3501      	adds	r5, #1
 80072a4:	2300      	movs	r3, #0
 80072a6:	9519      	str	r5, [sp, #100]	@ 0x64
 80072a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f040 858e 	bne.w	8007dce <_strtod_l+0xb96>
 80072b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072b4:	b1cb      	cbz	r3, 80072ea <_strtod_l+0xb2>
 80072b6:	4652      	mov	r2, sl
 80072b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80072bc:	ec43 2b10 	vmov	d0, r2, r3
 80072c0:	b01f      	add	sp, #124	@ 0x7c
 80072c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c6:	2920      	cmp	r1, #32
 80072c8:	d1ce      	bne.n	8007268 <_strtod_l+0x30>
 80072ca:	3201      	adds	r2, #1
 80072cc:	e7c1      	b.n	8007252 <_strtod_l+0x1a>
 80072ce:	292d      	cmp	r1, #45	@ 0x2d
 80072d0:	d1ca      	bne.n	8007268 <_strtod_l+0x30>
 80072d2:	2101      	movs	r1, #1
 80072d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80072d6:	1c51      	adds	r1, r2, #1
 80072d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80072da:	7852      	ldrb	r2, [r2, #1]
 80072dc:	2a00      	cmp	r2, #0
 80072de:	d1c5      	bne.n	800726c <_strtod_l+0x34>
 80072e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80072e2:	9419      	str	r4, [sp, #100]	@ 0x64
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f040 8570 	bne.w	8007dca <_strtod_l+0xb92>
 80072ea:	4652      	mov	r2, sl
 80072ec:	465b      	mov	r3, fp
 80072ee:	e7e5      	b.n	80072bc <_strtod_l+0x84>
 80072f0:	2100      	movs	r1, #0
 80072f2:	e7ef      	b.n	80072d4 <_strtod_l+0x9c>
 80072f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80072f6:	b13a      	cbz	r2, 8007308 <_strtod_l+0xd0>
 80072f8:	2135      	movs	r1, #53	@ 0x35
 80072fa:	a81c      	add	r0, sp, #112	@ 0x70
 80072fc:	f003 fe3e 	bl	800af7c <__copybits>
 8007300:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007302:	9805      	ldr	r0, [sp, #20]
 8007304:	f003 fa0c 	bl	800a720 <_Bfree>
 8007308:	3e01      	subs	r6, #1
 800730a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800730c:	2e04      	cmp	r6, #4
 800730e:	d806      	bhi.n	800731e <_strtod_l+0xe6>
 8007310:	e8df f006 	tbb	[pc, r6]
 8007314:	201d0314 	.word	0x201d0314
 8007318:	14          	.byte	0x14
 8007319:	00          	.byte	0x00
 800731a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800731e:	05e1      	lsls	r1, r4, #23
 8007320:	bf48      	it	mi
 8007322:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007326:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800732a:	0d1b      	lsrs	r3, r3, #20
 800732c:	051b      	lsls	r3, r3, #20
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1bb      	bne.n	80072aa <_strtod_l+0x72>
 8007332:	f001 fec9 	bl	80090c8 <__errno>
 8007336:	2322      	movs	r3, #34	@ 0x22
 8007338:	6003      	str	r3, [r0, #0]
 800733a:	e7b6      	b.n	80072aa <_strtod_l+0x72>
 800733c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007340:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007344:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007348:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800734c:	e7e7      	b.n	800731e <_strtod_l+0xe6>
 800734e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80074cc <_strtod_l+0x294>
 8007352:	e7e4      	b.n	800731e <_strtod_l+0xe6>
 8007354:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007358:	f04f 3aff 	mov.w	sl, #4294967295
 800735c:	e7df      	b.n	800731e <_strtod_l+0xe6>
 800735e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	9219      	str	r2, [sp, #100]	@ 0x64
 8007364:	785b      	ldrb	r3, [r3, #1]
 8007366:	2b30      	cmp	r3, #48	@ 0x30
 8007368:	d0f9      	beq.n	800735e <_strtod_l+0x126>
 800736a:	2b00      	cmp	r3, #0
 800736c:	d09d      	beq.n	80072aa <_strtod_l+0x72>
 800736e:	2301      	movs	r3, #1
 8007370:	9309      	str	r3, [sp, #36]	@ 0x24
 8007372:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007374:	930c      	str	r3, [sp, #48]	@ 0x30
 8007376:	2300      	movs	r3, #0
 8007378:	9308      	str	r3, [sp, #32]
 800737a:	930a      	str	r3, [sp, #40]	@ 0x28
 800737c:	461f      	mov	r7, r3
 800737e:	220a      	movs	r2, #10
 8007380:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007382:	7805      	ldrb	r5, [r0, #0]
 8007384:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007388:	b2d9      	uxtb	r1, r3
 800738a:	2909      	cmp	r1, #9
 800738c:	d928      	bls.n	80073e0 <_strtod_l+0x1a8>
 800738e:	494e      	ldr	r1, [pc, #312]	@ (80074c8 <_strtod_l+0x290>)
 8007390:	2201      	movs	r2, #1
 8007392:	f001 fe3d 	bl	8009010 <strncmp>
 8007396:	2800      	cmp	r0, #0
 8007398:	d032      	beq.n	8007400 <_strtod_l+0x1c8>
 800739a:	2000      	movs	r0, #0
 800739c:	462a      	mov	r2, r5
 800739e:	4681      	mov	r9, r0
 80073a0:	463d      	mov	r5, r7
 80073a2:	4603      	mov	r3, r0
 80073a4:	2a65      	cmp	r2, #101	@ 0x65
 80073a6:	d001      	beq.n	80073ac <_strtod_l+0x174>
 80073a8:	2a45      	cmp	r2, #69	@ 0x45
 80073aa:	d114      	bne.n	80073d6 <_strtod_l+0x19e>
 80073ac:	b91d      	cbnz	r5, 80073b6 <_strtod_l+0x17e>
 80073ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073b0:	4302      	orrs	r2, r0
 80073b2:	d095      	beq.n	80072e0 <_strtod_l+0xa8>
 80073b4:	2500      	movs	r5, #0
 80073b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80073b8:	1c62      	adds	r2, r4, #1
 80073ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80073bc:	7862      	ldrb	r2, [r4, #1]
 80073be:	2a2b      	cmp	r2, #43	@ 0x2b
 80073c0:	d077      	beq.n	80074b2 <_strtod_l+0x27a>
 80073c2:	2a2d      	cmp	r2, #45	@ 0x2d
 80073c4:	d07b      	beq.n	80074be <_strtod_l+0x286>
 80073c6:	f04f 0c00 	mov.w	ip, #0
 80073ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80073ce:	2909      	cmp	r1, #9
 80073d0:	f240 8082 	bls.w	80074d8 <_strtod_l+0x2a0>
 80073d4:	9419      	str	r4, [sp, #100]	@ 0x64
 80073d6:	f04f 0800 	mov.w	r8, #0
 80073da:	e0a2      	b.n	8007522 <_strtod_l+0x2ea>
 80073dc:	2300      	movs	r3, #0
 80073de:	e7c7      	b.n	8007370 <_strtod_l+0x138>
 80073e0:	2f08      	cmp	r7, #8
 80073e2:	bfd5      	itete	le
 80073e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80073e6:	9908      	ldrgt	r1, [sp, #32]
 80073e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80073ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80073f0:	f100 0001 	add.w	r0, r0, #1
 80073f4:	bfd4      	ite	le
 80073f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80073f8:	9308      	strgt	r3, [sp, #32]
 80073fa:	3701      	adds	r7, #1
 80073fc:	9019      	str	r0, [sp, #100]	@ 0x64
 80073fe:	e7bf      	b.n	8007380 <_strtod_l+0x148>
 8007400:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	9219      	str	r2, [sp, #100]	@ 0x64
 8007406:	785a      	ldrb	r2, [r3, #1]
 8007408:	b37f      	cbz	r7, 800746a <_strtod_l+0x232>
 800740a:	4681      	mov	r9, r0
 800740c:	463d      	mov	r5, r7
 800740e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007412:	2b09      	cmp	r3, #9
 8007414:	d912      	bls.n	800743c <_strtod_l+0x204>
 8007416:	2301      	movs	r3, #1
 8007418:	e7c4      	b.n	80073a4 <_strtod_l+0x16c>
 800741a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007420:	785a      	ldrb	r2, [r3, #1]
 8007422:	3001      	adds	r0, #1
 8007424:	2a30      	cmp	r2, #48	@ 0x30
 8007426:	d0f8      	beq.n	800741a <_strtod_l+0x1e2>
 8007428:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800742c:	2b08      	cmp	r3, #8
 800742e:	f200 84d3 	bhi.w	8007dd8 <_strtod_l+0xba0>
 8007432:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007434:	930c      	str	r3, [sp, #48]	@ 0x30
 8007436:	4681      	mov	r9, r0
 8007438:	2000      	movs	r0, #0
 800743a:	4605      	mov	r5, r0
 800743c:	3a30      	subs	r2, #48	@ 0x30
 800743e:	f100 0301 	add.w	r3, r0, #1
 8007442:	d02a      	beq.n	800749a <_strtod_l+0x262>
 8007444:	4499      	add	r9, r3
 8007446:	eb00 0c05 	add.w	ip, r0, r5
 800744a:	462b      	mov	r3, r5
 800744c:	210a      	movs	r1, #10
 800744e:	4563      	cmp	r3, ip
 8007450:	d10d      	bne.n	800746e <_strtod_l+0x236>
 8007452:	1c69      	adds	r1, r5, #1
 8007454:	4401      	add	r1, r0
 8007456:	4428      	add	r0, r5
 8007458:	2808      	cmp	r0, #8
 800745a:	dc16      	bgt.n	800748a <_strtod_l+0x252>
 800745c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800745e:	230a      	movs	r3, #10
 8007460:	fb03 2300 	mla	r3, r3, r0, r2
 8007464:	930a      	str	r3, [sp, #40]	@ 0x28
 8007466:	2300      	movs	r3, #0
 8007468:	e018      	b.n	800749c <_strtod_l+0x264>
 800746a:	4638      	mov	r0, r7
 800746c:	e7da      	b.n	8007424 <_strtod_l+0x1ec>
 800746e:	2b08      	cmp	r3, #8
 8007470:	f103 0301 	add.w	r3, r3, #1
 8007474:	dc03      	bgt.n	800747e <_strtod_l+0x246>
 8007476:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007478:	434e      	muls	r6, r1
 800747a:	960a      	str	r6, [sp, #40]	@ 0x28
 800747c:	e7e7      	b.n	800744e <_strtod_l+0x216>
 800747e:	2b10      	cmp	r3, #16
 8007480:	bfde      	ittt	le
 8007482:	9e08      	ldrle	r6, [sp, #32]
 8007484:	434e      	mulle	r6, r1
 8007486:	9608      	strle	r6, [sp, #32]
 8007488:	e7e1      	b.n	800744e <_strtod_l+0x216>
 800748a:	280f      	cmp	r0, #15
 800748c:	dceb      	bgt.n	8007466 <_strtod_l+0x22e>
 800748e:	9808      	ldr	r0, [sp, #32]
 8007490:	230a      	movs	r3, #10
 8007492:	fb03 2300 	mla	r3, r3, r0, r2
 8007496:	9308      	str	r3, [sp, #32]
 8007498:	e7e5      	b.n	8007466 <_strtod_l+0x22e>
 800749a:	4629      	mov	r1, r5
 800749c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800749e:	1c50      	adds	r0, r2, #1
 80074a0:	9019      	str	r0, [sp, #100]	@ 0x64
 80074a2:	7852      	ldrb	r2, [r2, #1]
 80074a4:	4618      	mov	r0, r3
 80074a6:	460d      	mov	r5, r1
 80074a8:	e7b1      	b.n	800740e <_strtod_l+0x1d6>
 80074aa:	f04f 0900 	mov.w	r9, #0
 80074ae:	2301      	movs	r3, #1
 80074b0:	e77d      	b.n	80073ae <_strtod_l+0x176>
 80074b2:	f04f 0c00 	mov.w	ip, #0
 80074b6:	1ca2      	adds	r2, r4, #2
 80074b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80074ba:	78a2      	ldrb	r2, [r4, #2]
 80074bc:	e785      	b.n	80073ca <_strtod_l+0x192>
 80074be:	f04f 0c01 	mov.w	ip, #1
 80074c2:	e7f8      	b.n	80074b6 <_strtod_l+0x27e>
 80074c4:	0800bcc0 	.word	0x0800bcc0
 80074c8:	0800bca8 	.word	0x0800bca8
 80074cc:	7ff00000 	.word	0x7ff00000
 80074d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80074d2:	1c51      	adds	r1, r2, #1
 80074d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80074d6:	7852      	ldrb	r2, [r2, #1]
 80074d8:	2a30      	cmp	r2, #48	@ 0x30
 80074da:	d0f9      	beq.n	80074d0 <_strtod_l+0x298>
 80074dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80074e0:	2908      	cmp	r1, #8
 80074e2:	f63f af78 	bhi.w	80073d6 <_strtod_l+0x19e>
 80074e6:	3a30      	subs	r2, #48	@ 0x30
 80074e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80074ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80074ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 80074ee:	f04f 080a 	mov.w	r8, #10
 80074f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80074f4:	1c56      	adds	r6, r2, #1
 80074f6:	9619      	str	r6, [sp, #100]	@ 0x64
 80074f8:	7852      	ldrb	r2, [r2, #1]
 80074fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80074fe:	f1be 0f09 	cmp.w	lr, #9
 8007502:	d939      	bls.n	8007578 <_strtod_l+0x340>
 8007504:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007506:	1a76      	subs	r6, r6, r1
 8007508:	2e08      	cmp	r6, #8
 800750a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800750e:	dc03      	bgt.n	8007518 <_strtod_l+0x2e0>
 8007510:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007512:	4588      	cmp	r8, r1
 8007514:	bfa8      	it	ge
 8007516:	4688      	movge	r8, r1
 8007518:	f1bc 0f00 	cmp.w	ip, #0
 800751c:	d001      	beq.n	8007522 <_strtod_l+0x2ea>
 800751e:	f1c8 0800 	rsb	r8, r8, #0
 8007522:	2d00      	cmp	r5, #0
 8007524:	d14e      	bne.n	80075c4 <_strtod_l+0x38c>
 8007526:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007528:	4308      	orrs	r0, r1
 800752a:	f47f aebe 	bne.w	80072aa <_strtod_l+0x72>
 800752e:	2b00      	cmp	r3, #0
 8007530:	f47f aed6 	bne.w	80072e0 <_strtod_l+0xa8>
 8007534:	2a69      	cmp	r2, #105	@ 0x69
 8007536:	d028      	beq.n	800758a <_strtod_l+0x352>
 8007538:	dc25      	bgt.n	8007586 <_strtod_l+0x34e>
 800753a:	2a49      	cmp	r2, #73	@ 0x49
 800753c:	d025      	beq.n	800758a <_strtod_l+0x352>
 800753e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007540:	f47f aece 	bne.w	80072e0 <_strtod_l+0xa8>
 8007544:	499b      	ldr	r1, [pc, #620]	@ (80077b4 <_strtod_l+0x57c>)
 8007546:	a819      	add	r0, sp, #100	@ 0x64
 8007548:	f002 ff32 	bl	800a3b0 <__match>
 800754c:	2800      	cmp	r0, #0
 800754e:	f43f aec7 	beq.w	80072e0 <_strtod_l+0xa8>
 8007552:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	2b28      	cmp	r3, #40	@ 0x28
 8007558:	d12e      	bne.n	80075b8 <_strtod_l+0x380>
 800755a:	4997      	ldr	r1, [pc, #604]	@ (80077b8 <_strtod_l+0x580>)
 800755c:	aa1c      	add	r2, sp, #112	@ 0x70
 800755e:	a819      	add	r0, sp, #100	@ 0x64
 8007560:	f002 ff3a 	bl	800a3d8 <__hexnan>
 8007564:	2805      	cmp	r0, #5
 8007566:	d127      	bne.n	80075b8 <_strtod_l+0x380>
 8007568:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800756a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800756e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007572:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007576:	e698      	b.n	80072aa <_strtod_l+0x72>
 8007578:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800757a:	fb08 2101 	mla	r1, r8, r1, r2
 800757e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007582:	920e      	str	r2, [sp, #56]	@ 0x38
 8007584:	e7b5      	b.n	80074f2 <_strtod_l+0x2ba>
 8007586:	2a6e      	cmp	r2, #110	@ 0x6e
 8007588:	e7da      	b.n	8007540 <_strtod_l+0x308>
 800758a:	498c      	ldr	r1, [pc, #560]	@ (80077bc <_strtod_l+0x584>)
 800758c:	a819      	add	r0, sp, #100	@ 0x64
 800758e:	f002 ff0f 	bl	800a3b0 <__match>
 8007592:	2800      	cmp	r0, #0
 8007594:	f43f aea4 	beq.w	80072e0 <_strtod_l+0xa8>
 8007598:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800759a:	4989      	ldr	r1, [pc, #548]	@ (80077c0 <_strtod_l+0x588>)
 800759c:	3b01      	subs	r3, #1
 800759e:	a819      	add	r0, sp, #100	@ 0x64
 80075a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80075a2:	f002 ff05 	bl	800a3b0 <__match>
 80075a6:	b910      	cbnz	r0, 80075ae <_strtod_l+0x376>
 80075a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075aa:	3301      	adds	r3, #1
 80075ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80075ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80077d0 <_strtod_l+0x598>
 80075b2:	f04f 0a00 	mov.w	sl, #0
 80075b6:	e678      	b.n	80072aa <_strtod_l+0x72>
 80075b8:	4882      	ldr	r0, [pc, #520]	@ (80077c4 <_strtod_l+0x58c>)
 80075ba:	f001 fdc9 	bl	8009150 <nan>
 80075be:	ec5b ab10 	vmov	sl, fp, d0
 80075c2:	e672      	b.n	80072aa <_strtod_l+0x72>
 80075c4:	eba8 0309 	sub.w	r3, r8, r9
 80075c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80075ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80075cc:	2f00      	cmp	r7, #0
 80075ce:	bf08      	it	eq
 80075d0:	462f      	moveq	r7, r5
 80075d2:	2d10      	cmp	r5, #16
 80075d4:	462c      	mov	r4, r5
 80075d6:	bfa8      	it	ge
 80075d8:	2410      	movge	r4, #16
 80075da:	f7f8 ffa3 	bl	8000524 <__aeabi_ui2d>
 80075de:	2d09      	cmp	r5, #9
 80075e0:	4682      	mov	sl, r0
 80075e2:	468b      	mov	fp, r1
 80075e4:	dc13      	bgt.n	800760e <_strtod_l+0x3d6>
 80075e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f43f ae5e 	beq.w	80072aa <_strtod_l+0x72>
 80075ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075f0:	dd78      	ble.n	80076e4 <_strtod_l+0x4ac>
 80075f2:	2b16      	cmp	r3, #22
 80075f4:	dc5f      	bgt.n	80076b6 <_strtod_l+0x47e>
 80075f6:	4974      	ldr	r1, [pc, #464]	@ (80077c8 <_strtod_l+0x590>)
 80075f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007600:	4652      	mov	r2, sl
 8007602:	465b      	mov	r3, fp
 8007604:	f7f9 f808 	bl	8000618 <__aeabi_dmul>
 8007608:	4682      	mov	sl, r0
 800760a:	468b      	mov	fp, r1
 800760c:	e64d      	b.n	80072aa <_strtod_l+0x72>
 800760e:	4b6e      	ldr	r3, [pc, #440]	@ (80077c8 <_strtod_l+0x590>)
 8007610:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007614:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007618:	f7f8 fffe 	bl	8000618 <__aeabi_dmul>
 800761c:	4682      	mov	sl, r0
 800761e:	9808      	ldr	r0, [sp, #32]
 8007620:	468b      	mov	fp, r1
 8007622:	f7f8 ff7f 	bl	8000524 <__aeabi_ui2d>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	4650      	mov	r0, sl
 800762c:	4659      	mov	r1, fp
 800762e:	f7f8 fe3d 	bl	80002ac <__adddf3>
 8007632:	2d0f      	cmp	r5, #15
 8007634:	4682      	mov	sl, r0
 8007636:	468b      	mov	fp, r1
 8007638:	ddd5      	ble.n	80075e6 <_strtod_l+0x3ae>
 800763a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800763c:	1b2c      	subs	r4, r5, r4
 800763e:	441c      	add	r4, r3
 8007640:	2c00      	cmp	r4, #0
 8007642:	f340 8096 	ble.w	8007772 <_strtod_l+0x53a>
 8007646:	f014 030f 	ands.w	r3, r4, #15
 800764a:	d00a      	beq.n	8007662 <_strtod_l+0x42a>
 800764c:	495e      	ldr	r1, [pc, #376]	@ (80077c8 <_strtod_l+0x590>)
 800764e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007652:	4652      	mov	r2, sl
 8007654:	465b      	mov	r3, fp
 8007656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800765a:	f7f8 ffdd 	bl	8000618 <__aeabi_dmul>
 800765e:	4682      	mov	sl, r0
 8007660:	468b      	mov	fp, r1
 8007662:	f034 040f 	bics.w	r4, r4, #15
 8007666:	d073      	beq.n	8007750 <_strtod_l+0x518>
 8007668:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800766c:	dd48      	ble.n	8007700 <_strtod_l+0x4c8>
 800766e:	2400      	movs	r4, #0
 8007670:	46a0      	mov	r8, r4
 8007672:	940a      	str	r4, [sp, #40]	@ 0x28
 8007674:	46a1      	mov	r9, r4
 8007676:	9a05      	ldr	r2, [sp, #20]
 8007678:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80077d0 <_strtod_l+0x598>
 800767c:	2322      	movs	r3, #34	@ 0x22
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	f04f 0a00 	mov.w	sl, #0
 8007684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007686:	2b00      	cmp	r3, #0
 8007688:	f43f ae0f 	beq.w	80072aa <_strtod_l+0x72>
 800768c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800768e:	9805      	ldr	r0, [sp, #20]
 8007690:	f003 f846 	bl	800a720 <_Bfree>
 8007694:	9805      	ldr	r0, [sp, #20]
 8007696:	4649      	mov	r1, r9
 8007698:	f003 f842 	bl	800a720 <_Bfree>
 800769c:	9805      	ldr	r0, [sp, #20]
 800769e:	4641      	mov	r1, r8
 80076a0:	f003 f83e 	bl	800a720 <_Bfree>
 80076a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076a6:	9805      	ldr	r0, [sp, #20]
 80076a8:	f003 f83a 	bl	800a720 <_Bfree>
 80076ac:	9805      	ldr	r0, [sp, #20]
 80076ae:	4621      	mov	r1, r4
 80076b0:	f003 f836 	bl	800a720 <_Bfree>
 80076b4:	e5f9      	b.n	80072aa <_strtod_l+0x72>
 80076b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80076bc:	4293      	cmp	r3, r2
 80076be:	dbbc      	blt.n	800763a <_strtod_l+0x402>
 80076c0:	4c41      	ldr	r4, [pc, #260]	@ (80077c8 <_strtod_l+0x590>)
 80076c2:	f1c5 050f 	rsb	r5, r5, #15
 80076c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80076ca:	4652      	mov	r2, sl
 80076cc:	465b      	mov	r3, fp
 80076ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076d2:	f7f8 ffa1 	bl	8000618 <__aeabi_dmul>
 80076d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d8:	1b5d      	subs	r5, r3, r5
 80076da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80076de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80076e2:	e78f      	b.n	8007604 <_strtod_l+0x3cc>
 80076e4:	3316      	adds	r3, #22
 80076e6:	dba8      	blt.n	800763a <_strtod_l+0x402>
 80076e8:	4b37      	ldr	r3, [pc, #220]	@ (80077c8 <_strtod_l+0x590>)
 80076ea:	eba9 0808 	sub.w	r8, r9, r8
 80076ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80076f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80076f6:	4650      	mov	r0, sl
 80076f8:	4659      	mov	r1, fp
 80076fa:	f7f9 f8b7 	bl	800086c <__aeabi_ddiv>
 80076fe:	e783      	b.n	8007608 <_strtod_l+0x3d0>
 8007700:	4b32      	ldr	r3, [pc, #200]	@ (80077cc <_strtod_l+0x594>)
 8007702:	9308      	str	r3, [sp, #32]
 8007704:	2300      	movs	r3, #0
 8007706:	1124      	asrs	r4, r4, #4
 8007708:	4650      	mov	r0, sl
 800770a:	4659      	mov	r1, fp
 800770c:	461e      	mov	r6, r3
 800770e:	2c01      	cmp	r4, #1
 8007710:	dc21      	bgt.n	8007756 <_strtod_l+0x51e>
 8007712:	b10b      	cbz	r3, 8007718 <_strtod_l+0x4e0>
 8007714:	4682      	mov	sl, r0
 8007716:	468b      	mov	fp, r1
 8007718:	492c      	ldr	r1, [pc, #176]	@ (80077cc <_strtod_l+0x594>)
 800771a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800771e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007722:	4652      	mov	r2, sl
 8007724:	465b      	mov	r3, fp
 8007726:	e9d1 0100 	ldrd	r0, r1, [r1]
 800772a:	f7f8 ff75 	bl	8000618 <__aeabi_dmul>
 800772e:	4b28      	ldr	r3, [pc, #160]	@ (80077d0 <_strtod_l+0x598>)
 8007730:	460a      	mov	r2, r1
 8007732:	400b      	ands	r3, r1
 8007734:	4927      	ldr	r1, [pc, #156]	@ (80077d4 <_strtod_l+0x59c>)
 8007736:	428b      	cmp	r3, r1
 8007738:	4682      	mov	sl, r0
 800773a:	d898      	bhi.n	800766e <_strtod_l+0x436>
 800773c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007740:	428b      	cmp	r3, r1
 8007742:	bf86      	itte	hi
 8007744:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80077d8 <_strtod_l+0x5a0>
 8007748:	f04f 3aff 	movhi.w	sl, #4294967295
 800774c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007750:	2300      	movs	r3, #0
 8007752:	9308      	str	r3, [sp, #32]
 8007754:	e07a      	b.n	800784c <_strtod_l+0x614>
 8007756:	07e2      	lsls	r2, r4, #31
 8007758:	d505      	bpl.n	8007766 <_strtod_l+0x52e>
 800775a:	9b08      	ldr	r3, [sp, #32]
 800775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007760:	f7f8 ff5a 	bl	8000618 <__aeabi_dmul>
 8007764:	2301      	movs	r3, #1
 8007766:	9a08      	ldr	r2, [sp, #32]
 8007768:	3208      	adds	r2, #8
 800776a:	3601      	adds	r6, #1
 800776c:	1064      	asrs	r4, r4, #1
 800776e:	9208      	str	r2, [sp, #32]
 8007770:	e7cd      	b.n	800770e <_strtod_l+0x4d6>
 8007772:	d0ed      	beq.n	8007750 <_strtod_l+0x518>
 8007774:	4264      	negs	r4, r4
 8007776:	f014 020f 	ands.w	r2, r4, #15
 800777a:	d00a      	beq.n	8007792 <_strtod_l+0x55a>
 800777c:	4b12      	ldr	r3, [pc, #72]	@ (80077c8 <_strtod_l+0x590>)
 800777e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007782:	4650      	mov	r0, sl
 8007784:	4659      	mov	r1, fp
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	f7f9 f86f 	bl	800086c <__aeabi_ddiv>
 800778e:	4682      	mov	sl, r0
 8007790:	468b      	mov	fp, r1
 8007792:	1124      	asrs	r4, r4, #4
 8007794:	d0dc      	beq.n	8007750 <_strtod_l+0x518>
 8007796:	2c1f      	cmp	r4, #31
 8007798:	dd20      	ble.n	80077dc <_strtod_l+0x5a4>
 800779a:	2400      	movs	r4, #0
 800779c:	46a0      	mov	r8, r4
 800779e:	940a      	str	r4, [sp, #40]	@ 0x28
 80077a0:	46a1      	mov	r9, r4
 80077a2:	9a05      	ldr	r2, [sp, #20]
 80077a4:	2322      	movs	r3, #34	@ 0x22
 80077a6:	f04f 0a00 	mov.w	sl, #0
 80077aa:	f04f 0b00 	mov.w	fp, #0
 80077ae:	6013      	str	r3, [r2, #0]
 80077b0:	e768      	b.n	8007684 <_strtod_l+0x44c>
 80077b2:	bf00      	nop
 80077b4:	0800bd0d 	.word	0x0800bd0d
 80077b8:	0800bcac 	.word	0x0800bcac
 80077bc:	0800bd05 	.word	0x0800bd05
 80077c0:	0800bd44 	.word	0x0800bd44
 80077c4:	0800c0d5 	.word	0x0800c0d5
 80077c8:	0800bec0 	.word	0x0800bec0
 80077cc:	0800be98 	.word	0x0800be98
 80077d0:	7ff00000 	.word	0x7ff00000
 80077d4:	7ca00000 	.word	0x7ca00000
 80077d8:	7fefffff 	.word	0x7fefffff
 80077dc:	f014 0310 	ands.w	r3, r4, #16
 80077e0:	bf18      	it	ne
 80077e2:	236a      	movne	r3, #106	@ 0x6a
 80077e4:	4ea9      	ldr	r6, [pc, #676]	@ (8007a8c <_strtod_l+0x854>)
 80077e6:	9308      	str	r3, [sp, #32]
 80077e8:	4650      	mov	r0, sl
 80077ea:	4659      	mov	r1, fp
 80077ec:	2300      	movs	r3, #0
 80077ee:	07e2      	lsls	r2, r4, #31
 80077f0:	d504      	bpl.n	80077fc <_strtod_l+0x5c4>
 80077f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077f6:	f7f8 ff0f 	bl	8000618 <__aeabi_dmul>
 80077fa:	2301      	movs	r3, #1
 80077fc:	1064      	asrs	r4, r4, #1
 80077fe:	f106 0608 	add.w	r6, r6, #8
 8007802:	d1f4      	bne.n	80077ee <_strtod_l+0x5b6>
 8007804:	b10b      	cbz	r3, 800780a <_strtod_l+0x5d2>
 8007806:	4682      	mov	sl, r0
 8007808:	468b      	mov	fp, r1
 800780a:	9b08      	ldr	r3, [sp, #32]
 800780c:	b1b3      	cbz	r3, 800783c <_strtod_l+0x604>
 800780e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007812:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007816:	2b00      	cmp	r3, #0
 8007818:	4659      	mov	r1, fp
 800781a:	dd0f      	ble.n	800783c <_strtod_l+0x604>
 800781c:	2b1f      	cmp	r3, #31
 800781e:	dd55      	ble.n	80078cc <_strtod_l+0x694>
 8007820:	2b34      	cmp	r3, #52	@ 0x34
 8007822:	bfde      	ittt	le
 8007824:	f04f 33ff 	movle.w	r3, #4294967295
 8007828:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800782c:	4093      	lslle	r3, r2
 800782e:	f04f 0a00 	mov.w	sl, #0
 8007832:	bfcc      	ite	gt
 8007834:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007838:	ea03 0b01 	andle.w	fp, r3, r1
 800783c:	2200      	movs	r2, #0
 800783e:	2300      	movs	r3, #0
 8007840:	4650      	mov	r0, sl
 8007842:	4659      	mov	r1, fp
 8007844:	f7f9 f950 	bl	8000ae8 <__aeabi_dcmpeq>
 8007848:	2800      	cmp	r0, #0
 800784a:	d1a6      	bne.n	800779a <_strtod_l+0x562>
 800784c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007852:	9805      	ldr	r0, [sp, #20]
 8007854:	462b      	mov	r3, r5
 8007856:	463a      	mov	r2, r7
 8007858:	f002 ffca 	bl	800a7f0 <__s2b>
 800785c:	900a      	str	r0, [sp, #40]	@ 0x28
 800785e:	2800      	cmp	r0, #0
 8007860:	f43f af05 	beq.w	800766e <_strtod_l+0x436>
 8007864:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007866:	2a00      	cmp	r2, #0
 8007868:	eba9 0308 	sub.w	r3, r9, r8
 800786c:	bfa8      	it	ge
 800786e:	2300      	movge	r3, #0
 8007870:	9312      	str	r3, [sp, #72]	@ 0x48
 8007872:	2400      	movs	r4, #0
 8007874:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007878:	9316      	str	r3, [sp, #88]	@ 0x58
 800787a:	46a0      	mov	r8, r4
 800787c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800787e:	9805      	ldr	r0, [sp, #20]
 8007880:	6859      	ldr	r1, [r3, #4]
 8007882:	f002 ff0d 	bl	800a6a0 <_Balloc>
 8007886:	4681      	mov	r9, r0
 8007888:	2800      	cmp	r0, #0
 800788a:	f43f aef4 	beq.w	8007676 <_strtod_l+0x43e>
 800788e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007890:	691a      	ldr	r2, [r3, #16]
 8007892:	3202      	adds	r2, #2
 8007894:	f103 010c 	add.w	r1, r3, #12
 8007898:	0092      	lsls	r2, r2, #2
 800789a:	300c      	adds	r0, #12
 800789c:	f001 fc49 	bl	8009132 <memcpy>
 80078a0:	ec4b ab10 	vmov	d0, sl, fp
 80078a4:	9805      	ldr	r0, [sp, #20]
 80078a6:	aa1c      	add	r2, sp, #112	@ 0x70
 80078a8:	a91b      	add	r1, sp, #108	@ 0x6c
 80078aa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80078ae:	f003 fadb 	bl	800ae68 <__d2b>
 80078b2:	901a      	str	r0, [sp, #104]	@ 0x68
 80078b4:	2800      	cmp	r0, #0
 80078b6:	f43f aede 	beq.w	8007676 <_strtod_l+0x43e>
 80078ba:	9805      	ldr	r0, [sp, #20]
 80078bc:	2101      	movs	r1, #1
 80078be:	f003 f82d 	bl	800a91c <__i2b>
 80078c2:	4680      	mov	r8, r0
 80078c4:	b948      	cbnz	r0, 80078da <_strtod_l+0x6a2>
 80078c6:	f04f 0800 	mov.w	r8, #0
 80078ca:	e6d4      	b.n	8007676 <_strtod_l+0x43e>
 80078cc:	f04f 32ff 	mov.w	r2, #4294967295
 80078d0:	fa02 f303 	lsl.w	r3, r2, r3
 80078d4:	ea03 0a0a 	and.w	sl, r3, sl
 80078d8:	e7b0      	b.n	800783c <_strtod_l+0x604>
 80078da:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80078dc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80078de:	2d00      	cmp	r5, #0
 80078e0:	bfab      	itete	ge
 80078e2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80078e4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80078e6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80078e8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80078ea:	bfac      	ite	ge
 80078ec:	18ef      	addge	r7, r5, r3
 80078ee:	1b5e      	sublt	r6, r3, r5
 80078f0:	9b08      	ldr	r3, [sp, #32]
 80078f2:	1aed      	subs	r5, r5, r3
 80078f4:	4415      	add	r5, r2
 80078f6:	4b66      	ldr	r3, [pc, #408]	@ (8007a90 <_strtod_l+0x858>)
 80078f8:	3d01      	subs	r5, #1
 80078fa:	429d      	cmp	r5, r3
 80078fc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007900:	da50      	bge.n	80079a4 <_strtod_l+0x76c>
 8007902:	1b5b      	subs	r3, r3, r5
 8007904:	2b1f      	cmp	r3, #31
 8007906:	eba2 0203 	sub.w	r2, r2, r3
 800790a:	f04f 0101 	mov.w	r1, #1
 800790e:	dc3d      	bgt.n	800798c <_strtod_l+0x754>
 8007910:	fa01 f303 	lsl.w	r3, r1, r3
 8007914:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007916:	2300      	movs	r3, #0
 8007918:	9310      	str	r3, [sp, #64]	@ 0x40
 800791a:	18bd      	adds	r5, r7, r2
 800791c:	9b08      	ldr	r3, [sp, #32]
 800791e:	42af      	cmp	r7, r5
 8007920:	4416      	add	r6, r2
 8007922:	441e      	add	r6, r3
 8007924:	463b      	mov	r3, r7
 8007926:	bfa8      	it	ge
 8007928:	462b      	movge	r3, r5
 800792a:	42b3      	cmp	r3, r6
 800792c:	bfa8      	it	ge
 800792e:	4633      	movge	r3, r6
 8007930:	2b00      	cmp	r3, #0
 8007932:	bfc2      	ittt	gt
 8007934:	1aed      	subgt	r5, r5, r3
 8007936:	1af6      	subgt	r6, r6, r3
 8007938:	1aff      	subgt	r7, r7, r3
 800793a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800793c:	2b00      	cmp	r3, #0
 800793e:	dd16      	ble.n	800796e <_strtod_l+0x736>
 8007940:	4641      	mov	r1, r8
 8007942:	9805      	ldr	r0, [sp, #20]
 8007944:	461a      	mov	r2, r3
 8007946:	f003 f8a9 	bl	800aa9c <__pow5mult>
 800794a:	4680      	mov	r8, r0
 800794c:	2800      	cmp	r0, #0
 800794e:	d0ba      	beq.n	80078c6 <_strtod_l+0x68e>
 8007950:	4601      	mov	r1, r0
 8007952:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007954:	9805      	ldr	r0, [sp, #20]
 8007956:	f002 fff7 	bl	800a948 <__multiply>
 800795a:	900e      	str	r0, [sp, #56]	@ 0x38
 800795c:	2800      	cmp	r0, #0
 800795e:	f43f ae8a 	beq.w	8007676 <_strtod_l+0x43e>
 8007962:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007964:	9805      	ldr	r0, [sp, #20]
 8007966:	f002 fedb 	bl	800a720 <_Bfree>
 800796a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800796c:	931a      	str	r3, [sp, #104]	@ 0x68
 800796e:	2d00      	cmp	r5, #0
 8007970:	dc1d      	bgt.n	80079ae <_strtod_l+0x776>
 8007972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007974:	2b00      	cmp	r3, #0
 8007976:	dd23      	ble.n	80079c0 <_strtod_l+0x788>
 8007978:	4649      	mov	r1, r9
 800797a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800797c:	9805      	ldr	r0, [sp, #20]
 800797e:	f003 f88d 	bl	800aa9c <__pow5mult>
 8007982:	4681      	mov	r9, r0
 8007984:	b9e0      	cbnz	r0, 80079c0 <_strtod_l+0x788>
 8007986:	f04f 0900 	mov.w	r9, #0
 800798a:	e674      	b.n	8007676 <_strtod_l+0x43e>
 800798c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007990:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007994:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007998:	35e2      	adds	r5, #226	@ 0xe2
 800799a:	fa01 f305 	lsl.w	r3, r1, r5
 800799e:	9310      	str	r3, [sp, #64]	@ 0x40
 80079a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80079a2:	e7ba      	b.n	800791a <_strtod_l+0x6e2>
 80079a4:	2300      	movs	r3, #0
 80079a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80079a8:	2301      	movs	r3, #1
 80079aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80079ac:	e7b5      	b.n	800791a <_strtod_l+0x6e2>
 80079ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079b0:	9805      	ldr	r0, [sp, #20]
 80079b2:	462a      	mov	r2, r5
 80079b4:	f003 f8cc 	bl	800ab50 <__lshift>
 80079b8:	901a      	str	r0, [sp, #104]	@ 0x68
 80079ba:	2800      	cmp	r0, #0
 80079bc:	d1d9      	bne.n	8007972 <_strtod_l+0x73a>
 80079be:	e65a      	b.n	8007676 <_strtod_l+0x43e>
 80079c0:	2e00      	cmp	r6, #0
 80079c2:	dd07      	ble.n	80079d4 <_strtod_l+0x79c>
 80079c4:	4649      	mov	r1, r9
 80079c6:	9805      	ldr	r0, [sp, #20]
 80079c8:	4632      	mov	r2, r6
 80079ca:	f003 f8c1 	bl	800ab50 <__lshift>
 80079ce:	4681      	mov	r9, r0
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d0d8      	beq.n	8007986 <_strtod_l+0x74e>
 80079d4:	2f00      	cmp	r7, #0
 80079d6:	dd08      	ble.n	80079ea <_strtod_l+0x7b2>
 80079d8:	4641      	mov	r1, r8
 80079da:	9805      	ldr	r0, [sp, #20]
 80079dc:	463a      	mov	r2, r7
 80079de:	f003 f8b7 	bl	800ab50 <__lshift>
 80079e2:	4680      	mov	r8, r0
 80079e4:	2800      	cmp	r0, #0
 80079e6:	f43f ae46 	beq.w	8007676 <_strtod_l+0x43e>
 80079ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079ec:	9805      	ldr	r0, [sp, #20]
 80079ee:	464a      	mov	r2, r9
 80079f0:	f003 f936 	bl	800ac60 <__mdiff>
 80079f4:	4604      	mov	r4, r0
 80079f6:	2800      	cmp	r0, #0
 80079f8:	f43f ae3d 	beq.w	8007676 <_strtod_l+0x43e>
 80079fc:	68c3      	ldr	r3, [r0, #12]
 80079fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a00:	2300      	movs	r3, #0
 8007a02:	60c3      	str	r3, [r0, #12]
 8007a04:	4641      	mov	r1, r8
 8007a06:	f003 f90f 	bl	800ac28 <__mcmp>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	da46      	bge.n	8007a9c <_strtod_l+0x864>
 8007a0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a10:	ea53 030a 	orrs.w	r3, r3, sl
 8007a14:	d16c      	bne.n	8007af0 <_strtod_l+0x8b8>
 8007a16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d168      	bne.n	8007af0 <_strtod_l+0x8b8>
 8007a1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007a22:	0d1b      	lsrs	r3, r3, #20
 8007a24:	051b      	lsls	r3, r3, #20
 8007a26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007a2a:	d961      	bls.n	8007af0 <_strtod_l+0x8b8>
 8007a2c:	6963      	ldr	r3, [r4, #20]
 8007a2e:	b913      	cbnz	r3, 8007a36 <_strtod_l+0x7fe>
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	dd5c      	ble.n	8007af0 <_strtod_l+0x8b8>
 8007a36:	4621      	mov	r1, r4
 8007a38:	2201      	movs	r2, #1
 8007a3a:	9805      	ldr	r0, [sp, #20]
 8007a3c:	f003 f888 	bl	800ab50 <__lshift>
 8007a40:	4641      	mov	r1, r8
 8007a42:	4604      	mov	r4, r0
 8007a44:	f003 f8f0 	bl	800ac28 <__mcmp>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	dd51      	ble.n	8007af0 <_strtod_l+0x8b8>
 8007a4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007a50:	9a08      	ldr	r2, [sp, #32]
 8007a52:	0d1b      	lsrs	r3, r3, #20
 8007a54:	051b      	lsls	r3, r3, #20
 8007a56:	2a00      	cmp	r2, #0
 8007a58:	d06b      	beq.n	8007b32 <_strtod_l+0x8fa>
 8007a5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007a5e:	d868      	bhi.n	8007b32 <_strtod_l+0x8fa>
 8007a60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007a64:	f67f ae9d 	bls.w	80077a2 <_strtod_l+0x56a>
 8007a68:	4b0a      	ldr	r3, [pc, #40]	@ (8007a94 <_strtod_l+0x85c>)
 8007a6a:	4650      	mov	r0, sl
 8007a6c:	4659      	mov	r1, fp
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f7f8 fdd2 	bl	8000618 <__aeabi_dmul>
 8007a74:	4b08      	ldr	r3, [pc, #32]	@ (8007a98 <_strtod_l+0x860>)
 8007a76:	400b      	ands	r3, r1
 8007a78:	4682      	mov	sl, r0
 8007a7a:	468b      	mov	fp, r1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f47f ae05 	bne.w	800768c <_strtod_l+0x454>
 8007a82:	9a05      	ldr	r2, [sp, #20]
 8007a84:	2322      	movs	r3, #34	@ 0x22
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	e600      	b.n	800768c <_strtod_l+0x454>
 8007a8a:	bf00      	nop
 8007a8c:	0800bcd8 	.word	0x0800bcd8
 8007a90:	fffffc02 	.word	0xfffffc02
 8007a94:	39500000 	.word	0x39500000
 8007a98:	7ff00000 	.word	0x7ff00000
 8007a9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007aa0:	d165      	bne.n	8007b6e <_strtod_l+0x936>
 8007aa2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007aa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007aa8:	b35a      	cbz	r2, 8007b02 <_strtod_l+0x8ca>
 8007aaa:	4a9f      	ldr	r2, [pc, #636]	@ (8007d28 <_strtod_l+0xaf0>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d12b      	bne.n	8007b08 <_strtod_l+0x8d0>
 8007ab0:	9b08      	ldr	r3, [sp, #32]
 8007ab2:	4651      	mov	r1, sl
 8007ab4:	b303      	cbz	r3, 8007af8 <_strtod_l+0x8c0>
 8007ab6:	4b9d      	ldr	r3, [pc, #628]	@ (8007d2c <_strtod_l+0xaf4>)
 8007ab8:	465a      	mov	r2, fp
 8007aba:	4013      	ands	r3, r2
 8007abc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac4:	d81b      	bhi.n	8007afe <_strtod_l+0x8c6>
 8007ac6:	0d1b      	lsrs	r3, r3, #20
 8007ac8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007acc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad0:	4299      	cmp	r1, r3
 8007ad2:	d119      	bne.n	8007b08 <_strtod_l+0x8d0>
 8007ad4:	4b96      	ldr	r3, [pc, #600]	@ (8007d30 <_strtod_l+0xaf8>)
 8007ad6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d102      	bne.n	8007ae2 <_strtod_l+0x8aa>
 8007adc:	3101      	adds	r1, #1
 8007ade:	f43f adca 	beq.w	8007676 <_strtod_l+0x43e>
 8007ae2:	4b92      	ldr	r3, [pc, #584]	@ (8007d2c <_strtod_l+0xaf4>)
 8007ae4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ae6:	401a      	ands	r2, r3
 8007ae8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007aec:	f04f 0a00 	mov.w	sl, #0
 8007af0:	9b08      	ldr	r3, [sp, #32]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1b8      	bne.n	8007a68 <_strtod_l+0x830>
 8007af6:	e5c9      	b.n	800768c <_strtod_l+0x454>
 8007af8:	f04f 33ff 	mov.w	r3, #4294967295
 8007afc:	e7e8      	b.n	8007ad0 <_strtod_l+0x898>
 8007afe:	4613      	mov	r3, r2
 8007b00:	e7e6      	b.n	8007ad0 <_strtod_l+0x898>
 8007b02:	ea53 030a 	orrs.w	r3, r3, sl
 8007b06:	d0a1      	beq.n	8007a4c <_strtod_l+0x814>
 8007b08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b0a:	b1db      	cbz	r3, 8007b44 <_strtod_l+0x90c>
 8007b0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b0e:	4213      	tst	r3, r2
 8007b10:	d0ee      	beq.n	8007af0 <_strtod_l+0x8b8>
 8007b12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b14:	9a08      	ldr	r2, [sp, #32]
 8007b16:	4650      	mov	r0, sl
 8007b18:	4659      	mov	r1, fp
 8007b1a:	b1bb      	cbz	r3, 8007b4c <_strtod_l+0x914>
 8007b1c:	f7ff fb6e 	bl	80071fc <sulp>
 8007b20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b24:	ec53 2b10 	vmov	r2, r3, d0
 8007b28:	f7f8 fbc0 	bl	80002ac <__adddf3>
 8007b2c:	4682      	mov	sl, r0
 8007b2e:	468b      	mov	fp, r1
 8007b30:	e7de      	b.n	8007af0 <_strtod_l+0x8b8>
 8007b32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007b36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007b3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007b3e:	f04f 3aff 	mov.w	sl, #4294967295
 8007b42:	e7d5      	b.n	8007af0 <_strtod_l+0x8b8>
 8007b44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007b46:	ea13 0f0a 	tst.w	r3, sl
 8007b4a:	e7e1      	b.n	8007b10 <_strtod_l+0x8d8>
 8007b4c:	f7ff fb56 	bl	80071fc <sulp>
 8007b50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b54:	ec53 2b10 	vmov	r2, r3, d0
 8007b58:	f7f8 fba6 	bl	80002a8 <__aeabi_dsub>
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2300      	movs	r3, #0
 8007b60:	4682      	mov	sl, r0
 8007b62:	468b      	mov	fp, r1
 8007b64:	f7f8 ffc0 	bl	8000ae8 <__aeabi_dcmpeq>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d0c1      	beq.n	8007af0 <_strtod_l+0x8b8>
 8007b6c:	e619      	b.n	80077a2 <_strtod_l+0x56a>
 8007b6e:	4641      	mov	r1, r8
 8007b70:	4620      	mov	r0, r4
 8007b72:	f003 f9d1 	bl	800af18 <__ratio>
 8007b76:	ec57 6b10 	vmov	r6, r7, d0
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007b80:	4630      	mov	r0, r6
 8007b82:	4639      	mov	r1, r7
 8007b84:	f7f8 ffc4 	bl	8000b10 <__aeabi_dcmple>
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	d06f      	beq.n	8007c6c <_strtod_l+0xa34>
 8007b8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d17a      	bne.n	8007c88 <_strtod_l+0xa50>
 8007b92:	f1ba 0f00 	cmp.w	sl, #0
 8007b96:	d158      	bne.n	8007c4a <_strtod_l+0xa12>
 8007b98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d15a      	bne.n	8007c58 <_strtod_l+0xa20>
 8007ba2:	4b64      	ldr	r3, [pc, #400]	@ (8007d34 <_strtod_l+0xafc>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	4639      	mov	r1, r7
 8007baa:	f7f8 ffa7 	bl	8000afc <__aeabi_dcmplt>
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	d159      	bne.n	8007c66 <_strtod_l+0xa2e>
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	4639      	mov	r1, r7
 8007bb6:	4b60      	ldr	r3, [pc, #384]	@ (8007d38 <_strtod_l+0xb00>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f7f8 fd2d 	bl	8000618 <__aeabi_dmul>
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	460f      	mov	r7, r1
 8007bc2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007bc6:	9606      	str	r6, [sp, #24]
 8007bc8:	9307      	str	r3, [sp, #28]
 8007bca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bce:	4d57      	ldr	r5, [pc, #348]	@ (8007d2c <_strtod_l+0xaf4>)
 8007bd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007bd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bd6:	401d      	ands	r5, r3
 8007bd8:	4b58      	ldr	r3, [pc, #352]	@ (8007d3c <_strtod_l+0xb04>)
 8007bda:	429d      	cmp	r5, r3
 8007bdc:	f040 80b2 	bne.w	8007d44 <_strtod_l+0xb0c>
 8007be0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007be2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007be6:	ec4b ab10 	vmov	d0, sl, fp
 8007bea:	f003 f8cd 	bl	800ad88 <__ulp>
 8007bee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bf2:	ec51 0b10 	vmov	r0, r1, d0
 8007bf6:	f7f8 fd0f 	bl	8000618 <__aeabi_dmul>
 8007bfa:	4652      	mov	r2, sl
 8007bfc:	465b      	mov	r3, fp
 8007bfe:	f7f8 fb55 	bl	80002ac <__adddf3>
 8007c02:	460b      	mov	r3, r1
 8007c04:	4949      	ldr	r1, [pc, #292]	@ (8007d2c <_strtod_l+0xaf4>)
 8007c06:	4a4e      	ldr	r2, [pc, #312]	@ (8007d40 <_strtod_l+0xb08>)
 8007c08:	4019      	ands	r1, r3
 8007c0a:	4291      	cmp	r1, r2
 8007c0c:	4682      	mov	sl, r0
 8007c0e:	d942      	bls.n	8007c96 <_strtod_l+0xa5e>
 8007c10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007c12:	4b47      	ldr	r3, [pc, #284]	@ (8007d30 <_strtod_l+0xaf8>)
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d103      	bne.n	8007c20 <_strtod_l+0x9e8>
 8007c18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	f43f ad2b 	beq.w	8007676 <_strtod_l+0x43e>
 8007c20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007d30 <_strtod_l+0xaf8>
 8007c24:	f04f 3aff 	mov.w	sl, #4294967295
 8007c28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c2a:	9805      	ldr	r0, [sp, #20]
 8007c2c:	f002 fd78 	bl	800a720 <_Bfree>
 8007c30:	9805      	ldr	r0, [sp, #20]
 8007c32:	4649      	mov	r1, r9
 8007c34:	f002 fd74 	bl	800a720 <_Bfree>
 8007c38:	9805      	ldr	r0, [sp, #20]
 8007c3a:	4641      	mov	r1, r8
 8007c3c:	f002 fd70 	bl	800a720 <_Bfree>
 8007c40:	9805      	ldr	r0, [sp, #20]
 8007c42:	4621      	mov	r1, r4
 8007c44:	f002 fd6c 	bl	800a720 <_Bfree>
 8007c48:	e618      	b.n	800787c <_strtod_l+0x644>
 8007c4a:	f1ba 0f01 	cmp.w	sl, #1
 8007c4e:	d103      	bne.n	8007c58 <_strtod_l+0xa20>
 8007c50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f43f ada5 	beq.w	80077a2 <_strtod_l+0x56a>
 8007c58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007d08 <_strtod_l+0xad0>
 8007c5c:	4f35      	ldr	r7, [pc, #212]	@ (8007d34 <_strtod_l+0xafc>)
 8007c5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007c62:	2600      	movs	r6, #0
 8007c64:	e7b1      	b.n	8007bca <_strtod_l+0x992>
 8007c66:	4f34      	ldr	r7, [pc, #208]	@ (8007d38 <_strtod_l+0xb00>)
 8007c68:	2600      	movs	r6, #0
 8007c6a:	e7aa      	b.n	8007bc2 <_strtod_l+0x98a>
 8007c6c:	4b32      	ldr	r3, [pc, #200]	@ (8007d38 <_strtod_l+0xb00>)
 8007c6e:	4630      	mov	r0, r6
 8007c70:	4639      	mov	r1, r7
 8007c72:	2200      	movs	r2, #0
 8007c74:	f7f8 fcd0 	bl	8000618 <__aeabi_dmul>
 8007c78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c7a:	4606      	mov	r6, r0
 8007c7c:	460f      	mov	r7, r1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d09f      	beq.n	8007bc2 <_strtod_l+0x98a>
 8007c82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007c86:	e7a0      	b.n	8007bca <_strtod_l+0x992>
 8007c88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007d10 <_strtod_l+0xad8>
 8007c8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007c90:	ec57 6b17 	vmov	r6, r7, d7
 8007c94:	e799      	b.n	8007bca <_strtod_l+0x992>
 8007c96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007c9a:	9b08      	ldr	r3, [sp, #32]
 8007c9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1c1      	bne.n	8007c28 <_strtod_l+0x9f0>
 8007ca4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ca8:	0d1b      	lsrs	r3, r3, #20
 8007caa:	051b      	lsls	r3, r3, #20
 8007cac:	429d      	cmp	r5, r3
 8007cae:	d1bb      	bne.n	8007c28 <_strtod_l+0x9f0>
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	4639      	mov	r1, r7
 8007cb4:	f7f9 f810 	bl	8000cd8 <__aeabi_d2lz>
 8007cb8:	f7f8 fc80 	bl	80005bc <__aeabi_l2d>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	f7f8 faf0 	bl	80002a8 <__aeabi_dsub>
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4602      	mov	r2, r0
 8007ccc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007cd0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cd6:	ea46 060a 	orr.w	r6, r6, sl
 8007cda:	431e      	orrs	r6, r3
 8007cdc:	d06f      	beq.n	8007dbe <_strtod_l+0xb86>
 8007cde:	a30e      	add	r3, pc, #56	@ (adr r3, 8007d18 <_strtod_l+0xae0>)
 8007ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce4:	f7f8 ff0a 	bl	8000afc <__aeabi_dcmplt>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	f47f accf 	bne.w	800768c <_strtod_l+0x454>
 8007cee:	a30c      	add	r3, pc, #48	@ (adr r3, 8007d20 <_strtod_l+0xae8>)
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cf8:	f7f8 ff1e 	bl	8000b38 <__aeabi_dcmpgt>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d093      	beq.n	8007c28 <_strtod_l+0x9f0>
 8007d00:	e4c4      	b.n	800768c <_strtod_l+0x454>
 8007d02:	bf00      	nop
 8007d04:	f3af 8000 	nop.w
 8007d08:	00000000 	.word	0x00000000
 8007d0c:	bff00000 	.word	0xbff00000
 8007d10:	00000000 	.word	0x00000000
 8007d14:	3ff00000 	.word	0x3ff00000
 8007d18:	94a03595 	.word	0x94a03595
 8007d1c:	3fdfffff 	.word	0x3fdfffff
 8007d20:	35afe535 	.word	0x35afe535
 8007d24:	3fe00000 	.word	0x3fe00000
 8007d28:	000fffff 	.word	0x000fffff
 8007d2c:	7ff00000 	.word	0x7ff00000
 8007d30:	7fefffff 	.word	0x7fefffff
 8007d34:	3ff00000 	.word	0x3ff00000
 8007d38:	3fe00000 	.word	0x3fe00000
 8007d3c:	7fe00000 	.word	0x7fe00000
 8007d40:	7c9fffff 	.word	0x7c9fffff
 8007d44:	9b08      	ldr	r3, [sp, #32]
 8007d46:	b323      	cbz	r3, 8007d92 <_strtod_l+0xb5a>
 8007d48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007d4c:	d821      	bhi.n	8007d92 <_strtod_l+0xb5a>
 8007d4e:	a328      	add	r3, pc, #160	@ (adr r3, 8007df0 <_strtod_l+0xbb8>)
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	4630      	mov	r0, r6
 8007d56:	4639      	mov	r1, r7
 8007d58:	f7f8 feda 	bl	8000b10 <__aeabi_dcmple>
 8007d5c:	b1a0      	cbz	r0, 8007d88 <_strtod_l+0xb50>
 8007d5e:	4639      	mov	r1, r7
 8007d60:	4630      	mov	r0, r6
 8007d62:	f7f8 ff31 	bl	8000bc8 <__aeabi_d2uiz>
 8007d66:	2801      	cmp	r0, #1
 8007d68:	bf38      	it	cc
 8007d6a:	2001      	movcc	r0, #1
 8007d6c:	f7f8 fbda 	bl	8000524 <__aeabi_ui2d>
 8007d70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d72:	4606      	mov	r6, r0
 8007d74:	460f      	mov	r7, r1
 8007d76:	b9fb      	cbnz	r3, 8007db8 <_strtod_l+0xb80>
 8007d78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007d7c:	9014      	str	r0, [sp, #80]	@ 0x50
 8007d7e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007d80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007d84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007d88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007d8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007d8e:	1b5b      	subs	r3, r3, r5
 8007d90:	9311      	str	r3, [sp, #68]	@ 0x44
 8007d92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007d96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007d9a:	f002 fff5 	bl	800ad88 <__ulp>
 8007d9e:	4650      	mov	r0, sl
 8007da0:	ec53 2b10 	vmov	r2, r3, d0
 8007da4:	4659      	mov	r1, fp
 8007da6:	f7f8 fc37 	bl	8000618 <__aeabi_dmul>
 8007daa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007dae:	f7f8 fa7d 	bl	80002ac <__adddf3>
 8007db2:	4682      	mov	sl, r0
 8007db4:	468b      	mov	fp, r1
 8007db6:	e770      	b.n	8007c9a <_strtod_l+0xa62>
 8007db8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007dbc:	e7e0      	b.n	8007d80 <_strtod_l+0xb48>
 8007dbe:	a30e      	add	r3, pc, #56	@ (adr r3, 8007df8 <_strtod_l+0xbc0>)
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	f7f8 fe9a 	bl	8000afc <__aeabi_dcmplt>
 8007dc8:	e798      	b.n	8007cfc <_strtod_l+0xac4>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007dd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	f7ff ba6d 	b.w	80072b2 <_strtod_l+0x7a>
 8007dd8:	2a65      	cmp	r2, #101	@ 0x65
 8007dda:	f43f ab66 	beq.w	80074aa <_strtod_l+0x272>
 8007dde:	2a45      	cmp	r2, #69	@ 0x45
 8007de0:	f43f ab63 	beq.w	80074aa <_strtod_l+0x272>
 8007de4:	2301      	movs	r3, #1
 8007de6:	f7ff bb9e 	b.w	8007526 <_strtod_l+0x2ee>
 8007dea:	bf00      	nop
 8007dec:	f3af 8000 	nop.w
 8007df0:	ffc00000 	.word	0xffc00000
 8007df4:	41dfffff 	.word	0x41dfffff
 8007df8:	94a03595 	.word	0x94a03595
 8007dfc:	3fcfffff 	.word	0x3fcfffff

08007e00 <_strtod_r>:
 8007e00:	4b01      	ldr	r3, [pc, #4]	@ (8007e08 <_strtod_r+0x8>)
 8007e02:	f7ff ba19 	b.w	8007238 <_strtod_l>
 8007e06:	bf00      	nop
 8007e08:	20000018 	.word	0x20000018

08007e0c <strtof>:
 8007e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e10:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8007ed0 <strtof+0xc4>
 8007e14:	4b29      	ldr	r3, [pc, #164]	@ (8007ebc <strtof+0xb0>)
 8007e16:	460a      	mov	r2, r1
 8007e18:	ed2d 8b02 	vpush	{d8}
 8007e1c:	4601      	mov	r1, r0
 8007e1e:	f8d8 0000 	ldr.w	r0, [r8]
 8007e22:	f7ff fa09 	bl	8007238 <_strtod_l>
 8007e26:	ec55 4b10 	vmov	r4, r5, d0
 8007e2a:	4622      	mov	r2, r4
 8007e2c:	462b      	mov	r3, r5
 8007e2e:	4620      	mov	r0, r4
 8007e30:	4629      	mov	r1, r5
 8007e32:	f7f8 fe8b 	bl	8000b4c <__aeabi_dcmpun>
 8007e36:	b190      	cbz	r0, 8007e5e <strtof+0x52>
 8007e38:	2d00      	cmp	r5, #0
 8007e3a:	4821      	ldr	r0, [pc, #132]	@ (8007ec0 <strtof+0xb4>)
 8007e3c:	da09      	bge.n	8007e52 <strtof+0x46>
 8007e3e:	f001 f98f 	bl	8009160 <nanf>
 8007e42:	eeb1 8a40 	vneg.f32	s16, s0
 8007e46:	eeb0 0a48 	vmov.f32	s0, s16
 8007e4a:	ecbd 8b02 	vpop	{d8}
 8007e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e52:	ecbd 8b02 	vpop	{d8}
 8007e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e5a:	f001 b981 	b.w	8009160 <nanf>
 8007e5e:	4620      	mov	r0, r4
 8007e60:	4629      	mov	r1, r5
 8007e62:	f7f8 fed1 	bl	8000c08 <__aeabi_d2f>
 8007e66:	ee08 0a10 	vmov	s16, r0
 8007e6a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8007ec4 <strtof+0xb8>
 8007e6e:	eeb0 7ac8 	vabs.f32	s14, s16
 8007e72:	eeb4 7a67 	vcmp.f32	s14, s15
 8007e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e7a:	dd11      	ble.n	8007ea0 <strtof+0x94>
 8007e7c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8007e80:	4b11      	ldr	r3, [pc, #68]	@ (8007ec8 <strtof+0xbc>)
 8007e82:	f04f 32ff 	mov.w	r2, #4294967295
 8007e86:	4620      	mov	r0, r4
 8007e88:	4639      	mov	r1, r7
 8007e8a:	f7f8 fe5f 	bl	8000b4c <__aeabi_dcmpun>
 8007e8e:	b980      	cbnz	r0, 8007eb2 <strtof+0xa6>
 8007e90:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec8 <strtof+0xbc>)
 8007e92:	f04f 32ff 	mov.w	r2, #4294967295
 8007e96:	4620      	mov	r0, r4
 8007e98:	4639      	mov	r1, r7
 8007e9a:	f7f8 fe39 	bl	8000b10 <__aeabi_dcmple>
 8007e9e:	b940      	cbnz	r0, 8007eb2 <strtof+0xa6>
 8007ea0:	ee18 3a10 	vmov	r3, s16
 8007ea4:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8007ea8:	d1cd      	bne.n	8007e46 <strtof+0x3a>
 8007eaa:	4b08      	ldr	r3, [pc, #32]	@ (8007ecc <strtof+0xc0>)
 8007eac:	402b      	ands	r3, r5
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0c9      	beq.n	8007e46 <strtof+0x3a>
 8007eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8007eb6:	2222      	movs	r2, #34	@ 0x22
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	e7c4      	b.n	8007e46 <strtof+0x3a>
 8007ebc:	20000018 	.word	0x20000018
 8007ec0:	0800c0d5 	.word	0x0800c0d5
 8007ec4:	7f7fffff 	.word	0x7f7fffff
 8007ec8:	7fefffff 	.word	0x7fefffff
 8007ecc:	7ff00000 	.word	0x7ff00000
 8007ed0:	20000184 	.word	0x20000184

08007ed4 <__cvt>:
 8007ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed8:	ec57 6b10 	vmov	r6, r7, d0
 8007edc:	2f00      	cmp	r7, #0
 8007ede:	460c      	mov	r4, r1
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	463b      	mov	r3, r7
 8007ee4:	bfbb      	ittet	lt
 8007ee6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007eea:	461f      	movlt	r7, r3
 8007eec:	2300      	movge	r3, #0
 8007eee:	232d      	movlt	r3, #45	@ 0x2d
 8007ef0:	700b      	strb	r3, [r1, #0]
 8007ef2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ef4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007ef8:	4691      	mov	r9, r2
 8007efa:	f023 0820 	bic.w	r8, r3, #32
 8007efe:	bfbc      	itt	lt
 8007f00:	4632      	movlt	r2, r6
 8007f02:	4616      	movlt	r6, r2
 8007f04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007f08:	d005      	beq.n	8007f16 <__cvt+0x42>
 8007f0a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007f0e:	d100      	bne.n	8007f12 <__cvt+0x3e>
 8007f10:	3401      	adds	r4, #1
 8007f12:	2102      	movs	r1, #2
 8007f14:	e000      	b.n	8007f18 <__cvt+0x44>
 8007f16:	2103      	movs	r1, #3
 8007f18:	ab03      	add	r3, sp, #12
 8007f1a:	9301      	str	r3, [sp, #4]
 8007f1c:	ab02      	add	r3, sp, #8
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	ec47 6b10 	vmov	d0, r6, r7
 8007f24:	4653      	mov	r3, sl
 8007f26:	4622      	mov	r2, r4
 8007f28:	f001 f9aa 	bl	8009280 <_dtoa_r>
 8007f2c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007f30:	4605      	mov	r5, r0
 8007f32:	d119      	bne.n	8007f68 <__cvt+0x94>
 8007f34:	f019 0f01 	tst.w	r9, #1
 8007f38:	d00e      	beq.n	8007f58 <__cvt+0x84>
 8007f3a:	eb00 0904 	add.w	r9, r0, r4
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2300      	movs	r3, #0
 8007f42:	4630      	mov	r0, r6
 8007f44:	4639      	mov	r1, r7
 8007f46:	f7f8 fdcf 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f4a:	b108      	cbz	r0, 8007f50 <__cvt+0x7c>
 8007f4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f50:	2230      	movs	r2, #48	@ 0x30
 8007f52:	9b03      	ldr	r3, [sp, #12]
 8007f54:	454b      	cmp	r3, r9
 8007f56:	d31e      	bcc.n	8007f96 <__cvt+0xc2>
 8007f58:	9b03      	ldr	r3, [sp, #12]
 8007f5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f5c:	1b5b      	subs	r3, r3, r5
 8007f5e:	4628      	mov	r0, r5
 8007f60:	6013      	str	r3, [r2, #0]
 8007f62:	b004      	add	sp, #16
 8007f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007f6c:	eb00 0904 	add.w	r9, r0, r4
 8007f70:	d1e5      	bne.n	8007f3e <__cvt+0x6a>
 8007f72:	7803      	ldrb	r3, [r0, #0]
 8007f74:	2b30      	cmp	r3, #48	@ 0x30
 8007f76:	d10a      	bne.n	8007f8e <__cvt+0xba>
 8007f78:	2200      	movs	r2, #0
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	4639      	mov	r1, r7
 8007f80:	f7f8 fdb2 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f84:	b918      	cbnz	r0, 8007f8e <__cvt+0xba>
 8007f86:	f1c4 0401 	rsb	r4, r4, #1
 8007f8a:	f8ca 4000 	str.w	r4, [sl]
 8007f8e:	f8da 3000 	ldr.w	r3, [sl]
 8007f92:	4499      	add	r9, r3
 8007f94:	e7d3      	b.n	8007f3e <__cvt+0x6a>
 8007f96:	1c59      	adds	r1, r3, #1
 8007f98:	9103      	str	r1, [sp, #12]
 8007f9a:	701a      	strb	r2, [r3, #0]
 8007f9c:	e7d9      	b.n	8007f52 <__cvt+0x7e>

08007f9e <__exponent>:
 8007f9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fa0:	2900      	cmp	r1, #0
 8007fa2:	bfba      	itte	lt
 8007fa4:	4249      	neglt	r1, r1
 8007fa6:	232d      	movlt	r3, #45	@ 0x2d
 8007fa8:	232b      	movge	r3, #43	@ 0x2b
 8007faa:	2909      	cmp	r1, #9
 8007fac:	7002      	strb	r2, [r0, #0]
 8007fae:	7043      	strb	r3, [r0, #1]
 8007fb0:	dd29      	ble.n	8008006 <__exponent+0x68>
 8007fb2:	f10d 0307 	add.w	r3, sp, #7
 8007fb6:	461d      	mov	r5, r3
 8007fb8:	270a      	movs	r7, #10
 8007fba:	461a      	mov	r2, r3
 8007fbc:	fbb1 f6f7 	udiv	r6, r1, r7
 8007fc0:	fb07 1416 	mls	r4, r7, r6, r1
 8007fc4:	3430      	adds	r4, #48	@ 0x30
 8007fc6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007fca:	460c      	mov	r4, r1
 8007fcc:	2c63      	cmp	r4, #99	@ 0x63
 8007fce:	f103 33ff 	add.w	r3, r3, #4294967295
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	dcf1      	bgt.n	8007fba <__exponent+0x1c>
 8007fd6:	3130      	adds	r1, #48	@ 0x30
 8007fd8:	1e94      	subs	r4, r2, #2
 8007fda:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007fde:	1c41      	adds	r1, r0, #1
 8007fe0:	4623      	mov	r3, r4
 8007fe2:	42ab      	cmp	r3, r5
 8007fe4:	d30a      	bcc.n	8007ffc <__exponent+0x5e>
 8007fe6:	f10d 0309 	add.w	r3, sp, #9
 8007fea:	1a9b      	subs	r3, r3, r2
 8007fec:	42ac      	cmp	r4, r5
 8007fee:	bf88      	it	hi
 8007ff0:	2300      	movhi	r3, #0
 8007ff2:	3302      	adds	r3, #2
 8007ff4:	4403      	add	r3, r0
 8007ff6:	1a18      	subs	r0, r3, r0
 8007ff8:	b003      	add	sp, #12
 8007ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ffc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008000:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008004:	e7ed      	b.n	8007fe2 <__exponent+0x44>
 8008006:	2330      	movs	r3, #48	@ 0x30
 8008008:	3130      	adds	r1, #48	@ 0x30
 800800a:	7083      	strb	r3, [r0, #2]
 800800c:	70c1      	strb	r1, [r0, #3]
 800800e:	1d03      	adds	r3, r0, #4
 8008010:	e7f1      	b.n	8007ff6 <__exponent+0x58>
	...

08008014 <_printf_float>:
 8008014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008018:	b08d      	sub	sp, #52	@ 0x34
 800801a:	460c      	mov	r4, r1
 800801c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008020:	4616      	mov	r6, r2
 8008022:	461f      	mov	r7, r3
 8008024:	4605      	mov	r5, r0
 8008026:	f001 f805 	bl	8009034 <_localeconv_r>
 800802a:	6803      	ldr	r3, [r0, #0]
 800802c:	9304      	str	r3, [sp, #16]
 800802e:	4618      	mov	r0, r3
 8008030:	f7f8 f92e 	bl	8000290 <strlen>
 8008034:	2300      	movs	r3, #0
 8008036:	930a      	str	r3, [sp, #40]	@ 0x28
 8008038:	f8d8 3000 	ldr.w	r3, [r8]
 800803c:	9005      	str	r0, [sp, #20]
 800803e:	3307      	adds	r3, #7
 8008040:	f023 0307 	bic.w	r3, r3, #7
 8008044:	f103 0208 	add.w	r2, r3, #8
 8008048:	f894 a018 	ldrb.w	sl, [r4, #24]
 800804c:	f8d4 b000 	ldr.w	fp, [r4]
 8008050:	f8c8 2000 	str.w	r2, [r8]
 8008054:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008058:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800805c:	9307      	str	r3, [sp, #28]
 800805e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008062:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008066:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800806a:	4b9c      	ldr	r3, [pc, #624]	@ (80082dc <_printf_float+0x2c8>)
 800806c:	f04f 32ff 	mov.w	r2, #4294967295
 8008070:	f7f8 fd6c 	bl	8000b4c <__aeabi_dcmpun>
 8008074:	bb70      	cbnz	r0, 80080d4 <_printf_float+0xc0>
 8008076:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800807a:	4b98      	ldr	r3, [pc, #608]	@ (80082dc <_printf_float+0x2c8>)
 800807c:	f04f 32ff 	mov.w	r2, #4294967295
 8008080:	f7f8 fd46 	bl	8000b10 <__aeabi_dcmple>
 8008084:	bb30      	cbnz	r0, 80080d4 <_printf_float+0xc0>
 8008086:	2200      	movs	r2, #0
 8008088:	2300      	movs	r3, #0
 800808a:	4640      	mov	r0, r8
 800808c:	4649      	mov	r1, r9
 800808e:	f7f8 fd35 	bl	8000afc <__aeabi_dcmplt>
 8008092:	b110      	cbz	r0, 800809a <_printf_float+0x86>
 8008094:	232d      	movs	r3, #45	@ 0x2d
 8008096:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800809a:	4a91      	ldr	r2, [pc, #580]	@ (80082e0 <_printf_float+0x2cc>)
 800809c:	4b91      	ldr	r3, [pc, #580]	@ (80082e4 <_printf_float+0x2d0>)
 800809e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80080a2:	bf94      	ite	ls
 80080a4:	4690      	movls	r8, r2
 80080a6:	4698      	movhi	r8, r3
 80080a8:	2303      	movs	r3, #3
 80080aa:	6123      	str	r3, [r4, #16]
 80080ac:	f02b 0304 	bic.w	r3, fp, #4
 80080b0:	6023      	str	r3, [r4, #0]
 80080b2:	f04f 0900 	mov.w	r9, #0
 80080b6:	9700      	str	r7, [sp, #0]
 80080b8:	4633      	mov	r3, r6
 80080ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80080bc:	4621      	mov	r1, r4
 80080be:	4628      	mov	r0, r5
 80080c0:	f000 f9d2 	bl	8008468 <_printf_common>
 80080c4:	3001      	adds	r0, #1
 80080c6:	f040 808d 	bne.w	80081e4 <_printf_float+0x1d0>
 80080ca:	f04f 30ff 	mov.w	r0, #4294967295
 80080ce:	b00d      	add	sp, #52	@ 0x34
 80080d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d4:	4642      	mov	r2, r8
 80080d6:	464b      	mov	r3, r9
 80080d8:	4640      	mov	r0, r8
 80080da:	4649      	mov	r1, r9
 80080dc:	f7f8 fd36 	bl	8000b4c <__aeabi_dcmpun>
 80080e0:	b140      	cbz	r0, 80080f4 <_printf_float+0xe0>
 80080e2:	464b      	mov	r3, r9
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	bfbc      	itt	lt
 80080e8:	232d      	movlt	r3, #45	@ 0x2d
 80080ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80080ee:	4a7e      	ldr	r2, [pc, #504]	@ (80082e8 <_printf_float+0x2d4>)
 80080f0:	4b7e      	ldr	r3, [pc, #504]	@ (80082ec <_printf_float+0x2d8>)
 80080f2:	e7d4      	b.n	800809e <_printf_float+0x8a>
 80080f4:	6863      	ldr	r3, [r4, #4]
 80080f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80080fa:	9206      	str	r2, [sp, #24]
 80080fc:	1c5a      	adds	r2, r3, #1
 80080fe:	d13b      	bne.n	8008178 <_printf_float+0x164>
 8008100:	2306      	movs	r3, #6
 8008102:	6063      	str	r3, [r4, #4]
 8008104:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008108:	2300      	movs	r3, #0
 800810a:	6022      	str	r2, [r4, #0]
 800810c:	9303      	str	r3, [sp, #12]
 800810e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008110:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008114:	ab09      	add	r3, sp, #36	@ 0x24
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	6861      	ldr	r1, [r4, #4]
 800811a:	ec49 8b10 	vmov	d0, r8, r9
 800811e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008122:	4628      	mov	r0, r5
 8008124:	f7ff fed6 	bl	8007ed4 <__cvt>
 8008128:	9b06      	ldr	r3, [sp, #24]
 800812a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800812c:	2b47      	cmp	r3, #71	@ 0x47
 800812e:	4680      	mov	r8, r0
 8008130:	d129      	bne.n	8008186 <_printf_float+0x172>
 8008132:	1cc8      	adds	r0, r1, #3
 8008134:	db02      	blt.n	800813c <_printf_float+0x128>
 8008136:	6863      	ldr	r3, [r4, #4]
 8008138:	4299      	cmp	r1, r3
 800813a:	dd41      	ble.n	80081c0 <_printf_float+0x1ac>
 800813c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008140:	fa5f fa8a 	uxtb.w	sl, sl
 8008144:	3901      	subs	r1, #1
 8008146:	4652      	mov	r2, sl
 8008148:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800814c:	9109      	str	r1, [sp, #36]	@ 0x24
 800814e:	f7ff ff26 	bl	8007f9e <__exponent>
 8008152:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008154:	1813      	adds	r3, r2, r0
 8008156:	2a01      	cmp	r2, #1
 8008158:	4681      	mov	r9, r0
 800815a:	6123      	str	r3, [r4, #16]
 800815c:	dc02      	bgt.n	8008164 <_printf_float+0x150>
 800815e:	6822      	ldr	r2, [r4, #0]
 8008160:	07d2      	lsls	r2, r2, #31
 8008162:	d501      	bpl.n	8008168 <_printf_float+0x154>
 8008164:	3301      	adds	r3, #1
 8008166:	6123      	str	r3, [r4, #16]
 8008168:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800816c:	2b00      	cmp	r3, #0
 800816e:	d0a2      	beq.n	80080b6 <_printf_float+0xa2>
 8008170:	232d      	movs	r3, #45	@ 0x2d
 8008172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008176:	e79e      	b.n	80080b6 <_printf_float+0xa2>
 8008178:	9a06      	ldr	r2, [sp, #24]
 800817a:	2a47      	cmp	r2, #71	@ 0x47
 800817c:	d1c2      	bne.n	8008104 <_printf_float+0xf0>
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1c0      	bne.n	8008104 <_printf_float+0xf0>
 8008182:	2301      	movs	r3, #1
 8008184:	e7bd      	b.n	8008102 <_printf_float+0xee>
 8008186:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800818a:	d9db      	bls.n	8008144 <_printf_float+0x130>
 800818c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008190:	d118      	bne.n	80081c4 <_printf_float+0x1b0>
 8008192:	2900      	cmp	r1, #0
 8008194:	6863      	ldr	r3, [r4, #4]
 8008196:	dd0b      	ble.n	80081b0 <_printf_float+0x19c>
 8008198:	6121      	str	r1, [r4, #16]
 800819a:	b913      	cbnz	r3, 80081a2 <_printf_float+0x18e>
 800819c:	6822      	ldr	r2, [r4, #0]
 800819e:	07d0      	lsls	r0, r2, #31
 80081a0:	d502      	bpl.n	80081a8 <_printf_float+0x194>
 80081a2:	3301      	adds	r3, #1
 80081a4:	440b      	add	r3, r1
 80081a6:	6123      	str	r3, [r4, #16]
 80081a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80081aa:	f04f 0900 	mov.w	r9, #0
 80081ae:	e7db      	b.n	8008168 <_printf_float+0x154>
 80081b0:	b913      	cbnz	r3, 80081b8 <_printf_float+0x1a4>
 80081b2:	6822      	ldr	r2, [r4, #0]
 80081b4:	07d2      	lsls	r2, r2, #31
 80081b6:	d501      	bpl.n	80081bc <_printf_float+0x1a8>
 80081b8:	3302      	adds	r3, #2
 80081ba:	e7f4      	b.n	80081a6 <_printf_float+0x192>
 80081bc:	2301      	movs	r3, #1
 80081be:	e7f2      	b.n	80081a6 <_printf_float+0x192>
 80081c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80081c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081c6:	4299      	cmp	r1, r3
 80081c8:	db05      	blt.n	80081d6 <_printf_float+0x1c2>
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	6121      	str	r1, [r4, #16]
 80081ce:	07d8      	lsls	r0, r3, #31
 80081d0:	d5ea      	bpl.n	80081a8 <_printf_float+0x194>
 80081d2:	1c4b      	adds	r3, r1, #1
 80081d4:	e7e7      	b.n	80081a6 <_printf_float+0x192>
 80081d6:	2900      	cmp	r1, #0
 80081d8:	bfd4      	ite	le
 80081da:	f1c1 0202 	rsble	r2, r1, #2
 80081de:	2201      	movgt	r2, #1
 80081e0:	4413      	add	r3, r2
 80081e2:	e7e0      	b.n	80081a6 <_printf_float+0x192>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	055a      	lsls	r2, r3, #21
 80081e8:	d407      	bmi.n	80081fa <_printf_float+0x1e6>
 80081ea:	6923      	ldr	r3, [r4, #16]
 80081ec:	4642      	mov	r2, r8
 80081ee:	4631      	mov	r1, r6
 80081f0:	4628      	mov	r0, r5
 80081f2:	47b8      	blx	r7
 80081f4:	3001      	adds	r0, #1
 80081f6:	d12b      	bne.n	8008250 <_printf_float+0x23c>
 80081f8:	e767      	b.n	80080ca <_printf_float+0xb6>
 80081fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80081fe:	f240 80dd 	bls.w	80083bc <_printf_float+0x3a8>
 8008202:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008206:	2200      	movs	r2, #0
 8008208:	2300      	movs	r3, #0
 800820a:	f7f8 fc6d 	bl	8000ae8 <__aeabi_dcmpeq>
 800820e:	2800      	cmp	r0, #0
 8008210:	d033      	beq.n	800827a <_printf_float+0x266>
 8008212:	4a37      	ldr	r2, [pc, #220]	@ (80082f0 <_printf_float+0x2dc>)
 8008214:	2301      	movs	r3, #1
 8008216:	4631      	mov	r1, r6
 8008218:	4628      	mov	r0, r5
 800821a:	47b8      	blx	r7
 800821c:	3001      	adds	r0, #1
 800821e:	f43f af54 	beq.w	80080ca <_printf_float+0xb6>
 8008222:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008226:	4543      	cmp	r3, r8
 8008228:	db02      	blt.n	8008230 <_printf_float+0x21c>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	07d8      	lsls	r0, r3, #31
 800822e:	d50f      	bpl.n	8008250 <_printf_float+0x23c>
 8008230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008234:	4631      	mov	r1, r6
 8008236:	4628      	mov	r0, r5
 8008238:	47b8      	blx	r7
 800823a:	3001      	adds	r0, #1
 800823c:	f43f af45 	beq.w	80080ca <_printf_float+0xb6>
 8008240:	f04f 0900 	mov.w	r9, #0
 8008244:	f108 38ff 	add.w	r8, r8, #4294967295
 8008248:	f104 0a1a 	add.w	sl, r4, #26
 800824c:	45c8      	cmp	r8, r9
 800824e:	dc09      	bgt.n	8008264 <_printf_float+0x250>
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	079b      	lsls	r3, r3, #30
 8008254:	f100 8103 	bmi.w	800845e <_printf_float+0x44a>
 8008258:	68e0      	ldr	r0, [r4, #12]
 800825a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800825c:	4298      	cmp	r0, r3
 800825e:	bfb8      	it	lt
 8008260:	4618      	movlt	r0, r3
 8008262:	e734      	b.n	80080ce <_printf_float+0xba>
 8008264:	2301      	movs	r3, #1
 8008266:	4652      	mov	r2, sl
 8008268:	4631      	mov	r1, r6
 800826a:	4628      	mov	r0, r5
 800826c:	47b8      	blx	r7
 800826e:	3001      	adds	r0, #1
 8008270:	f43f af2b 	beq.w	80080ca <_printf_float+0xb6>
 8008274:	f109 0901 	add.w	r9, r9, #1
 8008278:	e7e8      	b.n	800824c <_printf_float+0x238>
 800827a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800827c:	2b00      	cmp	r3, #0
 800827e:	dc39      	bgt.n	80082f4 <_printf_float+0x2e0>
 8008280:	4a1b      	ldr	r2, [pc, #108]	@ (80082f0 <_printf_float+0x2dc>)
 8008282:	2301      	movs	r3, #1
 8008284:	4631      	mov	r1, r6
 8008286:	4628      	mov	r0, r5
 8008288:	47b8      	blx	r7
 800828a:	3001      	adds	r0, #1
 800828c:	f43f af1d 	beq.w	80080ca <_printf_float+0xb6>
 8008290:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008294:	ea59 0303 	orrs.w	r3, r9, r3
 8008298:	d102      	bne.n	80082a0 <_printf_float+0x28c>
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	07d9      	lsls	r1, r3, #31
 800829e:	d5d7      	bpl.n	8008250 <_printf_float+0x23c>
 80082a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082a4:	4631      	mov	r1, r6
 80082a6:	4628      	mov	r0, r5
 80082a8:	47b8      	blx	r7
 80082aa:	3001      	adds	r0, #1
 80082ac:	f43f af0d 	beq.w	80080ca <_printf_float+0xb6>
 80082b0:	f04f 0a00 	mov.w	sl, #0
 80082b4:	f104 0b1a 	add.w	fp, r4, #26
 80082b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ba:	425b      	negs	r3, r3
 80082bc:	4553      	cmp	r3, sl
 80082be:	dc01      	bgt.n	80082c4 <_printf_float+0x2b0>
 80082c0:	464b      	mov	r3, r9
 80082c2:	e793      	b.n	80081ec <_printf_float+0x1d8>
 80082c4:	2301      	movs	r3, #1
 80082c6:	465a      	mov	r2, fp
 80082c8:	4631      	mov	r1, r6
 80082ca:	4628      	mov	r0, r5
 80082cc:	47b8      	blx	r7
 80082ce:	3001      	adds	r0, #1
 80082d0:	f43f aefb 	beq.w	80080ca <_printf_float+0xb6>
 80082d4:	f10a 0a01 	add.w	sl, sl, #1
 80082d8:	e7ee      	b.n	80082b8 <_printf_float+0x2a4>
 80082da:	bf00      	nop
 80082dc:	7fefffff 	.word	0x7fefffff
 80082e0:	0800bd00 	.word	0x0800bd00
 80082e4:	0800bd04 	.word	0x0800bd04
 80082e8:	0800bd08 	.word	0x0800bd08
 80082ec:	0800bd0c 	.word	0x0800bd0c
 80082f0:	0800bd10 	.word	0x0800bd10
 80082f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80082f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80082fa:	4553      	cmp	r3, sl
 80082fc:	bfa8      	it	ge
 80082fe:	4653      	movge	r3, sl
 8008300:	2b00      	cmp	r3, #0
 8008302:	4699      	mov	r9, r3
 8008304:	dc36      	bgt.n	8008374 <_printf_float+0x360>
 8008306:	f04f 0b00 	mov.w	fp, #0
 800830a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800830e:	f104 021a 	add.w	r2, r4, #26
 8008312:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008314:	9306      	str	r3, [sp, #24]
 8008316:	eba3 0309 	sub.w	r3, r3, r9
 800831a:	455b      	cmp	r3, fp
 800831c:	dc31      	bgt.n	8008382 <_printf_float+0x36e>
 800831e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008320:	459a      	cmp	sl, r3
 8008322:	dc3a      	bgt.n	800839a <_printf_float+0x386>
 8008324:	6823      	ldr	r3, [r4, #0]
 8008326:	07da      	lsls	r2, r3, #31
 8008328:	d437      	bmi.n	800839a <_printf_float+0x386>
 800832a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800832c:	ebaa 0903 	sub.w	r9, sl, r3
 8008330:	9b06      	ldr	r3, [sp, #24]
 8008332:	ebaa 0303 	sub.w	r3, sl, r3
 8008336:	4599      	cmp	r9, r3
 8008338:	bfa8      	it	ge
 800833a:	4699      	movge	r9, r3
 800833c:	f1b9 0f00 	cmp.w	r9, #0
 8008340:	dc33      	bgt.n	80083aa <_printf_float+0x396>
 8008342:	f04f 0800 	mov.w	r8, #0
 8008346:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800834a:	f104 0b1a 	add.w	fp, r4, #26
 800834e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008350:	ebaa 0303 	sub.w	r3, sl, r3
 8008354:	eba3 0309 	sub.w	r3, r3, r9
 8008358:	4543      	cmp	r3, r8
 800835a:	f77f af79 	ble.w	8008250 <_printf_float+0x23c>
 800835e:	2301      	movs	r3, #1
 8008360:	465a      	mov	r2, fp
 8008362:	4631      	mov	r1, r6
 8008364:	4628      	mov	r0, r5
 8008366:	47b8      	blx	r7
 8008368:	3001      	adds	r0, #1
 800836a:	f43f aeae 	beq.w	80080ca <_printf_float+0xb6>
 800836e:	f108 0801 	add.w	r8, r8, #1
 8008372:	e7ec      	b.n	800834e <_printf_float+0x33a>
 8008374:	4642      	mov	r2, r8
 8008376:	4631      	mov	r1, r6
 8008378:	4628      	mov	r0, r5
 800837a:	47b8      	blx	r7
 800837c:	3001      	adds	r0, #1
 800837e:	d1c2      	bne.n	8008306 <_printf_float+0x2f2>
 8008380:	e6a3      	b.n	80080ca <_printf_float+0xb6>
 8008382:	2301      	movs	r3, #1
 8008384:	4631      	mov	r1, r6
 8008386:	4628      	mov	r0, r5
 8008388:	9206      	str	r2, [sp, #24]
 800838a:	47b8      	blx	r7
 800838c:	3001      	adds	r0, #1
 800838e:	f43f ae9c 	beq.w	80080ca <_printf_float+0xb6>
 8008392:	9a06      	ldr	r2, [sp, #24]
 8008394:	f10b 0b01 	add.w	fp, fp, #1
 8008398:	e7bb      	b.n	8008312 <_printf_float+0x2fe>
 800839a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800839e:	4631      	mov	r1, r6
 80083a0:	4628      	mov	r0, r5
 80083a2:	47b8      	blx	r7
 80083a4:	3001      	adds	r0, #1
 80083a6:	d1c0      	bne.n	800832a <_printf_float+0x316>
 80083a8:	e68f      	b.n	80080ca <_printf_float+0xb6>
 80083aa:	9a06      	ldr	r2, [sp, #24]
 80083ac:	464b      	mov	r3, r9
 80083ae:	4442      	add	r2, r8
 80083b0:	4631      	mov	r1, r6
 80083b2:	4628      	mov	r0, r5
 80083b4:	47b8      	blx	r7
 80083b6:	3001      	adds	r0, #1
 80083b8:	d1c3      	bne.n	8008342 <_printf_float+0x32e>
 80083ba:	e686      	b.n	80080ca <_printf_float+0xb6>
 80083bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80083c0:	f1ba 0f01 	cmp.w	sl, #1
 80083c4:	dc01      	bgt.n	80083ca <_printf_float+0x3b6>
 80083c6:	07db      	lsls	r3, r3, #31
 80083c8:	d536      	bpl.n	8008438 <_printf_float+0x424>
 80083ca:	2301      	movs	r3, #1
 80083cc:	4642      	mov	r2, r8
 80083ce:	4631      	mov	r1, r6
 80083d0:	4628      	mov	r0, r5
 80083d2:	47b8      	blx	r7
 80083d4:	3001      	adds	r0, #1
 80083d6:	f43f ae78 	beq.w	80080ca <_printf_float+0xb6>
 80083da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083de:	4631      	mov	r1, r6
 80083e0:	4628      	mov	r0, r5
 80083e2:	47b8      	blx	r7
 80083e4:	3001      	adds	r0, #1
 80083e6:	f43f ae70 	beq.w	80080ca <_printf_float+0xb6>
 80083ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80083ee:	2200      	movs	r2, #0
 80083f0:	2300      	movs	r3, #0
 80083f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083f6:	f7f8 fb77 	bl	8000ae8 <__aeabi_dcmpeq>
 80083fa:	b9c0      	cbnz	r0, 800842e <_printf_float+0x41a>
 80083fc:	4653      	mov	r3, sl
 80083fe:	f108 0201 	add.w	r2, r8, #1
 8008402:	4631      	mov	r1, r6
 8008404:	4628      	mov	r0, r5
 8008406:	47b8      	blx	r7
 8008408:	3001      	adds	r0, #1
 800840a:	d10c      	bne.n	8008426 <_printf_float+0x412>
 800840c:	e65d      	b.n	80080ca <_printf_float+0xb6>
 800840e:	2301      	movs	r3, #1
 8008410:	465a      	mov	r2, fp
 8008412:	4631      	mov	r1, r6
 8008414:	4628      	mov	r0, r5
 8008416:	47b8      	blx	r7
 8008418:	3001      	adds	r0, #1
 800841a:	f43f ae56 	beq.w	80080ca <_printf_float+0xb6>
 800841e:	f108 0801 	add.w	r8, r8, #1
 8008422:	45d0      	cmp	r8, sl
 8008424:	dbf3      	blt.n	800840e <_printf_float+0x3fa>
 8008426:	464b      	mov	r3, r9
 8008428:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800842c:	e6df      	b.n	80081ee <_printf_float+0x1da>
 800842e:	f04f 0800 	mov.w	r8, #0
 8008432:	f104 0b1a 	add.w	fp, r4, #26
 8008436:	e7f4      	b.n	8008422 <_printf_float+0x40e>
 8008438:	2301      	movs	r3, #1
 800843a:	4642      	mov	r2, r8
 800843c:	e7e1      	b.n	8008402 <_printf_float+0x3ee>
 800843e:	2301      	movs	r3, #1
 8008440:	464a      	mov	r2, r9
 8008442:	4631      	mov	r1, r6
 8008444:	4628      	mov	r0, r5
 8008446:	47b8      	blx	r7
 8008448:	3001      	adds	r0, #1
 800844a:	f43f ae3e 	beq.w	80080ca <_printf_float+0xb6>
 800844e:	f108 0801 	add.w	r8, r8, #1
 8008452:	68e3      	ldr	r3, [r4, #12]
 8008454:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008456:	1a5b      	subs	r3, r3, r1
 8008458:	4543      	cmp	r3, r8
 800845a:	dcf0      	bgt.n	800843e <_printf_float+0x42a>
 800845c:	e6fc      	b.n	8008258 <_printf_float+0x244>
 800845e:	f04f 0800 	mov.w	r8, #0
 8008462:	f104 0919 	add.w	r9, r4, #25
 8008466:	e7f4      	b.n	8008452 <_printf_float+0x43e>

08008468 <_printf_common>:
 8008468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800846c:	4616      	mov	r6, r2
 800846e:	4698      	mov	r8, r3
 8008470:	688a      	ldr	r2, [r1, #8]
 8008472:	690b      	ldr	r3, [r1, #16]
 8008474:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008478:	4293      	cmp	r3, r2
 800847a:	bfb8      	it	lt
 800847c:	4613      	movlt	r3, r2
 800847e:	6033      	str	r3, [r6, #0]
 8008480:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008484:	4607      	mov	r7, r0
 8008486:	460c      	mov	r4, r1
 8008488:	b10a      	cbz	r2, 800848e <_printf_common+0x26>
 800848a:	3301      	adds	r3, #1
 800848c:	6033      	str	r3, [r6, #0]
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	0699      	lsls	r1, r3, #26
 8008492:	bf42      	ittt	mi
 8008494:	6833      	ldrmi	r3, [r6, #0]
 8008496:	3302      	addmi	r3, #2
 8008498:	6033      	strmi	r3, [r6, #0]
 800849a:	6825      	ldr	r5, [r4, #0]
 800849c:	f015 0506 	ands.w	r5, r5, #6
 80084a0:	d106      	bne.n	80084b0 <_printf_common+0x48>
 80084a2:	f104 0a19 	add.w	sl, r4, #25
 80084a6:	68e3      	ldr	r3, [r4, #12]
 80084a8:	6832      	ldr	r2, [r6, #0]
 80084aa:	1a9b      	subs	r3, r3, r2
 80084ac:	42ab      	cmp	r3, r5
 80084ae:	dc26      	bgt.n	80084fe <_printf_common+0x96>
 80084b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80084b4:	6822      	ldr	r2, [r4, #0]
 80084b6:	3b00      	subs	r3, #0
 80084b8:	bf18      	it	ne
 80084ba:	2301      	movne	r3, #1
 80084bc:	0692      	lsls	r2, r2, #26
 80084be:	d42b      	bmi.n	8008518 <_printf_common+0xb0>
 80084c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80084c4:	4641      	mov	r1, r8
 80084c6:	4638      	mov	r0, r7
 80084c8:	47c8      	blx	r9
 80084ca:	3001      	adds	r0, #1
 80084cc:	d01e      	beq.n	800850c <_printf_common+0xa4>
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	6922      	ldr	r2, [r4, #16]
 80084d2:	f003 0306 	and.w	r3, r3, #6
 80084d6:	2b04      	cmp	r3, #4
 80084d8:	bf02      	ittt	eq
 80084da:	68e5      	ldreq	r5, [r4, #12]
 80084dc:	6833      	ldreq	r3, [r6, #0]
 80084de:	1aed      	subeq	r5, r5, r3
 80084e0:	68a3      	ldr	r3, [r4, #8]
 80084e2:	bf0c      	ite	eq
 80084e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084e8:	2500      	movne	r5, #0
 80084ea:	4293      	cmp	r3, r2
 80084ec:	bfc4      	itt	gt
 80084ee:	1a9b      	subgt	r3, r3, r2
 80084f0:	18ed      	addgt	r5, r5, r3
 80084f2:	2600      	movs	r6, #0
 80084f4:	341a      	adds	r4, #26
 80084f6:	42b5      	cmp	r5, r6
 80084f8:	d11a      	bne.n	8008530 <_printf_common+0xc8>
 80084fa:	2000      	movs	r0, #0
 80084fc:	e008      	b.n	8008510 <_printf_common+0xa8>
 80084fe:	2301      	movs	r3, #1
 8008500:	4652      	mov	r2, sl
 8008502:	4641      	mov	r1, r8
 8008504:	4638      	mov	r0, r7
 8008506:	47c8      	blx	r9
 8008508:	3001      	adds	r0, #1
 800850a:	d103      	bne.n	8008514 <_printf_common+0xac>
 800850c:	f04f 30ff 	mov.w	r0, #4294967295
 8008510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008514:	3501      	adds	r5, #1
 8008516:	e7c6      	b.n	80084a6 <_printf_common+0x3e>
 8008518:	18e1      	adds	r1, r4, r3
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	2030      	movs	r0, #48	@ 0x30
 800851e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008522:	4422      	add	r2, r4
 8008524:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008528:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800852c:	3302      	adds	r3, #2
 800852e:	e7c7      	b.n	80084c0 <_printf_common+0x58>
 8008530:	2301      	movs	r3, #1
 8008532:	4622      	mov	r2, r4
 8008534:	4641      	mov	r1, r8
 8008536:	4638      	mov	r0, r7
 8008538:	47c8      	blx	r9
 800853a:	3001      	adds	r0, #1
 800853c:	d0e6      	beq.n	800850c <_printf_common+0xa4>
 800853e:	3601      	adds	r6, #1
 8008540:	e7d9      	b.n	80084f6 <_printf_common+0x8e>
	...

08008544 <_printf_i>:
 8008544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008548:	7e0f      	ldrb	r7, [r1, #24]
 800854a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800854c:	2f78      	cmp	r7, #120	@ 0x78
 800854e:	4691      	mov	r9, r2
 8008550:	4680      	mov	r8, r0
 8008552:	460c      	mov	r4, r1
 8008554:	469a      	mov	sl, r3
 8008556:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800855a:	d807      	bhi.n	800856c <_printf_i+0x28>
 800855c:	2f62      	cmp	r7, #98	@ 0x62
 800855e:	d80a      	bhi.n	8008576 <_printf_i+0x32>
 8008560:	2f00      	cmp	r7, #0
 8008562:	f000 80d2 	beq.w	800870a <_printf_i+0x1c6>
 8008566:	2f58      	cmp	r7, #88	@ 0x58
 8008568:	f000 80b9 	beq.w	80086de <_printf_i+0x19a>
 800856c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008570:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008574:	e03a      	b.n	80085ec <_printf_i+0xa8>
 8008576:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800857a:	2b15      	cmp	r3, #21
 800857c:	d8f6      	bhi.n	800856c <_printf_i+0x28>
 800857e:	a101      	add	r1, pc, #4	@ (adr r1, 8008584 <_printf_i+0x40>)
 8008580:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008584:	080085dd 	.word	0x080085dd
 8008588:	080085f1 	.word	0x080085f1
 800858c:	0800856d 	.word	0x0800856d
 8008590:	0800856d 	.word	0x0800856d
 8008594:	0800856d 	.word	0x0800856d
 8008598:	0800856d 	.word	0x0800856d
 800859c:	080085f1 	.word	0x080085f1
 80085a0:	0800856d 	.word	0x0800856d
 80085a4:	0800856d 	.word	0x0800856d
 80085a8:	0800856d 	.word	0x0800856d
 80085ac:	0800856d 	.word	0x0800856d
 80085b0:	080086f1 	.word	0x080086f1
 80085b4:	0800861b 	.word	0x0800861b
 80085b8:	080086ab 	.word	0x080086ab
 80085bc:	0800856d 	.word	0x0800856d
 80085c0:	0800856d 	.word	0x0800856d
 80085c4:	08008713 	.word	0x08008713
 80085c8:	0800856d 	.word	0x0800856d
 80085cc:	0800861b 	.word	0x0800861b
 80085d0:	0800856d 	.word	0x0800856d
 80085d4:	0800856d 	.word	0x0800856d
 80085d8:	080086b3 	.word	0x080086b3
 80085dc:	6833      	ldr	r3, [r6, #0]
 80085de:	1d1a      	adds	r2, r3, #4
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6032      	str	r2, [r6, #0]
 80085e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80085ec:	2301      	movs	r3, #1
 80085ee:	e09d      	b.n	800872c <_printf_i+0x1e8>
 80085f0:	6833      	ldr	r3, [r6, #0]
 80085f2:	6820      	ldr	r0, [r4, #0]
 80085f4:	1d19      	adds	r1, r3, #4
 80085f6:	6031      	str	r1, [r6, #0]
 80085f8:	0606      	lsls	r6, r0, #24
 80085fa:	d501      	bpl.n	8008600 <_printf_i+0xbc>
 80085fc:	681d      	ldr	r5, [r3, #0]
 80085fe:	e003      	b.n	8008608 <_printf_i+0xc4>
 8008600:	0645      	lsls	r5, r0, #25
 8008602:	d5fb      	bpl.n	80085fc <_printf_i+0xb8>
 8008604:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008608:	2d00      	cmp	r5, #0
 800860a:	da03      	bge.n	8008614 <_printf_i+0xd0>
 800860c:	232d      	movs	r3, #45	@ 0x2d
 800860e:	426d      	negs	r5, r5
 8008610:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008614:	4859      	ldr	r0, [pc, #356]	@ (800877c <_printf_i+0x238>)
 8008616:	230a      	movs	r3, #10
 8008618:	e011      	b.n	800863e <_printf_i+0xfa>
 800861a:	6821      	ldr	r1, [r4, #0]
 800861c:	6833      	ldr	r3, [r6, #0]
 800861e:	0608      	lsls	r0, r1, #24
 8008620:	f853 5b04 	ldr.w	r5, [r3], #4
 8008624:	d402      	bmi.n	800862c <_printf_i+0xe8>
 8008626:	0649      	lsls	r1, r1, #25
 8008628:	bf48      	it	mi
 800862a:	b2ad      	uxthmi	r5, r5
 800862c:	2f6f      	cmp	r7, #111	@ 0x6f
 800862e:	4853      	ldr	r0, [pc, #332]	@ (800877c <_printf_i+0x238>)
 8008630:	6033      	str	r3, [r6, #0]
 8008632:	bf14      	ite	ne
 8008634:	230a      	movne	r3, #10
 8008636:	2308      	moveq	r3, #8
 8008638:	2100      	movs	r1, #0
 800863a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800863e:	6866      	ldr	r6, [r4, #4]
 8008640:	60a6      	str	r6, [r4, #8]
 8008642:	2e00      	cmp	r6, #0
 8008644:	bfa2      	ittt	ge
 8008646:	6821      	ldrge	r1, [r4, #0]
 8008648:	f021 0104 	bicge.w	r1, r1, #4
 800864c:	6021      	strge	r1, [r4, #0]
 800864e:	b90d      	cbnz	r5, 8008654 <_printf_i+0x110>
 8008650:	2e00      	cmp	r6, #0
 8008652:	d04b      	beq.n	80086ec <_printf_i+0x1a8>
 8008654:	4616      	mov	r6, r2
 8008656:	fbb5 f1f3 	udiv	r1, r5, r3
 800865a:	fb03 5711 	mls	r7, r3, r1, r5
 800865e:	5dc7      	ldrb	r7, [r0, r7]
 8008660:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008664:	462f      	mov	r7, r5
 8008666:	42bb      	cmp	r3, r7
 8008668:	460d      	mov	r5, r1
 800866a:	d9f4      	bls.n	8008656 <_printf_i+0x112>
 800866c:	2b08      	cmp	r3, #8
 800866e:	d10b      	bne.n	8008688 <_printf_i+0x144>
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	07df      	lsls	r7, r3, #31
 8008674:	d508      	bpl.n	8008688 <_printf_i+0x144>
 8008676:	6923      	ldr	r3, [r4, #16]
 8008678:	6861      	ldr	r1, [r4, #4]
 800867a:	4299      	cmp	r1, r3
 800867c:	bfde      	ittt	le
 800867e:	2330      	movle	r3, #48	@ 0x30
 8008680:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008684:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008688:	1b92      	subs	r2, r2, r6
 800868a:	6122      	str	r2, [r4, #16]
 800868c:	f8cd a000 	str.w	sl, [sp]
 8008690:	464b      	mov	r3, r9
 8008692:	aa03      	add	r2, sp, #12
 8008694:	4621      	mov	r1, r4
 8008696:	4640      	mov	r0, r8
 8008698:	f7ff fee6 	bl	8008468 <_printf_common>
 800869c:	3001      	adds	r0, #1
 800869e:	d14a      	bne.n	8008736 <_printf_i+0x1f2>
 80086a0:	f04f 30ff 	mov.w	r0, #4294967295
 80086a4:	b004      	add	sp, #16
 80086a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	f043 0320 	orr.w	r3, r3, #32
 80086b0:	6023      	str	r3, [r4, #0]
 80086b2:	4833      	ldr	r0, [pc, #204]	@ (8008780 <_printf_i+0x23c>)
 80086b4:	2778      	movs	r7, #120	@ 0x78
 80086b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	6831      	ldr	r1, [r6, #0]
 80086be:	061f      	lsls	r7, r3, #24
 80086c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80086c4:	d402      	bmi.n	80086cc <_printf_i+0x188>
 80086c6:	065f      	lsls	r7, r3, #25
 80086c8:	bf48      	it	mi
 80086ca:	b2ad      	uxthmi	r5, r5
 80086cc:	6031      	str	r1, [r6, #0]
 80086ce:	07d9      	lsls	r1, r3, #31
 80086d0:	bf44      	itt	mi
 80086d2:	f043 0320 	orrmi.w	r3, r3, #32
 80086d6:	6023      	strmi	r3, [r4, #0]
 80086d8:	b11d      	cbz	r5, 80086e2 <_printf_i+0x19e>
 80086da:	2310      	movs	r3, #16
 80086dc:	e7ac      	b.n	8008638 <_printf_i+0xf4>
 80086de:	4827      	ldr	r0, [pc, #156]	@ (800877c <_printf_i+0x238>)
 80086e0:	e7e9      	b.n	80086b6 <_printf_i+0x172>
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	f023 0320 	bic.w	r3, r3, #32
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	e7f6      	b.n	80086da <_printf_i+0x196>
 80086ec:	4616      	mov	r6, r2
 80086ee:	e7bd      	b.n	800866c <_printf_i+0x128>
 80086f0:	6833      	ldr	r3, [r6, #0]
 80086f2:	6825      	ldr	r5, [r4, #0]
 80086f4:	6961      	ldr	r1, [r4, #20]
 80086f6:	1d18      	adds	r0, r3, #4
 80086f8:	6030      	str	r0, [r6, #0]
 80086fa:	062e      	lsls	r6, r5, #24
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	d501      	bpl.n	8008704 <_printf_i+0x1c0>
 8008700:	6019      	str	r1, [r3, #0]
 8008702:	e002      	b.n	800870a <_printf_i+0x1c6>
 8008704:	0668      	lsls	r0, r5, #25
 8008706:	d5fb      	bpl.n	8008700 <_printf_i+0x1bc>
 8008708:	8019      	strh	r1, [r3, #0]
 800870a:	2300      	movs	r3, #0
 800870c:	6123      	str	r3, [r4, #16]
 800870e:	4616      	mov	r6, r2
 8008710:	e7bc      	b.n	800868c <_printf_i+0x148>
 8008712:	6833      	ldr	r3, [r6, #0]
 8008714:	1d1a      	adds	r2, r3, #4
 8008716:	6032      	str	r2, [r6, #0]
 8008718:	681e      	ldr	r6, [r3, #0]
 800871a:	6862      	ldr	r2, [r4, #4]
 800871c:	2100      	movs	r1, #0
 800871e:	4630      	mov	r0, r6
 8008720:	f7f7 fd66 	bl	80001f0 <memchr>
 8008724:	b108      	cbz	r0, 800872a <_printf_i+0x1e6>
 8008726:	1b80      	subs	r0, r0, r6
 8008728:	6060      	str	r0, [r4, #4]
 800872a:	6863      	ldr	r3, [r4, #4]
 800872c:	6123      	str	r3, [r4, #16]
 800872e:	2300      	movs	r3, #0
 8008730:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008734:	e7aa      	b.n	800868c <_printf_i+0x148>
 8008736:	6923      	ldr	r3, [r4, #16]
 8008738:	4632      	mov	r2, r6
 800873a:	4649      	mov	r1, r9
 800873c:	4640      	mov	r0, r8
 800873e:	47d0      	blx	sl
 8008740:	3001      	adds	r0, #1
 8008742:	d0ad      	beq.n	80086a0 <_printf_i+0x15c>
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	079b      	lsls	r3, r3, #30
 8008748:	d413      	bmi.n	8008772 <_printf_i+0x22e>
 800874a:	68e0      	ldr	r0, [r4, #12]
 800874c:	9b03      	ldr	r3, [sp, #12]
 800874e:	4298      	cmp	r0, r3
 8008750:	bfb8      	it	lt
 8008752:	4618      	movlt	r0, r3
 8008754:	e7a6      	b.n	80086a4 <_printf_i+0x160>
 8008756:	2301      	movs	r3, #1
 8008758:	4632      	mov	r2, r6
 800875a:	4649      	mov	r1, r9
 800875c:	4640      	mov	r0, r8
 800875e:	47d0      	blx	sl
 8008760:	3001      	adds	r0, #1
 8008762:	d09d      	beq.n	80086a0 <_printf_i+0x15c>
 8008764:	3501      	adds	r5, #1
 8008766:	68e3      	ldr	r3, [r4, #12]
 8008768:	9903      	ldr	r1, [sp, #12]
 800876a:	1a5b      	subs	r3, r3, r1
 800876c:	42ab      	cmp	r3, r5
 800876e:	dcf2      	bgt.n	8008756 <_printf_i+0x212>
 8008770:	e7eb      	b.n	800874a <_printf_i+0x206>
 8008772:	2500      	movs	r5, #0
 8008774:	f104 0619 	add.w	r6, r4, #25
 8008778:	e7f5      	b.n	8008766 <_printf_i+0x222>
 800877a:	bf00      	nop
 800877c:	0800bd12 	.word	0x0800bd12
 8008780:	0800bd23 	.word	0x0800bd23

08008784 <_scanf_float>:
 8008784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008788:	b087      	sub	sp, #28
 800878a:	4617      	mov	r7, r2
 800878c:	9303      	str	r3, [sp, #12]
 800878e:	688b      	ldr	r3, [r1, #8]
 8008790:	1e5a      	subs	r2, r3, #1
 8008792:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008796:	bf81      	itttt	hi
 8008798:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800879c:	eb03 0b05 	addhi.w	fp, r3, r5
 80087a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80087a4:	608b      	strhi	r3, [r1, #8]
 80087a6:	680b      	ldr	r3, [r1, #0]
 80087a8:	460a      	mov	r2, r1
 80087aa:	f04f 0500 	mov.w	r5, #0
 80087ae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80087b2:	f842 3b1c 	str.w	r3, [r2], #28
 80087b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80087ba:	4680      	mov	r8, r0
 80087bc:	460c      	mov	r4, r1
 80087be:	bf98      	it	ls
 80087c0:	f04f 0b00 	movls.w	fp, #0
 80087c4:	9201      	str	r2, [sp, #4]
 80087c6:	4616      	mov	r6, r2
 80087c8:	46aa      	mov	sl, r5
 80087ca:	46a9      	mov	r9, r5
 80087cc:	9502      	str	r5, [sp, #8]
 80087ce:	68a2      	ldr	r2, [r4, #8]
 80087d0:	b152      	cbz	r2, 80087e8 <_scanf_float+0x64>
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	2b4e      	cmp	r3, #78	@ 0x4e
 80087d8:	d864      	bhi.n	80088a4 <_scanf_float+0x120>
 80087da:	2b40      	cmp	r3, #64	@ 0x40
 80087dc:	d83c      	bhi.n	8008858 <_scanf_float+0xd4>
 80087de:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80087e2:	b2c8      	uxtb	r0, r1
 80087e4:	280e      	cmp	r0, #14
 80087e6:	d93a      	bls.n	800885e <_scanf_float+0xda>
 80087e8:	f1b9 0f00 	cmp.w	r9, #0
 80087ec:	d003      	beq.n	80087f6 <_scanf_float+0x72>
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087fa:	f1ba 0f01 	cmp.w	sl, #1
 80087fe:	f200 8117 	bhi.w	8008a30 <_scanf_float+0x2ac>
 8008802:	9b01      	ldr	r3, [sp, #4]
 8008804:	429e      	cmp	r6, r3
 8008806:	f200 8108 	bhi.w	8008a1a <_scanf_float+0x296>
 800880a:	2001      	movs	r0, #1
 800880c:	b007      	add	sp, #28
 800880e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008812:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008816:	2a0d      	cmp	r2, #13
 8008818:	d8e6      	bhi.n	80087e8 <_scanf_float+0x64>
 800881a:	a101      	add	r1, pc, #4	@ (adr r1, 8008820 <_scanf_float+0x9c>)
 800881c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008820:	08008967 	.word	0x08008967
 8008824:	080087e9 	.word	0x080087e9
 8008828:	080087e9 	.word	0x080087e9
 800882c:	080087e9 	.word	0x080087e9
 8008830:	080089c7 	.word	0x080089c7
 8008834:	0800899f 	.word	0x0800899f
 8008838:	080087e9 	.word	0x080087e9
 800883c:	080087e9 	.word	0x080087e9
 8008840:	08008975 	.word	0x08008975
 8008844:	080087e9 	.word	0x080087e9
 8008848:	080087e9 	.word	0x080087e9
 800884c:	080087e9 	.word	0x080087e9
 8008850:	080087e9 	.word	0x080087e9
 8008854:	0800892d 	.word	0x0800892d
 8008858:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800885c:	e7db      	b.n	8008816 <_scanf_float+0x92>
 800885e:	290e      	cmp	r1, #14
 8008860:	d8c2      	bhi.n	80087e8 <_scanf_float+0x64>
 8008862:	a001      	add	r0, pc, #4	@ (adr r0, 8008868 <_scanf_float+0xe4>)
 8008864:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008868:	0800891d 	.word	0x0800891d
 800886c:	080087e9 	.word	0x080087e9
 8008870:	0800891d 	.word	0x0800891d
 8008874:	080089b3 	.word	0x080089b3
 8008878:	080087e9 	.word	0x080087e9
 800887c:	080088c5 	.word	0x080088c5
 8008880:	08008903 	.word	0x08008903
 8008884:	08008903 	.word	0x08008903
 8008888:	08008903 	.word	0x08008903
 800888c:	08008903 	.word	0x08008903
 8008890:	08008903 	.word	0x08008903
 8008894:	08008903 	.word	0x08008903
 8008898:	08008903 	.word	0x08008903
 800889c:	08008903 	.word	0x08008903
 80088a0:	08008903 	.word	0x08008903
 80088a4:	2b6e      	cmp	r3, #110	@ 0x6e
 80088a6:	d809      	bhi.n	80088bc <_scanf_float+0x138>
 80088a8:	2b60      	cmp	r3, #96	@ 0x60
 80088aa:	d8b2      	bhi.n	8008812 <_scanf_float+0x8e>
 80088ac:	2b54      	cmp	r3, #84	@ 0x54
 80088ae:	d07b      	beq.n	80089a8 <_scanf_float+0x224>
 80088b0:	2b59      	cmp	r3, #89	@ 0x59
 80088b2:	d199      	bne.n	80087e8 <_scanf_float+0x64>
 80088b4:	2d07      	cmp	r5, #7
 80088b6:	d197      	bne.n	80087e8 <_scanf_float+0x64>
 80088b8:	2508      	movs	r5, #8
 80088ba:	e02c      	b.n	8008916 <_scanf_float+0x192>
 80088bc:	2b74      	cmp	r3, #116	@ 0x74
 80088be:	d073      	beq.n	80089a8 <_scanf_float+0x224>
 80088c0:	2b79      	cmp	r3, #121	@ 0x79
 80088c2:	e7f6      	b.n	80088b2 <_scanf_float+0x12e>
 80088c4:	6821      	ldr	r1, [r4, #0]
 80088c6:	05c8      	lsls	r0, r1, #23
 80088c8:	d51b      	bpl.n	8008902 <_scanf_float+0x17e>
 80088ca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80088ce:	6021      	str	r1, [r4, #0]
 80088d0:	f109 0901 	add.w	r9, r9, #1
 80088d4:	f1bb 0f00 	cmp.w	fp, #0
 80088d8:	d003      	beq.n	80088e2 <_scanf_float+0x15e>
 80088da:	3201      	adds	r2, #1
 80088dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80088e0:	60a2      	str	r2, [r4, #8]
 80088e2:	68a3      	ldr	r3, [r4, #8]
 80088e4:	3b01      	subs	r3, #1
 80088e6:	60a3      	str	r3, [r4, #8]
 80088e8:	6923      	ldr	r3, [r4, #16]
 80088ea:	3301      	adds	r3, #1
 80088ec:	6123      	str	r3, [r4, #16]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	607b      	str	r3, [r7, #4]
 80088f6:	f340 8087 	ble.w	8008a08 <_scanf_float+0x284>
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	3301      	adds	r3, #1
 80088fe:	603b      	str	r3, [r7, #0]
 8008900:	e765      	b.n	80087ce <_scanf_float+0x4a>
 8008902:	eb1a 0105 	adds.w	r1, sl, r5
 8008906:	f47f af6f 	bne.w	80087e8 <_scanf_float+0x64>
 800890a:	6822      	ldr	r2, [r4, #0]
 800890c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008910:	6022      	str	r2, [r4, #0]
 8008912:	460d      	mov	r5, r1
 8008914:	468a      	mov	sl, r1
 8008916:	f806 3b01 	strb.w	r3, [r6], #1
 800891a:	e7e2      	b.n	80088e2 <_scanf_float+0x15e>
 800891c:	6822      	ldr	r2, [r4, #0]
 800891e:	0610      	lsls	r0, r2, #24
 8008920:	f57f af62 	bpl.w	80087e8 <_scanf_float+0x64>
 8008924:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008928:	6022      	str	r2, [r4, #0]
 800892a:	e7f4      	b.n	8008916 <_scanf_float+0x192>
 800892c:	f1ba 0f00 	cmp.w	sl, #0
 8008930:	d10e      	bne.n	8008950 <_scanf_float+0x1cc>
 8008932:	f1b9 0f00 	cmp.w	r9, #0
 8008936:	d10e      	bne.n	8008956 <_scanf_float+0x1d2>
 8008938:	6822      	ldr	r2, [r4, #0]
 800893a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800893e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008942:	d108      	bne.n	8008956 <_scanf_float+0x1d2>
 8008944:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008948:	6022      	str	r2, [r4, #0]
 800894a:	f04f 0a01 	mov.w	sl, #1
 800894e:	e7e2      	b.n	8008916 <_scanf_float+0x192>
 8008950:	f1ba 0f02 	cmp.w	sl, #2
 8008954:	d055      	beq.n	8008a02 <_scanf_float+0x27e>
 8008956:	2d01      	cmp	r5, #1
 8008958:	d002      	beq.n	8008960 <_scanf_float+0x1dc>
 800895a:	2d04      	cmp	r5, #4
 800895c:	f47f af44 	bne.w	80087e8 <_scanf_float+0x64>
 8008960:	3501      	adds	r5, #1
 8008962:	b2ed      	uxtb	r5, r5
 8008964:	e7d7      	b.n	8008916 <_scanf_float+0x192>
 8008966:	f1ba 0f01 	cmp.w	sl, #1
 800896a:	f47f af3d 	bne.w	80087e8 <_scanf_float+0x64>
 800896e:	f04f 0a02 	mov.w	sl, #2
 8008972:	e7d0      	b.n	8008916 <_scanf_float+0x192>
 8008974:	b97d      	cbnz	r5, 8008996 <_scanf_float+0x212>
 8008976:	f1b9 0f00 	cmp.w	r9, #0
 800897a:	f47f af38 	bne.w	80087ee <_scanf_float+0x6a>
 800897e:	6822      	ldr	r2, [r4, #0]
 8008980:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008984:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008988:	f040 8108 	bne.w	8008b9c <_scanf_float+0x418>
 800898c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008990:	6022      	str	r2, [r4, #0]
 8008992:	2501      	movs	r5, #1
 8008994:	e7bf      	b.n	8008916 <_scanf_float+0x192>
 8008996:	2d03      	cmp	r5, #3
 8008998:	d0e2      	beq.n	8008960 <_scanf_float+0x1dc>
 800899a:	2d05      	cmp	r5, #5
 800899c:	e7de      	b.n	800895c <_scanf_float+0x1d8>
 800899e:	2d02      	cmp	r5, #2
 80089a0:	f47f af22 	bne.w	80087e8 <_scanf_float+0x64>
 80089a4:	2503      	movs	r5, #3
 80089a6:	e7b6      	b.n	8008916 <_scanf_float+0x192>
 80089a8:	2d06      	cmp	r5, #6
 80089aa:	f47f af1d 	bne.w	80087e8 <_scanf_float+0x64>
 80089ae:	2507      	movs	r5, #7
 80089b0:	e7b1      	b.n	8008916 <_scanf_float+0x192>
 80089b2:	6822      	ldr	r2, [r4, #0]
 80089b4:	0591      	lsls	r1, r2, #22
 80089b6:	f57f af17 	bpl.w	80087e8 <_scanf_float+0x64>
 80089ba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80089be:	6022      	str	r2, [r4, #0]
 80089c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80089c4:	e7a7      	b.n	8008916 <_scanf_float+0x192>
 80089c6:	6822      	ldr	r2, [r4, #0]
 80089c8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80089cc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80089d0:	d006      	beq.n	80089e0 <_scanf_float+0x25c>
 80089d2:	0550      	lsls	r0, r2, #21
 80089d4:	f57f af08 	bpl.w	80087e8 <_scanf_float+0x64>
 80089d8:	f1b9 0f00 	cmp.w	r9, #0
 80089dc:	f000 80de 	beq.w	8008b9c <_scanf_float+0x418>
 80089e0:	0591      	lsls	r1, r2, #22
 80089e2:	bf58      	it	pl
 80089e4:	9902      	ldrpl	r1, [sp, #8]
 80089e6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80089ea:	bf58      	it	pl
 80089ec:	eba9 0101 	subpl.w	r1, r9, r1
 80089f0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80089f4:	bf58      	it	pl
 80089f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80089fa:	6022      	str	r2, [r4, #0]
 80089fc:	f04f 0900 	mov.w	r9, #0
 8008a00:	e789      	b.n	8008916 <_scanf_float+0x192>
 8008a02:	f04f 0a03 	mov.w	sl, #3
 8008a06:	e786      	b.n	8008916 <_scanf_float+0x192>
 8008a08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008a0c:	4639      	mov	r1, r7
 8008a0e:	4640      	mov	r0, r8
 8008a10:	4798      	blx	r3
 8008a12:	2800      	cmp	r0, #0
 8008a14:	f43f aedb 	beq.w	80087ce <_scanf_float+0x4a>
 8008a18:	e6e6      	b.n	80087e8 <_scanf_float+0x64>
 8008a1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a22:	463a      	mov	r2, r7
 8008a24:	4640      	mov	r0, r8
 8008a26:	4798      	blx	r3
 8008a28:	6923      	ldr	r3, [r4, #16]
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	6123      	str	r3, [r4, #16]
 8008a2e:	e6e8      	b.n	8008802 <_scanf_float+0x7e>
 8008a30:	1e6b      	subs	r3, r5, #1
 8008a32:	2b06      	cmp	r3, #6
 8008a34:	d824      	bhi.n	8008a80 <_scanf_float+0x2fc>
 8008a36:	2d02      	cmp	r5, #2
 8008a38:	d836      	bhi.n	8008aa8 <_scanf_float+0x324>
 8008a3a:	9b01      	ldr	r3, [sp, #4]
 8008a3c:	429e      	cmp	r6, r3
 8008a3e:	f67f aee4 	bls.w	800880a <_scanf_float+0x86>
 8008a42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a4a:	463a      	mov	r2, r7
 8008a4c:	4640      	mov	r0, r8
 8008a4e:	4798      	blx	r3
 8008a50:	6923      	ldr	r3, [r4, #16]
 8008a52:	3b01      	subs	r3, #1
 8008a54:	6123      	str	r3, [r4, #16]
 8008a56:	e7f0      	b.n	8008a3a <_scanf_float+0x2b6>
 8008a58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a5c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008a60:	463a      	mov	r2, r7
 8008a62:	4640      	mov	r0, r8
 8008a64:	4798      	blx	r3
 8008a66:	6923      	ldr	r3, [r4, #16]
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	6123      	str	r3, [r4, #16]
 8008a6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a70:	fa5f fa8a 	uxtb.w	sl, sl
 8008a74:	f1ba 0f02 	cmp.w	sl, #2
 8008a78:	d1ee      	bne.n	8008a58 <_scanf_float+0x2d4>
 8008a7a:	3d03      	subs	r5, #3
 8008a7c:	b2ed      	uxtb	r5, r5
 8008a7e:	1b76      	subs	r6, r6, r5
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	05da      	lsls	r2, r3, #23
 8008a84:	d530      	bpl.n	8008ae8 <_scanf_float+0x364>
 8008a86:	055b      	lsls	r3, r3, #21
 8008a88:	d511      	bpl.n	8008aae <_scanf_float+0x32a>
 8008a8a:	9b01      	ldr	r3, [sp, #4]
 8008a8c:	429e      	cmp	r6, r3
 8008a8e:	f67f aebc 	bls.w	800880a <_scanf_float+0x86>
 8008a92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a9a:	463a      	mov	r2, r7
 8008a9c:	4640      	mov	r0, r8
 8008a9e:	4798      	blx	r3
 8008aa0:	6923      	ldr	r3, [r4, #16]
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	6123      	str	r3, [r4, #16]
 8008aa6:	e7f0      	b.n	8008a8a <_scanf_float+0x306>
 8008aa8:	46aa      	mov	sl, r5
 8008aaa:	46b3      	mov	fp, r6
 8008aac:	e7de      	b.n	8008a6c <_scanf_float+0x2e8>
 8008aae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008ab2:	6923      	ldr	r3, [r4, #16]
 8008ab4:	2965      	cmp	r1, #101	@ 0x65
 8008ab6:	f103 33ff 	add.w	r3, r3, #4294967295
 8008aba:	f106 35ff 	add.w	r5, r6, #4294967295
 8008abe:	6123      	str	r3, [r4, #16]
 8008ac0:	d00c      	beq.n	8008adc <_scanf_float+0x358>
 8008ac2:	2945      	cmp	r1, #69	@ 0x45
 8008ac4:	d00a      	beq.n	8008adc <_scanf_float+0x358>
 8008ac6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008aca:	463a      	mov	r2, r7
 8008acc:	4640      	mov	r0, r8
 8008ace:	4798      	blx	r3
 8008ad0:	6923      	ldr	r3, [r4, #16]
 8008ad2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	1eb5      	subs	r5, r6, #2
 8008ada:	6123      	str	r3, [r4, #16]
 8008adc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ae0:	463a      	mov	r2, r7
 8008ae2:	4640      	mov	r0, r8
 8008ae4:	4798      	blx	r3
 8008ae6:	462e      	mov	r6, r5
 8008ae8:	6822      	ldr	r2, [r4, #0]
 8008aea:	f012 0210 	ands.w	r2, r2, #16
 8008aee:	d001      	beq.n	8008af4 <_scanf_float+0x370>
 8008af0:	2000      	movs	r0, #0
 8008af2:	e68b      	b.n	800880c <_scanf_float+0x88>
 8008af4:	7032      	strb	r2, [r6, #0]
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008afc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b00:	d11c      	bne.n	8008b3c <_scanf_float+0x3b8>
 8008b02:	9b02      	ldr	r3, [sp, #8]
 8008b04:	454b      	cmp	r3, r9
 8008b06:	eba3 0209 	sub.w	r2, r3, r9
 8008b0a:	d123      	bne.n	8008b54 <_scanf_float+0x3d0>
 8008b0c:	9901      	ldr	r1, [sp, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	4640      	mov	r0, r8
 8008b12:	f7ff f975 	bl	8007e00 <_strtod_r>
 8008b16:	9b03      	ldr	r3, [sp, #12]
 8008b18:	6821      	ldr	r1, [r4, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f011 0f02 	tst.w	r1, #2
 8008b20:	ec57 6b10 	vmov	r6, r7, d0
 8008b24:	f103 0204 	add.w	r2, r3, #4
 8008b28:	d01f      	beq.n	8008b6a <_scanf_float+0x3e6>
 8008b2a:	9903      	ldr	r1, [sp, #12]
 8008b2c:	600a      	str	r2, [r1, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	e9c3 6700 	strd	r6, r7, [r3]
 8008b34:	68e3      	ldr	r3, [r4, #12]
 8008b36:	3301      	adds	r3, #1
 8008b38:	60e3      	str	r3, [r4, #12]
 8008b3a:	e7d9      	b.n	8008af0 <_scanf_float+0x36c>
 8008b3c:	9b04      	ldr	r3, [sp, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0e4      	beq.n	8008b0c <_scanf_float+0x388>
 8008b42:	9905      	ldr	r1, [sp, #20]
 8008b44:	230a      	movs	r3, #10
 8008b46:	3101      	adds	r1, #1
 8008b48:	4640      	mov	r0, r8
 8008b4a:	f002 fad5 	bl	800b0f8 <_strtol_r>
 8008b4e:	9b04      	ldr	r3, [sp, #16]
 8008b50:	9e05      	ldr	r6, [sp, #20]
 8008b52:	1ac2      	subs	r2, r0, r3
 8008b54:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008b58:	429e      	cmp	r6, r3
 8008b5a:	bf28      	it	cs
 8008b5c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008b60:	4910      	ldr	r1, [pc, #64]	@ (8008ba4 <_scanf_float+0x420>)
 8008b62:	4630      	mov	r0, r6
 8008b64:	f000 f954 	bl	8008e10 <siprintf>
 8008b68:	e7d0      	b.n	8008b0c <_scanf_float+0x388>
 8008b6a:	f011 0f04 	tst.w	r1, #4
 8008b6e:	9903      	ldr	r1, [sp, #12]
 8008b70:	600a      	str	r2, [r1, #0]
 8008b72:	d1dc      	bne.n	8008b2e <_scanf_float+0x3aa>
 8008b74:	681d      	ldr	r5, [r3, #0]
 8008b76:	4632      	mov	r2, r6
 8008b78:	463b      	mov	r3, r7
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	4639      	mov	r1, r7
 8008b7e:	f7f7 ffe5 	bl	8000b4c <__aeabi_dcmpun>
 8008b82:	b128      	cbz	r0, 8008b90 <_scanf_float+0x40c>
 8008b84:	4808      	ldr	r0, [pc, #32]	@ (8008ba8 <_scanf_float+0x424>)
 8008b86:	f000 faeb 	bl	8009160 <nanf>
 8008b8a:	ed85 0a00 	vstr	s0, [r5]
 8008b8e:	e7d1      	b.n	8008b34 <_scanf_float+0x3b0>
 8008b90:	4630      	mov	r0, r6
 8008b92:	4639      	mov	r1, r7
 8008b94:	f7f8 f838 	bl	8000c08 <__aeabi_d2f>
 8008b98:	6028      	str	r0, [r5, #0]
 8008b9a:	e7cb      	b.n	8008b34 <_scanf_float+0x3b0>
 8008b9c:	f04f 0900 	mov.w	r9, #0
 8008ba0:	e629      	b.n	80087f6 <_scanf_float+0x72>
 8008ba2:	bf00      	nop
 8008ba4:	0800bd34 	.word	0x0800bd34
 8008ba8:	0800c0d5 	.word	0x0800c0d5

08008bac <std>:
 8008bac:	2300      	movs	r3, #0
 8008bae:	b510      	push	{r4, lr}
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	e9c0 3300 	strd	r3, r3, [r0]
 8008bb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bba:	6083      	str	r3, [r0, #8]
 8008bbc:	8181      	strh	r1, [r0, #12]
 8008bbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8008bc0:	81c2      	strh	r2, [r0, #14]
 8008bc2:	6183      	str	r3, [r0, #24]
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	2208      	movs	r2, #8
 8008bc8:	305c      	adds	r0, #92	@ 0x5c
 8008bca:	f000 fa19 	bl	8009000 <memset>
 8008bce:	4b0d      	ldr	r3, [pc, #52]	@ (8008c04 <std+0x58>)
 8008bd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8008bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008c08 <std+0x5c>)
 8008bd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8008c0c <std+0x60>)
 8008bd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008bda:	4b0d      	ldr	r3, [pc, #52]	@ (8008c10 <std+0x64>)
 8008bdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8008bde:	4b0d      	ldr	r3, [pc, #52]	@ (8008c14 <std+0x68>)
 8008be0:	6224      	str	r4, [r4, #32]
 8008be2:	429c      	cmp	r4, r3
 8008be4:	d006      	beq.n	8008bf4 <std+0x48>
 8008be6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008bea:	4294      	cmp	r4, r2
 8008bec:	d002      	beq.n	8008bf4 <std+0x48>
 8008bee:	33d0      	adds	r3, #208	@ 0xd0
 8008bf0:	429c      	cmp	r4, r3
 8008bf2:	d105      	bne.n	8008c00 <std+0x54>
 8008bf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bfc:	f000 ba8e 	b.w	800911c <__retarget_lock_init_recursive>
 8008c00:	bd10      	pop	{r4, pc}
 8008c02:	bf00      	nop
 8008c04:	08008e51 	.word	0x08008e51
 8008c08:	08008e73 	.word	0x08008e73
 8008c0c:	08008eab 	.word	0x08008eab
 8008c10:	08008ecf 	.word	0x08008ecf
 8008c14:	20000544 	.word	0x20000544

08008c18 <stdio_exit_handler>:
 8008c18:	4a02      	ldr	r2, [pc, #8]	@ (8008c24 <stdio_exit_handler+0xc>)
 8008c1a:	4903      	ldr	r1, [pc, #12]	@ (8008c28 <stdio_exit_handler+0x10>)
 8008c1c:	4803      	ldr	r0, [pc, #12]	@ (8008c2c <stdio_exit_handler+0x14>)
 8008c1e:	f000 b869 	b.w	8008cf4 <_fwalk_sglue>
 8008c22:	bf00      	nop
 8008c24:	2000000c 	.word	0x2000000c
 8008c28:	0800b751 	.word	0x0800b751
 8008c2c:	20000188 	.word	0x20000188

08008c30 <cleanup_stdio>:
 8008c30:	6841      	ldr	r1, [r0, #4]
 8008c32:	4b0c      	ldr	r3, [pc, #48]	@ (8008c64 <cleanup_stdio+0x34>)
 8008c34:	4299      	cmp	r1, r3
 8008c36:	b510      	push	{r4, lr}
 8008c38:	4604      	mov	r4, r0
 8008c3a:	d001      	beq.n	8008c40 <cleanup_stdio+0x10>
 8008c3c:	f002 fd88 	bl	800b750 <_fflush_r>
 8008c40:	68a1      	ldr	r1, [r4, #8]
 8008c42:	4b09      	ldr	r3, [pc, #36]	@ (8008c68 <cleanup_stdio+0x38>)
 8008c44:	4299      	cmp	r1, r3
 8008c46:	d002      	beq.n	8008c4e <cleanup_stdio+0x1e>
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f002 fd81 	bl	800b750 <_fflush_r>
 8008c4e:	68e1      	ldr	r1, [r4, #12]
 8008c50:	4b06      	ldr	r3, [pc, #24]	@ (8008c6c <cleanup_stdio+0x3c>)
 8008c52:	4299      	cmp	r1, r3
 8008c54:	d004      	beq.n	8008c60 <cleanup_stdio+0x30>
 8008c56:	4620      	mov	r0, r4
 8008c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c5c:	f002 bd78 	b.w	800b750 <_fflush_r>
 8008c60:	bd10      	pop	{r4, pc}
 8008c62:	bf00      	nop
 8008c64:	20000544 	.word	0x20000544
 8008c68:	200005ac 	.word	0x200005ac
 8008c6c:	20000614 	.word	0x20000614

08008c70 <global_stdio_init.part.0>:
 8008c70:	b510      	push	{r4, lr}
 8008c72:	4b0b      	ldr	r3, [pc, #44]	@ (8008ca0 <global_stdio_init.part.0+0x30>)
 8008c74:	4c0b      	ldr	r4, [pc, #44]	@ (8008ca4 <global_stdio_init.part.0+0x34>)
 8008c76:	4a0c      	ldr	r2, [pc, #48]	@ (8008ca8 <global_stdio_init.part.0+0x38>)
 8008c78:	601a      	str	r2, [r3, #0]
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	2104      	movs	r1, #4
 8008c80:	f7ff ff94 	bl	8008bac <std>
 8008c84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008c88:	2201      	movs	r2, #1
 8008c8a:	2109      	movs	r1, #9
 8008c8c:	f7ff ff8e 	bl	8008bac <std>
 8008c90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008c94:	2202      	movs	r2, #2
 8008c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c9a:	2112      	movs	r1, #18
 8008c9c:	f7ff bf86 	b.w	8008bac <std>
 8008ca0:	2000067c 	.word	0x2000067c
 8008ca4:	20000544 	.word	0x20000544
 8008ca8:	08008c19 	.word	0x08008c19

08008cac <__sfp_lock_acquire>:
 8008cac:	4801      	ldr	r0, [pc, #4]	@ (8008cb4 <__sfp_lock_acquire+0x8>)
 8008cae:	f000 ba36 	b.w	800911e <__retarget_lock_acquire_recursive>
 8008cb2:	bf00      	nop
 8008cb4:	20000685 	.word	0x20000685

08008cb8 <__sfp_lock_release>:
 8008cb8:	4801      	ldr	r0, [pc, #4]	@ (8008cc0 <__sfp_lock_release+0x8>)
 8008cba:	f000 ba31 	b.w	8009120 <__retarget_lock_release_recursive>
 8008cbe:	bf00      	nop
 8008cc0:	20000685 	.word	0x20000685

08008cc4 <__sinit>:
 8008cc4:	b510      	push	{r4, lr}
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	f7ff fff0 	bl	8008cac <__sfp_lock_acquire>
 8008ccc:	6a23      	ldr	r3, [r4, #32]
 8008cce:	b11b      	cbz	r3, 8008cd8 <__sinit+0x14>
 8008cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cd4:	f7ff bff0 	b.w	8008cb8 <__sfp_lock_release>
 8008cd8:	4b04      	ldr	r3, [pc, #16]	@ (8008cec <__sinit+0x28>)
 8008cda:	6223      	str	r3, [r4, #32]
 8008cdc:	4b04      	ldr	r3, [pc, #16]	@ (8008cf0 <__sinit+0x2c>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1f5      	bne.n	8008cd0 <__sinit+0xc>
 8008ce4:	f7ff ffc4 	bl	8008c70 <global_stdio_init.part.0>
 8008ce8:	e7f2      	b.n	8008cd0 <__sinit+0xc>
 8008cea:	bf00      	nop
 8008cec:	08008c31 	.word	0x08008c31
 8008cf0:	2000067c 	.word	0x2000067c

08008cf4 <_fwalk_sglue>:
 8008cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cf8:	4607      	mov	r7, r0
 8008cfa:	4688      	mov	r8, r1
 8008cfc:	4614      	mov	r4, r2
 8008cfe:	2600      	movs	r6, #0
 8008d00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d04:	f1b9 0901 	subs.w	r9, r9, #1
 8008d08:	d505      	bpl.n	8008d16 <_fwalk_sglue+0x22>
 8008d0a:	6824      	ldr	r4, [r4, #0]
 8008d0c:	2c00      	cmp	r4, #0
 8008d0e:	d1f7      	bne.n	8008d00 <_fwalk_sglue+0xc>
 8008d10:	4630      	mov	r0, r6
 8008d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d16:	89ab      	ldrh	r3, [r5, #12]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d907      	bls.n	8008d2c <_fwalk_sglue+0x38>
 8008d1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d20:	3301      	adds	r3, #1
 8008d22:	d003      	beq.n	8008d2c <_fwalk_sglue+0x38>
 8008d24:	4629      	mov	r1, r5
 8008d26:	4638      	mov	r0, r7
 8008d28:	47c0      	blx	r8
 8008d2a:	4306      	orrs	r6, r0
 8008d2c:	3568      	adds	r5, #104	@ 0x68
 8008d2e:	e7e9      	b.n	8008d04 <_fwalk_sglue+0x10>

08008d30 <iprintf>:
 8008d30:	b40f      	push	{r0, r1, r2, r3}
 8008d32:	b507      	push	{r0, r1, r2, lr}
 8008d34:	4906      	ldr	r1, [pc, #24]	@ (8008d50 <iprintf+0x20>)
 8008d36:	ab04      	add	r3, sp, #16
 8008d38:	6808      	ldr	r0, [r1, #0]
 8008d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d3e:	6881      	ldr	r1, [r0, #8]
 8008d40:	9301      	str	r3, [sp, #4]
 8008d42:	f002 fb69 	bl	800b418 <_vfiprintf_r>
 8008d46:	b003      	add	sp, #12
 8008d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d4c:	b004      	add	sp, #16
 8008d4e:	4770      	bx	lr
 8008d50:	20000184 	.word	0x20000184

08008d54 <_puts_r>:
 8008d54:	6a03      	ldr	r3, [r0, #32]
 8008d56:	b570      	push	{r4, r5, r6, lr}
 8008d58:	6884      	ldr	r4, [r0, #8]
 8008d5a:	4605      	mov	r5, r0
 8008d5c:	460e      	mov	r6, r1
 8008d5e:	b90b      	cbnz	r3, 8008d64 <_puts_r+0x10>
 8008d60:	f7ff ffb0 	bl	8008cc4 <__sinit>
 8008d64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d66:	07db      	lsls	r3, r3, #31
 8008d68:	d405      	bmi.n	8008d76 <_puts_r+0x22>
 8008d6a:	89a3      	ldrh	r3, [r4, #12]
 8008d6c:	0598      	lsls	r0, r3, #22
 8008d6e:	d402      	bmi.n	8008d76 <_puts_r+0x22>
 8008d70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d72:	f000 f9d4 	bl	800911e <__retarget_lock_acquire_recursive>
 8008d76:	89a3      	ldrh	r3, [r4, #12]
 8008d78:	0719      	lsls	r1, r3, #28
 8008d7a:	d502      	bpl.n	8008d82 <_puts_r+0x2e>
 8008d7c:	6923      	ldr	r3, [r4, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d135      	bne.n	8008dee <_puts_r+0x9a>
 8008d82:	4621      	mov	r1, r4
 8008d84:	4628      	mov	r0, r5
 8008d86:	f000 f8e5 	bl	8008f54 <__swsetup_r>
 8008d8a:	b380      	cbz	r0, 8008dee <_puts_r+0x9a>
 8008d8c:	f04f 35ff 	mov.w	r5, #4294967295
 8008d90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d92:	07da      	lsls	r2, r3, #31
 8008d94:	d405      	bmi.n	8008da2 <_puts_r+0x4e>
 8008d96:	89a3      	ldrh	r3, [r4, #12]
 8008d98:	059b      	lsls	r3, r3, #22
 8008d9a:	d402      	bmi.n	8008da2 <_puts_r+0x4e>
 8008d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d9e:	f000 f9bf 	bl	8009120 <__retarget_lock_release_recursive>
 8008da2:	4628      	mov	r0, r5
 8008da4:	bd70      	pop	{r4, r5, r6, pc}
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	da04      	bge.n	8008db4 <_puts_r+0x60>
 8008daa:	69a2      	ldr	r2, [r4, #24]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	dc17      	bgt.n	8008de0 <_puts_r+0x8c>
 8008db0:	290a      	cmp	r1, #10
 8008db2:	d015      	beq.n	8008de0 <_puts_r+0x8c>
 8008db4:	6823      	ldr	r3, [r4, #0]
 8008db6:	1c5a      	adds	r2, r3, #1
 8008db8:	6022      	str	r2, [r4, #0]
 8008dba:	7019      	strb	r1, [r3, #0]
 8008dbc:	68a3      	ldr	r3, [r4, #8]
 8008dbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	60a3      	str	r3, [r4, #8]
 8008dc6:	2900      	cmp	r1, #0
 8008dc8:	d1ed      	bne.n	8008da6 <_puts_r+0x52>
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	da11      	bge.n	8008df2 <_puts_r+0x9e>
 8008dce:	4622      	mov	r2, r4
 8008dd0:	210a      	movs	r1, #10
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	f000 f87f 	bl	8008ed6 <__swbuf_r>
 8008dd8:	3001      	adds	r0, #1
 8008dda:	d0d7      	beq.n	8008d8c <_puts_r+0x38>
 8008ddc:	250a      	movs	r5, #10
 8008dde:	e7d7      	b.n	8008d90 <_puts_r+0x3c>
 8008de0:	4622      	mov	r2, r4
 8008de2:	4628      	mov	r0, r5
 8008de4:	f000 f877 	bl	8008ed6 <__swbuf_r>
 8008de8:	3001      	adds	r0, #1
 8008dea:	d1e7      	bne.n	8008dbc <_puts_r+0x68>
 8008dec:	e7ce      	b.n	8008d8c <_puts_r+0x38>
 8008dee:	3e01      	subs	r6, #1
 8008df0:	e7e4      	b.n	8008dbc <_puts_r+0x68>
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	1c5a      	adds	r2, r3, #1
 8008df6:	6022      	str	r2, [r4, #0]
 8008df8:	220a      	movs	r2, #10
 8008dfa:	701a      	strb	r2, [r3, #0]
 8008dfc:	e7ee      	b.n	8008ddc <_puts_r+0x88>
	...

08008e00 <puts>:
 8008e00:	4b02      	ldr	r3, [pc, #8]	@ (8008e0c <puts+0xc>)
 8008e02:	4601      	mov	r1, r0
 8008e04:	6818      	ldr	r0, [r3, #0]
 8008e06:	f7ff bfa5 	b.w	8008d54 <_puts_r>
 8008e0a:	bf00      	nop
 8008e0c:	20000184 	.word	0x20000184

08008e10 <siprintf>:
 8008e10:	b40e      	push	{r1, r2, r3}
 8008e12:	b500      	push	{lr}
 8008e14:	b09c      	sub	sp, #112	@ 0x70
 8008e16:	ab1d      	add	r3, sp, #116	@ 0x74
 8008e18:	9002      	str	r0, [sp, #8]
 8008e1a:	9006      	str	r0, [sp, #24]
 8008e1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008e20:	4809      	ldr	r0, [pc, #36]	@ (8008e48 <siprintf+0x38>)
 8008e22:	9107      	str	r1, [sp, #28]
 8008e24:	9104      	str	r1, [sp, #16]
 8008e26:	4909      	ldr	r1, [pc, #36]	@ (8008e4c <siprintf+0x3c>)
 8008e28:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e2c:	9105      	str	r1, [sp, #20]
 8008e2e:	6800      	ldr	r0, [r0, #0]
 8008e30:	9301      	str	r3, [sp, #4]
 8008e32:	a902      	add	r1, sp, #8
 8008e34:	f002 f9ca 	bl	800b1cc <_svfiprintf_r>
 8008e38:	9b02      	ldr	r3, [sp, #8]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	701a      	strb	r2, [r3, #0]
 8008e3e:	b01c      	add	sp, #112	@ 0x70
 8008e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e44:	b003      	add	sp, #12
 8008e46:	4770      	bx	lr
 8008e48:	20000184 	.word	0x20000184
 8008e4c:	ffff0208 	.word	0xffff0208

08008e50 <__sread>:
 8008e50:	b510      	push	{r4, lr}
 8008e52:	460c      	mov	r4, r1
 8008e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e58:	f000 f912 	bl	8009080 <_read_r>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	bfab      	itete	ge
 8008e60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e62:	89a3      	ldrhlt	r3, [r4, #12]
 8008e64:	181b      	addge	r3, r3, r0
 8008e66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e6a:	bfac      	ite	ge
 8008e6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008e6e:	81a3      	strhlt	r3, [r4, #12]
 8008e70:	bd10      	pop	{r4, pc}

08008e72 <__swrite>:
 8008e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e76:	461f      	mov	r7, r3
 8008e78:	898b      	ldrh	r3, [r1, #12]
 8008e7a:	05db      	lsls	r3, r3, #23
 8008e7c:	4605      	mov	r5, r0
 8008e7e:	460c      	mov	r4, r1
 8008e80:	4616      	mov	r6, r2
 8008e82:	d505      	bpl.n	8008e90 <__swrite+0x1e>
 8008e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e88:	2302      	movs	r3, #2
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f000 f8e6 	bl	800905c <_lseek_r>
 8008e90:	89a3      	ldrh	r3, [r4, #12]
 8008e92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e9a:	81a3      	strh	r3, [r4, #12]
 8008e9c:	4632      	mov	r2, r6
 8008e9e:	463b      	mov	r3, r7
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea6:	f000 b8fd 	b.w	80090a4 <_write_r>

08008eaa <__sseek>:
 8008eaa:	b510      	push	{r4, lr}
 8008eac:	460c      	mov	r4, r1
 8008eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eb2:	f000 f8d3 	bl	800905c <_lseek_r>
 8008eb6:	1c43      	adds	r3, r0, #1
 8008eb8:	89a3      	ldrh	r3, [r4, #12]
 8008eba:	bf15      	itete	ne
 8008ebc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008ebe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008ec2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008ec6:	81a3      	strheq	r3, [r4, #12]
 8008ec8:	bf18      	it	ne
 8008eca:	81a3      	strhne	r3, [r4, #12]
 8008ecc:	bd10      	pop	{r4, pc}

08008ece <__sclose>:
 8008ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ed2:	f000 b8b3 	b.w	800903c <_close_r>

08008ed6 <__swbuf_r>:
 8008ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed8:	460e      	mov	r6, r1
 8008eda:	4614      	mov	r4, r2
 8008edc:	4605      	mov	r5, r0
 8008ede:	b118      	cbz	r0, 8008ee8 <__swbuf_r+0x12>
 8008ee0:	6a03      	ldr	r3, [r0, #32]
 8008ee2:	b90b      	cbnz	r3, 8008ee8 <__swbuf_r+0x12>
 8008ee4:	f7ff feee 	bl	8008cc4 <__sinit>
 8008ee8:	69a3      	ldr	r3, [r4, #24]
 8008eea:	60a3      	str	r3, [r4, #8]
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	071a      	lsls	r2, r3, #28
 8008ef0:	d501      	bpl.n	8008ef6 <__swbuf_r+0x20>
 8008ef2:	6923      	ldr	r3, [r4, #16]
 8008ef4:	b943      	cbnz	r3, 8008f08 <__swbuf_r+0x32>
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	4628      	mov	r0, r5
 8008efa:	f000 f82b 	bl	8008f54 <__swsetup_r>
 8008efe:	b118      	cbz	r0, 8008f08 <__swbuf_r+0x32>
 8008f00:	f04f 37ff 	mov.w	r7, #4294967295
 8008f04:	4638      	mov	r0, r7
 8008f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f08:	6823      	ldr	r3, [r4, #0]
 8008f0a:	6922      	ldr	r2, [r4, #16]
 8008f0c:	1a98      	subs	r0, r3, r2
 8008f0e:	6963      	ldr	r3, [r4, #20]
 8008f10:	b2f6      	uxtb	r6, r6
 8008f12:	4283      	cmp	r3, r0
 8008f14:	4637      	mov	r7, r6
 8008f16:	dc05      	bgt.n	8008f24 <__swbuf_r+0x4e>
 8008f18:	4621      	mov	r1, r4
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	f002 fc18 	bl	800b750 <_fflush_r>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d1ed      	bne.n	8008f00 <__swbuf_r+0x2a>
 8008f24:	68a3      	ldr	r3, [r4, #8]
 8008f26:	3b01      	subs	r3, #1
 8008f28:	60a3      	str	r3, [r4, #8]
 8008f2a:	6823      	ldr	r3, [r4, #0]
 8008f2c:	1c5a      	adds	r2, r3, #1
 8008f2e:	6022      	str	r2, [r4, #0]
 8008f30:	701e      	strb	r6, [r3, #0]
 8008f32:	6962      	ldr	r2, [r4, #20]
 8008f34:	1c43      	adds	r3, r0, #1
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d004      	beq.n	8008f44 <__swbuf_r+0x6e>
 8008f3a:	89a3      	ldrh	r3, [r4, #12]
 8008f3c:	07db      	lsls	r3, r3, #31
 8008f3e:	d5e1      	bpl.n	8008f04 <__swbuf_r+0x2e>
 8008f40:	2e0a      	cmp	r6, #10
 8008f42:	d1df      	bne.n	8008f04 <__swbuf_r+0x2e>
 8008f44:	4621      	mov	r1, r4
 8008f46:	4628      	mov	r0, r5
 8008f48:	f002 fc02 	bl	800b750 <_fflush_r>
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d0d9      	beq.n	8008f04 <__swbuf_r+0x2e>
 8008f50:	e7d6      	b.n	8008f00 <__swbuf_r+0x2a>
	...

08008f54 <__swsetup_r>:
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	4b29      	ldr	r3, [pc, #164]	@ (8008ffc <__swsetup_r+0xa8>)
 8008f58:	4605      	mov	r5, r0
 8008f5a:	6818      	ldr	r0, [r3, #0]
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	b118      	cbz	r0, 8008f68 <__swsetup_r+0x14>
 8008f60:	6a03      	ldr	r3, [r0, #32]
 8008f62:	b90b      	cbnz	r3, 8008f68 <__swsetup_r+0x14>
 8008f64:	f7ff feae 	bl	8008cc4 <__sinit>
 8008f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f6c:	0719      	lsls	r1, r3, #28
 8008f6e:	d422      	bmi.n	8008fb6 <__swsetup_r+0x62>
 8008f70:	06da      	lsls	r2, r3, #27
 8008f72:	d407      	bmi.n	8008f84 <__swsetup_r+0x30>
 8008f74:	2209      	movs	r2, #9
 8008f76:	602a      	str	r2, [r5, #0]
 8008f78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f7c:	81a3      	strh	r3, [r4, #12]
 8008f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f82:	e033      	b.n	8008fec <__swsetup_r+0x98>
 8008f84:	0758      	lsls	r0, r3, #29
 8008f86:	d512      	bpl.n	8008fae <__swsetup_r+0x5a>
 8008f88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f8a:	b141      	cbz	r1, 8008f9e <__swsetup_r+0x4a>
 8008f8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f90:	4299      	cmp	r1, r3
 8008f92:	d002      	beq.n	8008f9a <__swsetup_r+0x46>
 8008f94:	4628      	mov	r0, r5
 8008f96:	f000 ff37 	bl	8009e08 <_free_r>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f9e:	89a3      	ldrh	r3, [r4, #12]
 8008fa0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008fa4:	81a3      	strh	r3, [r4, #12]
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	6063      	str	r3, [r4, #4]
 8008faa:	6923      	ldr	r3, [r4, #16]
 8008fac:	6023      	str	r3, [r4, #0]
 8008fae:	89a3      	ldrh	r3, [r4, #12]
 8008fb0:	f043 0308 	orr.w	r3, r3, #8
 8008fb4:	81a3      	strh	r3, [r4, #12]
 8008fb6:	6923      	ldr	r3, [r4, #16]
 8008fb8:	b94b      	cbnz	r3, 8008fce <__swsetup_r+0x7a>
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008fc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fc4:	d003      	beq.n	8008fce <__swsetup_r+0x7a>
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4628      	mov	r0, r5
 8008fca:	f002 fc0f 	bl	800b7ec <__smakebuf_r>
 8008fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fd2:	f013 0201 	ands.w	r2, r3, #1
 8008fd6:	d00a      	beq.n	8008fee <__swsetup_r+0x9a>
 8008fd8:	2200      	movs	r2, #0
 8008fda:	60a2      	str	r2, [r4, #8]
 8008fdc:	6962      	ldr	r2, [r4, #20]
 8008fde:	4252      	negs	r2, r2
 8008fe0:	61a2      	str	r2, [r4, #24]
 8008fe2:	6922      	ldr	r2, [r4, #16]
 8008fe4:	b942      	cbnz	r2, 8008ff8 <__swsetup_r+0xa4>
 8008fe6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008fea:	d1c5      	bne.n	8008f78 <__swsetup_r+0x24>
 8008fec:	bd38      	pop	{r3, r4, r5, pc}
 8008fee:	0799      	lsls	r1, r3, #30
 8008ff0:	bf58      	it	pl
 8008ff2:	6962      	ldrpl	r2, [r4, #20]
 8008ff4:	60a2      	str	r2, [r4, #8]
 8008ff6:	e7f4      	b.n	8008fe2 <__swsetup_r+0x8e>
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	e7f7      	b.n	8008fec <__swsetup_r+0x98>
 8008ffc:	20000184 	.word	0x20000184

08009000 <memset>:
 8009000:	4402      	add	r2, r0
 8009002:	4603      	mov	r3, r0
 8009004:	4293      	cmp	r3, r2
 8009006:	d100      	bne.n	800900a <memset+0xa>
 8009008:	4770      	bx	lr
 800900a:	f803 1b01 	strb.w	r1, [r3], #1
 800900e:	e7f9      	b.n	8009004 <memset+0x4>

08009010 <strncmp>:
 8009010:	b510      	push	{r4, lr}
 8009012:	b16a      	cbz	r2, 8009030 <strncmp+0x20>
 8009014:	3901      	subs	r1, #1
 8009016:	1884      	adds	r4, r0, r2
 8009018:	f810 2b01 	ldrb.w	r2, [r0], #1
 800901c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009020:	429a      	cmp	r2, r3
 8009022:	d103      	bne.n	800902c <strncmp+0x1c>
 8009024:	42a0      	cmp	r0, r4
 8009026:	d001      	beq.n	800902c <strncmp+0x1c>
 8009028:	2a00      	cmp	r2, #0
 800902a:	d1f5      	bne.n	8009018 <strncmp+0x8>
 800902c:	1ad0      	subs	r0, r2, r3
 800902e:	bd10      	pop	{r4, pc}
 8009030:	4610      	mov	r0, r2
 8009032:	e7fc      	b.n	800902e <strncmp+0x1e>

08009034 <_localeconv_r>:
 8009034:	4800      	ldr	r0, [pc, #0]	@ (8009038 <_localeconv_r+0x4>)
 8009036:	4770      	bx	lr
 8009038:	20000108 	.word	0x20000108

0800903c <_close_r>:
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	4d06      	ldr	r5, [pc, #24]	@ (8009058 <_close_r+0x1c>)
 8009040:	2300      	movs	r3, #0
 8009042:	4604      	mov	r4, r0
 8009044:	4608      	mov	r0, r1
 8009046:	602b      	str	r3, [r5, #0]
 8009048:	f7f8 ffd6 	bl	8001ff8 <_close>
 800904c:	1c43      	adds	r3, r0, #1
 800904e:	d102      	bne.n	8009056 <_close_r+0x1a>
 8009050:	682b      	ldr	r3, [r5, #0]
 8009052:	b103      	cbz	r3, 8009056 <_close_r+0x1a>
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	bd38      	pop	{r3, r4, r5, pc}
 8009058:	20000680 	.word	0x20000680

0800905c <_lseek_r>:
 800905c:	b538      	push	{r3, r4, r5, lr}
 800905e:	4d07      	ldr	r5, [pc, #28]	@ (800907c <_lseek_r+0x20>)
 8009060:	4604      	mov	r4, r0
 8009062:	4608      	mov	r0, r1
 8009064:	4611      	mov	r1, r2
 8009066:	2200      	movs	r2, #0
 8009068:	602a      	str	r2, [r5, #0]
 800906a:	461a      	mov	r2, r3
 800906c:	f7f8 ffeb 	bl	8002046 <_lseek>
 8009070:	1c43      	adds	r3, r0, #1
 8009072:	d102      	bne.n	800907a <_lseek_r+0x1e>
 8009074:	682b      	ldr	r3, [r5, #0]
 8009076:	b103      	cbz	r3, 800907a <_lseek_r+0x1e>
 8009078:	6023      	str	r3, [r4, #0]
 800907a:	bd38      	pop	{r3, r4, r5, pc}
 800907c:	20000680 	.word	0x20000680

08009080 <_read_r>:
 8009080:	b538      	push	{r3, r4, r5, lr}
 8009082:	4d07      	ldr	r5, [pc, #28]	@ (80090a0 <_read_r+0x20>)
 8009084:	4604      	mov	r4, r0
 8009086:	4608      	mov	r0, r1
 8009088:	4611      	mov	r1, r2
 800908a:	2200      	movs	r2, #0
 800908c:	602a      	str	r2, [r5, #0]
 800908e:	461a      	mov	r2, r3
 8009090:	f7f8 ff79 	bl	8001f86 <_read>
 8009094:	1c43      	adds	r3, r0, #1
 8009096:	d102      	bne.n	800909e <_read_r+0x1e>
 8009098:	682b      	ldr	r3, [r5, #0]
 800909a:	b103      	cbz	r3, 800909e <_read_r+0x1e>
 800909c:	6023      	str	r3, [r4, #0]
 800909e:	bd38      	pop	{r3, r4, r5, pc}
 80090a0:	20000680 	.word	0x20000680

080090a4 <_write_r>:
 80090a4:	b538      	push	{r3, r4, r5, lr}
 80090a6:	4d07      	ldr	r5, [pc, #28]	@ (80090c4 <_write_r+0x20>)
 80090a8:	4604      	mov	r4, r0
 80090aa:	4608      	mov	r0, r1
 80090ac:	4611      	mov	r1, r2
 80090ae:	2200      	movs	r2, #0
 80090b0:	602a      	str	r2, [r5, #0]
 80090b2:	461a      	mov	r2, r3
 80090b4:	f7f8 ff84 	bl	8001fc0 <_write>
 80090b8:	1c43      	adds	r3, r0, #1
 80090ba:	d102      	bne.n	80090c2 <_write_r+0x1e>
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	b103      	cbz	r3, 80090c2 <_write_r+0x1e>
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	bd38      	pop	{r3, r4, r5, pc}
 80090c4:	20000680 	.word	0x20000680

080090c8 <__errno>:
 80090c8:	4b01      	ldr	r3, [pc, #4]	@ (80090d0 <__errno+0x8>)
 80090ca:	6818      	ldr	r0, [r3, #0]
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	20000184 	.word	0x20000184

080090d4 <__libc_init_array>:
 80090d4:	b570      	push	{r4, r5, r6, lr}
 80090d6:	4d0d      	ldr	r5, [pc, #52]	@ (800910c <__libc_init_array+0x38>)
 80090d8:	4c0d      	ldr	r4, [pc, #52]	@ (8009110 <__libc_init_array+0x3c>)
 80090da:	1b64      	subs	r4, r4, r5
 80090dc:	10a4      	asrs	r4, r4, #2
 80090de:	2600      	movs	r6, #0
 80090e0:	42a6      	cmp	r6, r4
 80090e2:	d109      	bne.n	80090f8 <__libc_init_array+0x24>
 80090e4:	4d0b      	ldr	r5, [pc, #44]	@ (8009114 <__libc_init_array+0x40>)
 80090e6:	4c0c      	ldr	r4, [pc, #48]	@ (8009118 <__libc_init_array+0x44>)
 80090e8:	f002 fcce 	bl	800ba88 <_init>
 80090ec:	1b64      	subs	r4, r4, r5
 80090ee:	10a4      	asrs	r4, r4, #2
 80090f0:	2600      	movs	r6, #0
 80090f2:	42a6      	cmp	r6, r4
 80090f4:	d105      	bne.n	8009102 <__libc_init_array+0x2e>
 80090f6:	bd70      	pop	{r4, r5, r6, pc}
 80090f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80090fc:	4798      	blx	r3
 80090fe:	3601      	adds	r6, #1
 8009100:	e7ee      	b.n	80090e0 <__libc_init_array+0xc>
 8009102:	f855 3b04 	ldr.w	r3, [r5], #4
 8009106:	4798      	blx	r3
 8009108:	3601      	adds	r6, #1
 800910a:	e7f2      	b.n	80090f2 <__libc_init_array+0x1e>
 800910c:	0800c0e0 	.word	0x0800c0e0
 8009110:	0800c0e0 	.word	0x0800c0e0
 8009114:	0800c0e0 	.word	0x0800c0e0
 8009118:	0800c0e4 	.word	0x0800c0e4

0800911c <__retarget_lock_init_recursive>:
 800911c:	4770      	bx	lr

0800911e <__retarget_lock_acquire_recursive>:
 800911e:	4770      	bx	lr

08009120 <__retarget_lock_release_recursive>:
 8009120:	4770      	bx	lr

08009122 <strcpy>:
 8009122:	4603      	mov	r3, r0
 8009124:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009128:	f803 2b01 	strb.w	r2, [r3], #1
 800912c:	2a00      	cmp	r2, #0
 800912e:	d1f9      	bne.n	8009124 <strcpy+0x2>
 8009130:	4770      	bx	lr

08009132 <memcpy>:
 8009132:	440a      	add	r2, r1
 8009134:	4291      	cmp	r1, r2
 8009136:	f100 33ff 	add.w	r3, r0, #4294967295
 800913a:	d100      	bne.n	800913e <memcpy+0xc>
 800913c:	4770      	bx	lr
 800913e:	b510      	push	{r4, lr}
 8009140:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009144:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009148:	4291      	cmp	r1, r2
 800914a:	d1f9      	bne.n	8009140 <memcpy+0xe>
 800914c:	bd10      	pop	{r4, pc}
	...

08009150 <nan>:
 8009150:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009158 <nan+0x8>
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	00000000 	.word	0x00000000
 800915c:	7ff80000 	.word	0x7ff80000

08009160 <nanf>:
 8009160:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009168 <nanf+0x8>
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	7fc00000 	.word	0x7fc00000

0800916c <quorem>:
 800916c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009170:	6903      	ldr	r3, [r0, #16]
 8009172:	690c      	ldr	r4, [r1, #16]
 8009174:	42a3      	cmp	r3, r4
 8009176:	4607      	mov	r7, r0
 8009178:	db7e      	blt.n	8009278 <quorem+0x10c>
 800917a:	3c01      	subs	r4, #1
 800917c:	f101 0814 	add.w	r8, r1, #20
 8009180:	00a3      	lsls	r3, r4, #2
 8009182:	f100 0514 	add.w	r5, r0, #20
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800918c:	9301      	str	r3, [sp, #4]
 800918e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009192:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009196:	3301      	adds	r3, #1
 8009198:	429a      	cmp	r2, r3
 800919a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800919e:	fbb2 f6f3 	udiv	r6, r2, r3
 80091a2:	d32e      	bcc.n	8009202 <quorem+0x96>
 80091a4:	f04f 0a00 	mov.w	sl, #0
 80091a8:	46c4      	mov	ip, r8
 80091aa:	46ae      	mov	lr, r5
 80091ac:	46d3      	mov	fp, sl
 80091ae:	f85c 3b04 	ldr.w	r3, [ip], #4
 80091b2:	b298      	uxth	r0, r3
 80091b4:	fb06 a000 	mla	r0, r6, r0, sl
 80091b8:	0c02      	lsrs	r2, r0, #16
 80091ba:	0c1b      	lsrs	r3, r3, #16
 80091bc:	fb06 2303 	mla	r3, r6, r3, r2
 80091c0:	f8de 2000 	ldr.w	r2, [lr]
 80091c4:	b280      	uxth	r0, r0
 80091c6:	b292      	uxth	r2, r2
 80091c8:	1a12      	subs	r2, r2, r0
 80091ca:	445a      	add	r2, fp
 80091cc:	f8de 0000 	ldr.w	r0, [lr]
 80091d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80091da:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80091de:	b292      	uxth	r2, r2
 80091e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80091e4:	45e1      	cmp	r9, ip
 80091e6:	f84e 2b04 	str.w	r2, [lr], #4
 80091ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80091ee:	d2de      	bcs.n	80091ae <quorem+0x42>
 80091f0:	9b00      	ldr	r3, [sp, #0]
 80091f2:	58eb      	ldr	r3, [r5, r3]
 80091f4:	b92b      	cbnz	r3, 8009202 <quorem+0x96>
 80091f6:	9b01      	ldr	r3, [sp, #4]
 80091f8:	3b04      	subs	r3, #4
 80091fa:	429d      	cmp	r5, r3
 80091fc:	461a      	mov	r2, r3
 80091fe:	d32f      	bcc.n	8009260 <quorem+0xf4>
 8009200:	613c      	str	r4, [r7, #16]
 8009202:	4638      	mov	r0, r7
 8009204:	f001 fd10 	bl	800ac28 <__mcmp>
 8009208:	2800      	cmp	r0, #0
 800920a:	db25      	blt.n	8009258 <quorem+0xec>
 800920c:	4629      	mov	r1, r5
 800920e:	2000      	movs	r0, #0
 8009210:	f858 2b04 	ldr.w	r2, [r8], #4
 8009214:	f8d1 c000 	ldr.w	ip, [r1]
 8009218:	fa1f fe82 	uxth.w	lr, r2
 800921c:	fa1f f38c 	uxth.w	r3, ip
 8009220:	eba3 030e 	sub.w	r3, r3, lr
 8009224:	4403      	add	r3, r0
 8009226:	0c12      	lsrs	r2, r2, #16
 8009228:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800922c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009230:	b29b      	uxth	r3, r3
 8009232:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009236:	45c1      	cmp	r9, r8
 8009238:	f841 3b04 	str.w	r3, [r1], #4
 800923c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009240:	d2e6      	bcs.n	8009210 <quorem+0xa4>
 8009242:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009246:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800924a:	b922      	cbnz	r2, 8009256 <quorem+0xea>
 800924c:	3b04      	subs	r3, #4
 800924e:	429d      	cmp	r5, r3
 8009250:	461a      	mov	r2, r3
 8009252:	d30b      	bcc.n	800926c <quorem+0x100>
 8009254:	613c      	str	r4, [r7, #16]
 8009256:	3601      	adds	r6, #1
 8009258:	4630      	mov	r0, r6
 800925a:	b003      	add	sp, #12
 800925c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009260:	6812      	ldr	r2, [r2, #0]
 8009262:	3b04      	subs	r3, #4
 8009264:	2a00      	cmp	r2, #0
 8009266:	d1cb      	bne.n	8009200 <quorem+0x94>
 8009268:	3c01      	subs	r4, #1
 800926a:	e7c6      	b.n	80091fa <quorem+0x8e>
 800926c:	6812      	ldr	r2, [r2, #0]
 800926e:	3b04      	subs	r3, #4
 8009270:	2a00      	cmp	r2, #0
 8009272:	d1ef      	bne.n	8009254 <quorem+0xe8>
 8009274:	3c01      	subs	r4, #1
 8009276:	e7ea      	b.n	800924e <quorem+0xe2>
 8009278:	2000      	movs	r0, #0
 800927a:	e7ee      	b.n	800925a <quorem+0xee>
 800927c:	0000      	movs	r0, r0
	...

08009280 <_dtoa_r>:
 8009280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009284:	69c7      	ldr	r7, [r0, #28]
 8009286:	b099      	sub	sp, #100	@ 0x64
 8009288:	ed8d 0b02 	vstr	d0, [sp, #8]
 800928c:	ec55 4b10 	vmov	r4, r5, d0
 8009290:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009292:	9109      	str	r1, [sp, #36]	@ 0x24
 8009294:	4683      	mov	fp, r0
 8009296:	920e      	str	r2, [sp, #56]	@ 0x38
 8009298:	9313      	str	r3, [sp, #76]	@ 0x4c
 800929a:	b97f      	cbnz	r7, 80092bc <_dtoa_r+0x3c>
 800929c:	2010      	movs	r0, #16
 800929e:	f001 f937 	bl	800a510 <malloc>
 80092a2:	4602      	mov	r2, r0
 80092a4:	f8cb 001c 	str.w	r0, [fp, #28]
 80092a8:	b920      	cbnz	r0, 80092b4 <_dtoa_r+0x34>
 80092aa:	4ba7      	ldr	r3, [pc, #668]	@ (8009548 <_dtoa_r+0x2c8>)
 80092ac:	21ef      	movs	r1, #239	@ 0xef
 80092ae:	48a7      	ldr	r0, [pc, #668]	@ (800954c <_dtoa_r+0x2cc>)
 80092b0:	f002 fb24 	bl	800b8fc <__assert_func>
 80092b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80092b8:	6007      	str	r7, [r0, #0]
 80092ba:	60c7      	str	r7, [r0, #12]
 80092bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80092c0:	6819      	ldr	r1, [r3, #0]
 80092c2:	b159      	cbz	r1, 80092dc <_dtoa_r+0x5c>
 80092c4:	685a      	ldr	r2, [r3, #4]
 80092c6:	604a      	str	r2, [r1, #4]
 80092c8:	2301      	movs	r3, #1
 80092ca:	4093      	lsls	r3, r2
 80092cc:	608b      	str	r3, [r1, #8]
 80092ce:	4658      	mov	r0, fp
 80092d0:	f001 fa26 	bl	800a720 <_Bfree>
 80092d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80092d8:	2200      	movs	r2, #0
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	1e2b      	subs	r3, r5, #0
 80092de:	bfb9      	ittee	lt
 80092e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80092e4:	9303      	strlt	r3, [sp, #12]
 80092e6:	2300      	movge	r3, #0
 80092e8:	6033      	strge	r3, [r6, #0]
 80092ea:	9f03      	ldr	r7, [sp, #12]
 80092ec:	4b98      	ldr	r3, [pc, #608]	@ (8009550 <_dtoa_r+0x2d0>)
 80092ee:	bfbc      	itt	lt
 80092f0:	2201      	movlt	r2, #1
 80092f2:	6032      	strlt	r2, [r6, #0]
 80092f4:	43bb      	bics	r3, r7
 80092f6:	d112      	bne.n	800931e <_dtoa_r+0x9e>
 80092f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80092fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009304:	4323      	orrs	r3, r4
 8009306:	f000 854d 	beq.w	8009da4 <_dtoa_r+0xb24>
 800930a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800930c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009564 <_dtoa_r+0x2e4>
 8009310:	2b00      	cmp	r3, #0
 8009312:	f000 854f 	beq.w	8009db4 <_dtoa_r+0xb34>
 8009316:	f10a 0303 	add.w	r3, sl, #3
 800931a:	f000 bd49 	b.w	8009db0 <_dtoa_r+0xb30>
 800931e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009322:	2200      	movs	r2, #0
 8009324:	ec51 0b17 	vmov	r0, r1, d7
 8009328:	2300      	movs	r3, #0
 800932a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800932e:	f7f7 fbdb 	bl	8000ae8 <__aeabi_dcmpeq>
 8009332:	4680      	mov	r8, r0
 8009334:	b158      	cbz	r0, 800934e <_dtoa_r+0xce>
 8009336:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009338:	2301      	movs	r3, #1
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800933e:	b113      	cbz	r3, 8009346 <_dtoa_r+0xc6>
 8009340:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009342:	4b84      	ldr	r3, [pc, #528]	@ (8009554 <_dtoa_r+0x2d4>)
 8009344:	6013      	str	r3, [r2, #0]
 8009346:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009568 <_dtoa_r+0x2e8>
 800934a:	f000 bd33 	b.w	8009db4 <_dtoa_r+0xb34>
 800934e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009352:	aa16      	add	r2, sp, #88	@ 0x58
 8009354:	a917      	add	r1, sp, #92	@ 0x5c
 8009356:	4658      	mov	r0, fp
 8009358:	f001 fd86 	bl	800ae68 <__d2b>
 800935c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009360:	4681      	mov	r9, r0
 8009362:	2e00      	cmp	r6, #0
 8009364:	d077      	beq.n	8009456 <_dtoa_r+0x1d6>
 8009366:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009368:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800936c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009370:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009374:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009378:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800937c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009380:	4619      	mov	r1, r3
 8009382:	2200      	movs	r2, #0
 8009384:	4b74      	ldr	r3, [pc, #464]	@ (8009558 <_dtoa_r+0x2d8>)
 8009386:	f7f6 ff8f 	bl	80002a8 <__aeabi_dsub>
 800938a:	a369      	add	r3, pc, #420	@ (adr r3, 8009530 <_dtoa_r+0x2b0>)
 800938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009390:	f7f7 f942 	bl	8000618 <__aeabi_dmul>
 8009394:	a368      	add	r3, pc, #416	@ (adr r3, 8009538 <_dtoa_r+0x2b8>)
 8009396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939a:	f7f6 ff87 	bl	80002ac <__adddf3>
 800939e:	4604      	mov	r4, r0
 80093a0:	4630      	mov	r0, r6
 80093a2:	460d      	mov	r5, r1
 80093a4:	f7f7 f8ce 	bl	8000544 <__aeabi_i2d>
 80093a8:	a365      	add	r3, pc, #404	@ (adr r3, 8009540 <_dtoa_r+0x2c0>)
 80093aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ae:	f7f7 f933 	bl	8000618 <__aeabi_dmul>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	4620      	mov	r0, r4
 80093b8:	4629      	mov	r1, r5
 80093ba:	f7f6 ff77 	bl	80002ac <__adddf3>
 80093be:	4604      	mov	r4, r0
 80093c0:	460d      	mov	r5, r1
 80093c2:	f7f7 fbd9 	bl	8000b78 <__aeabi_d2iz>
 80093c6:	2200      	movs	r2, #0
 80093c8:	4607      	mov	r7, r0
 80093ca:	2300      	movs	r3, #0
 80093cc:	4620      	mov	r0, r4
 80093ce:	4629      	mov	r1, r5
 80093d0:	f7f7 fb94 	bl	8000afc <__aeabi_dcmplt>
 80093d4:	b140      	cbz	r0, 80093e8 <_dtoa_r+0x168>
 80093d6:	4638      	mov	r0, r7
 80093d8:	f7f7 f8b4 	bl	8000544 <__aeabi_i2d>
 80093dc:	4622      	mov	r2, r4
 80093de:	462b      	mov	r3, r5
 80093e0:	f7f7 fb82 	bl	8000ae8 <__aeabi_dcmpeq>
 80093e4:	b900      	cbnz	r0, 80093e8 <_dtoa_r+0x168>
 80093e6:	3f01      	subs	r7, #1
 80093e8:	2f16      	cmp	r7, #22
 80093ea:	d851      	bhi.n	8009490 <_dtoa_r+0x210>
 80093ec:	4b5b      	ldr	r3, [pc, #364]	@ (800955c <_dtoa_r+0x2dc>)
 80093ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80093f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093fa:	f7f7 fb7f 	bl	8000afc <__aeabi_dcmplt>
 80093fe:	2800      	cmp	r0, #0
 8009400:	d048      	beq.n	8009494 <_dtoa_r+0x214>
 8009402:	3f01      	subs	r7, #1
 8009404:	2300      	movs	r3, #0
 8009406:	9312      	str	r3, [sp, #72]	@ 0x48
 8009408:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800940a:	1b9b      	subs	r3, r3, r6
 800940c:	1e5a      	subs	r2, r3, #1
 800940e:	bf44      	itt	mi
 8009410:	f1c3 0801 	rsbmi	r8, r3, #1
 8009414:	2300      	movmi	r3, #0
 8009416:	9208      	str	r2, [sp, #32]
 8009418:	bf54      	ite	pl
 800941a:	f04f 0800 	movpl.w	r8, #0
 800941e:	9308      	strmi	r3, [sp, #32]
 8009420:	2f00      	cmp	r7, #0
 8009422:	db39      	blt.n	8009498 <_dtoa_r+0x218>
 8009424:	9b08      	ldr	r3, [sp, #32]
 8009426:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009428:	443b      	add	r3, r7
 800942a:	9308      	str	r3, [sp, #32]
 800942c:	2300      	movs	r3, #0
 800942e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009432:	2b09      	cmp	r3, #9
 8009434:	d864      	bhi.n	8009500 <_dtoa_r+0x280>
 8009436:	2b05      	cmp	r3, #5
 8009438:	bfc4      	itt	gt
 800943a:	3b04      	subgt	r3, #4
 800943c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800943e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009440:	f1a3 0302 	sub.w	r3, r3, #2
 8009444:	bfcc      	ite	gt
 8009446:	2400      	movgt	r4, #0
 8009448:	2401      	movle	r4, #1
 800944a:	2b03      	cmp	r3, #3
 800944c:	d863      	bhi.n	8009516 <_dtoa_r+0x296>
 800944e:	e8df f003 	tbb	[pc, r3]
 8009452:	372a      	.short	0x372a
 8009454:	5535      	.short	0x5535
 8009456:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800945a:	441e      	add	r6, r3
 800945c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009460:	2b20      	cmp	r3, #32
 8009462:	bfc1      	itttt	gt
 8009464:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009468:	409f      	lslgt	r7, r3
 800946a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800946e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009472:	bfd6      	itet	le
 8009474:	f1c3 0320 	rsble	r3, r3, #32
 8009478:	ea47 0003 	orrgt.w	r0, r7, r3
 800947c:	fa04 f003 	lslle.w	r0, r4, r3
 8009480:	f7f7 f850 	bl	8000524 <__aeabi_ui2d>
 8009484:	2201      	movs	r2, #1
 8009486:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800948a:	3e01      	subs	r6, #1
 800948c:	9214      	str	r2, [sp, #80]	@ 0x50
 800948e:	e777      	b.n	8009380 <_dtoa_r+0x100>
 8009490:	2301      	movs	r3, #1
 8009492:	e7b8      	b.n	8009406 <_dtoa_r+0x186>
 8009494:	9012      	str	r0, [sp, #72]	@ 0x48
 8009496:	e7b7      	b.n	8009408 <_dtoa_r+0x188>
 8009498:	427b      	negs	r3, r7
 800949a:	930a      	str	r3, [sp, #40]	@ 0x28
 800949c:	2300      	movs	r3, #0
 800949e:	eba8 0807 	sub.w	r8, r8, r7
 80094a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80094a4:	e7c4      	b.n	8009430 <_dtoa_r+0x1b0>
 80094a6:	2300      	movs	r3, #0
 80094a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	dc35      	bgt.n	800951c <_dtoa_r+0x29c>
 80094b0:	2301      	movs	r3, #1
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	9307      	str	r3, [sp, #28]
 80094b6:	461a      	mov	r2, r3
 80094b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80094ba:	e00b      	b.n	80094d4 <_dtoa_r+0x254>
 80094bc:	2301      	movs	r3, #1
 80094be:	e7f3      	b.n	80094a8 <_dtoa_r+0x228>
 80094c0:	2300      	movs	r3, #0
 80094c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094c6:	18fb      	adds	r3, r7, r3
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	3301      	adds	r3, #1
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	9307      	str	r3, [sp, #28]
 80094d0:	bfb8      	it	lt
 80094d2:	2301      	movlt	r3, #1
 80094d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80094d8:	2100      	movs	r1, #0
 80094da:	2204      	movs	r2, #4
 80094dc:	f102 0514 	add.w	r5, r2, #20
 80094e0:	429d      	cmp	r5, r3
 80094e2:	d91f      	bls.n	8009524 <_dtoa_r+0x2a4>
 80094e4:	6041      	str	r1, [r0, #4]
 80094e6:	4658      	mov	r0, fp
 80094e8:	f001 f8da 	bl	800a6a0 <_Balloc>
 80094ec:	4682      	mov	sl, r0
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d13c      	bne.n	800956c <_dtoa_r+0x2ec>
 80094f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009560 <_dtoa_r+0x2e0>)
 80094f4:	4602      	mov	r2, r0
 80094f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80094fa:	e6d8      	b.n	80092ae <_dtoa_r+0x2e>
 80094fc:	2301      	movs	r3, #1
 80094fe:	e7e0      	b.n	80094c2 <_dtoa_r+0x242>
 8009500:	2401      	movs	r4, #1
 8009502:	2300      	movs	r3, #0
 8009504:	9309      	str	r3, [sp, #36]	@ 0x24
 8009506:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009508:	f04f 33ff 	mov.w	r3, #4294967295
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	9307      	str	r3, [sp, #28]
 8009510:	2200      	movs	r2, #0
 8009512:	2312      	movs	r3, #18
 8009514:	e7d0      	b.n	80094b8 <_dtoa_r+0x238>
 8009516:	2301      	movs	r3, #1
 8009518:	930b      	str	r3, [sp, #44]	@ 0x2c
 800951a:	e7f5      	b.n	8009508 <_dtoa_r+0x288>
 800951c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800951e:	9300      	str	r3, [sp, #0]
 8009520:	9307      	str	r3, [sp, #28]
 8009522:	e7d7      	b.n	80094d4 <_dtoa_r+0x254>
 8009524:	3101      	adds	r1, #1
 8009526:	0052      	lsls	r2, r2, #1
 8009528:	e7d8      	b.n	80094dc <_dtoa_r+0x25c>
 800952a:	bf00      	nop
 800952c:	f3af 8000 	nop.w
 8009530:	636f4361 	.word	0x636f4361
 8009534:	3fd287a7 	.word	0x3fd287a7
 8009538:	8b60c8b3 	.word	0x8b60c8b3
 800953c:	3fc68a28 	.word	0x3fc68a28
 8009540:	509f79fb 	.word	0x509f79fb
 8009544:	3fd34413 	.word	0x3fd34413
 8009548:	0800bd4e 	.word	0x0800bd4e
 800954c:	0800bd65 	.word	0x0800bd65
 8009550:	7ff00000 	.word	0x7ff00000
 8009554:	0800bd11 	.word	0x0800bd11
 8009558:	3ff80000 	.word	0x3ff80000
 800955c:	0800bec0 	.word	0x0800bec0
 8009560:	0800bdbd 	.word	0x0800bdbd
 8009564:	0800bd4a 	.word	0x0800bd4a
 8009568:	0800bd10 	.word	0x0800bd10
 800956c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009570:	6018      	str	r0, [r3, #0]
 8009572:	9b07      	ldr	r3, [sp, #28]
 8009574:	2b0e      	cmp	r3, #14
 8009576:	f200 80a4 	bhi.w	80096c2 <_dtoa_r+0x442>
 800957a:	2c00      	cmp	r4, #0
 800957c:	f000 80a1 	beq.w	80096c2 <_dtoa_r+0x442>
 8009580:	2f00      	cmp	r7, #0
 8009582:	dd33      	ble.n	80095ec <_dtoa_r+0x36c>
 8009584:	4bad      	ldr	r3, [pc, #692]	@ (800983c <_dtoa_r+0x5bc>)
 8009586:	f007 020f 	and.w	r2, r7, #15
 800958a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800958e:	ed93 7b00 	vldr	d7, [r3]
 8009592:	05f8      	lsls	r0, r7, #23
 8009594:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009598:	ea4f 1427 	mov.w	r4, r7, asr #4
 800959c:	d516      	bpl.n	80095cc <_dtoa_r+0x34c>
 800959e:	4ba8      	ldr	r3, [pc, #672]	@ (8009840 <_dtoa_r+0x5c0>)
 80095a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80095a8:	f7f7 f960 	bl	800086c <__aeabi_ddiv>
 80095ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095b0:	f004 040f 	and.w	r4, r4, #15
 80095b4:	2603      	movs	r6, #3
 80095b6:	4da2      	ldr	r5, [pc, #648]	@ (8009840 <_dtoa_r+0x5c0>)
 80095b8:	b954      	cbnz	r4, 80095d0 <_dtoa_r+0x350>
 80095ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095c2:	f7f7 f953 	bl	800086c <__aeabi_ddiv>
 80095c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095ca:	e028      	b.n	800961e <_dtoa_r+0x39e>
 80095cc:	2602      	movs	r6, #2
 80095ce:	e7f2      	b.n	80095b6 <_dtoa_r+0x336>
 80095d0:	07e1      	lsls	r1, r4, #31
 80095d2:	d508      	bpl.n	80095e6 <_dtoa_r+0x366>
 80095d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095dc:	f7f7 f81c 	bl	8000618 <__aeabi_dmul>
 80095e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095e4:	3601      	adds	r6, #1
 80095e6:	1064      	asrs	r4, r4, #1
 80095e8:	3508      	adds	r5, #8
 80095ea:	e7e5      	b.n	80095b8 <_dtoa_r+0x338>
 80095ec:	f000 80d2 	beq.w	8009794 <_dtoa_r+0x514>
 80095f0:	427c      	negs	r4, r7
 80095f2:	4b92      	ldr	r3, [pc, #584]	@ (800983c <_dtoa_r+0x5bc>)
 80095f4:	4d92      	ldr	r5, [pc, #584]	@ (8009840 <_dtoa_r+0x5c0>)
 80095f6:	f004 020f 	and.w	r2, r4, #15
 80095fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009602:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009606:	f7f7 f807 	bl	8000618 <__aeabi_dmul>
 800960a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800960e:	1124      	asrs	r4, r4, #4
 8009610:	2300      	movs	r3, #0
 8009612:	2602      	movs	r6, #2
 8009614:	2c00      	cmp	r4, #0
 8009616:	f040 80b2 	bne.w	800977e <_dtoa_r+0x4fe>
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1d3      	bne.n	80095c6 <_dtoa_r+0x346>
 800961e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009620:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009624:	2b00      	cmp	r3, #0
 8009626:	f000 80b7 	beq.w	8009798 <_dtoa_r+0x518>
 800962a:	4b86      	ldr	r3, [pc, #536]	@ (8009844 <_dtoa_r+0x5c4>)
 800962c:	2200      	movs	r2, #0
 800962e:	4620      	mov	r0, r4
 8009630:	4629      	mov	r1, r5
 8009632:	f7f7 fa63 	bl	8000afc <__aeabi_dcmplt>
 8009636:	2800      	cmp	r0, #0
 8009638:	f000 80ae 	beq.w	8009798 <_dtoa_r+0x518>
 800963c:	9b07      	ldr	r3, [sp, #28]
 800963e:	2b00      	cmp	r3, #0
 8009640:	f000 80aa 	beq.w	8009798 <_dtoa_r+0x518>
 8009644:	9b00      	ldr	r3, [sp, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	dd37      	ble.n	80096ba <_dtoa_r+0x43a>
 800964a:	1e7b      	subs	r3, r7, #1
 800964c:	9304      	str	r3, [sp, #16]
 800964e:	4620      	mov	r0, r4
 8009650:	4b7d      	ldr	r3, [pc, #500]	@ (8009848 <_dtoa_r+0x5c8>)
 8009652:	2200      	movs	r2, #0
 8009654:	4629      	mov	r1, r5
 8009656:	f7f6 ffdf 	bl	8000618 <__aeabi_dmul>
 800965a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800965e:	9c00      	ldr	r4, [sp, #0]
 8009660:	3601      	adds	r6, #1
 8009662:	4630      	mov	r0, r6
 8009664:	f7f6 ff6e 	bl	8000544 <__aeabi_i2d>
 8009668:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800966c:	f7f6 ffd4 	bl	8000618 <__aeabi_dmul>
 8009670:	4b76      	ldr	r3, [pc, #472]	@ (800984c <_dtoa_r+0x5cc>)
 8009672:	2200      	movs	r2, #0
 8009674:	f7f6 fe1a 	bl	80002ac <__adddf3>
 8009678:	4605      	mov	r5, r0
 800967a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800967e:	2c00      	cmp	r4, #0
 8009680:	f040 808d 	bne.w	800979e <_dtoa_r+0x51e>
 8009684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009688:	4b71      	ldr	r3, [pc, #452]	@ (8009850 <_dtoa_r+0x5d0>)
 800968a:	2200      	movs	r2, #0
 800968c:	f7f6 fe0c 	bl	80002a8 <__aeabi_dsub>
 8009690:	4602      	mov	r2, r0
 8009692:	460b      	mov	r3, r1
 8009694:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009698:	462a      	mov	r2, r5
 800969a:	4633      	mov	r3, r6
 800969c:	f7f7 fa4c 	bl	8000b38 <__aeabi_dcmpgt>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	f040 828b 	bne.w	8009bbc <_dtoa_r+0x93c>
 80096a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096aa:	462a      	mov	r2, r5
 80096ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80096b0:	f7f7 fa24 	bl	8000afc <__aeabi_dcmplt>
 80096b4:	2800      	cmp	r0, #0
 80096b6:	f040 8128 	bne.w	800990a <_dtoa_r+0x68a>
 80096ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80096be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80096c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f2c0 815a 	blt.w	800997e <_dtoa_r+0x6fe>
 80096ca:	2f0e      	cmp	r7, #14
 80096cc:	f300 8157 	bgt.w	800997e <_dtoa_r+0x6fe>
 80096d0:	4b5a      	ldr	r3, [pc, #360]	@ (800983c <_dtoa_r+0x5bc>)
 80096d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80096d6:	ed93 7b00 	vldr	d7, [r3]
 80096da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096dc:	2b00      	cmp	r3, #0
 80096de:	ed8d 7b00 	vstr	d7, [sp]
 80096e2:	da03      	bge.n	80096ec <_dtoa_r+0x46c>
 80096e4:	9b07      	ldr	r3, [sp, #28]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f340 8101 	ble.w	80098ee <_dtoa_r+0x66e>
 80096ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80096f0:	4656      	mov	r6, sl
 80096f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096f6:	4620      	mov	r0, r4
 80096f8:	4629      	mov	r1, r5
 80096fa:	f7f7 f8b7 	bl	800086c <__aeabi_ddiv>
 80096fe:	f7f7 fa3b 	bl	8000b78 <__aeabi_d2iz>
 8009702:	4680      	mov	r8, r0
 8009704:	f7f6 ff1e 	bl	8000544 <__aeabi_i2d>
 8009708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800970c:	f7f6 ff84 	bl	8000618 <__aeabi_dmul>
 8009710:	4602      	mov	r2, r0
 8009712:	460b      	mov	r3, r1
 8009714:	4620      	mov	r0, r4
 8009716:	4629      	mov	r1, r5
 8009718:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800971c:	f7f6 fdc4 	bl	80002a8 <__aeabi_dsub>
 8009720:	f806 4b01 	strb.w	r4, [r6], #1
 8009724:	9d07      	ldr	r5, [sp, #28]
 8009726:	eba6 040a 	sub.w	r4, r6, sl
 800972a:	42a5      	cmp	r5, r4
 800972c:	4602      	mov	r2, r0
 800972e:	460b      	mov	r3, r1
 8009730:	f040 8117 	bne.w	8009962 <_dtoa_r+0x6e2>
 8009734:	f7f6 fdba 	bl	80002ac <__adddf3>
 8009738:	e9dd 2300 	ldrd	r2, r3, [sp]
 800973c:	4604      	mov	r4, r0
 800973e:	460d      	mov	r5, r1
 8009740:	f7f7 f9fa 	bl	8000b38 <__aeabi_dcmpgt>
 8009744:	2800      	cmp	r0, #0
 8009746:	f040 80f9 	bne.w	800993c <_dtoa_r+0x6bc>
 800974a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800974e:	4620      	mov	r0, r4
 8009750:	4629      	mov	r1, r5
 8009752:	f7f7 f9c9 	bl	8000ae8 <__aeabi_dcmpeq>
 8009756:	b118      	cbz	r0, 8009760 <_dtoa_r+0x4e0>
 8009758:	f018 0f01 	tst.w	r8, #1
 800975c:	f040 80ee 	bne.w	800993c <_dtoa_r+0x6bc>
 8009760:	4649      	mov	r1, r9
 8009762:	4658      	mov	r0, fp
 8009764:	f000 ffdc 	bl	800a720 <_Bfree>
 8009768:	2300      	movs	r3, #0
 800976a:	7033      	strb	r3, [r6, #0]
 800976c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800976e:	3701      	adds	r7, #1
 8009770:	601f      	str	r7, [r3, #0]
 8009772:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 831d 	beq.w	8009db4 <_dtoa_r+0xb34>
 800977a:	601e      	str	r6, [r3, #0]
 800977c:	e31a      	b.n	8009db4 <_dtoa_r+0xb34>
 800977e:	07e2      	lsls	r2, r4, #31
 8009780:	d505      	bpl.n	800978e <_dtoa_r+0x50e>
 8009782:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009786:	f7f6 ff47 	bl	8000618 <__aeabi_dmul>
 800978a:	3601      	adds	r6, #1
 800978c:	2301      	movs	r3, #1
 800978e:	1064      	asrs	r4, r4, #1
 8009790:	3508      	adds	r5, #8
 8009792:	e73f      	b.n	8009614 <_dtoa_r+0x394>
 8009794:	2602      	movs	r6, #2
 8009796:	e742      	b.n	800961e <_dtoa_r+0x39e>
 8009798:	9c07      	ldr	r4, [sp, #28]
 800979a:	9704      	str	r7, [sp, #16]
 800979c:	e761      	b.n	8009662 <_dtoa_r+0x3e2>
 800979e:	4b27      	ldr	r3, [pc, #156]	@ (800983c <_dtoa_r+0x5bc>)
 80097a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80097a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80097a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80097aa:	4454      	add	r4, sl
 80097ac:	2900      	cmp	r1, #0
 80097ae:	d053      	beq.n	8009858 <_dtoa_r+0x5d8>
 80097b0:	4928      	ldr	r1, [pc, #160]	@ (8009854 <_dtoa_r+0x5d4>)
 80097b2:	2000      	movs	r0, #0
 80097b4:	f7f7 f85a 	bl	800086c <__aeabi_ddiv>
 80097b8:	4633      	mov	r3, r6
 80097ba:	462a      	mov	r2, r5
 80097bc:	f7f6 fd74 	bl	80002a8 <__aeabi_dsub>
 80097c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80097c4:	4656      	mov	r6, sl
 80097c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097ca:	f7f7 f9d5 	bl	8000b78 <__aeabi_d2iz>
 80097ce:	4605      	mov	r5, r0
 80097d0:	f7f6 feb8 	bl	8000544 <__aeabi_i2d>
 80097d4:	4602      	mov	r2, r0
 80097d6:	460b      	mov	r3, r1
 80097d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097dc:	f7f6 fd64 	bl	80002a8 <__aeabi_dsub>
 80097e0:	3530      	adds	r5, #48	@ 0x30
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80097ea:	f806 5b01 	strb.w	r5, [r6], #1
 80097ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80097f2:	f7f7 f983 	bl	8000afc <__aeabi_dcmplt>
 80097f6:	2800      	cmp	r0, #0
 80097f8:	d171      	bne.n	80098de <_dtoa_r+0x65e>
 80097fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097fe:	4911      	ldr	r1, [pc, #68]	@ (8009844 <_dtoa_r+0x5c4>)
 8009800:	2000      	movs	r0, #0
 8009802:	f7f6 fd51 	bl	80002a8 <__aeabi_dsub>
 8009806:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800980a:	f7f7 f977 	bl	8000afc <__aeabi_dcmplt>
 800980e:	2800      	cmp	r0, #0
 8009810:	f040 8095 	bne.w	800993e <_dtoa_r+0x6be>
 8009814:	42a6      	cmp	r6, r4
 8009816:	f43f af50 	beq.w	80096ba <_dtoa_r+0x43a>
 800981a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800981e:	4b0a      	ldr	r3, [pc, #40]	@ (8009848 <_dtoa_r+0x5c8>)
 8009820:	2200      	movs	r2, #0
 8009822:	f7f6 fef9 	bl	8000618 <__aeabi_dmul>
 8009826:	4b08      	ldr	r3, [pc, #32]	@ (8009848 <_dtoa_r+0x5c8>)
 8009828:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800982c:	2200      	movs	r2, #0
 800982e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009832:	f7f6 fef1 	bl	8000618 <__aeabi_dmul>
 8009836:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800983a:	e7c4      	b.n	80097c6 <_dtoa_r+0x546>
 800983c:	0800bec0 	.word	0x0800bec0
 8009840:	0800be98 	.word	0x0800be98
 8009844:	3ff00000 	.word	0x3ff00000
 8009848:	40240000 	.word	0x40240000
 800984c:	401c0000 	.word	0x401c0000
 8009850:	40140000 	.word	0x40140000
 8009854:	3fe00000 	.word	0x3fe00000
 8009858:	4631      	mov	r1, r6
 800985a:	4628      	mov	r0, r5
 800985c:	f7f6 fedc 	bl	8000618 <__aeabi_dmul>
 8009860:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009864:	9415      	str	r4, [sp, #84]	@ 0x54
 8009866:	4656      	mov	r6, sl
 8009868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800986c:	f7f7 f984 	bl	8000b78 <__aeabi_d2iz>
 8009870:	4605      	mov	r5, r0
 8009872:	f7f6 fe67 	bl	8000544 <__aeabi_i2d>
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800987e:	f7f6 fd13 	bl	80002a8 <__aeabi_dsub>
 8009882:	3530      	adds	r5, #48	@ 0x30
 8009884:	f806 5b01 	strb.w	r5, [r6], #1
 8009888:	4602      	mov	r2, r0
 800988a:	460b      	mov	r3, r1
 800988c:	42a6      	cmp	r6, r4
 800988e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009892:	f04f 0200 	mov.w	r2, #0
 8009896:	d124      	bne.n	80098e2 <_dtoa_r+0x662>
 8009898:	4bac      	ldr	r3, [pc, #688]	@ (8009b4c <_dtoa_r+0x8cc>)
 800989a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800989e:	f7f6 fd05 	bl	80002ac <__adddf3>
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098aa:	f7f7 f945 	bl	8000b38 <__aeabi_dcmpgt>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d145      	bne.n	800993e <_dtoa_r+0x6be>
 80098b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80098b6:	49a5      	ldr	r1, [pc, #660]	@ (8009b4c <_dtoa_r+0x8cc>)
 80098b8:	2000      	movs	r0, #0
 80098ba:	f7f6 fcf5 	bl	80002a8 <__aeabi_dsub>
 80098be:	4602      	mov	r2, r0
 80098c0:	460b      	mov	r3, r1
 80098c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098c6:	f7f7 f919 	bl	8000afc <__aeabi_dcmplt>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	f43f aef5 	beq.w	80096ba <_dtoa_r+0x43a>
 80098d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80098d2:	1e73      	subs	r3, r6, #1
 80098d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80098d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80098da:	2b30      	cmp	r3, #48	@ 0x30
 80098dc:	d0f8      	beq.n	80098d0 <_dtoa_r+0x650>
 80098de:	9f04      	ldr	r7, [sp, #16]
 80098e0:	e73e      	b.n	8009760 <_dtoa_r+0x4e0>
 80098e2:	4b9b      	ldr	r3, [pc, #620]	@ (8009b50 <_dtoa_r+0x8d0>)
 80098e4:	f7f6 fe98 	bl	8000618 <__aeabi_dmul>
 80098e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098ec:	e7bc      	b.n	8009868 <_dtoa_r+0x5e8>
 80098ee:	d10c      	bne.n	800990a <_dtoa_r+0x68a>
 80098f0:	4b98      	ldr	r3, [pc, #608]	@ (8009b54 <_dtoa_r+0x8d4>)
 80098f2:	2200      	movs	r2, #0
 80098f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098f8:	f7f6 fe8e 	bl	8000618 <__aeabi_dmul>
 80098fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009900:	f7f7 f910 	bl	8000b24 <__aeabi_dcmpge>
 8009904:	2800      	cmp	r0, #0
 8009906:	f000 8157 	beq.w	8009bb8 <_dtoa_r+0x938>
 800990a:	2400      	movs	r4, #0
 800990c:	4625      	mov	r5, r4
 800990e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009910:	43db      	mvns	r3, r3
 8009912:	9304      	str	r3, [sp, #16]
 8009914:	4656      	mov	r6, sl
 8009916:	2700      	movs	r7, #0
 8009918:	4621      	mov	r1, r4
 800991a:	4658      	mov	r0, fp
 800991c:	f000 ff00 	bl	800a720 <_Bfree>
 8009920:	2d00      	cmp	r5, #0
 8009922:	d0dc      	beq.n	80098de <_dtoa_r+0x65e>
 8009924:	b12f      	cbz	r7, 8009932 <_dtoa_r+0x6b2>
 8009926:	42af      	cmp	r7, r5
 8009928:	d003      	beq.n	8009932 <_dtoa_r+0x6b2>
 800992a:	4639      	mov	r1, r7
 800992c:	4658      	mov	r0, fp
 800992e:	f000 fef7 	bl	800a720 <_Bfree>
 8009932:	4629      	mov	r1, r5
 8009934:	4658      	mov	r0, fp
 8009936:	f000 fef3 	bl	800a720 <_Bfree>
 800993a:	e7d0      	b.n	80098de <_dtoa_r+0x65e>
 800993c:	9704      	str	r7, [sp, #16]
 800993e:	4633      	mov	r3, r6
 8009940:	461e      	mov	r6, r3
 8009942:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009946:	2a39      	cmp	r2, #57	@ 0x39
 8009948:	d107      	bne.n	800995a <_dtoa_r+0x6da>
 800994a:	459a      	cmp	sl, r3
 800994c:	d1f8      	bne.n	8009940 <_dtoa_r+0x6c0>
 800994e:	9a04      	ldr	r2, [sp, #16]
 8009950:	3201      	adds	r2, #1
 8009952:	9204      	str	r2, [sp, #16]
 8009954:	2230      	movs	r2, #48	@ 0x30
 8009956:	f88a 2000 	strb.w	r2, [sl]
 800995a:	781a      	ldrb	r2, [r3, #0]
 800995c:	3201      	adds	r2, #1
 800995e:	701a      	strb	r2, [r3, #0]
 8009960:	e7bd      	b.n	80098de <_dtoa_r+0x65e>
 8009962:	4b7b      	ldr	r3, [pc, #492]	@ (8009b50 <_dtoa_r+0x8d0>)
 8009964:	2200      	movs	r2, #0
 8009966:	f7f6 fe57 	bl	8000618 <__aeabi_dmul>
 800996a:	2200      	movs	r2, #0
 800996c:	2300      	movs	r3, #0
 800996e:	4604      	mov	r4, r0
 8009970:	460d      	mov	r5, r1
 8009972:	f7f7 f8b9 	bl	8000ae8 <__aeabi_dcmpeq>
 8009976:	2800      	cmp	r0, #0
 8009978:	f43f aebb 	beq.w	80096f2 <_dtoa_r+0x472>
 800997c:	e6f0      	b.n	8009760 <_dtoa_r+0x4e0>
 800997e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009980:	2a00      	cmp	r2, #0
 8009982:	f000 80db 	beq.w	8009b3c <_dtoa_r+0x8bc>
 8009986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009988:	2a01      	cmp	r2, #1
 800998a:	f300 80bf 	bgt.w	8009b0c <_dtoa_r+0x88c>
 800998e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009990:	2a00      	cmp	r2, #0
 8009992:	f000 80b7 	beq.w	8009b04 <_dtoa_r+0x884>
 8009996:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800999a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800999c:	4646      	mov	r6, r8
 800999e:	9a08      	ldr	r2, [sp, #32]
 80099a0:	2101      	movs	r1, #1
 80099a2:	441a      	add	r2, r3
 80099a4:	4658      	mov	r0, fp
 80099a6:	4498      	add	r8, r3
 80099a8:	9208      	str	r2, [sp, #32]
 80099aa:	f000 ffb7 	bl	800a91c <__i2b>
 80099ae:	4605      	mov	r5, r0
 80099b0:	b15e      	cbz	r6, 80099ca <_dtoa_r+0x74a>
 80099b2:	9b08      	ldr	r3, [sp, #32]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	dd08      	ble.n	80099ca <_dtoa_r+0x74a>
 80099b8:	42b3      	cmp	r3, r6
 80099ba:	9a08      	ldr	r2, [sp, #32]
 80099bc:	bfa8      	it	ge
 80099be:	4633      	movge	r3, r6
 80099c0:	eba8 0803 	sub.w	r8, r8, r3
 80099c4:	1af6      	subs	r6, r6, r3
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	9308      	str	r3, [sp, #32]
 80099ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099cc:	b1f3      	cbz	r3, 8009a0c <_dtoa_r+0x78c>
 80099ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f000 80b7 	beq.w	8009b44 <_dtoa_r+0x8c4>
 80099d6:	b18c      	cbz	r4, 80099fc <_dtoa_r+0x77c>
 80099d8:	4629      	mov	r1, r5
 80099da:	4622      	mov	r2, r4
 80099dc:	4658      	mov	r0, fp
 80099de:	f001 f85d 	bl	800aa9c <__pow5mult>
 80099e2:	464a      	mov	r2, r9
 80099e4:	4601      	mov	r1, r0
 80099e6:	4605      	mov	r5, r0
 80099e8:	4658      	mov	r0, fp
 80099ea:	f000 ffad 	bl	800a948 <__multiply>
 80099ee:	4649      	mov	r1, r9
 80099f0:	9004      	str	r0, [sp, #16]
 80099f2:	4658      	mov	r0, fp
 80099f4:	f000 fe94 	bl	800a720 <_Bfree>
 80099f8:	9b04      	ldr	r3, [sp, #16]
 80099fa:	4699      	mov	r9, r3
 80099fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099fe:	1b1a      	subs	r2, r3, r4
 8009a00:	d004      	beq.n	8009a0c <_dtoa_r+0x78c>
 8009a02:	4649      	mov	r1, r9
 8009a04:	4658      	mov	r0, fp
 8009a06:	f001 f849 	bl	800aa9c <__pow5mult>
 8009a0a:	4681      	mov	r9, r0
 8009a0c:	2101      	movs	r1, #1
 8009a0e:	4658      	mov	r0, fp
 8009a10:	f000 ff84 	bl	800a91c <__i2b>
 8009a14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a16:	4604      	mov	r4, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f000 81cf 	beq.w	8009dbc <_dtoa_r+0xb3c>
 8009a1e:	461a      	mov	r2, r3
 8009a20:	4601      	mov	r1, r0
 8009a22:	4658      	mov	r0, fp
 8009a24:	f001 f83a 	bl	800aa9c <__pow5mult>
 8009a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	4604      	mov	r4, r0
 8009a2e:	f300 8095 	bgt.w	8009b5c <_dtoa_r+0x8dc>
 8009a32:	9b02      	ldr	r3, [sp, #8]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f040 8087 	bne.w	8009b48 <_dtoa_r+0x8c8>
 8009a3a:	9b03      	ldr	r3, [sp, #12]
 8009a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f040 8089 	bne.w	8009b58 <_dtoa_r+0x8d8>
 8009a46:	9b03      	ldr	r3, [sp, #12]
 8009a48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a4c:	0d1b      	lsrs	r3, r3, #20
 8009a4e:	051b      	lsls	r3, r3, #20
 8009a50:	b12b      	cbz	r3, 8009a5e <_dtoa_r+0x7de>
 8009a52:	9b08      	ldr	r3, [sp, #32]
 8009a54:	3301      	adds	r3, #1
 8009a56:	9308      	str	r3, [sp, #32]
 8009a58:	f108 0801 	add.w	r8, r8, #1
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f000 81b0 	beq.w	8009dc8 <_dtoa_r+0xb48>
 8009a68:	6923      	ldr	r3, [r4, #16]
 8009a6a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a6e:	6918      	ldr	r0, [r3, #16]
 8009a70:	f000 ff08 	bl	800a884 <__hi0bits>
 8009a74:	f1c0 0020 	rsb	r0, r0, #32
 8009a78:	9b08      	ldr	r3, [sp, #32]
 8009a7a:	4418      	add	r0, r3
 8009a7c:	f010 001f 	ands.w	r0, r0, #31
 8009a80:	d077      	beq.n	8009b72 <_dtoa_r+0x8f2>
 8009a82:	f1c0 0320 	rsb	r3, r0, #32
 8009a86:	2b04      	cmp	r3, #4
 8009a88:	dd6b      	ble.n	8009b62 <_dtoa_r+0x8e2>
 8009a8a:	9b08      	ldr	r3, [sp, #32]
 8009a8c:	f1c0 001c 	rsb	r0, r0, #28
 8009a90:	4403      	add	r3, r0
 8009a92:	4480      	add	r8, r0
 8009a94:	4406      	add	r6, r0
 8009a96:	9308      	str	r3, [sp, #32]
 8009a98:	f1b8 0f00 	cmp.w	r8, #0
 8009a9c:	dd05      	ble.n	8009aaa <_dtoa_r+0x82a>
 8009a9e:	4649      	mov	r1, r9
 8009aa0:	4642      	mov	r2, r8
 8009aa2:	4658      	mov	r0, fp
 8009aa4:	f001 f854 	bl	800ab50 <__lshift>
 8009aa8:	4681      	mov	r9, r0
 8009aaa:	9b08      	ldr	r3, [sp, #32]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	dd05      	ble.n	8009abc <_dtoa_r+0x83c>
 8009ab0:	4621      	mov	r1, r4
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	4658      	mov	r0, fp
 8009ab6:	f001 f84b 	bl	800ab50 <__lshift>
 8009aba:	4604      	mov	r4, r0
 8009abc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d059      	beq.n	8009b76 <_dtoa_r+0x8f6>
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	4648      	mov	r0, r9
 8009ac6:	f001 f8af 	bl	800ac28 <__mcmp>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	da53      	bge.n	8009b76 <_dtoa_r+0x8f6>
 8009ace:	1e7b      	subs	r3, r7, #1
 8009ad0:	9304      	str	r3, [sp, #16]
 8009ad2:	4649      	mov	r1, r9
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	220a      	movs	r2, #10
 8009ad8:	4658      	mov	r0, fp
 8009ada:	f000 fe43 	bl	800a764 <__multadd>
 8009ade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ae0:	4681      	mov	r9, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f000 8172 	beq.w	8009dcc <_dtoa_r+0xb4c>
 8009ae8:	2300      	movs	r3, #0
 8009aea:	4629      	mov	r1, r5
 8009aec:	220a      	movs	r2, #10
 8009aee:	4658      	mov	r0, fp
 8009af0:	f000 fe38 	bl	800a764 <__multadd>
 8009af4:	9b00      	ldr	r3, [sp, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	4605      	mov	r5, r0
 8009afa:	dc67      	bgt.n	8009bcc <_dtoa_r+0x94c>
 8009afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	dc41      	bgt.n	8009b86 <_dtoa_r+0x906>
 8009b02:	e063      	b.n	8009bcc <_dtoa_r+0x94c>
 8009b04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009b06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009b0a:	e746      	b.n	800999a <_dtoa_r+0x71a>
 8009b0c:	9b07      	ldr	r3, [sp, #28]
 8009b0e:	1e5c      	subs	r4, r3, #1
 8009b10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b12:	42a3      	cmp	r3, r4
 8009b14:	bfbf      	itttt	lt
 8009b16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009b18:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009b1a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009b1c:	1ae3      	sublt	r3, r4, r3
 8009b1e:	bfb4      	ite	lt
 8009b20:	18d2      	addlt	r2, r2, r3
 8009b22:	1b1c      	subge	r4, r3, r4
 8009b24:	9b07      	ldr	r3, [sp, #28]
 8009b26:	bfbc      	itt	lt
 8009b28:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009b2a:	2400      	movlt	r4, #0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	bfb5      	itete	lt
 8009b30:	eba8 0603 	sublt.w	r6, r8, r3
 8009b34:	9b07      	ldrge	r3, [sp, #28]
 8009b36:	2300      	movlt	r3, #0
 8009b38:	4646      	movge	r6, r8
 8009b3a:	e730      	b.n	800999e <_dtoa_r+0x71e>
 8009b3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009b3e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009b40:	4646      	mov	r6, r8
 8009b42:	e735      	b.n	80099b0 <_dtoa_r+0x730>
 8009b44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b46:	e75c      	b.n	8009a02 <_dtoa_r+0x782>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	e788      	b.n	8009a5e <_dtoa_r+0x7de>
 8009b4c:	3fe00000 	.word	0x3fe00000
 8009b50:	40240000 	.word	0x40240000
 8009b54:	40140000 	.word	0x40140000
 8009b58:	9b02      	ldr	r3, [sp, #8]
 8009b5a:	e780      	b.n	8009a5e <_dtoa_r+0x7de>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b60:	e782      	b.n	8009a68 <_dtoa_r+0x7e8>
 8009b62:	d099      	beq.n	8009a98 <_dtoa_r+0x818>
 8009b64:	9a08      	ldr	r2, [sp, #32]
 8009b66:	331c      	adds	r3, #28
 8009b68:	441a      	add	r2, r3
 8009b6a:	4498      	add	r8, r3
 8009b6c:	441e      	add	r6, r3
 8009b6e:	9208      	str	r2, [sp, #32]
 8009b70:	e792      	b.n	8009a98 <_dtoa_r+0x818>
 8009b72:	4603      	mov	r3, r0
 8009b74:	e7f6      	b.n	8009b64 <_dtoa_r+0x8e4>
 8009b76:	9b07      	ldr	r3, [sp, #28]
 8009b78:	9704      	str	r7, [sp, #16]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	dc20      	bgt.n	8009bc0 <_dtoa_r+0x940>
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	dd1e      	ble.n	8009bc4 <_dtoa_r+0x944>
 8009b86:	9b00      	ldr	r3, [sp, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f47f aec0 	bne.w	800990e <_dtoa_r+0x68e>
 8009b8e:	4621      	mov	r1, r4
 8009b90:	2205      	movs	r2, #5
 8009b92:	4658      	mov	r0, fp
 8009b94:	f000 fde6 	bl	800a764 <__multadd>
 8009b98:	4601      	mov	r1, r0
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	4648      	mov	r0, r9
 8009b9e:	f001 f843 	bl	800ac28 <__mcmp>
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	f77f aeb3 	ble.w	800990e <_dtoa_r+0x68e>
 8009ba8:	4656      	mov	r6, sl
 8009baa:	2331      	movs	r3, #49	@ 0x31
 8009bac:	f806 3b01 	strb.w	r3, [r6], #1
 8009bb0:	9b04      	ldr	r3, [sp, #16]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	9304      	str	r3, [sp, #16]
 8009bb6:	e6ae      	b.n	8009916 <_dtoa_r+0x696>
 8009bb8:	9c07      	ldr	r4, [sp, #28]
 8009bba:	9704      	str	r7, [sp, #16]
 8009bbc:	4625      	mov	r5, r4
 8009bbe:	e7f3      	b.n	8009ba8 <_dtoa_r+0x928>
 8009bc0:	9b07      	ldr	r3, [sp, #28]
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f000 8104 	beq.w	8009dd4 <_dtoa_r+0xb54>
 8009bcc:	2e00      	cmp	r6, #0
 8009bce:	dd05      	ble.n	8009bdc <_dtoa_r+0x95c>
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	4632      	mov	r2, r6
 8009bd4:	4658      	mov	r0, fp
 8009bd6:	f000 ffbb 	bl	800ab50 <__lshift>
 8009bda:	4605      	mov	r5, r0
 8009bdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d05a      	beq.n	8009c98 <_dtoa_r+0xa18>
 8009be2:	6869      	ldr	r1, [r5, #4]
 8009be4:	4658      	mov	r0, fp
 8009be6:	f000 fd5b 	bl	800a6a0 <_Balloc>
 8009bea:	4606      	mov	r6, r0
 8009bec:	b928      	cbnz	r0, 8009bfa <_dtoa_r+0x97a>
 8009bee:	4b84      	ldr	r3, [pc, #528]	@ (8009e00 <_dtoa_r+0xb80>)
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009bf6:	f7ff bb5a 	b.w	80092ae <_dtoa_r+0x2e>
 8009bfa:	692a      	ldr	r2, [r5, #16]
 8009bfc:	3202      	adds	r2, #2
 8009bfe:	0092      	lsls	r2, r2, #2
 8009c00:	f105 010c 	add.w	r1, r5, #12
 8009c04:	300c      	adds	r0, #12
 8009c06:	f7ff fa94 	bl	8009132 <memcpy>
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	4631      	mov	r1, r6
 8009c0e:	4658      	mov	r0, fp
 8009c10:	f000 ff9e 	bl	800ab50 <__lshift>
 8009c14:	f10a 0301 	add.w	r3, sl, #1
 8009c18:	9307      	str	r3, [sp, #28]
 8009c1a:	9b00      	ldr	r3, [sp, #0]
 8009c1c:	4453      	add	r3, sl
 8009c1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c20:	9b02      	ldr	r3, [sp, #8]
 8009c22:	f003 0301 	and.w	r3, r3, #1
 8009c26:	462f      	mov	r7, r5
 8009c28:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c2a:	4605      	mov	r5, r0
 8009c2c:	9b07      	ldr	r3, [sp, #28]
 8009c2e:	4621      	mov	r1, r4
 8009c30:	3b01      	subs	r3, #1
 8009c32:	4648      	mov	r0, r9
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	f7ff fa99 	bl	800916c <quorem>
 8009c3a:	4639      	mov	r1, r7
 8009c3c:	9002      	str	r0, [sp, #8]
 8009c3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009c42:	4648      	mov	r0, r9
 8009c44:	f000 fff0 	bl	800ac28 <__mcmp>
 8009c48:	462a      	mov	r2, r5
 8009c4a:	9008      	str	r0, [sp, #32]
 8009c4c:	4621      	mov	r1, r4
 8009c4e:	4658      	mov	r0, fp
 8009c50:	f001 f806 	bl	800ac60 <__mdiff>
 8009c54:	68c2      	ldr	r2, [r0, #12]
 8009c56:	4606      	mov	r6, r0
 8009c58:	bb02      	cbnz	r2, 8009c9c <_dtoa_r+0xa1c>
 8009c5a:	4601      	mov	r1, r0
 8009c5c:	4648      	mov	r0, r9
 8009c5e:	f000 ffe3 	bl	800ac28 <__mcmp>
 8009c62:	4602      	mov	r2, r0
 8009c64:	4631      	mov	r1, r6
 8009c66:	4658      	mov	r0, fp
 8009c68:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c6a:	f000 fd59 	bl	800a720 <_Bfree>
 8009c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c72:	9e07      	ldr	r6, [sp, #28]
 8009c74:	ea43 0102 	orr.w	r1, r3, r2
 8009c78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c7a:	4319      	orrs	r1, r3
 8009c7c:	d110      	bne.n	8009ca0 <_dtoa_r+0xa20>
 8009c7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c82:	d029      	beq.n	8009cd8 <_dtoa_r+0xa58>
 8009c84:	9b08      	ldr	r3, [sp, #32]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	dd02      	ble.n	8009c90 <_dtoa_r+0xa10>
 8009c8a:	9b02      	ldr	r3, [sp, #8]
 8009c8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009c90:	9b00      	ldr	r3, [sp, #0]
 8009c92:	f883 8000 	strb.w	r8, [r3]
 8009c96:	e63f      	b.n	8009918 <_dtoa_r+0x698>
 8009c98:	4628      	mov	r0, r5
 8009c9a:	e7bb      	b.n	8009c14 <_dtoa_r+0x994>
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	e7e1      	b.n	8009c64 <_dtoa_r+0x9e4>
 8009ca0:	9b08      	ldr	r3, [sp, #32]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	db04      	blt.n	8009cb0 <_dtoa_r+0xa30>
 8009ca6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ca8:	430b      	orrs	r3, r1
 8009caa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009cac:	430b      	orrs	r3, r1
 8009cae:	d120      	bne.n	8009cf2 <_dtoa_r+0xa72>
 8009cb0:	2a00      	cmp	r2, #0
 8009cb2:	dded      	ble.n	8009c90 <_dtoa_r+0xa10>
 8009cb4:	4649      	mov	r1, r9
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	4658      	mov	r0, fp
 8009cba:	f000 ff49 	bl	800ab50 <__lshift>
 8009cbe:	4621      	mov	r1, r4
 8009cc0:	4681      	mov	r9, r0
 8009cc2:	f000 ffb1 	bl	800ac28 <__mcmp>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	dc03      	bgt.n	8009cd2 <_dtoa_r+0xa52>
 8009cca:	d1e1      	bne.n	8009c90 <_dtoa_r+0xa10>
 8009ccc:	f018 0f01 	tst.w	r8, #1
 8009cd0:	d0de      	beq.n	8009c90 <_dtoa_r+0xa10>
 8009cd2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009cd6:	d1d8      	bne.n	8009c8a <_dtoa_r+0xa0a>
 8009cd8:	9a00      	ldr	r2, [sp, #0]
 8009cda:	2339      	movs	r3, #57	@ 0x39
 8009cdc:	7013      	strb	r3, [r2, #0]
 8009cde:	4633      	mov	r3, r6
 8009ce0:	461e      	mov	r6, r3
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009ce8:	2a39      	cmp	r2, #57	@ 0x39
 8009cea:	d052      	beq.n	8009d92 <_dtoa_r+0xb12>
 8009cec:	3201      	adds	r2, #1
 8009cee:	701a      	strb	r2, [r3, #0]
 8009cf0:	e612      	b.n	8009918 <_dtoa_r+0x698>
 8009cf2:	2a00      	cmp	r2, #0
 8009cf4:	dd07      	ble.n	8009d06 <_dtoa_r+0xa86>
 8009cf6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009cfa:	d0ed      	beq.n	8009cd8 <_dtoa_r+0xa58>
 8009cfc:	9a00      	ldr	r2, [sp, #0]
 8009cfe:	f108 0301 	add.w	r3, r8, #1
 8009d02:	7013      	strb	r3, [r2, #0]
 8009d04:	e608      	b.n	8009918 <_dtoa_r+0x698>
 8009d06:	9b07      	ldr	r3, [sp, #28]
 8009d08:	9a07      	ldr	r2, [sp, #28]
 8009d0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009d0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d028      	beq.n	8009d66 <_dtoa_r+0xae6>
 8009d14:	4649      	mov	r1, r9
 8009d16:	2300      	movs	r3, #0
 8009d18:	220a      	movs	r2, #10
 8009d1a:	4658      	mov	r0, fp
 8009d1c:	f000 fd22 	bl	800a764 <__multadd>
 8009d20:	42af      	cmp	r7, r5
 8009d22:	4681      	mov	r9, r0
 8009d24:	f04f 0300 	mov.w	r3, #0
 8009d28:	f04f 020a 	mov.w	r2, #10
 8009d2c:	4639      	mov	r1, r7
 8009d2e:	4658      	mov	r0, fp
 8009d30:	d107      	bne.n	8009d42 <_dtoa_r+0xac2>
 8009d32:	f000 fd17 	bl	800a764 <__multadd>
 8009d36:	4607      	mov	r7, r0
 8009d38:	4605      	mov	r5, r0
 8009d3a:	9b07      	ldr	r3, [sp, #28]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	9307      	str	r3, [sp, #28]
 8009d40:	e774      	b.n	8009c2c <_dtoa_r+0x9ac>
 8009d42:	f000 fd0f 	bl	800a764 <__multadd>
 8009d46:	4629      	mov	r1, r5
 8009d48:	4607      	mov	r7, r0
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	220a      	movs	r2, #10
 8009d4e:	4658      	mov	r0, fp
 8009d50:	f000 fd08 	bl	800a764 <__multadd>
 8009d54:	4605      	mov	r5, r0
 8009d56:	e7f0      	b.n	8009d3a <_dtoa_r+0xaba>
 8009d58:	9b00      	ldr	r3, [sp, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	bfcc      	ite	gt
 8009d5e:	461e      	movgt	r6, r3
 8009d60:	2601      	movle	r6, #1
 8009d62:	4456      	add	r6, sl
 8009d64:	2700      	movs	r7, #0
 8009d66:	4649      	mov	r1, r9
 8009d68:	2201      	movs	r2, #1
 8009d6a:	4658      	mov	r0, fp
 8009d6c:	f000 fef0 	bl	800ab50 <__lshift>
 8009d70:	4621      	mov	r1, r4
 8009d72:	4681      	mov	r9, r0
 8009d74:	f000 ff58 	bl	800ac28 <__mcmp>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	dcb0      	bgt.n	8009cde <_dtoa_r+0xa5e>
 8009d7c:	d102      	bne.n	8009d84 <_dtoa_r+0xb04>
 8009d7e:	f018 0f01 	tst.w	r8, #1
 8009d82:	d1ac      	bne.n	8009cde <_dtoa_r+0xa5e>
 8009d84:	4633      	mov	r3, r6
 8009d86:	461e      	mov	r6, r3
 8009d88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d8c:	2a30      	cmp	r2, #48	@ 0x30
 8009d8e:	d0fa      	beq.n	8009d86 <_dtoa_r+0xb06>
 8009d90:	e5c2      	b.n	8009918 <_dtoa_r+0x698>
 8009d92:	459a      	cmp	sl, r3
 8009d94:	d1a4      	bne.n	8009ce0 <_dtoa_r+0xa60>
 8009d96:	9b04      	ldr	r3, [sp, #16]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	9304      	str	r3, [sp, #16]
 8009d9c:	2331      	movs	r3, #49	@ 0x31
 8009d9e:	f88a 3000 	strb.w	r3, [sl]
 8009da2:	e5b9      	b.n	8009918 <_dtoa_r+0x698>
 8009da4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009da6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009e04 <_dtoa_r+0xb84>
 8009daa:	b11b      	cbz	r3, 8009db4 <_dtoa_r+0xb34>
 8009dac:	f10a 0308 	add.w	r3, sl, #8
 8009db0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009db2:	6013      	str	r3, [r2, #0]
 8009db4:	4650      	mov	r0, sl
 8009db6:	b019      	add	sp, #100	@ 0x64
 8009db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	f77f ae37 	ble.w	8009a32 <_dtoa_r+0x7b2>
 8009dc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dc8:	2001      	movs	r0, #1
 8009dca:	e655      	b.n	8009a78 <_dtoa_r+0x7f8>
 8009dcc:	9b00      	ldr	r3, [sp, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f77f aed6 	ble.w	8009b80 <_dtoa_r+0x900>
 8009dd4:	4656      	mov	r6, sl
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	4648      	mov	r0, r9
 8009dda:	f7ff f9c7 	bl	800916c <quorem>
 8009dde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009de2:	f806 8b01 	strb.w	r8, [r6], #1
 8009de6:	9b00      	ldr	r3, [sp, #0]
 8009de8:	eba6 020a 	sub.w	r2, r6, sl
 8009dec:	4293      	cmp	r3, r2
 8009dee:	ddb3      	ble.n	8009d58 <_dtoa_r+0xad8>
 8009df0:	4649      	mov	r1, r9
 8009df2:	2300      	movs	r3, #0
 8009df4:	220a      	movs	r2, #10
 8009df6:	4658      	mov	r0, fp
 8009df8:	f000 fcb4 	bl	800a764 <__multadd>
 8009dfc:	4681      	mov	r9, r0
 8009dfe:	e7ea      	b.n	8009dd6 <_dtoa_r+0xb56>
 8009e00:	0800bdbd 	.word	0x0800bdbd
 8009e04:	0800bd41 	.word	0x0800bd41

08009e08 <_free_r>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	4605      	mov	r5, r0
 8009e0c:	2900      	cmp	r1, #0
 8009e0e:	d041      	beq.n	8009e94 <_free_r+0x8c>
 8009e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e14:	1f0c      	subs	r4, r1, #4
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	bfb8      	it	lt
 8009e1a:	18e4      	addlt	r4, r4, r3
 8009e1c:	f000 fc34 	bl	800a688 <__malloc_lock>
 8009e20:	4a1d      	ldr	r2, [pc, #116]	@ (8009e98 <_free_r+0x90>)
 8009e22:	6813      	ldr	r3, [r2, #0]
 8009e24:	b933      	cbnz	r3, 8009e34 <_free_r+0x2c>
 8009e26:	6063      	str	r3, [r4, #4]
 8009e28:	6014      	str	r4, [r2, #0]
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e30:	f000 bc30 	b.w	800a694 <__malloc_unlock>
 8009e34:	42a3      	cmp	r3, r4
 8009e36:	d908      	bls.n	8009e4a <_free_r+0x42>
 8009e38:	6820      	ldr	r0, [r4, #0]
 8009e3a:	1821      	adds	r1, r4, r0
 8009e3c:	428b      	cmp	r3, r1
 8009e3e:	bf01      	itttt	eq
 8009e40:	6819      	ldreq	r1, [r3, #0]
 8009e42:	685b      	ldreq	r3, [r3, #4]
 8009e44:	1809      	addeq	r1, r1, r0
 8009e46:	6021      	streq	r1, [r4, #0]
 8009e48:	e7ed      	b.n	8009e26 <_free_r+0x1e>
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	b10b      	cbz	r3, 8009e54 <_free_r+0x4c>
 8009e50:	42a3      	cmp	r3, r4
 8009e52:	d9fa      	bls.n	8009e4a <_free_r+0x42>
 8009e54:	6811      	ldr	r1, [r2, #0]
 8009e56:	1850      	adds	r0, r2, r1
 8009e58:	42a0      	cmp	r0, r4
 8009e5a:	d10b      	bne.n	8009e74 <_free_r+0x6c>
 8009e5c:	6820      	ldr	r0, [r4, #0]
 8009e5e:	4401      	add	r1, r0
 8009e60:	1850      	adds	r0, r2, r1
 8009e62:	4283      	cmp	r3, r0
 8009e64:	6011      	str	r1, [r2, #0]
 8009e66:	d1e0      	bne.n	8009e2a <_free_r+0x22>
 8009e68:	6818      	ldr	r0, [r3, #0]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	6053      	str	r3, [r2, #4]
 8009e6e:	4408      	add	r0, r1
 8009e70:	6010      	str	r0, [r2, #0]
 8009e72:	e7da      	b.n	8009e2a <_free_r+0x22>
 8009e74:	d902      	bls.n	8009e7c <_free_r+0x74>
 8009e76:	230c      	movs	r3, #12
 8009e78:	602b      	str	r3, [r5, #0]
 8009e7a:	e7d6      	b.n	8009e2a <_free_r+0x22>
 8009e7c:	6820      	ldr	r0, [r4, #0]
 8009e7e:	1821      	adds	r1, r4, r0
 8009e80:	428b      	cmp	r3, r1
 8009e82:	bf04      	itt	eq
 8009e84:	6819      	ldreq	r1, [r3, #0]
 8009e86:	685b      	ldreq	r3, [r3, #4]
 8009e88:	6063      	str	r3, [r4, #4]
 8009e8a:	bf04      	itt	eq
 8009e8c:	1809      	addeq	r1, r1, r0
 8009e8e:	6021      	streq	r1, [r4, #0]
 8009e90:	6054      	str	r4, [r2, #4]
 8009e92:	e7ca      	b.n	8009e2a <_free_r+0x22>
 8009e94:	bd38      	pop	{r3, r4, r5, pc}
 8009e96:	bf00      	nop
 8009e98:	2000068c 	.word	0x2000068c

08009e9c <rshift>:
 8009e9c:	6903      	ldr	r3, [r0, #16]
 8009e9e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009ea2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ea6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009eaa:	f100 0414 	add.w	r4, r0, #20
 8009eae:	dd45      	ble.n	8009f3c <rshift+0xa0>
 8009eb0:	f011 011f 	ands.w	r1, r1, #31
 8009eb4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009eb8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ebc:	d10c      	bne.n	8009ed8 <rshift+0x3c>
 8009ebe:	f100 0710 	add.w	r7, r0, #16
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	42b1      	cmp	r1, r6
 8009ec6:	d334      	bcc.n	8009f32 <rshift+0x96>
 8009ec8:	1a9b      	subs	r3, r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	1eea      	subs	r2, r5, #3
 8009ece:	4296      	cmp	r6, r2
 8009ed0:	bf38      	it	cc
 8009ed2:	2300      	movcc	r3, #0
 8009ed4:	4423      	add	r3, r4
 8009ed6:	e015      	b.n	8009f04 <rshift+0x68>
 8009ed8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009edc:	f1c1 0820 	rsb	r8, r1, #32
 8009ee0:	40cf      	lsrs	r7, r1
 8009ee2:	f105 0e04 	add.w	lr, r5, #4
 8009ee6:	46a1      	mov	r9, r4
 8009ee8:	4576      	cmp	r6, lr
 8009eea:	46f4      	mov	ip, lr
 8009eec:	d815      	bhi.n	8009f1a <rshift+0x7e>
 8009eee:	1a9a      	subs	r2, r3, r2
 8009ef0:	0092      	lsls	r2, r2, #2
 8009ef2:	3a04      	subs	r2, #4
 8009ef4:	3501      	adds	r5, #1
 8009ef6:	42ae      	cmp	r6, r5
 8009ef8:	bf38      	it	cc
 8009efa:	2200      	movcc	r2, #0
 8009efc:	18a3      	adds	r3, r4, r2
 8009efe:	50a7      	str	r7, [r4, r2]
 8009f00:	b107      	cbz	r7, 8009f04 <rshift+0x68>
 8009f02:	3304      	adds	r3, #4
 8009f04:	1b1a      	subs	r2, r3, r4
 8009f06:	42a3      	cmp	r3, r4
 8009f08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f0c:	bf08      	it	eq
 8009f0e:	2300      	moveq	r3, #0
 8009f10:	6102      	str	r2, [r0, #16]
 8009f12:	bf08      	it	eq
 8009f14:	6143      	streq	r3, [r0, #20]
 8009f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f1a:	f8dc c000 	ldr.w	ip, [ip]
 8009f1e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f22:	ea4c 0707 	orr.w	r7, ip, r7
 8009f26:	f849 7b04 	str.w	r7, [r9], #4
 8009f2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f2e:	40cf      	lsrs	r7, r1
 8009f30:	e7da      	b.n	8009ee8 <rshift+0x4c>
 8009f32:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f36:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f3a:	e7c3      	b.n	8009ec4 <rshift+0x28>
 8009f3c:	4623      	mov	r3, r4
 8009f3e:	e7e1      	b.n	8009f04 <rshift+0x68>

08009f40 <__hexdig_fun>:
 8009f40:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009f44:	2b09      	cmp	r3, #9
 8009f46:	d802      	bhi.n	8009f4e <__hexdig_fun+0xe>
 8009f48:	3820      	subs	r0, #32
 8009f4a:	b2c0      	uxtb	r0, r0
 8009f4c:	4770      	bx	lr
 8009f4e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009f52:	2b05      	cmp	r3, #5
 8009f54:	d801      	bhi.n	8009f5a <__hexdig_fun+0x1a>
 8009f56:	3847      	subs	r0, #71	@ 0x47
 8009f58:	e7f7      	b.n	8009f4a <__hexdig_fun+0xa>
 8009f5a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009f5e:	2b05      	cmp	r3, #5
 8009f60:	d801      	bhi.n	8009f66 <__hexdig_fun+0x26>
 8009f62:	3827      	subs	r0, #39	@ 0x27
 8009f64:	e7f1      	b.n	8009f4a <__hexdig_fun+0xa>
 8009f66:	2000      	movs	r0, #0
 8009f68:	4770      	bx	lr
	...

08009f6c <__gethex>:
 8009f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f70:	b085      	sub	sp, #20
 8009f72:	468a      	mov	sl, r1
 8009f74:	9302      	str	r3, [sp, #8]
 8009f76:	680b      	ldr	r3, [r1, #0]
 8009f78:	9001      	str	r0, [sp, #4]
 8009f7a:	4690      	mov	r8, r2
 8009f7c:	1c9c      	adds	r4, r3, #2
 8009f7e:	46a1      	mov	r9, r4
 8009f80:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009f84:	2830      	cmp	r0, #48	@ 0x30
 8009f86:	d0fa      	beq.n	8009f7e <__gethex+0x12>
 8009f88:	eba9 0303 	sub.w	r3, r9, r3
 8009f8c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009f90:	f7ff ffd6 	bl	8009f40 <__hexdig_fun>
 8009f94:	4605      	mov	r5, r0
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d168      	bne.n	800a06c <__gethex+0x100>
 8009f9a:	49a0      	ldr	r1, [pc, #640]	@ (800a21c <__gethex+0x2b0>)
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	4648      	mov	r0, r9
 8009fa0:	f7ff f836 	bl	8009010 <strncmp>
 8009fa4:	4607      	mov	r7, r0
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d167      	bne.n	800a07a <__gethex+0x10e>
 8009faa:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009fae:	4626      	mov	r6, r4
 8009fb0:	f7ff ffc6 	bl	8009f40 <__hexdig_fun>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d062      	beq.n	800a07e <__gethex+0x112>
 8009fb8:	4623      	mov	r3, r4
 8009fba:	7818      	ldrb	r0, [r3, #0]
 8009fbc:	2830      	cmp	r0, #48	@ 0x30
 8009fbe:	4699      	mov	r9, r3
 8009fc0:	f103 0301 	add.w	r3, r3, #1
 8009fc4:	d0f9      	beq.n	8009fba <__gethex+0x4e>
 8009fc6:	f7ff ffbb 	bl	8009f40 <__hexdig_fun>
 8009fca:	fab0 f580 	clz	r5, r0
 8009fce:	096d      	lsrs	r5, r5, #5
 8009fd0:	f04f 0b01 	mov.w	fp, #1
 8009fd4:	464a      	mov	r2, r9
 8009fd6:	4616      	mov	r6, r2
 8009fd8:	3201      	adds	r2, #1
 8009fda:	7830      	ldrb	r0, [r6, #0]
 8009fdc:	f7ff ffb0 	bl	8009f40 <__hexdig_fun>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d1f8      	bne.n	8009fd6 <__gethex+0x6a>
 8009fe4:	498d      	ldr	r1, [pc, #564]	@ (800a21c <__gethex+0x2b0>)
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f7ff f811 	bl	8009010 <strncmp>
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d13f      	bne.n	800a072 <__gethex+0x106>
 8009ff2:	b944      	cbnz	r4, 800a006 <__gethex+0x9a>
 8009ff4:	1c74      	adds	r4, r6, #1
 8009ff6:	4622      	mov	r2, r4
 8009ff8:	4616      	mov	r6, r2
 8009ffa:	3201      	adds	r2, #1
 8009ffc:	7830      	ldrb	r0, [r6, #0]
 8009ffe:	f7ff ff9f 	bl	8009f40 <__hexdig_fun>
 800a002:	2800      	cmp	r0, #0
 800a004:	d1f8      	bne.n	8009ff8 <__gethex+0x8c>
 800a006:	1ba4      	subs	r4, r4, r6
 800a008:	00a7      	lsls	r7, r4, #2
 800a00a:	7833      	ldrb	r3, [r6, #0]
 800a00c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a010:	2b50      	cmp	r3, #80	@ 0x50
 800a012:	d13e      	bne.n	800a092 <__gethex+0x126>
 800a014:	7873      	ldrb	r3, [r6, #1]
 800a016:	2b2b      	cmp	r3, #43	@ 0x2b
 800a018:	d033      	beq.n	800a082 <__gethex+0x116>
 800a01a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a01c:	d034      	beq.n	800a088 <__gethex+0x11c>
 800a01e:	1c71      	adds	r1, r6, #1
 800a020:	2400      	movs	r4, #0
 800a022:	7808      	ldrb	r0, [r1, #0]
 800a024:	f7ff ff8c 	bl	8009f40 <__hexdig_fun>
 800a028:	1e43      	subs	r3, r0, #1
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	2b18      	cmp	r3, #24
 800a02e:	d830      	bhi.n	800a092 <__gethex+0x126>
 800a030:	f1a0 0210 	sub.w	r2, r0, #16
 800a034:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a038:	f7ff ff82 	bl	8009f40 <__hexdig_fun>
 800a03c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a040:	fa5f fc8c 	uxtb.w	ip, ip
 800a044:	f1bc 0f18 	cmp.w	ip, #24
 800a048:	f04f 030a 	mov.w	r3, #10
 800a04c:	d91e      	bls.n	800a08c <__gethex+0x120>
 800a04e:	b104      	cbz	r4, 800a052 <__gethex+0xe6>
 800a050:	4252      	negs	r2, r2
 800a052:	4417      	add	r7, r2
 800a054:	f8ca 1000 	str.w	r1, [sl]
 800a058:	b1ed      	cbz	r5, 800a096 <__gethex+0x12a>
 800a05a:	f1bb 0f00 	cmp.w	fp, #0
 800a05e:	bf0c      	ite	eq
 800a060:	2506      	moveq	r5, #6
 800a062:	2500      	movne	r5, #0
 800a064:	4628      	mov	r0, r5
 800a066:	b005      	add	sp, #20
 800a068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06c:	2500      	movs	r5, #0
 800a06e:	462c      	mov	r4, r5
 800a070:	e7b0      	b.n	8009fd4 <__gethex+0x68>
 800a072:	2c00      	cmp	r4, #0
 800a074:	d1c7      	bne.n	800a006 <__gethex+0x9a>
 800a076:	4627      	mov	r7, r4
 800a078:	e7c7      	b.n	800a00a <__gethex+0x9e>
 800a07a:	464e      	mov	r6, r9
 800a07c:	462f      	mov	r7, r5
 800a07e:	2501      	movs	r5, #1
 800a080:	e7c3      	b.n	800a00a <__gethex+0x9e>
 800a082:	2400      	movs	r4, #0
 800a084:	1cb1      	adds	r1, r6, #2
 800a086:	e7cc      	b.n	800a022 <__gethex+0xb6>
 800a088:	2401      	movs	r4, #1
 800a08a:	e7fb      	b.n	800a084 <__gethex+0x118>
 800a08c:	fb03 0002 	mla	r0, r3, r2, r0
 800a090:	e7ce      	b.n	800a030 <__gethex+0xc4>
 800a092:	4631      	mov	r1, r6
 800a094:	e7de      	b.n	800a054 <__gethex+0xe8>
 800a096:	eba6 0309 	sub.w	r3, r6, r9
 800a09a:	3b01      	subs	r3, #1
 800a09c:	4629      	mov	r1, r5
 800a09e:	2b07      	cmp	r3, #7
 800a0a0:	dc0a      	bgt.n	800a0b8 <__gethex+0x14c>
 800a0a2:	9801      	ldr	r0, [sp, #4]
 800a0a4:	f000 fafc 	bl	800a6a0 <_Balloc>
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	b940      	cbnz	r0, 800a0be <__gethex+0x152>
 800a0ac:	4b5c      	ldr	r3, [pc, #368]	@ (800a220 <__gethex+0x2b4>)
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	21e4      	movs	r1, #228	@ 0xe4
 800a0b2:	485c      	ldr	r0, [pc, #368]	@ (800a224 <__gethex+0x2b8>)
 800a0b4:	f001 fc22 	bl	800b8fc <__assert_func>
 800a0b8:	3101      	adds	r1, #1
 800a0ba:	105b      	asrs	r3, r3, #1
 800a0bc:	e7ef      	b.n	800a09e <__gethex+0x132>
 800a0be:	f100 0a14 	add.w	sl, r0, #20
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	4655      	mov	r5, sl
 800a0c6:	469b      	mov	fp, r3
 800a0c8:	45b1      	cmp	r9, r6
 800a0ca:	d337      	bcc.n	800a13c <__gethex+0x1d0>
 800a0cc:	f845 bb04 	str.w	fp, [r5], #4
 800a0d0:	eba5 050a 	sub.w	r5, r5, sl
 800a0d4:	10ad      	asrs	r5, r5, #2
 800a0d6:	6125      	str	r5, [r4, #16]
 800a0d8:	4658      	mov	r0, fp
 800a0da:	f000 fbd3 	bl	800a884 <__hi0bits>
 800a0de:	016d      	lsls	r5, r5, #5
 800a0e0:	f8d8 6000 	ldr.w	r6, [r8]
 800a0e4:	1a2d      	subs	r5, r5, r0
 800a0e6:	42b5      	cmp	r5, r6
 800a0e8:	dd54      	ble.n	800a194 <__gethex+0x228>
 800a0ea:	1bad      	subs	r5, r5, r6
 800a0ec:	4629      	mov	r1, r5
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f000 ff67 	bl	800afc2 <__any_on>
 800a0f4:	4681      	mov	r9, r0
 800a0f6:	b178      	cbz	r0, 800a118 <__gethex+0x1ac>
 800a0f8:	1e6b      	subs	r3, r5, #1
 800a0fa:	1159      	asrs	r1, r3, #5
 800a0fc:	f003 021f 	and.w	r2, r3, #31
 800a100:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a104:	f04f 0901 	mov.w	r9, #1
 800a108:	fa09 f202 	lsl.w	r2, r9, r2
 800a10c:	420a      	tst	r2, r1
 800a10e:	d003      	beq.n	800a118 <__gethex+0x1ac>
 800a110:	454b      	cmp	r3, r9
 800a112:	dc36      	bgt.n	800a182 <__gethex+0x216>
 800a114:	f04f 0902 	mov.w	r9, #2
 800a118:	4629      	mov	r1, r5
 800a11a:	4620      	mov	r0, r4
 800a11c:	f7ff febe 	bl	8009e9c <rshift>
 800a120:	442f      	add	r7, r5
 800a122:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a126:	42bb      	cmp	r3, r7
 800a128:	da42      	bge.n	800a1b0 <__gethex+0x244>
 800a12a:	9801      	ldr	r0, [sp, #4]
 800a12c:	4621      	mov	r1, r4
 800a12e:	f000 faf7 	bl	800a720 <_Bfree>
 800a132:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a134:	2300      	movs	r3, #0
 800a136:	6013      	str	r3, [r2, #0]
 800a138:	25a3      	movs	r5, #163	@ 0xa3
 800a13a:	e793      	b.n	800a064 <__gethex+0xf8>
 800a13c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a140:	2a2e      	cmp	r2, #46	@ 0x2e
 800a142:	d012      	beq.n	800a16a <__gethex+0x1fe>
 800a144:	2b20      	cmp	r3, #32
 800a146:	d104      	bne.n	800a152 <__gethex+0x1e6>
 800a148:	f845 bb04 	str.w	fp, [r5], #4
 800a14c:	f04f 0b00 	mov.w	fp, #0
 800a150:	465b      	mov	r3, fp
 800a152:	7830      	ldrb	r0, [r6, #0]
 800a154:	9303      	str	r3, [sp, #12]
 800a156:	f7ff fef3 	bl	8009f40 <__hexdig_fun>
 800a15a:	9b03      	ldr	r3, [sp, #12]
 800a15c:	f000 000f 	and.w	r0, r0, #15
 800a160:	4098      	lsls	r0, r3
 800a162:	ea4b 0b00 	orr.w	fp, fp, r0
 800a166:	3304      	adds	r3, #4
 800a168:	e7ae      	b.n	800a0c8 <__gethex+0x15c>
 800a16a:	45b1      	cmp	r9, r6
 800a16c:	d8ea      	bhi.n	800a144 <__gethex+0x1d8>
 800a16e:	492b      	ldr	r1, [pc, #172]	@ (800a21c <__gethex+0x2b0>)
 800a170:	9303      	str	r3, [sp, #12]
 800a172:	2201      	movs	r2, #1
 800a174:	4630      	mov	r0, r6
 800a176:	f7fe ff4b 	bl	8009010 <strncmp>
 800a17a:	9b03      	ldr	r3, [sp, #12]
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d1e1      	bne.n	800a144 <__gethex+0x1d8>
 800a180:	e7a2      	b.n	800a0c8 <__gethex+0x15c>
 800a182:	1ea9      	subs	r1, r5, #2
 800a184:	4620      	mov	r0, r4
 800a186:	f000 ff1c 	bl	800afc2 <__any_on>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d0c2      	beq.n	800a114 <__gethex+0x1a8>
 800a18e:	f04f 0903 	mov.w	r9, #3
 800a192:	e7c1      	b.n	800a118 <__gethex+0x1ac>
 800a194:	da09      	bge.n	800a1aa <__gethex+0x23e>
 800a196:	1b75      	subs	r5, r6, r5
 800a198:	4621      	mov	r1, r4
 800a19a:	9801      	ldr	r0, [sp, #4]
 800a19c:	462a      	mov	r2, r5
 800a19e:	f000 fcd7 	bl	800ab50 <__lshift>
 800a1a2:	1b7f      	subs	r7, r7, r5
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	f100 0a14 	add.w	sl, r0, #20
 800a1aa:	f04f 0900 	mov.w	r9, #0
 800a1ae:	e7b8      	b.n	800a122 <__gethex+0x1b6>
 800a1b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a1b4:	42bd      	cmp	r5, r7
 800a1b6:	dd6f      	ble.n	800a298 <__gethex+0x32c>
 800a1b8:	1bed      	subs	r5, r5, r7
 800a1ba:	42ae      	cmp	r6, r5
 800a1bc:	dc34      	bgt.n	800a228 <__gethex+0x2bc>
 800a1be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d022      	beq.n	800a20c <__gethex+0x2a0>
 800a1c6:	2b03      	cmp	r3, #3
 800a1c8:	d024      	beq.n	800a214 <__gethex+0x2a8>
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d115      	bne.n	800a1fa <__gethex+0x28e>
 800a1ce:	42ae      	cmp	r6, r5
 800a1d0:	d113      	bne.n	800a1fa <__gethex+0x28e>
 800a1d2:	2e01      	cmp	r6, #1
 800a1d4:	d10b      	bne.n	800a1ee <__gethex+0x282>
 800a1d6:	9a02      	ldr	r2, [sp, #8]
 800a1d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a1dc:	6013      	str	r3, [r2, #0]
 800a1de:	2301      	movs	r3, #1
 800a1e0:	6123      	str	r3, [r4, #16]
 800a1e2:	f8ca 3000 	str.w	r3, [sl]
 800a1e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1e8:	2562      	movs	r5, #98	@ 0x62
 800a1ea:	601c      	str	r4, [r3, #0]
 800a1ec:	e73a      	b.n	800a064 <__gethex+0xf8>
 800a1ee:	1e71      	subs	r1, r6, #1
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f000 fee6 	bl	800afc2 <__any_on>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d1ed      	bne.n	800a1d6 <__gethex+0x26a>
 800a1fa:	9801      	ldr	r0, [sp, #4]
 800a1fc:	4621      	mov	r1, r4
 800a1fe:	f000 fa8f 	bl	800a720 <_Bfree>
 800a202:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a204:	2300      	movs	r3, #0
 800a206:	6013      	str	r3, [r2, #0]
 800a208:	2550      	movs	r5, #80	@ 0x50
 800a20a:	e72b      	b.n	800a064 <__gethex+0xf8>
 800a20c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1f3      	bne.n	800a1fa <__gethex+0x28e>
 800a212:	e7e0      	b.n	800a1d6 <__gethex+0x26a>
 800a214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1dd      	bne.n	800a1d6 <__gethex+0x26a>
 800a21a:	e7ee      	b.n	800a1fa <__gethex+0x28e>
 800a21c:	0800bca8 	.word	0x0800bca8
 800a220:	0800bdbd 	.word	0x0800bdbd
 800a224:	0800bdce 	.word	0x0800bdce
 800a228:	1e6f      	subs	r7, r5, #1
 800a22a:	f1b9 0f00 	cmp.w	r9, #0
 800a22e:	d130      	bne.n	800a292 <__gethex+0x326>
 800a230:	b127      	cbz	r7, 800a23c <__gethex+0x2d0>
 800a232:	4639      	mov	r1, r7
 800a234:	4620      	mov	r0, r4
 800a236:	f000 fec4 	bl	800afc2 <__any_on>
 800a23a:	4681      	mov	r9, r0
 800a23c:	117a      	asrs	r2, r7, #5
 800a23e:	2301      	movs	r3, #1
 800a240:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a244:	f007 071f 	and.w	r7, r7, #31
 800a248:	40bb      	lsls	r3, r7
 800a24a:	4213      	tst	r3, r2
 800a24c:	4629      	mov	r1, r5
 800a24e:	4620      	mov	r0, r4
 800a250:	bf18      	it	ne
 800a252:	f049 0902 	orrne.w	r9, r9, #2
 800a256:	f7ff fe21 	bl	8009e9c <rshift>
 800a25a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a25e:	1b76      	subs	r6, r6, r5
 800a260:	2502      	movs	r5, #2
 800a262:	f1b9 0f00 	cmp.w	r9, #0
 800a266:	d047      	beq.n	800a2f8 <__gethex+0x38c>
 800a268:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d015      	beq.n	800a29c <__gethex+0x330>
 800a270:	2b03      	cmp	r3, #3
 800a272:	d017      	beq.n	800a2a4 <__gethex+0x338>
 800a274:	2b01      	cmp	r3, #1
 800a276:	d109      	bne.n	800a28c <__gethex+0x320>
 800a278:	f019 0f02 	tst.w	r9, #2
 800a27c:	d006      	beq.n	800a28c <__gethex+0x320>
 800a27e:	f8da 3000 	ldr.w	r3, [sl]
 800a282:	ea49 0903 	orr.w	r9, r9, r3
 800a286:	f019 0f01 	tst.w	r9, #1
 800a28a:	d10e      	bne.n	800a2aa <__gethex+0x33e>
 800a28c:	f045 0510 	orr.w	r5, r5, #16
 800a290:	e032      	b.n	800a2f8 <__gethex+0x38c>
 800a292:	f04f 0901 	mov.w	r9, #1
 800a296:	e7d1      	b.n	800a23c <__gethex+0x2d0>
 800a298:	2501      	movs	r5, #1
 800a29a:	e7e2      	b.n	800a262 <__gethex+0x2f6>
 800a29c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a29e:	f1c3 0301 	rsb	r3, r3, #1
 800a2a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a2a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d0f0      	beq.n	800a28c <__gethex+0x320>
 800a2aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a2ae:	f104 0314 	add.w	r3, r4, #20
 800a2b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a2b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a2ba:	f04f 0c00 	mov.w	ip, #0
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a2c8:	d01b      	beq.n	800a302 <__gethex+0x396>
 800a2ca:	3201      	adds	r2, #1
 800a2cc:	6002      	str	r2, [r0, #0]
 800a2ce:	2d02      	cmp	r5, #2
 800a2d0:	f104 0314 	add.w	r3, r4, #20
 800a2d4:	d13c      	bne.n	800a350 <__gethex+0x3e4>
 800a2d6:	f8d8 2000 	ldr.w	r2, [r8]
 800a2da:	3a01      	subs	r2, #1
 800a2dc:	42b2      	cmp	r2, r6
 800a2de:	d109      	bne.n	800a2f4 <__gethex+0x388>
 800a2e0:	1171      	asrs	r1, r6, #5
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a2e8:	f006 061f 	and.w	r6, r6, #31
 800a2ec:	fa02 f606 	lsl.w	r6, r2, r6
 800a2f0:	421e      	tst	r6, r3
 800a2f2:	d13a      	bne.n	800a36a <__gethex+0x3fe>
 800a2f4:	f045 0520 	orr.w	r5, r5, #32
 800a2f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2fa:	601c      	str	r4, [r3, #0]
 800a2fc:	9b02      	ldr	r3, [sp, #8]
 800a2fe:	601f      	str	r7, [r3, #0]
 800a300:	e6b0      	b.n	800a064 <__gethex+0xf8>
 800a302:	4299      	cmp	r1, r3
 800a304:	f843 cc04 	str.w	ip, [r3, #-4]
 800a308:	d8d9      	bhi.n	800a2be <__gethex+0x352>
 800a30a:	68a3      	ldr	r3, [r4, #8]
 800a30c:	459b      	cmp	fp, r3
 800a30e:	db17      	blt.n	800a340 <__gethex+0x3d4>
 800a310:	6861      	ldr	r1, [r4, #4]
 800a312:	9801      	ldr	r0, [sp, #4]
 800a314:	3101      	adds	r1, #1
 800a316:	f000 f9c3 	bl	800a6a0 <_Balloc>
 800a31a:	4681      	mov	r9, r0
 800a31c:	b918      	cbnz	r0, 800a326 <__gethex+0x3ba>
 800a31e:	4b1a      	ldr	r3, [pc, #104]	@ (800a388 <__gethex+0x41c>)
 800a320:	4602      	mov	r2, r0
 800a322:	2184      	movs	r1, #132	@ 0x84
 800a324:	e6c5      	b.n	800a0b2 <__gethex+0x146>
 800a326:	6922      	ldr	r2, [r4, #16]
 800a328:	3202      	adds	r2, #2
 800a32a:	f104 010c 	add.w	r1, r4, #12
 800a32e:	0092      	lsls	r2, r2, #2
 800a330:	300c      	adds	r0, #12
 800a332:	f7fe fefe 	bl	8009132 <memcpy>
 800a336:	4621      	mov	r1, r4
 800a338:	9801      	ldr	r0, [sp, #4]
 800a33a:	f000 f9f1 	bl	800a720 <_Bfree>
 800a33e:	464c      	mov	r4, r9
 800a340:	6923      	ldr	r3, [r4, #16]
 800a342:	1c5a      	adds	r2, r3, #1
 800a344:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a348:	6122      	str	r2, [r4, #16]
 800a34a:	2201      	movs	r2, #1
 800a34c:	615a      	str	r2, [r3, #20]
 800a34e:	e7be      	b.n	800a2ce <__gethex+0x362>
 800a350:	6922      	ldr	r2, [r4, #16]
 800a352:	455a      	cmp	r2, fp
 800a354:	dd0b      	ble.n	800a36e <__gethex+0x402>
 800a356:	2101      	movs	r1, #1
 800a358:	4620      	mov	r0, r4
 800a35a:	f7ff fd9f 	bl	8009e9c <rshift>
 800a35e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a362:	3701      	adds	r7, #1
 800a364:	42bb      	cmp	r3, r7
 800a366:	f6ff aee0 	blt.w	800a12a <__gethex+0x1be>
 800a36a:	2501      	movs	r5, #1
 800a36c:	e7c2      	b.n	800a2f4 <__gethex+0x388>
 800a36e:	f016 061f 	ands.w	r6, r6, #31
 800a372:	d0fa      	beq.n	800a36a <__gethex+0x3fe>
 800a374:	4453      	add	r3, sl
 800a376:	f1c6 0620 	rsb	r6, r6, #32
 800a37a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a37e:	f000 fa81 	bl	800a884 <__hi0bits>
 800a382:	42b0      	cmp	r0, r6
 800a384:	dbe7      	blt.n	800a356 <__gethex+0x3ea>
 800a386:	e7f0      	b.n	800a36a <__gethex+0x3fe>
 800a388:	0800bdbd 	.word	0x0800bdbd

0800a38c <L_shift>:
 800a38c:	f1c2 0208 	rsb	r2, r2, #8
 800a390:	0092      	lsls	r2, r2, #2
 800a392:	b570      	push	{r4, r5, r6, lr}
 800a394:	f1c2 0620 	rsb	r6, r2, #32
 800a398:	6843      	ldr	r3, [r0, #4]
 800a39a:	6804      	ldr	r4, [r0, #0]
 800a39c:	fa03 f506 	lsl.w	r5, r3, r6
 800a3a0:	432c      	orrs	r4, r5
 800a3a2:	40d3      	lsrs	r3, r2
 800a3a4:	6004      	str	r4, [r0, #0]
 800a3a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a3aa:	4288      	cmp	r0, r1
 800a3ac:	d3f4      	bcc.n	800a398 <L_shift+0xc>
 800a3ae:	bd70      	pop	{r4, r5, r6, pc}

0800a3b0 <__match>:
 800a3b0:	b530      	push	{r4, r5, lr}
 800a3b2:	6803      	ldr	r3, [r0, #0]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3ba:	b914      	cbnz	r4, 800a3c2 <__match+0x12>
 800a3bc:	6003      	str	r3, [r0, #0]
 800a3be:	2001      	movs	r0, #1
 800a3c0:	bd30      	pop	{r4, r5, pc}
 800a3c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a3ca:	2d19      	cmp	r5, #25
 800a3cc:	bf98      	it	ls
 800a3ce:	3220      	addls	r2, #32
 800a3d0:	42a2      	cmp	r2, r4
 800a3d2:	d0f0      	beq.n	800a3b6 <__match+0x6>
 800a3d4:	2000      	movs	r0, #0
 800a3d6:	e7f3      	b.n	800a3c0 <__match+0x10>

0800a3d8 <__hexnan>:
 800a3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3dc:	680b      	ldr	r3, [r1, #0]
 800a3de:	6801      	ldr	r1, [r0, #0]
 800a3e0:	115e      	asrs	r6, r3, #5
 800a3e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a3e6:	f013 031f 	ands.w	r3, r3, #31
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	bf18      	it	ne
 800a3ee:	3604      	addne	r6, #4
 800a3f0:	2500      	movs	r5, #0
 800a3f2:	1f37      	subs	r7, r6, #4
 800a3f4:	4682      	mov	sl, r0
 800a3f6:	4690      	mov	r8, r2
 800a3f8:	9301      	str	r3, [sp, #4]
 800a3fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800a3fe:	46b9      	mov	r9, r7
 800a400:	463c      	mov	r4, r7
 800a402:	9502      	str	r5, [sp, #8]
 800a404:	46ab      	mov	fp, r5
 800a406:	784a      	ldrb	r2, [r1, #1]
 800a408:	1c4b      	adds	r3, r1, #1
 800a40a:	9303      	str	r3, [sp, #12]
 800a40c:	b342      	cbz	r2, 800a460 <__hexnan+0x88>
 800a40e:	4610      	mov	r0, r2
 800a410:	9105      	str	r1, [sp, #20]
 800a412:	9204      	str	r2, [sp, #16]
 800a414:	f7ff fd94 	bl	8009f40 <__hexdig_fun>
 800a418:	2800      	cmp	r0, #0
 800a41a:	d151      	bne.n	800a4c0 <__hexnan+0xe8>
 800a41c:	9a04      	ldr	r2, [sp, #16]
 800a41e:	9905      	ldr	r1, [sp, #20]
 800a420:	2a20      	cmp	r2, #32
 800a422:	d818      	bhi.n	800a456 <__hexnan+0x7e>
 800a424:	9b02      	ldr	r3, [sp, #8]
 800a426:	459b      	cmp	fp, r3
 800a428:	dd13      	ble.n	800a452 <__hexnan+0x7a>
 800a42a:	454c      	cmp	r4, r9
 800a42c:	d206      	bcs.n	800a43c <__hexnan+0x64>
 800a42e:	2d07      	cmp	r5, #7
 800a430:	dc04      	bgt.n	800a43c <__hexnan+0x64>
 800a432:	462a      	mov	r2, r5
 800a434:	4649      	mov	r1, r9
 800a436:	4620      	mov	r0, r4
 800a438:	f7ff ffa8 	bl	800a38c <L_shift>
 800a43c:	4544      	cmp	r4, r8
 800a43e:	d952      	bls.n	800a4e6 <__hexnan+0x10e>
 800a440:	2300      	movs	r3, #0
 800a442:	f1a4 0904 	sub.w	r9, r4, #4
 800a446:	f844 3c04 	str.w	r3, [r4, #-4]
 800a44a:	f8cd b008 	str.w	fp, [sp, #8]
 800a44e:	464c      	mov	r4, r9
 800a450:	461d      	mov	r5, r3
 800a452:	9903      	ldr	r1, [sp, #12]
 800a454:	e7d7      	b.n	800a406 <__hexnan+0x2e>
 800a456:	2a29      	cmp	r2, #41	@ 0x29
 800a458:	d157      	bne.n	800a50a <__hexnan+0x132>
 800a45a:	3102      	adds	r1, #2
 800a45c:	f8ca 1000 	str.w	r1, [sl]
 800a460:	f1bb 0f00 	cmp.w	fp, #0
 800a464:	d051      	beq.n	800a50a <__hexnan+0x132>
 800a466:	454c      	cmp	r4, r9
 800a468:	d206      	bcs.n	800a478 <__hexnan+0xa0>
 800a46a:	2d07      	cmp	r5, #7
 800a46c:	dc04      	bgt.n	800a478 <__hexnan+0xa0>
 800a46e:	462a      	mov	r2, r5
 800a470:	4649      	mov	r1, r9
 800a472:	4620      	mov	r0, r4
 800a474:	f7ff ff8a 	bl	800a38c <L_shift>
 800a478:	4544      	cmp	r4, r8
 800a47a:	d936      	bls.n	800a4ea <__hexnan+0x112>
 800a47c:	f1a8 0204 	sub.w	r2, r8, #4
 800a480:	4623      	mov	r3, r4
 800a482:	f853 1b04 	ldr.w	r1, [r3], #4
 800a486:	f842 1f04 	str.w	r1, [r2, #4]!
 800a48a:	429f      	cmp	r7, r3
 800a48c:	d2f9      	bcs.n	800a482 <__hexnan+0xaa>
 800a48e:	1b3b      	subs	r3, r7, r4
 800a490:	f023 0303 	bic.w	r3, r3, #3
 800a494:	3304      	adds	r3, #4
 800a496:	3401      	adds	r4, #1
 800a498:	3e03      	subs	r6, #3
 800a49a:	42b4      	cmp	r4, r6
 800a49c:	bf88      	it	hi
 800a49e:	2304      	movhi	r3, #4
 800a4a0:	4443      	add	r3, r8
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f843 2b04 	str.w	r2, [r3], #4
 800a4a8:	429f      	cmp	r7, r3
 800a4aa:	d2fb      	bcs.n	800a4a4 <__hexnan+0xcc>
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	b91b      	cbnz	r3, 800a4b8 <__hexnan+0xe0>
 800a4b0:	4547      	cmp	r7, r8
 800a4b2:	d128      	bne.n	800a506 <__hexnan+0x12e>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	603b      	str	r3, [r7, #0]
 800a4b8:	2005      	movs	r0, #5
 800a4ba:	b007      	add	sp, #28
 800a4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c0:	3501      	adds	r5, #1
 800a4c2:	2d08      	cmp	r5, #8
 800a4c4:	f10b 0b01 	add.w	fp, fp, #1
 800a4c8:	dd06      	ble.n	800a4d8 <__hexnan+0x100>
 800a4ca:	4544      	cmp	r4, r8
 800a4cc:	d9c1      	bls.n	800a452 <__hexnan+0x7a>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4d4:	2501      	movs	r5, #1
 800a4d6:	3c04      	subs	r4, #4
 800a4d8:	6822      	ldr	r2, [r4, #0]
 800a4da:	f000 000f 	and.w	r0, r0, #15
 800a4de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a4e2:	6020      	str	r0, [r4, #0]
 800a4e4:	e7b5      	b.n	800a452 <__hexnan+0x7a>
 800a4e6:	2508      	movs	r5, #8
 800a4e8:	e7b3      	b.n	800a452 <__hexnan+0x7a>
 800a4ea:	9b01      	ldr	r3, [sp, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d0dd      	beq.n	800a4ac <__hexnan+0xd4>
 800a4f0:	f1c3 0320 	rsb	r3, r3, #32
 800a4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f8:	40da      	lsrs	r2, r3
 800a4fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a4fe:	4013      	ands	r3, r2
 800a500:	f846 3c04 	str.w	r3, [r6, #-4]
 800a504:	e7d2      	b.n	800a4ac <__hexnan+0xd4>
 800a506:	3f04      	subs	r7, #4
 800a508:	e7d0      	b.n	800a4ac <__hexnan+0xd4>
 800a50a:	2004      	movs	r0, #4
 800a50c:	e7d5      	b.n	800a4ba <__hexnan+0xe2>
	...

0800a510 <malloc>:
 800a510:	4b02      	ldr	r3, [pc, #8]	@ (800a51c <malloc+0xc>)
 800a512:	4601      	mov	r1, r0
 800a514:	6818      	ldr	r0, [r3, #0]
 800a516:	f000 b825 	b.w	800a564 <_malloc_r>
 800a51a:	bf00      	nop
 800a51c:	20000184 	.word	0x20000184

0800a520 <sbrk_aligned>:
 800a520:	b570      	push	{r4, r5, r6, lr}
 800a522:	4e0f      	ldr	r6, [pc, #60]	@ (800a560 <sbrk_aligned+0x40>)
 800a524:	460c      	mov	r4, r1
 800a526:	6831      	ldr	r1, [r6, #0]
 800a528:	4605      	mov	r5, r0
 800a52a:	b911      	cbnz	r1, 800a532 <sbrk_aligned+0x12>
 800a52c:	f001 f9d6 	bl	800b8dc <_sbrk_r>
 800a530:	6030      	str	r0, [r6, #0]
 800a532:	4621      	mov	r1, r4
 800a534:	4628      	mov	r0, r5
 800a536:	f001 f9d1 	bl	800b8dc <_sbrk_r>
 800a53a:	1c43      	adds	r3, r0, #1
 800a53c:	d103      	bne.n	800a546 <sbrk_aligned+0x26>
 800a53e:	f04f 34ff 	mov.w	r4, #4294967295
 800a542:	4620      	mov	r0, r4
 800a544:	bd70      	pop	{r4, r5, r6, pc}
 800a546:	1cc4      	adds	r4, r0, #3
 800a548:	f024 0403 	bic.w	r4, r4, #3
 800a54c:	42a0      	cmp	r0, r4
 800a54e:	d0f8      	beq.n	800a542 <sbrk_aligned+0x22>
 800a550:	1a21      	subs	r1, r4, r0
 800a552:	4628      	mov	r0, r5
 800a554:	f001 f9c2 	bl	800b8dc <_sbrk_r>
 800a558:	3001      	adds	r0, #1
 800a55a:	d1f2      	bne.n	800a542 <sbrk_aligned+0x22>
 800a55c:	e7ef      	b.n	800a53e <sbrk_aligned+0x1e>
 800a55e:	bf00      	nop
 800a560:	20000688 	.word	0x20000688

0800a564 <_malloc_r>:
 800a564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a568:	1ccd      	adds	r5, r1, #3
 800a56a:	f025 0503 	bic.w	r5, r5, #3
 800a56e:	3508      	adds	r5, #8
 800a570:	2d0c      	cmp	r5, #12
 800a572:	bf38      	it	cc
 800a574:	250c      	movcc	r5, #12
 800a576:	2d00      	cmp	r5, #0
 800a578:	4606      	mov	r6, r0
 800a57a:	db01      	blt.n	800a580 <_malloc_r+0x1c>
 800a57c:	42a9      	cmp	r1, r5
 800a57e:	d904      	bls.n	800a58a <_malloc_r+0x26>
 800a580:	230c      	movs	r3, #12
 800a582:	6033      	str	r3, [r6, #0]
 800a584:	2000      	movs	r0, #0
 800a586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a58a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a660 <_malloc_r+0xfc>
 800a58e:	f000 f87b 	bl	800a688 <__malloc_lock>
 800a592:	f8d8 3000 	ldr.w	r3, [r8]
 800a596:	461c      	mov	r4, r3
 800a598:	bb44      	cbnz	r4, 800a5ec <_malloc_r+0x88>
 800a59a:	4629      	mov	r1, r5
 800a59c:	4630      	mov	r0, r6
 800a59e:	f7ff ffbf 	bl	800a520 <sbrk_aligned>
 800a5a2:	1c43      	adds	r3, r0, #1
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	d158      	bne.n	800a65a <_malloc_r+0xf6>
 800a5a8:	f8d8 4000 	ldr.w	r4, [r8]
 800a5ac:	4627      	mov	r7, r4
 800a5ae:	2f00      	cmp	r7, #0
 800a5b0:	d143      	bne.n	800a63a <_malloc_r+0xd6>
 800a5b2:	2c00      	cmp	r4, #0
 800a5b4:	d04b      	beq.n	800a64e <_malloc_r+0xea>
 800a5b6:	6823      	ldr	r3, [r4, #0]
 800a5b8:	4639      	mov	r1, r7
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	eb04 0903 	add.w	r9, r4, r3
 800a5c0:	f001 f98c 	bl	800b8dc <_sbrk_r>
 800a5c4:	4581      	cmp	r9, r0
 800a5c6:	d142      	bne.n	800a64e <_malloc_r+0xea>
 800a5c8:	6821      	ldr	r1, [r4, #0]
 800a5ca:	1a6d      	subs	r5, r5, r1
 800a5cc:	4629      	mov	r1, r5
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	f7ff ffa6 	bl	800a520 <sbrk_aligned>
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	d03a      	beq.n	800a64e <_malloc_r+0xea>
 800a5d8:	6823      	ldr	r3, [r4, #0]
 800a5da:	442b      	add	r3, r5
 800a5dc:	6023      	str	r3, [r4, #0]
 800a5de:	f8d8 3000 	ldr.w	r3, [r8]
 800a5e2:	685a      	ldr	r2, [r3, #4]
 800a5e4:	bb62      	cbnz	r2, 800a640 <_malloc_r+0xdc>
 800a5e6:	f8c8 7000 	str.w	r7, [r8]
 800a5ea:	e00f      	b.n	800a60c <_malloc_r+0xa8>
 800a5ec:	6822      	ldr	r2, [r4, #0]
 800a5ee:	1b52      	subs	r2, r2, r5
 800a5f0:	d420      	bmi.n	800a634 <_malloc_r+0xd0>
 800a5f2:	2a0b      	cmp	r2, #11
 800a5f4:	d917      	bls.n	800a626 <_malloc_r+0xc2>
 800a5f6:	1961      	adds	r1, r4, r5
 800a5f8:	42a3      	cmp	r3, r4
 800a5fa:	6025      	str	r5, [r4, #0]
 800a5fc:	bf18      	it	ne
 800a5fe:	6059      	strne	r1, [r3, #4]
 800a600:	6863      	ldr	r3, [r4, #4]
 800a602:	bf08      	it	eq
 800a604:	f8c8 1000 	streq.w	r1, [r8]
 800a608:	5162      	str	r2, [r4, r5]
 800a60a:	604b      	str	r3, [r1, #4]
 800a60c:	4630      	mov	r0, r6
 800a60e:	f000 f841 	bl	800a694 <__malloc_unlock>
 800a612:	f104 000b 	add.w	r0, r4, #11
 800a616:	1d23      	adds	r3, r4, #4
 800a618:	f020 0007 	bic.w	r0, r0, #7
 800a61c:	1ac2      	subs	r2, r0, r3
 800a61e:	bf1c      	itt	ne
 800a620:	1a1b      	subne	r3, r3, r0
 800a622:	50a3      	strne	r3, [r4, r2]
 800a624:	e7af      	b.n	800a586 <_malloc_r+0x22>
 800a626:	6862      	ldr	r2, [r4, #4]
 800a628:	42a3      	cmp	r3, r4
 800a62a:	bf0c      	ite	eq
 800a62c:	f8c8 2000 	streq.w	r2, [r8]
 800a630:	605a      	strne	r2, [r3, #4]
 800a632:	e7eb      	b.n	800a60c <_malloc_r+0xa8>
 800a634:	4623      	mov	r3, r4
 800a636:	6864      	ldr	r4, [r4, #4]
 800a638:	e7ae      	b.n	800a598 <_malloc_r+0x34>
 800a63a:	463c      	mov	r4, r7
 800a63c:	687f      	ldr	r7, [r7, #4]
 800a63e:	e7b6      	b.n	800a5ae <_malloc_r+0x4a>
 800a640:	461a      	mov	r2, r3
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	42a3      	cmp	r3, r4
 800a646:	d1fb      	bne.n	800a640 <_malloc_r+0xdc>
 800a648:	2300      	movs	r3, #0
 800a64a:	6053      	str	r3, [r2, #4]
 800a64c:	e7de      	b.n	800a60c <_malloc_r+0xa8>
 800a64e:	230c      	movs	r3, #12
 800a650:	6033      	str	r3, [r6, #0]
 800a652:	4630      	mov	r0, r6
 800a654:	f000 f81e 	bl	800a694 <__malloc_unlock>
 800a658:	e794      	b.n	800a584 <_malloc_r+0x20>
 800a65a:	6005      	str	r5, [r0, #0]
 800a65c:	e7d6      	b.n	800a60c <_malloc_r+0xa8>
 800a65e:	bf00      	nop
 800a660:	2000068c 	.word	0x2000068c

0800a664 <__ascii_mbtowc>:
 800a664:	b082      	sub	sp, #8
 800a666:	b901      	cbnz	r1, 800a66a <__ascii_mbtowc+0x6>
 800a668:	a901      	add	r1, sp, #4
 800a66a:	b142      	cbz	r2, 800a67e <__ascii_mbtowc+0x1a>
 800a66c:	b14b      	cbz	r3, 800a682 <__ascii_mbtowc+0x1e>
 800a66e:	7813      	ldrb	r3, [r2, #0]
 800a670:	600b      	str	r3, [r1, #0]
 800a672:	7812      	ldrb	r2, [r2, #0]
 800a674:	1e10      	subs	r0, r2, #0
 800a676:	bf18      	it	ne
 800a678:	2001      	movne	r0, #1
 800a67a:	b002      	add	sp, #8
 800a67c:	4770      	bx	lr
 800a67e:	4610      	mov	r0, r2
 800a680:	e7fb      	b.n	800a67a <__ascii_mbtowc+0x16>
 800a682:	f06f 0001 	mvn.w	r0, #1
 800a686:	e7f8      	b.n	800a67a <__ascii_mbtowc+0x16>

0800a688 <__malloc_lock>:
 800a688:	4801      	ldr	r0, [pc, #4]	@ (800a690 <__malloc_lock+0x8>)
 800a68a:	f7fe bd48 	b.w	800911e <__retarget_lock_acquire_recursive>
 800a68e:	bf00      	nop
 800a690:	20000684 	.word	0x20000684

0800a694 <__malloc_unlock>:
 800a694:	4801      	ldr	r0, [pc, #4]	@ (800a69c <__malloc_unlock+0x8>)
 800a696:	f7fe bd43 	b.w	8009120 <__retarget_lock_release_recursive>
 800a69a:	bf00      	nop
 800a69c:	20000684 	.word	0x20000684

0800a6a0 <_Balloc>:
 800a6a0:	b570      	push	{r4, r5, r6, lr}
 800a6a2:	69c6      	ldr	r6, [r0, #28]
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	460d      	mov	r5, r1
 800a6a8:	b976      	cbnz	r6, 800a6c8 <_Balloc+0x28>
 800a6aa:	2010      	movs	r0, #16
 800a6ac:	f7ff ff30 	bl	800a510 <malloc>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	61e0      	str	r0, [r4, #28]
 800a6b4:	b920      	cbnz	r0, 800a6c0 <_Balloc+0x20>
 800a6b6:	4b18      	ldr	r3, [pc, #96]	@ (800a718 <_Balloc+0x78>)
 800a6b8:	4818      	ldr	r0, [pc, #96]	@ (800a71c <_Balloc+0x7c>)
 800a6ba:	216b      	movs	r1, #107	@ 0x6b
 800a6bc:	f001 f91e 	bl	800b8fc <__assert_func>
 800a6c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6c4:	6006      	str	r6, [r0, #0]
 800a6c6:	60c6      	str	r6, [r0, #12]
 800a6c8:	69e6      	ldr	r6, [r4, #28]
 800a6ca:	68f3      	ldr	r3, [r6, #12]
 800a6cc:	b183      	cbz	r3, 800a6f0 <_Balloc+0x50>
 800a6ce:	69e3      	ldr	r3, [r4, #28]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a6d6:	b9b8      	cbnz	r0, 800a708 <_Balloc+0x68>
 800a6d8:	2101      	movs	r1, #1
 800a6da:	fa01 f605 	lsl.w	r6, r1, r5
 800a6de:	1d72      	adds	r2, r6, #5
 800a6e0:	0092      	lsls	r2, r2, #2
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f001 f928 	bl	800b938 <_calloc_r>
 800a6e8:	b160      	cbz	r0, 800a704 <_Balloc+0x64>
 800a6ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a6ee:	e00e      	b.n	800a70e <_Balloc+0x6e>
 800a6f0:	2221      	movs	r2, #33	@ 0x21
 800a6f2:	2104      	movs	r1, #4
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	f001 f91f 	bl	800b938 <_calloc_r>
 800a6fa:	69e3      	ldr	r3, [r4, #28]
 800a6fc:	60f0      	str	r0, [r6, #12]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1e4      	bne.n	800a6ce <_Balloc+0x2e>
 800a704:	2000      	movs	r0, #0
 800a706:	bd70      	pop	{r4, r5, r6, pc}
 800a708:	6802      	ldr	r2, [r0, #0]
 800a70a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a70e:	2300      	movs	r3, #0
 800a710:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a714:	e7f7      	b.n	800a706 <_Balloc+0x66>
 800a716:	bf00      	nop
 800a718:	0800bd4e 	.word	0x0800bd4e
 800a71c:	0800be2e 	.word	0x0800be2e

0800a720 <_Bfree>:
 800a720:	b570      	push	{r4, r5, r6, lr}
 800a722:	69c6      	ldr	r6, [r0, #28]
 800a724:	4605      	mov	r5, r0
 800a726:	460c      	mov	r4, r1
 800a728:	b976      	cbnz	r6, 800a748 <_Bfree+0x28>
 800a72a:	2010      	movs	r0, #16
 800a72c:	f7ff fef0 	bl	800a510 <malloc>
 800a730:	4602      	mov	r2, r0
 800a732:	61e8      	str	r0, [r5, #28]
 800a734:	b920      	cbnz	r0, 800a740 <_Bfree+0x20>
 800a736:	4b09      	ldr	r3, [pc, #36]	@ (800a75c <_Bfree+0x3c>)
 800a738:	4809      	ldr	r0, [pc, #36]	@ (800a760 <_Bfree+0x40>)
 800a73a:	218f      	movs	r1, #143	@ 0x8f
 800a73c:	f001 f8de 	bl	800b8fc <__assert_func>
 800a740:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a744:	6006      	str	r6, [r0, #0]
 800a746:	60c6      	str	r6, [r0, #12]
 800a748:	b13c      	cbz	r4, 800a75a <_Bfree+0x3a>
 800a74a:	69eb      	ldr	r3, [r5, #28]
 800a74c:	6862      	ldr	r2, [r4, #4]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a754:	6021      	str	r1, [r4, #0]
 800a756:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a75a:	bd70      	pop	{r4, r5, r6, pc}
 800a75c:	0800bd4e 	.word	0x0800bd4e
 800a760:	0800be2e 	.word	0x0800be2e

0800a764 <__multadd>:
 800a764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a768:	690d      	ldr	r5, [r1, #16]
 800a76a:	4607      	mov	r7, r0
 800a76c:	460c      	mov	r4, r1
 800a76e:	461e      	mov	r6, r3
 800a770:	f101 0c14 	add.w	ip, r1, #20
 800a774:	2000      	movs	r0, #0
 800a776:	f8dc 3000 	ldr.w	r3, [ip]
 800a77a:	b299      	uxth	r1, r3
 800a77c:	fb02 6101 	mla	r1, r2, r1, r6
 800a780:	0c1e      	lsrs	r6, r3, #16
 800a782:	0c0b      	lsrs	r3, r1, #16
 800a784:	fb02 3306 	mla	r3, r2, r6, r3
 800a788:	b289      	uxth	r1, r1
 800a78a:	3001      	adds	r0, #1
 800a78c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a790:	4285      	cmp	r5, r0
 800a792:	f84c 1b04 	str.w	r1, [ip], #4
 800a796:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a79a:	dcec      	bgt.n	800a776 <__multadd+0x12>
 800a79c:	b30e      	cbz	r6, 800a7e2 <__multadd+0x7e>
 800a79e:	68a3      	ldr	r3, [r4, #8]
 800a7a0:	42ab      	cmp	r3, r5
 800a7a2:	dc19      	bgt.n	800a7d8 <__multadd+0x74>
 800a7a4:	6861      	ldr	r1, [r4, #4]
 800a7a6:	4638      	mov	r0, r7
 800a7a8:	3101      	adds	r1, #1
 800a7aa:	f7ff ff79 	bl	800a6a0 <_Balloc>
 800a7ae:	4680      	mov	r8, r0
 800a7b0:	b928      	cbnz	r0, 800a7be <__multadd+0x5a>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a7e8 <__multadd+0x84>)
 800a7b6:	480d      	ldr	r0, [pc, #52]	@ (800a7ec <__multadd+0x88>)
 800a7b8:	21ba      	movs	r1, #186	@ 0xba
 800a7ba:	f001 f89f 	bl	800b8fc <__assert_func>
 800a7be:	6922      	ldr	r2, [r4, #16]
 800a7c0:	3202      	adds	r2, #2
 800a7c2:	f104 010c 	add.w	r1, r4, #12
 800a7c6:	0092      	lsls	r2, r2, #2
 800a7c8:	300c      	adds	r0, #12
 800a7ca:	f7fe fcb2 	bl	8009132 <memcpy>
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	4638      	mov	r0, r7
 800a7d2:	f7ff ffa5 	bl	800a720 <_Bfree>
 800a7d6:	4644      	mov	r4, r8
 800a7d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a7dc:	3501      	adds	r5, #1
 800a7de:	615e      	str	r6, [r3, #20]
 800a7e0:	6125      	str	r5, [r4, #16]
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7e8:	0800bdbd 	.word	0x0800bdbd
 800a7ec:	0800be2e 	.word	0x0800be2e

0800a7f0 <__s2b>:
 800a7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7f4:	460c      	mov	r4, r1
 800a7f6:	4615      	mov	r5, r2
 800a7f8:	461f      	mov	r7, r3
 800a7fa:	2209      	movs	r2, #9
 800a7fc:	3308      	adds	r3, #8
 800a7fe:	4606      	mov	r6, r0
 800a800:	fb93 f3f2 	sdiv	r3, r3, r2
 800a804:	2100      	movs	r1, #0
 800a806:	2201      	movs	r2, #1
 800a808:	429a      	cmp	r2, r3
 800a80a:	db09      	blt.n	800a820 <__s2b+0x30>
 800a80c:	4630      	mov	r0, r6
 800a80e:	f7ff ff47 	bl	800a6a0 <_Balloc>
 800a812:	b940      	cbnz	r0, 800a826 <__s2b+0x36>
 800a814:	4602      	mov	r2, r0
 800a816:	4b19      	ldr	r3, [pc, #100]	@ (800a87c <__s2b+0x8c>)
 800a818:	4819      	ldr	r0, [pc, #100]	@ (800a880 <__s2b+0x90>)
 800a81a:	21d3      	movs	r1, #211	@ 0xd3
 800a81c:	f001 f86e 	bl	800b8fc <__assert_func>
 800a820:	0052      	lsls	r2, r2, #1
 800a822:	3101      	adds	r1, #1
 800a824:	e7f0      	b.n	800a808 <__s2b+0x18>
 800a826:	9b08      	ldr	r3, [sp, #32]
 800a828:	6143      	str	r3, [r0, #20]
 800a82a:	2d09      	cmp	r5, #9
 800a82c:	f04f 0301 	mov.w	r3, #1
 800a830:	6103      	str	r3, [r0, #16]
 800a832:	dd16      	ble.n	800a862 <__s2b+0x72>
 800a834:	f104 0909 	add.w	r9, r4, #9
 800a838:	46c8      	mov	r8, r9
 800a83a:	442c      	add	r4, r5
 800a83c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a840:	4601      	mov	r1, r0
 800a842:	3b30      	subs	r3, #48	@ 0x30
 800a844:	220a      	movs	r2, #10
 800a846:	4630      	mov	r0, r6
 800a848:	f7ff ff8c 	bl	800a764 <__multadd>
 800a84c:	45a0      	cmp	r8, r4
 800a84e:	d1f5      	bne.n	800a83c <__s2b+0x4c>
 800a850:	f1a5 0408 	sub.w	r4, r5, #8
 800a854:	444c      	add	r4, r9
 800a856:	1b2d      	subs	r5, r5, r4
 800a858:	1963      	adds	r3, r4, r5
 800a85a:	42bb      	cmp	r3, r7
 800a85c:	db04      	blt.n	800a868 <__s2b+0x78>
 800a85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a862:	340a      	adds	r4, #10
 800a864:	2509      	movs	r5, #9
 800a866:	e7f6      	b.n	800a856 <__s2b+0x66>
 800a868:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a86c:	4601      	mov	r1, r0
 800a86e:	3b30      	subs	r3, #48	@ 0x30
 800a870:	220a      	movs	r2, #10
 800a872:	4630      	mov	r0, r6
 800a874:	f7ff ff76 	bl	800a764 <__multadd>
 800a878:	e7ee      	b.n	800a858 <__s2b+0x68>
 800a87a:	bf00      	nop
 800a87c:	0800bdbd 	.word	0x0800bdbd
 800a880:	0800be2e 	.word	0x0800be2e

0800a884 <__hi0bits>:
 800a884:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a888:	4603      	mov	r3, r0
 800a88a:	bf36      	itet	cc
 800a88c:	0403      	lslcc	r3, r0, #16
 800a88e:	2000      	movcs	r0, #0
 800a890:	2010      	movcc	r0, #16
 800a892:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a896:	bf3c      	itt	cc
 800a898:	021b      	lslcc	r3, r3, #8
 800a89a:	3008      	addcc	r0, #8
 800a89c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8a0:	bf3c      	itt	cc
 800a8a2:	011b      	lslcc	r3, r3, #4
 800a8a4:	3004      	addcc	r0, #4
 800a8a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8aa:	bf3c      	itt	cc
 800a8ac:	009b      	lslcc	r3, r3, #2
 800a8ae:	3002      	addcc	r0, #2
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	db05      	blt.n	800a8c0 <__hi0bits+0x3c>
 800a8b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a8b8:	f100 0001 	add.w	r0, r0, #1
 800a8bc:	bf08      	it	eq
 800a8be:	2020      	moveq	r0, #32
 800a8c0:	4770      	bx	lr

0800a8c2 <__lo0bits>:
 800a8c2:	6803      	ldr	r3, [r0, #0]
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	f013 0007 	ands.w	r0, r3, #7
 800a8ca:	d00b      	beq.n	800a8e4 <__lo0bits+0x22>
 800a8cc:	07d9      	lsls	r1, r3, #31
 800a8ce:	d421      	bmi.n	800a914 <__lo0bits+0x52>
 800a8d0:	0798      	lsls	r0, r3, #30
 800a8d2:	bf49      	itett	mi
 800a8d4:	085b      	lsrmi	r3, r3, #1
 800a8d6:	089b      	lsrpl	r3, r3, #2
 800a8d8:	2001      	movmi	r0, #1
 800a8da:	6013      	strmi	r3, [r2, #0]
 800a8dc:	bf5c      	itt	pl
 800a8de:	6013      	strpl	r3, [r2, #0]
 800a8e0:	2002      	movpl	r0, #2
 800a8e2:	4770      	bx	lr
 800a8e4:	b299      	uxth	r1, r3
 800a8e6:	b909      	cbnz	r1, 800a8ec <__lo0bits+0x2a>
 800a8e8:	0c1b      	lsrs	r3, r3, #16
 800a8ea:	2010      	movs	r0, #16
 800a8ec:	b2d9      	uxtb	r1, r3
 800a8ee:	b909      	cbnz	r1, 800a8f4 <__lo0bits+0x32>
 800a8f0:	3008      	adds	r0, #8
 800a8f2:	0a1b      	lsrs	r3, r3, #8
 800a8f4:	0719      	lsls	r1, r3, #28
 800a8f6:	bf04      	itt	eq
 800a8f8:	091b      	lsreq	r3, r3, #4
 800a8fa:	3004      	addeq	r0, #4
 800a8fc:	0799      	lsls	r1, r3, #30
 800a8fe:	bf04      	itt	eq
 800a900:	089b      	lsreq	r3, r3, #2
 800a902:	3002      	addeq	r0, #2
 800a904:	07d9      	lsls	r1, r3, #31
 800a906:	d403      	bmi.n	800a910 <__lo0bits+0x4e>
 800a908:	085b      	lsrs	r3, r3, #1
 800a90a:	f100 0001 	add.w	r0, r0, #1
 800a90e:	d003      	beq.n	800a918 <__lo0bits+0x56>
 800a910:	6013      	str	r3, [r2, #0]
 800a912:	4770      	bx	lr
 800a914:	2000      	movs	r0, #0
 800a916:	4770      	bx	lr
 800a918:	2020      	movs	r0, #32
 800a91a:	4770      	bx	lr

0800a91c <__i2b>:
 800a91c:	b510      	push	{r4, lr}
 800a91e:	460c      	mov	r4, r1
 800a920:	2101      	movs	r1, #1
 800a922:	f7ff febd 	bl	800a6a0 <_Balloc>
 800a926:	4602      	mov	r2, r0
 800a928:	b928      	cbnz	r0, 800a936 <__i2b+0x1a>
 800a92a:	4b05      	ldr	r3, [pc, #20]	@ (800a940 <__i2b+0x24>)
 800a92c:	4805      	ldr	r0, [pc, #20]	@ (800a944 <__i2b+0x28>)
 800a92e:	f240 1145 	movw	r1, #325	@ 0x145
 800a932:	f000 ffe3 	bl	800b8fc <__assert_func>
 800a936:	2301      	movs	r3, #1
 800a938:	6144      	str	r4, [r0, #20]
 800a93a:	6103      	str	r3, [r0, #16]
 800a93c:	bd10      	pop	{r4, pc}
 800a93e:	bf00      	nop
 800a940:	0800bdbd 	.word	0x0800bdbd
 800a944:	0800be2e 	.word	0x0800be2e

0800a948 <__multiply>:
 800a948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a94c:	4614      	mov	r4, r2
 800a94e:	690a      	ldr	r2, [r1, #16]
 800a950:	6923      	ldr	r3, [r4, #16]
 800a952:	429a      	cmp	r2, r3
 800a954:	bfa8      	it	ge
 800a956:	4623      	movge	r3, r4
 800a958:	460f      	mov	r7, r1
 800a95a:	bfa4      	itt	ge
 800a95c:	460c      	movge	r4, r1
 800a95e:	461f      	movge	r7, r3
 800a960:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a964:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a968:	68a3      	ldr	r3, [r4, #8]
 800a96a:	6861      	ldr	r1, [r4, #4]
 800a96c:	eb0a 0609 	add.w	r6, sl, r9
 800a970:	42b3      	cmp	r3, r6
 800a972:	b085      	sub	sp, #20
 800a974:	bfb8      	it	lt
 800a976:	3101      	addlt	r1, #1
 800a978:	f7ff fe92 	bl	800a6a0 <_Balloc>
 800a97c:	b930      	cbnz	r0, 800a98c <__multiply+0x44>
 800a97e:	4602      	mov	r2, r0
 800a980:	4b44      	ldr	r3, [pc, #272]	@ (800aa94 <__multiply+0x14c>)
 800a982:	4845      	ldr	r0, [pc, #276]	@ (800aa98 <__multiply+0x150>)
 800a984:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a988:	f000 ffb8 	bl	800b8fc <__assert_func>
 800a98c:	f100 0514 	add.w	r5, r0, #20
 800a990:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a994:	462b      	mov	r3, r5
 800a996:	2200      	movs	r2, #0
 800a998:	4543      	cmp	r3, r8
 800a99a:	d321      	bcc.n	800a9e0 <__multiply+0x98>
 800a99c:	f107 0114 	add.w	r1, r7, #20
 800a9a0:	f104 0214 	add.w	r2, r4, #20
 800a9a4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a9a8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a9ac:	9302      	str	r3, [sp, #8]
 800a9ae:	1b13      	subs	r3, r2, r4
 800a9b0:	3b15      	subs	r3, #21
 800a9b2:	f023 0303 	bic.w	r3, r3, #3
 800a9b6:	3304      	adds	r3, #4
 800a9b8:	f104 0715 	add.w	r7, r4, #21
 800a9bc:	42ba      	cmp	r2, r7
 800a9be:	bf38      	it	cc
 800a9c0:	2304      	movcc	r3, #4
 800a9c2:	9301      	str	r3, [sp, #4]
 800a9c4:	9b02      	ldr	r3, [sp, #8]
 800a9c6:	9103      	str	r1, [sp, #12]
 800a9c8:	428b      	cmp	r3, r1
 800a9ca:	d80c      	bhi.n	800a9e6 <__multiply+0x9e>
 800a9cc:	2e00      	cmp	r6, #0
 800a9ce:	dd03      	ble.n	800a9d8 <__multiply+0x90>
 800a9d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d05b      	beq.n	800aa90 <__multiply+0x148>
 800a9d8:	6106      	str	r6, [r0, #16]
 800a9da:	b005      	add	sp, #20
 800a9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e0:	f843 2b04 	str.w	r2, [r3], #4
 800a9e4:	e7d8      	b.n	800a998 <__multiply+0x50>
 800a9e6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a9ea:	f1ba 0f00 	cmp.w	sl, #0
 800a9ee:	d024      	beq.n	800aa3a <__multiply+0xf2>
 800a9f0:	f104 0e14 	add.w	lr, r4, #20
 800a9f4:	46a9      	mov	r9, r5
 800a9f6:	f04f 0c00 	mov.w	ip, #0
 800a9fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a9fe:	f8d9 3000 	ldr.w	r3, [r9]
 800aa02:	fa1f fb87 	uxth.w	fp, r7
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	fb0a 330b 	mla	r3, sl, fp, r3
 800aa0c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aa10:	f8d9 7000 	ldr.w	r7, [r9]
 800aa14:	4463      	add	r3, ip
 800aa16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa1a:	fb0a c70b 	mla	r7, sl, fp, ip
 800aa1e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa28:	4572      	cmp	r2, lr
 800aa2a:	f849 3b04 	str.w	r3, [r9], #4
 800aa2e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa32:	d8e2      	bhi.n	800a9fa <__multiply+0xb2>
 800aa34:	9b01      	ldr	r3, [sp, #4]
 800aa36:	f845 c003 	str.w	ip, [r5, r3]
 800aa3a:	9b03      	ldr	r3, [sp, #12]
 800aa3c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aa40:	3104      	adds	r1, #4
 800aa42:	f1b9 0f00 	cmp.w	r9, #0
 800aa46:	d021      	beq.n	800aa8c <__multiply+0x144>
 800aa48:	682b      	ldr	r3, [r5, #0]
 800aa4a:	f104 0c14 	add.w	ip, r4, #20
 800aa4e:	46ae      	mov	lr, r5
 800aa50:	f04f 0a00 	mov.w	sl, #0
 800aa54:	f8bc b000 	ldrh.w	fp, [ip]
 800aa58:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aa5c:	fb09 770b 	mla	r7, r9, fp, r7
 800aa60:	4457      	add	r7, sl
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa68:	f84e 3b04 	str.w	r3, [lr], #4
 800aa6c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa74:	f8be 3000 	ldrh.w	r3, [lr]
 800aa78:	fb09 330a 	mla	r3, r9, sl, r3
 800aa7c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aa80:	4562      	cmp	r2, ip
 800aa82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa86:	d8e5      	bhi.n	800aa54 <__multiply+0x10c>
 800aa88:	9f01      	ldr	r7, [sp, #4]
 800aa8a:	51eb      	str	r3, [r5, r7]
 800aa8c:	3504      	adds	r5, #4
 800aa8e:	e799      	b.n	800a9c4 <__multiply+0x7c>
 800aa90:	3e01      	subs	r6, #1
 800aa92:	e79b      	b.n	800a9cc <__multiply+0x84>
 800aa94:	0800bdbd 	.word	0x0800bdbd
 800aa98:	0800be2e 	.word	0x0800be2e

0800aa9c <__pow5mult>:
 800aa9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaa0:	4615      	mov	r5, r2
 800aaa2:	f012 0203 	ands.w	r2, r2, #3
 800aaa6:	4607      	mov	r7, r0
 800aaa8:	460e      	mov	r6, r1
 800aaaa:	d007      	beq.n	800aabc <__pow5mult+0x20>
 800aaac:	4c25      	ldr	r4, [pc, #148]	@ (800ab44 <__pow5mult+0xa8>)
 800aaae:	3a01      	subs	r2, #1
 800aab0:	2300      	movs	r3, #0
 800aab2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aab6:	f7ff fe55 	bl	800a764 <__multadd>
 800aaba:	4606      	mov	r6, r0
 800aabc:	10ad      	asrs	r5, r5, #2
 800aabe:	d03d      	beq.n	800ab3c <__pow5mult+0xa0>
 800aac0:	69fc      	ldr	r4, [r7, #28]
 800aac2:	b97c      	cbnz	r4, 800aae4 <__pow5mult+0x48>
 800aac4:	2010      	movs	r0, #16
 800aac6:	f7ff fd23 	bl	800a510 <malloc>
 800aaca:	4602      	mov	r2, r0
 800aacc:	61f8      	str	r0, [r7, #28]
 800aace:	b928      	cbnz	r0, 800aadc <__pow5mult+0x40>
 800aad0:	4b1d      	ldr	r3, [pc, #116]	@ (800ab48 <__pow5mult+0xac>)
 800aad2:	481e      	ldr	r0, [pc, #120]	@ (800ab4c <__pow5mult+0xb0>)
 800aad4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aad8:	f000 ff10 	bl	800b8fc <__assert_func>
 800aadc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aae0:	6004      	str	r4, [r0, #0]
 800aae2:	60c4      	str	r4, [r0, #12]
 800aae4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aae8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aaec:	b94c      	cbnz	r4, 800ab02 <__pow5mult+0x66>
 800aaee:	f240 2171 	movw	r1, #625	@ 0x271
 800aaf2:	4638      	mov	r0, r7
 800aaf4:	f7ff ff12 	bl	800a91c <__i2b>
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f8c8 0008 	str.w	r0, [r8, #8]
 800aafe:	4604      	mov	r4, r0
 800ab00:	6003      	str	r3, [r0, #0]
 800ab02:	f04f 0900 	mov.w	r9, #0
 800ab06:	07eb      	lsls	r3, r5, #31
 800ab08:	d50a      	bpl.n	800ab20 <__pow5mult+0x84>
 800ab0a:	4631      	mov	r1, r6
 800ab0c:	4622      	mov	r2, r4
 800ab0e:	4638      	mov	r0, r7
 800ab10:	f7ff ff1a 	bl	800a948 <__multiply>
 800ab14:	4631      	mov	r1, r6
 800ab16:	4680      	mov	r8, r0
 800ab18:	4638      	mov	r0, r7
 800ab1a:	f7ff fe01 	bl	800a720 <_Bfree>
 800ab1e:	4646      	mov	r6, r8
 800ab20:	106d      	asrs	r5, r5, #1
 800ab22:	d00b      	beq.n	800ab3c <__pow5mult+0xa0>
 800ab24:	6820      	ldr	r0, [r4, #0]
 800ab26:	b938      	cbnz	r0, 800ab38 <__pow5mult+0x9c>
 800ab28:	4622      	mov	r2, r4
 800ab2a:	4621      	mov	r1, r4
 800ab2c:	4638      	mov	r0, r7
 800ab2e:	f7ff ff0b 	bl	800a948 <__multiply>
 800ab32:	6020      	str	r0, [r4, #0]
 800ab34:	f8c0 9000 	str.w	r9, [r0]
 800ab38:	4604      	mov	r4, r0
 800ab3a:	e7e4      	b.n	800ab06 <__pow5mult+0x6a>
 800ab3c:	4630      	mov	r0, r6
 800ab3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab42:	bf00      	nop
 800ab44:	0800be88 	.word	0x0800be88
 800ab48:	0800bd4e 	.word	0x0800bd4e
 800ab4c:	0800be2e 	.word	0x0800be2e

0800ab50 <__lshift>:
 800ab50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab54:	460c      	mov	r4, r1
 800ab56:	6849      	ldr	r1, [r1, #4]
 800ab58:	6923      	ldr	r3, [r4, #16]
 800ab5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab5e:	68a3      	ldr	r3, [r4, #8]
 800ab60:	4607      	mov	r7, r0
 800ab62:	4691      	mov	r9, r2
 800ab64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab68:	f108 0601 	add.w	r6, r8, #1
 800ab6c:	42b3      	cmp	r3, r6
 800ab6e:	db0b      	blt.n	800ab88 <__lshift+0x38>
 800ab70:	4638      	mov	r0, r7
 800ab72:	f7ff fd95 	bl	800a6a0 <_Balloc>
 800ab76:	4605      	mov	r5, r0
 800ab78:	b948      	cbnz	r0, 800ab8e <__lshift+0x3e>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	4b28      	ldr	r3, [pc, #160]	@ (800ac20 <__lshift+0xd0>)
 800ab7e:	4829      	ldr	r0, [pc, #164]	@ (800ac24 <__lshift+0xd4>)
 800ab80:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ab84:	f000 feba 	bl	800b8fc <__assert_func>
 800ab88:	3101      	adds	r1, #1
 800ab8a:	005b      	lsls	r3, r3, #1
 800ab8c:	e7ee      	b.n	800ab6c <__lshift+0x1c>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	f100 0114 	add.w	r1, r0, #20
 800ab94:	f100 0210 	add.w	r2, r0, #16
 800ab98:	4618      	mov	r0, r3
 800ab9a:	4553      	cmp	r3, sl
 800ab9c:	db33      	blt.n	800ac06 <__lshift+0xb6>
 800ab9e:	6920      	ldr	r0, [r4, #16]
 800aba0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aba4:	f104 0314 	add.w	r3, r4, #20
 800aba8:	f019 091f 	ands.w	r9, r9, #31
 800abac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abb4:	d02b      	beq.n	800ac0e <__lshift+0xbe>
 800abb6:	f1c9 0e20 	rsb	lr, r9, #32
 800abba:	468a      	mov	sl, r1
 800abbc:	2200      	movs	r2, #0
 800abbe:	6818      	ldr	r0, [r3, #0]
 800abc0:	fa00 f009 	lsl.w	r0, r0, r9
 800abc4:	4310      	orrs	r0, r2
 800abc6:	f84a 0b04 	str.w	r0, [sl], #4
 800abca:	f853 2b04 	ldr.w	r2, [r3], #4
 800abce:	459c      	cmp	ip, r3
 800abd0:	fa22 f20e 	lsr.w	r2, r2, lr
 800abd4:	d8f3      	bhi.n	800abbe <__lshift+0x6e>
 800abd6:	ebac 0304 	sub.w	r3, ip, r4
 800abda:	3b15      	subs	r3, #21
 800abdc:	f023 0303 	bic.w	r3, r3, #3
 800abe0:	3304      	adds	r3, #4
 800abe2:	f104 0015 	add.w	r0, r4, #21
 800abe6:	4584      	cmp	ip, r0
 800abe8:	bf38      	it	cc
 800abea:	2304      	movcc	r3, #4
 800abec:	50ca      	str	r2, [r1, r3]
 800abee:	b10a      	cbz	r2, 800abf4 <__lshift+0xa4>
 800abf0:	f108 0602 	add.w	r6, r8, #2
 800abf4:	3e01      	subs	r6, #1
 800abf6:	4638      	mov	r0, r7
 800abf8:	612e      	str	r6, [r5, #16]
 800abfa:	4621      	mov	r1, r4
 800abfc:	f7ff fd90 	bl	800a720 <_Bfree>
 800ac00:	4628      	mov	r0, r5
 800ac02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac06:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	e7c5      	b.n	800ab9a <__lshift+0x4a>
 800ac0e:	3904      	subs	r1, #4
 800ac10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac14:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac18:	459c      	cmp	ip, r3
 800ac1a:	d8f9      	bhi.n	800ac10 <__lshift+0xc0>
 800ac1c:	e7ea      	b.n	800abf4 <__lshift+0xa4>
 800ac1e:	bf00      	nop
 800ac20:	0800bdbd 	.word	0x0800bdbd
 800ac24:	0800be2e 	.word	0x0800be2e

0800ac28 <__mcmp>:
 800ac28:	690a      	ldr	r2, [r1, #16]
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	6900      	ldr	r0, [r0, #16]
 800ac2e:	1a80      	subs	r0, r0, r2
 800ac30:	b530      	push	{r4, r5, lr}
 800ac32:	d10e      	bne.n	800ac52 <__mcmp+0x2a>
 800ac34:	3314      	adds	r3, #20
 800ac36:	3114      	adds	r1, #20
 800ac38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ac3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ac40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac48:	4295      	cmp	r5, r2
 800ac4a:	d003      	beq.n	800ac54 <__mcmp+0x2c>
 800ac4c:	d205      	bcs.n	800ac5a <__mcmp+0x32>
 800ac4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac52:	bd30      	pop	{r4, r5, pc}
 800ac54:	42a3      	cmp	r3, r4
 800ac56:	d3f3      	bcc.n	800ac40 <__mcmp+0x18>
 800ac58:	e7fb      	b.n	800ac52 <__mcmp+0x2a>
 800ac5a:	2001      	movs	r0, #1
 800ac5c:	e7f9      	b.n	800ac52 <__mcmp+0x2a>
	...

0800ac60 <__mdiff>:
 800ac60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac64:	4689      	mov	r9, r1
 800ac66:	4606      	mov	r6, r0
 800ac68:	4611      	mov	r1, r2
 800ac6a:	4648      	mov	r0, r9
 800ac6c:	4614      	mov	r4, r2
 800ac6e:	f7ff ffdb 	bl	800ac28 <__mcmp>
 800ac72:	1e05      	subs	r5, r0, #0
 800ac74:	d112      	bne.n	800ac9c <__mdiff+0x3c>
 800ac76:	4629      	mov	r1, r5
 800ac78:	4630      	mov	r0, r6
 800ac7a:	f7ff fd11 	bl	800a6a0 <_Balloc>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	b928      	cbnz	r0, 800ac8e <__mdiff+0x2e>
 800ac82:	4b3f      	ldr	r3, [pc, #252]	@ (800ad80 <__mdiff+0x120>)
 800ac84:	f240 2137 	movw	r1, #567	@ 0x237
 800ac88:	483e      	ldr	r0, [pc, #248]	@ (800ad84 <__mdiff+0x124>)
 800ac8a:	f000 fe37 	bl	800b8fc <__assert_func>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac94:	4610      	mov	r0, r2
 800ac96:	b003      	add	sp, #12
 800ac98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac9c:	bfbc      	itt	lt
 800ac9e:	464b      	movlt	r3, r9
 800aca0:	46a1      	movlt	r9, r4
 800aca2:	4630      	mov	r0, r6
 800aca4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aca8:	bfba      	itte	lt
 800acaa:	461c      	movlt	r4, r3
 800acac:	2501      	movlt	r5, #1
 800acae:	2500      	movge	r5, #0
 800acb0:	f7ff fcf6 	bl	800a6a0 <_Balloc>
 800acb4:	4602      	mov	r2, r0
 800acb6:	b918      	cbnz	r0, 800acc0 <__mdiff+0x60>
 800acb8:	4b31      	ldr	r3, [pc, #196]	@ (800ad80 <__mdiff+0x120>)
 800acba:	f240 2145 	movw	r1, #581	@ 0x245
 800acbe:	e7e3      	b.n	800ac88 <__mdiff+0x28>
 800acc0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800acc4:	6926      	ldr	r6, [r4, #16]
 800acc6:	60c5      	str	r5, [r0, #12]
 800acc8:	f109 0310 	add.w	r3, r9, #16
 800accc:	f109 0514 	add.w	r5, r9, #20
 800acd0:	f104 0e14 	add.w	lr, r4, #20
 800acd4:	f100 0b14 	add.w	fp, r0, #20
 800acd8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800acdc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ace0:	9301      	str	r3, [sp, #4]
 800ace2:	46d9      	mov	r9, fp
 800ace4:	f04f 0c00 	mov.w	ip, #0
 800ace8:	9b01      	ldr	r3, [sp, #4]
 800acea:	f85e 0b04 	ldr.w	r0, [lr], #4
 800acee:	f853 af04 	ldr.w	sl, [r3, #4]!
 800acf2:	9301      	str	r3, [sp, #4]
 800acf4:	fa1f f38a 	uxth.w	r3, sl
 800acf8:	4619      	mov	r1, r3
 800acfa:	b283      	uxth	r3, r0
 800acfc:	1acb      	subs	r3, r1, r3
 800acfe:	0c00      	lsrs	r0, r0, #16
 800ad00:	4463      	add	r3, ip
 800ad02:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ad06:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad10:	4576      	cmp	r6, lr
 800ad12:	f849 3b04 	str.w	r3, [r9], #4
 800ad16:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad1a:	d8e5      	bhi.n	800ace8 <__mdiff+0x88>
 800ad1c:	1b33      	subs	r3, r6, r4
 800ad1e:	3b15      	subs	r3, #21
 800ad20:	f023 0303 	bic.w	r3, r3, #3
 800ad24:	3415      	adds	r4, #21
 800ad26:	3304      	adds	r3, #4
 800ad28:	42a6      	cmp	r6, r4
 800ad2a:	bf38      	it	cc
 800ad2c:	2304      	movcc	r3, #4
 800ad2e:	441d      	add	r5, r3
 800ad30:	445b      	add	r3, fp
 800ad32:	461e      	mov	r6, r3
 800ad34:	462c      	mov	r4, r5
 800ad36:	4544      	cmp	r4, r8
 800ad38:	d30e      	bcc.n	800ad58 <__mdiff+0xf8>
 800ad3a:	f108 0103 	add.w	r1, r8, #3
 800ad3e:	1b49      	subs	r1, r1, r5
 800ad40:	f021 0103 	bic.w	r1, r1, #3
 800ad44:	3d03      	subs	r5, #3
 800ad46:	45a8      	cmp	r8, r5
 800ad48:	bf38      	it	cc
 800ad4a:	2100      	movcc	r1, #0
 800ad4c:	440b      	add	r3, r1
 800ad4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad52:	b191      	cbz	r1, 800ad7a <__mdiff+0x11a>
 800ad54:	6117      	str	r7, [r2, #16]
 800ad56:	e79d      	b.n	800ac94 <__mdiff+0x34>
 800ad58:	f854 1b04 	ldr.w	r1, [r4], #4
 800ad5c:	46e6      	mov	lr, ip
 800ad5e:	0c08      	lsrs	r0, r1, #16
 800ad60:	fa1c fc81 	uxtah	ip, ip, r1
 800ad64:	4471      	add	r1, lr
 800ad66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ad6a:	b289      	uxth	r1, r1
 800ad6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ad70:	f846 1b04 	str.w	r1, [r6], #4
 800ad74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad78:	e7dd      	b.n	800ad36 <__mdiff+0xd6>
 800ad7a:	3f01      	subs	r7, #1
 800ad7c:	e7e7      	b.n	800ad4e <__mdiff+0xee>
 800ad7e:	bf00      	nop
 800ad80:	0800bdbd 	.word	0x0800bdbd
 800ad84:	0800be2e 	.word	0x0800be2e

0800ad88 <__ulp>:
 800ad88:	b082      	sub	sp, #8
 800ad8a:	ed8d 0b00 	vstr	d0, [sp]
 800ad8e:	9a01      	ldr	r2, [sp, #4]
 800ad90:	4b0f      	ldr	r3, [pc, #60]	@ (800add0 <__ulp+0x48>)
 800ad92:	4013      	ands	r3, r2
 800ad94:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	dc08      	bgt.n	800adae <__ulp+0x26>
 800ad9c:	425b      	negs	r3, r3
 800ad9e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ada2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ada6:	da04      	bge.n	800adb2 <__ulp+0x2a>
 800ada8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800adac:	4113      	asrs	r3, r2
 800adae:	2200      	movs	r2, #0
 800adb0:	e008      	b.n	800adc4 <__ulp+0x3c>
 800adb2:	f1a2 0314 	sub.w	r3, r2, #20
 800adb6:	2b1e      	cmp	r3, #30
 800adb8:	bfda      	itte	le
 800adba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800adbe:	40da      	lsrle	r2, r3
 800adc0:	2201      	movgt	r2, #1
 800adc2:	2300      	movs	r3, #0
 800adc4:	4619      	mov	r1, r3
 800adc6:	4610      	mov	r0, r2
 800adc8:	ec41 0b10 	vmov	d0, r0, r1
 800adcc:	b002      	add	sp, #8
 800adce:	4770      	bx	lr
 800add0:	7ff00000 	.word	0x7ff00000

0800add4 <__b2d>:
 800add4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add8:	6906      	ldr	r6, [r0, #16]
 800adda:	f100 0814 	add.w	r8, r0, #20
 800adde:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ade2:	1f37      	subs	r7, r6, #4
 800ade4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ade8:	4610      	mov	r0, r2
 800adea:	f7ff fd4b 	bl	800a884 <__hi0bits>
 800adee:	f1c0 0320 	rsb	r3, r0, #32
 800adf2:	280a      	cmp	r0, #10
 800adf4:	600b      	str	r3, [r1, #0]
 800adf6:	491b      	ldr	r1, [pc, #108]	@ (800ae64 <__b2d+0x90>)
 800adf8:	dc15      	bgt.n	800ae26 <__b2d+0x52>
 800adfa:	f1c0 0c0b 	rsb	ip, r0, #11
 800adfe:	fa22 f30c 	lsr.w	r3, r2, ip
 800ae02:	45b8      	cmp	r8, r7
 800ae04:	ea43 0501 	orr.w	r5, r3, r1
 800ae08:	bf34      	ite	cc
 800ae0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ae0e:	2300      	movcs	r3, #0
 800ae10:	3015      	adds	r0, #21
 800ae12:	fa02 f000 	lsl.w	r0, r2, r0
 800ae16:	fa23 f30c 	lsr.w	r3, r3, ip
 800ae1a:	4303      	orrs	r3, r0
 800ae1c:	461c      	mov	r4, r3
 800ae1e:	ec45 4b10 	vmov	d0, r4, r5
 800ae22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae26:	45b8      	cmp	r8, r7
 800ae28:	bf3a      	itte	cc
 800ae2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ae2e:	f1a6 0708 	subcc.w	r7, r6, #8
 800ae32:	2300      	movcs	r3, #0
 800ae34:	380b      	subs	r0, #11
 800ae36:	d012      	beq.n	800ae5e <__b2d+0x8a>
 800ae38:	f1c0 0120 	rsb	r1, r0, #32
 800ae3c:	fa23 f401 	lsr.w	r4, r3, r1
 800ae40:	4082      	lsls	r2, r0
 800ae42:	4322      	orrs	r2, r4
 800ae44:	4547      	cmp	r7, r8
 800ae46:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ae4a:	bf8c      	ite	hi
 800ae4c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ae50:	2200      	movls	r2, #0
 800ae52:	4083      	lsls	r3, r0
 800ae54:	40ca      	lsrs	r2, r1
 800ae56:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	e7de      	b.n	800ae1c <__b2d+0x48>
 800ae5e:	ea42 0501 	orr.w	r5, r2, r1
 800ae62:	e7db      	b.n	800ae1c <__b2d+0x48>
 800ae64:	3ff00000 	.word	0x3ff00000

0800ae68 <__d2b>:
 800ae68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae6c:	460f      	mov	r7, r1
 800ae6e:	2101      	movs	r1, #1
 800ae70:	ec59 8b10 	vmov	r8, r9, d0
 800ae74:	4616      	mov	r6, r2
 800ae76:	f7ff fc13 	bl	800a6a0 <_Balloc>
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	b930      	cbnz	r0, 800ae8c <__d2b+0x24>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	4b23      	ldr	r3, [pc, #140]	@ (800af10 <__d2b+0xa8>)
 800ae82:	4824      	ldr	r0, [pc, #144]	@ (800af14 <__d2b+0xac>)
 800ae84:	f240 310f 	movw	r1, #783	@ 0x30f
 800ae88:	f000 fd38 	bl	800b8fc <__assert_func>
 800ae8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ae90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae94:	b10d      	cbz	r5, 800ae9a <__d2b+0x32>
 800ae96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae9a:	9301      	str	r3, [sp, #4]
 800ae9c:	f1b8 0300 	subs.w	r3, r8, #0
 800aea0:	d023      	beq.n	800aeea <__d2b+0x82>
 800aea2:	4668      	mov	r0, sp
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	f7ff fd0c 	bl	800a8c2 <__lo0bits>
 800aeaa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aeae:	b1d0      	cbz	r0, 800aee6 <__d2b+0x7e>
 800aeb0:	f1c0 0320 	rsb	r3, r0, #32
 800aeb4:	fa02 f303 	lsl.w	r3, r2, r3
 800aeb8:	430b      	orrs	r3, r1
 800aeba:	40c2      	lsrs	r2, r0
 800aebc:	6163      	str	r3, [r4, #20]
 800aebe:	9201      	str	r2, [sp, #4]
 800aec0:	9b01      	ldr	r3, [sp, #4]
 800aec2:	61a3      	str	r3, [r4, #24]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	bf0c      	ite	eq
 800aec8:	2201      	moveq	r2, #1
 800aeca:	2202      	movne	r2, #2
 800aecc:	6122      	str	r2, [r4, #16]
 800aece:	b1a5      	cbz	r5, 800aefa <__d2b+0x92>
 800aed0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aed4:	4405      	add	r5, r0
 800aed6:	603d      	str	r5, [r7, #0]
 800aed8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aedc:	6030      	str	r0, [r6, #0]
 800aede:	4620      	mov	r0, r4
 800aee0:	b003      	add	sp, #12
 800aee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aee6:	6161      	str	r1, [r4, #20]
 800aee8:	e7ea      	b.n	800aec0 <__d2b+0x58>
 800aeea:	a801      	add	r0, sp, #4
 800aeec:	f7ff fce9 	bl	800a8c2 <__lo0bits>
 800aef0:	9b01      	ldr	r3, [sp, #4]
 800aef2:	6163      	str	r3, [r4, #20]
 800aef4:	3020      	adds	r0, #32
 800aef6:	2201      	movs	r2, #1
 800aef8:	e7e8      	b.n	800aecc <__d2b+0x64>
 800aefa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aefe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800af02:	6038      	str	r0, [r7, #0]
 800af04:	6918      	ldr	r0, [r3, #16]
 800af06:	f7ff fcbd 	bl	800a884 <__hi0bits>
 800af0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af0e:	e7e5      	b.n	800aedc <__d2b+0x74>
 800af10:	0800bdbd 	.word	0x0800bdbd
 800af14:	0800be2e 	.word	0x0800be2e

0800af18 <__ratio>:
 800af18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1c:	b085      	sub	sp, #20
 800af1e:	e9cd 1000 	strd	r1, r0, [sp]
 800af22:	a902      	add	r1, sp, #8
 800af24:	f7ff ff56 	bl	800add4 <__b2d>
 800af28:	9800      	ldr	r0, [sp, #0]
 800af2a:	a903      	add	r1, sp, #12
 800af2c:	ec55 4b10 	vmov	r4, r5, d0
 800af30:	f7ff ff50 	bl	800add4 <__b2d>
 800af34:	9b01      	ldr	r3, [sp, #4]
 800af36:	6919      	ldr	r1, [r3, #16]
 800af38:	9b00      	ldr	r3, [sp, #0]
 800af3a:	691b      	ldr	r3, [r3, #16]
 800af3c:	1ac9      	subs	r1, r1, r3
 800af3e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800af42:	1a9b      	subs	r3, r3, r2
 800af44:	ec5b ab10 	vmov	sl, fp, d0
 800af48:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	bfce      	itee	gt
 800af50:	462a      	movgt	r2, r5
 800af52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800af56:	465a      	movle	r2, fp
 800af58:	462f      	mov	r7, r5
 800af5a:	46d9      	mov	r9, fp
 800af5c:	bfcc      	ite	gt
 800af5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800af62:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800af66:	464b      	mov	r3, r9
 800af68:	4652      	mov	r2, sl
 800af6a:	4620      	mov	r0, r4
 800af6c:	4639      	mov	r1, r7
 800af6e:	f7f5 fc7d 	bl	800086c <__aeabi_ddiv>
 800af72:	ec41 0b10 	vmov	d0, r0, r1
 800af76:	b005      	add	sp, #20
 800af78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af7c <__copybits>:
 800af7c:	3901      	subs	r1, #1
 800af7e:	b570      	push	{r4, r5, r6, lr}
 800af80:	1149      	asrs	r1, r1, #5
 800af82:	6914      	ldr	r4, [r2, #16]
 800af84:	3101      	adds	r1, #1
 800af86:	f102 0314 	add.w	r3, r2, #20
 800af8a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800af8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800af92:	1f05      	subs	r5, r0, #4
 800af94:	42a3      	cmp	r3, r4
 800af96:	d30c      	bcc.n	800afb2 <__copybits+0x36>
 800af98:	1aa3      	subs	r3, r4, r2
 800af9a:	3b11      	subs	r3, #17
 800af9c:	f023 0303 	bic.w	r3, r3, #3
 800afa0:	3211      	adds	r2, #17
 800afa2:	42a2      	cmp	r2, r4
 800afa4:	bf88      	it	hi
 800afa6:	2300      	movhi	r3, #0
 800afa8:	4418      	add	r0, r3
 800afaa:	2300      	movs	r3, #0
 800afac:	4288      	cmp	r0, r1
 800afae:	d305      	bcc.n	800afbc <__copybits+0x40>
 800afb0:	bd70      	pop	{r4, r5, r6, pc}
 800afb2:	f853 6b04 	ldr.w	r6, [r3], #4
 800afb6:	f845 6f04 	str.w	r6, [r5, #4]!
 800afba:	e7eb      	b.n	800af94 <__copybits+0x18>
 800afbc:	f840 3b04 	str.w	r3, [r0], #4
 800afc0:	e7f4      	b.n	800afac <__copybits+0x30>

0800afc2 <__any_on>:
 800afc2:	f100 0214 	add.w	r2, r0, #20
 800afc6:	6900      	ldr	r0, [r0, #16]
 800afc8:	114b      	asrs	r3, r1, #5
 800afca:	4298      	cmp	r0, r3
 800afcc:	b510      	push	{r4, lr}
 800afce:	db11      	blt.n	800aff4 <__any_on+0x32>
 800afd0:	dd0a      	ble.n	800afe8 <__any_on+0x26>
 800afd2:	f011 011f 	ands.w	r1, r1, #31
 800afd6:	d007      	beq.n	800afe8 <__any_on+0x26>
 800afd8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800afdc:	fa24 f001 	lsr.w	r0, r4, r1
 800afe0:	fa00 f101 	lsl.w	r1, r0, r1
 800afe4:	428c      	cmp	r4, r1
 800afe6:	d10b      	bne.n	800b000 <__any_on+0x3e>
 800afe8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800afec:	4293      	cmp	r3, r2
 800afee:	d803      	bhi.n	800aff8 <__any_on+0x36>
 800aff0:	2000      	movs	r0, #0
 800aff2:	bd10      	pop	{r4, pc}
 800aff4:	4603      	mov	r3, r0
 800aff6:	e7f7      	b.n	800afe8 <__any_on+0x26>
 800aff8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800affc:	2900      	cmp	r1, #0
 800affe:	d0f5      	beq.n	800afec <__any_on+0x2a>
 800b000:	2001      	movs	r0, #1
 800b002:	e7f6      	b.n	800aff2 <__any_on+0x30>

0800b004 <_strtol_l.constprop.0>:
 800b004:	2b24      	cmp	r3, #36	@ 0x24
 800b006:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b00a:	4686      	mov	lr, r0
 800b00c:	4690      	mov	r8, r2
 800b00e:	d801      	bhi.n	800b014 <_strtol_l.constprop.0+0x10>
 800b010:	2b01      	cmp	r3, #1
 800b012:	d106      	bne.n	800b022 <_strtol_l.constprop.0+0x1e>
 800b014:	f7fe f858 	bl	80090c8 <__errno>
 800b018:	2316      	movs	r3, #22
 800b01a:	6003      	str	r3, [r0, #0]
 800b01c:	2000      	movs	r0, #0
 800b01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b022:	4834      	ldr	r0, [pc, #208]	@ (800b0f4 <_strtol_l.constprop.0+0xf0>)
 800b024:	460d      	mov	r5, r1
 800b026:	462a      	mov	r2, r5
 800b028:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b02c:	5d06      	ldrb	r6, [r0, r4]
 800b02e:	f016 0608 	ands.w	r6, r6, #8
 800b032:	d1f8      	bne.n	800b026 <_strtol_l.constprop.0+0x22>
 800b034:	2c2d      	cmp	r4, #45	@ 0x2d
 800b036:	d12d      	bne.n	800b094 <_strtol_l.constprop.0+0x90>
 800b038:	782c      	ldrb	r4, [r5, #0]
 800b03a:	2601      	movs	r6, #1
 800b03c:	1c95      	adds	r5, r2, #2
 800b03e:	f033 0210 	bics.w	r2, r3, #16
 800b042:	d109      	bne.n	800b058 <_strtol_l.constprop.0+0x54>
 800b044:	2c30      	cmp	r4, #48	@ 0x30
 800b046:	d12a      	bne.n	800b09e <_strtol_l.constprop.0+0x9a>
 800b048:	782a      	ldrb	r2, [r5, #0]
 800b04a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b04e:	2a58      	cmp	r2, #88	@ 0x58
 800b050:	d125      	bne.n	800b09e <_strtol_l.constprop.0+0x9a>
 800b052:	786c      	ldrb	r4, [r5, #1]
 800b054:	2310      	movs	r3, #16
 800b056:	3502      	adds	r5, #2
 800b058:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b05c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b060:	2200      	movs	r2, #0
 800b062:	fbbc f9f3 	udiv	r9, ip, r3
 800b066:	4610      	mov	r0, r2
 800b068:	fb03 ca19 	mls	sl, r3, r9, ip
 800b06c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b070:	2f09      	cmp	r7, #9
 800b072:	d81b      	bhi.n	800b0ac <_strtol_l.constprop.0+0xa8>
 800b074:	463c      	mov	r4, r7
 800b076:	42a3      	cmp	r3, r4
 800b078:	dd27      	ble.n	800b0ca <_strtol_l.constprop.0+0xc6>
 800b07a:	1c57      	adds	r7, r2, #1
 800b07c:	d007      	beq.n	800b08e <_strtol_l.constprop.0+0x8a>
 800b07e:	4581      	cmp	r9, r0
 800b080:	d320      	bcc.n	800b0c4 <_strtol_l.constprop.0+0xc0>
 800b082:	d101      	bne.n	800b088 <_strtol_l.constprop.0+0x84>
 800b084:	45a2      	cmp	sl, r4
 800b086:	db1d      	blt.n	800b0c4 <_strtol_l.constprop.0+0xc0>
 800b088:	fb00 4003 	mla	r0, r0, r3, r4
 800b08c:	2201      	movs	r2, #1
 800b08e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b092:	e7eb      	b.n	800b06c <_strtol_l.constprop.0+0x68>
 800b094:	2c2b      	cmp	r4, #43	@ 0x2b
 800b096:	bf04      	itt	eq
 800b098:	782c      	ldrbeq	r4, [r5, #0]
 800b09a:	1c95      	addeq	r5, r2, #2
 800b09c:	e7cf      	b.n	800b03e <_strtol_l.constprop.0+0x3a>
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1da      	bne.n	800b058 <_strtol_l.constprop.0+0x54>
 800b0a2:	2c30      	cmp	r4, #48	@ 0x30
 800b0a4:	bf0c      	ite	eq
 800b0a6:	2308      	moveq	r3, #8
 800b0a8:	230a      	movne	r3, #10
 800b0aa:	e7d5      	b.n	800b058 <_strtol_l.constprop.0+0x54>
 800b0ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b0b0:	2f19      	cmp	r7, #25
 800b0b2:	d801      	bhi.n	800b0b8 <_strtol_l.constprop.0+0xb4>
 800b0b4:	3c37      	subs	r4, #55	@ 0x37
 800b0b6:	e7de      	b.n	800b076 <_strtol_l.constprop.0+0x72>
 800b0b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b0bc:	2f19      	cmp	r7, #25
 800b0be:	d804      	bhi.n	800b0ca <_strtol_l.constprop.0+0xc6>
 800b0c0:	3c57      	subs	r4, #87	@ 0x57
 800b0c2:	e7d8      	b.n	800b076 <_strtol_l.constprop.0+0x72>
 800b0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c8:	e7e1      	b.n	800b08e <_strtol_l.constprop.0+0x8a>
 800b0ca:	1c53      	adds	r3, r2, #1
 800b0cc:	d108      	bne.n	800b0e0 <_strtol_l.constprop.0+0xdc>
 800b0ce:	2322      	movs	r3, #34	@ 0x22
 800b0d0:	f8ce 3000 	str.w	r3, [lr]
 800b0d4:	4660      	mov	r0, ip
 800b0d6:	f1b8 0f00 	cmp.w	r8, #0
 800b0da:	d0a0      	beq.n	800b01e <_strtol_l.constprop.0+0x1a>
 800b0dc:	1e69      	subs	r1, r5, #1
 800b0de:	e006      	b.n	800b0ee <_strtol_l.constprop.0+0xea>
 800b0e0:	b106      	cbz	r6, 800b0e4 <_strtol_l.constprop.0+0xe0>
 800b0e2:	4240      	negs	r0, r0
 800b0e4:	f1b8 0f00 	cmp.w	r8, #0
 800b0e8:	d099      	beq.n	800b01e <_strtol_l.constprop.0+0x1a>
 800b0ea:	2a00      	cmp	r2, #0
 800b0ec:	d1f6      	bne.n	800b0dc <_strtol_l.constprop.0+0xd8>
 800b0ee:	f8c8 1000 	str.w	r1, [r8]
 800b0f2:	e794      	b.n	800b01e <_strtol_l.constprop.0+0x1a>
 800b0f4:	0800bf89 	.word	0x0800bf89

0800b0f8 <_strtol_r>:
 800b0f8:	f7ff bf84 	b.w	800b004 <_strtol_l.constprop.0>

0800b0fc <__ascii_wctomb>:
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	4608      	mov	r0, r1
 800b100:	b141      	cbz	r1, 800b114 <__ascii_wctomb+0x18>
 800b102:	2aff      	cmp	r2, #255	@ 0xff
 800b104:	d904      	bls.n	800b110 <__ascii_wctomb+0x14>
 800b106:	228a      	movs	r2, #138	@ 0x8a
 800b108:	601a      	str	r2, [r3, #0]
 800b10a:	f04f 30ff 	mov.w	r0, #4294967295
 800b10e:	4770      	bx	lr
 800b110:	700a      	strb	r2, [r1, #0]
 800b112:	2001      	movs	r0, #1
 800b114:	4770      	bx	lr

0800b116 <__ssputs_r>:
 800b116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b11a:	688e      	ldr	r6, [r1, #8]
 800b11c:	461f      	mov	r7, r3
 800b11e:	42be      	cmp	r6, r7
 800b120:	680b      	ldr	r3, [r1, #0]
 800b122:	4682      	mov	sl, r0
 800b124:	460c      	mov	r4, r1
 800b126:	4690      	mov	r8, r2
 800b128:	d82d      	bhi.n	800b186 <__ssputs_r+0x70>
 800b12a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b12e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b132:	d026      	beq.n	800b182 <__ssputs_r+0x6c>
 800b134:	6965      	ldr	r5, [r4, #20]
 800b136:	6909      	ldr	r1, [r1, #16]
 800b138:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b13c:	eba3 0901 	sub.w	r9, r3, r1
 800b140:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b144:	1c7b      	adds	r3, r7, #1
 800b146:	444b      	add	r3, r9
 800b148:	106d      	asrs	r5, r5, #1
 800b14a:	429d      	cmp	r5, r3
 800b14c:	bf38      	it	cc
 800b14e:	461d      	movcc	r5, r3
 800b150:	0553      	lsls	r3, r2, #21
 800b152:	d527      	bpl.n	800b1a4 <__ssputs_r+0x8e>
 800b154:	4629      	mov	r1, r5
 800b156:	f7ff fa05 	bl	800a564 <_malloc_r>
 800b15a:	4606      	mov	r6, r0
 800b15c:	b360      	cbz	r0, 800b1b8 <__ssputs_r+0xa2>
 800b15e:	6921      	ldr	r1, [r4, #16]
 800b160:	464a      	mov	r2, r9
 800b162:	f7fd ffe6 	bl	8009132 <memcpy>
 800b166:	89a3      	ldrh	r3, [r4, #12]
 800b168:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b16c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b170:	81a3      	strh	r3, [r4, #12]
 800b172:	6126      	str	r6, [r4, #16]
 800b174:	6165      	str	r5, [r4, #20]
 800b176:	444e      	add	r6, r9
 800b178:	eba5 0509 	sub.w	r5, r5, r9
 800b17c:	6026      	str	r6, [r4, #0]
 800b17e:	60a5      	str	r5, [r4, #8]
 800b180:	463e      	mov	r6, r7
 800b182:	42be      	cmp	r6, r7
 800b184:	d900      	bls.n	800b188 <__ssputs_r+0x72>
 800b186:	463e      	mov	r6, r7
 800b188:	6820      	ldr	r0, [r4, #0]
 800b18a:	4632      	mov	r2, r6
 800b18c:	4641      	mov	r1, r8
 800b18e:	f000 fb69 	bl	800b864 <memmove>
 800b192:	68a3      	ldr	r3, [r4, #8]
 800b194:	1b9b      	subs	r3, r3, r6
 800b196:	60a3      	str	r3, [r4, #8]
 800b198:	6823      	ldr	r3, [r4, #0]
 800b19a:	4433      	add	r3, r6
 800b19c:	6023      	str	r3, [r4, #0]
 800b19e:	2000      	movs	r0, #0
 800b1a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1a4:	462a      	mov	r2, r5
 800b1a6:	f000 fbdb 	bl	800b960 <_realloc_r>
 800b1aa:	4606      	mov	r6, r0
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d1e0      	bne.n	800b172 <__ssputs_r+0x5c>
 800b1b0:	6921      	ldr	r1, [r4, #16]
 800b1b2:	4650      	mov	r0, sl
 800b1b4:	f7fe fe28 	bl	8009e08 <_free_r>
 800b1b8:	230c      	movs	r3, #12
 800b1ba:	f8ca 3000 	str.w	r3, [sl]
 800b1be:	89a3      	ldrh	r3, [r4, #12]
 800b1c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1c4:	81a3      	strh	r3, [r4, #12]
 800b1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ca:	e7e9      	b.n	800b1a0 <__ssputs_r+0x8a>

0800b1cc <_svfiprintf_r>:
 800b1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d0:	4698      	mov	r8, r3
 800b1d2:	898b      	ldrh	r3, [r1, #12]
 800b1d4:	061b      	lsls	r3, r3, #24
 800b1d6:	b09d      	sub	sp, #116	@ 0x74
 800b1d8:	4607      	mov	r7, r0
 800b1da:	460d      	mov	r5, r1
 800b1dc:	4614      	mov	r4, r2
 800b1de:	d510      	bpl.n	800b202 <_svfiprintf_r+0x36>
 800b1e0:	690b      	ldr	r3, [r1, #16]
 800b1e2:	b973      	cbnz	r3, 800b202 <_svfiprintf_r+0x36>
 800b1e4:	2140      	movs	r1, #64	@ 0x40
 800b1e6:	f7ff f9bd 	bl	800a564 <_malloc_r>
 800b1ea:	6028      	str	r0, [r5, #0]
 800b1ec:	6128      	str	r0, [r5, #16]
 800b1ee:	b930      	cbnz	r0, 800b1fe <_svfiprintf_r+0x32>
 800b1f0:	230c      	movs	r3, #12
 800b1f2:	603b      	str	r3, [r7, #0]
 800b1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f8:	b01d      	add	sp, #116	@ 0x74
 800b1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1fe:	2340      	movs	r3, #64	@ 0x40
 800b200:	616b      	str	r3, [r5, #20]
 800b202:	2300      	movs	r3, #0
 800b204:	9309      	str	r3, [sp, #36]	@ 0x24
 800b206:	2320      	movs	r3, #32
 800b208:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b20c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b210:	2330      	movs	r3, #48	@ 0x30
 800b212:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b3b0 <_svfiprintf_r+0x1e4>
 800b216:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b21a:	f04f 0901 	mov.w	r9, #1
 800b21e:	4623      	mov	r3, r4
 800b220:	469a      	mov	sl, r3
 800b222:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b226:	b10a      	cbz	r2, 800b22c <_svfiprintf_r+0x60>
 800b228:	2a25      	cmp	r2, #37	@ 0x25
 800b22a:	d1f9      	bne.n	800b220 <_svfiprintf_r+0x54>
 800b22c:	ebba 0b04 	subs.w	fp, sl, r4
 800b230:	d00b      	beq.n	800b24a <_svfiprintf_r+0x7e>
 800b232:	465b      	mov	r3, fp
 800b234:	4622      	mov	r2, r4
 800b236:	4629      	mov	r1, r5
 800b238:	4638      	mov	r0, r7
 800b23a:	f7ff ff6c 	bl	800b116 <__ssputs_r>
 800b23e:	3001      	adds	r0, #1
 800b240:	f000 80a7 	beq.w	800b392 <_svfiprintf_r+0x1c6>
 800b244:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b246:	445a      	add	r2, fp
 800b248:	9209      	str	r2, [sp, #36]	@ 0x24
 800b24a:	f89a 3000 	ldrb.w	r3, [sl]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	f000 809f 	beq.w	800b392 <_svfiprintf_r+0x1c6>
 800b254:	2300      	movs	r3, #0
 800b256:	f04f 32ff 	mov.w	r2, #4294967295
 800b25a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b25e:	f10a 0a01 	add.w	sl, sl, #1
 800b262:	9304      	str	r3, [sp, #16]
 800b264:	9307      	str	r3, [sp, #28]
 800b266:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b26a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b26c:	4654      	mov	r4, sl
 800b26e:	2205      	movs	r2, #5
 800b270:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b274:	484e      	ldr	r0, [pc, #312]	@ (800b3b0 <_svfiprintf_r+0x1e4>)
 800b276:	f7f4 ffbb 	bl	80001f0 <memchr>
 800b27a:	9a04      	ldr	r2, [sp, #16]
 800b27c:	b9d8      	cbnz	r0, 800b2b6 <_svfiprintf_r+0xea>
 800b27e:	06d0      	lsls	r0, r2, #27
 800b280:	bf44      	itt	mi
 800b282:	2320      	movmi	r3, #32
 800b284:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b288:	0711      	lsls	r1, r2, #28
 800b28a:	bf44      	itt	mi
 800b28c:	232b      	movmi	r3, #43	@ 0x2b
 800b28e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b292:	f89a 3000 	ldrb.w	r3, [sl]
 800b296:	2b2a      	cmp	r3, #42	@ 0x2a
 800b298:	d015      	beq.n	800b2c6 <_svfiprintf_r+0xfa>
 800b29a:	9a07      	ldr	r2, [sp, #28]
 800b29c:	4654      	mov	r4, sl
 800b29e:	2000      	movs	r0, #0
 800b2a0:	f04f 0c0a 	mov.w	ip, #10
 800b2a4:	4621      	mov	r1, r4
 800b2a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2aa:	3b30      	subs	r3, #48	@ 0x30
 800b2ac:	2b09      	cmp	r3, #9
 800b2ae:	d94b      	bls.n	800b348 <_svfiprintf_r+0x17c>
 800b2b0:	b1b0      	cbz	r0, 800b2e0 <_svfiprintf_r+0x114>
 800b2b2:	9207      	str	r2, [sp, #28]
 800b2b4:	e014      	b.n	800b2e0 <_svfiprintf_r+0x114>
 800b2b6:	eba0 0308 	sub.w	r3, r0, r8
 800b2ba:	fa09 f303 	lsl.w	r3, r9, r3
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	9304      	str	r3, [sp, #16]
 800b2c2:	46a2      	mov	sl, r4
 800b2c4:	e7d2      	b.n	800b26c <_svfiprintf_r+0xa0>
 800b2c6:	9b03      	ldr	r3, [sp, #12]
 800b2c8:	1d19      	adds	r1, r3, #4
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	9103      	str	r1, [sp, #12]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	bfbb      	ittet	lt
 800b2d2:	425b      	neglt	r3, r3
 800b2d4:	f042 0202 	orrlt.w	r2, r2, #2
 800b2d8:	9307      	strge	r3, [sp, #28]
 800b2da:	9307      	strlt	r3, [sp, #28]
 800b2dc:	bfb8      	it	lt
 800b2de:	9204      	strlt	r2, [sp, #16]
 800b2e0:	7823      	ldrb	r3, [r4, #0]
 800b2e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2e4:	d10a      	bne.n	800b2fc <_svfiprintf_r+0x130>
 800b2e6:	7863      	ldrb	r3, [r4, #1]
 800b2e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2ea:	d132      	bne.n	800b352 <_svfiprintf_r+0x186>
 800b2ec:	9b03      	ldr	r3, [sp, #12]
 800b2ee:	1d1a      	adds	r2, r3, #4
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	9203      	str	r2, [sp, #12]
 800b2f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2f8:	3402      	adds	r4, #2
 800b2fa:	9305      	str	r3, [sp, #20]
 800b2fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b3c0 <_svfiprintf_r+0x1f4>
 800b300:	7821      	ldrb	r1, [r4, #0]
 800b302:	2203      	movs	r2, #3
 800b304:	4650      	mov	r0, sl
 800b306:	f7f4 ff73 	bl	80001f0 <memchr>
 800b30a:	b138      	cbz	r0, 800b31c <_svfiprintf_r+0x150>
 800b30c:	9b04      	ldr	r3, [sp, #16]
 800b30e:	eba0 000a 	sub.w	r0, r0, sl
 800b312:	2240      	movs	r2, #64	@ 0x40
 800b314:	4082      	lsls	r2, r0
 800b316:	4313      	orrs	r3, r2
 800b318:	3401      	adds	r4, #1
 800b31a:	9304      	str	r3, [sp, #16]
 800b31c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b320:	4824      	ldr	r0, [pc, #144]	@ (800b3b4 <_svfiprintf_r+0x1e8>)
 800b322:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b326:	2206      	movs	r2, #6
 800b328:	f7f4 ff62 	bl	80001f0 <memchr>
 800b32c:	2800      	cmp	r0, #0
 800b32e:	d036      	beq.n	800b39e <_svfiprintf_r+0x1d2>
 800b330:	4b21      	ldr	r3, [pc, #132]	@ (800b3b8 <_svfiprintf_r+0x1ec>)
 800b332:	bb1b      	cbnz	r3, 800b37c <_svfiprintf_r+0x1b0>
 800b334:	9b03      	ldr	r3, [sp, #12]
 800b336:	3307      	adds	r3, #7
 800b338:	f023 0307 	bic.w	r3, r3, #7
 800b33c:	3308      	adds	r3, #8
 800b33e:	9303      	str	r3, [sp, #12]
 800b340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b342:	4433      	add	r3, r6
 800b344:	9309      	str	r3, [sp, #36]	@ 0x24
 800b346:	e76a      	b.n	800b21e <_svfiprintf_r+0x52>
 800b348:	fb0c 3202 	mla	r2, ip, r2, r3
 800b34c:	460c      	mov	r4, r1
 800b34e:	2001      	movs	r0, #1
 800b350:	e7a8      	b.n	800b2a4 <_svfiprintf_r+0xd8>
 800b352:	2300      	movs	r3, #0
 800b354:	3401      	adds	r4, #1
 800b356:	9305      	str	r3, [sp, #20]
 800b358:	4619      	mov	r1, r3
 800b35a:	f04f 0c0a 	mov.w	ip, #10
 800b35e:	4620      	mov	r0, r4
 800b360:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b364:	3a30      	subs	r2, #48	@ 0x30
 800b366:	2a09      	cmp	r2, #9
 800b368:	d903      	bls.n	800b372 <_svfiprintf_r+0x1a6>
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d0c6      	beq.n	800b2fc <_svfiprintf_r+0x130>
 800b36e:	9105      	str	r1, [sp, #20]
 800b370:	e7c4      	b.n	800b2fc <_svfiprintf_r+0x130>
 800b372:	fb0c 2101 	mla	r1, ip, r1, r2
 800b376:	4604      	mov	r4, r0
 800b378:	2301      	movs	r3, #1
 800b37a:	e7f0      	b.n	800b35e <_svfiprintf_r+0x192>
 800b37c:	ab03      	add	r3, sp, #12
 800b37e:	9300      	str	r3, [sp, #0]
 800b380:	462a      	mov	r2, r5
 800b382:	4b0e      	ldr	r3, [pc, #56]	@ (800b3bc <_svfiprintf_r+0x1f0>)
 800b384:	a904      	add	r1, sp, #16
 800b386:	4638      	mov	r0, r7
 800b388:	f7fc fe44 	bl	8008014 <_printf_float>
 800b38c:	1c42      	adds	r2, r0, #1
 800b38e:	4606      	mov	r6, r0
 800b390:	d1d6      	bne.n	800b340 <_svfiprintf_r+0x174>
 800b392:	89ab      	ldrh	r3, [r5, #12]
 800b394:	065b      	lsls	r3, r3, #25
 800b396:	f53f af2d 	bmi.w	800b1f4 <_svfiprintf_r+0x28>
 800b39a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b39c:	e72c      	b.n	800b1f8 <_svfiprintf_r+0x2c>
 800b39e:	ab03      	add	r3, sp, #12
 800b3a0:	9300      	str	r3, [sp, #0]
 800b3a2:	462a      	mov	r2, r5
 800b3a4:	4b05      	ldr	r3, [pc, #20]	@ (800b3bc <_svfiprintf_r+0x1f0>)
 800b3a6:	a904      	add	r1, sp, #16
 800b3a8:	4638      	mov	r0, r7
 800b3aa:	f7fd f8cb 	bl	8008544 <_printf_i>
 800b3ae:	e7ed      	b.n	800b38c <_svfiprintf_r+0x1c0>
 800b3b0:	0800c089 	.word	0x0800c089
 800b3b4:	0800c093 	.word	0x0800c093
 800b3b8:	08008015 	.word	0x08008015
 800b3bc:	0800b117 	.word	0x0800b117
 800b3c0:	0800c08f 	.word	0x0800c08f

0800b3c4 <__sfputc_r>:
 800b3c4:	6893      	ldr	r3, [r2, #8]
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	b410      	push	{r4}
 800b3cc:	6093      	str	r3, [r2, #8]
 800b3ce:	da08      	bge.n	800b3e2 <__sfputc_r+0x1e>
 800b3d0:	6994      	ldr	r4, [r2, #24]
 800b3d2:	42a3      	cmp	r3, r4
 800b3d4:	db01      	blt.n	800b3da <__sfputc_r+0x16>
 800b3d6:	290a      	cmp	r1, #10
 800b3d8:	d103      	bne.n	800b3e2 <__sfputc_r+0x1e>
 800b3da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3de:	f7fd bd7a 	b.w	8008ed6 <__swbuf_r>
 800b3e2:	6813      	ldr	r3, [r2, #0]
 800b3e4:	1c58      	adds	r0, r3, #1
 800b3e6:	6010      	str	r0, [r2, #0]
 800b3e8:	7019      	strb	r1, [r3, #0]
 800b3ea:	4608      	mov	r0, r1
 800b3ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3f0:	4770      	bx	lr

0800b3f2 <__sfputs_r>:
 800b3f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f4:	4606      	mov	r6, r0
 800b3f6:	460f      	mov	r7, r1
 800b3f8:	4614      	mov	r4, r2
 800b3fa:	18d5      	adds	r5, r2, r3
 800b3fc:	42ac      	cmp	r4, r5
 800b3fe:	d101      	bne.n	800b404 <__sfputs_r+0x12>
 800b400:	2000      	movs	r0, #0
 800b402:	e007      	b.n	800b414 <__sfputs_r+0x22>
 800b404:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b408:	463a      	mov	r2, r7
 800b40a:	4630      	mov	r0, r6
 800b40c:	f7ff ffda 	bl	800b3c4 <__sfputc_r>
 800b410:	1c43      	adds	r3, r0, #1
 800b412:	d1f3      	bne.n	800b3fc <__sfputs_r+0xa>
 800b414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b418 <_vfiprintf_r>:
 800b418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b41c:	460d      	mov	r5, r1
 800b41e:	b09d      	sub	sp, #116	@ 0x74
 800b420:	4614      	mov	r4, r2
 800b422:	4698      	mov	r8, r3
 800b424:	4606      	mov	r6, r0
 800b426:	b118      	cbz	r0, 800b430 <_vfiprintf_r+0x18>
 800b428:	6a03      	ldr	r3, [r0, #32]
 800b42a:	b90b      	cbnz	r3, 800b430 <_vfiprintf_r+0x18>
 800b42c:	f7fd fc4a 	bl	8008cc4 <__sinit>
 800b430:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b432:	07d9      	lsls	r1, r3, #31
 800b434:	d405      	bmi.n	800b442 <_vfiprintf_r+0x2a>
 800b436:	89ab      	ldrh	r3, [r5, #12]
 800b438:	059a      	lsls	r2, r3, #22
 800b43a:	d402      	bmi.n	800b442 <_vfiprintf_r+0x2a>
 800b43c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b43e:	f7fd fe6e 	bl	800911e <__retarget_lock_acquire_recursive>
 800b442:	89ab      	ldrh	r3, [r5, #12]
 800b444:	071b      	lsls	r3, r3, #28
 800b446:	d501      	bpl.n	800b44c <_vfiprintf_r+0x34>
 800b448:	692b      	ldr	r3, [r5, #16]
 800b44a:	b99b      	cbnz	r3, 800b474 <_vfiprintf_r+0x5c>
 800b44c:	4629      	mov	r1, r5
 800b44e:	4630      	mov	r0, r6
 800b450:	f7fd fd80 	bl	8008f54 <__swsetup_r>
 800b454:	b170      	cbz	r0, 800b474 <_vfiprintf_r+0x5c>
 800b456:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b458:	07dc      	lsls	r4, r3, #31
 800b45a:	d504      	bpl.n	800b466 <_vfiprintf_r+0x4e>
 800b45c:	f04f 30ff 	mov.w	r0, #4294967295
 800b460:	b01d      	add	sp, #116	@ 0x74
 800b462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b466:	89ab      	ldrh	r3, [r5, #12]
 800b468:	0598      	lsls	r0, r3, #22
 800b46a:	d4f7      	bmi.n	800b45c <_vfiprintf_r+0x44>
 800b46c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b46e:	f7fd fe57 	bl	8009120 <__retarget_lock_release_recursive>
 800b472:	e7f3      	b.n	800b45c <_vfiprintf_r+0x44>
 800b474:	2300      	movs	r3, #0
 800b476:	9309      	str	r3, [sp, #36]	@ 0x24
 800b478:	2320      	movs	r3, #32
 800b47a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b47e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b482:	2330      	movs	r3, #48	@ 0x30
 800b484:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b634 <_vfiprintf_r+0x21c>
 800b488:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b48c:	f04f 0901 	mov.w	r9, #1
 800b490:	4623      	mov	r3, r4
 800b492:	469a      	mov	sl, r3
 800b494:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b498:	b10a      	cbz	r2, 800b49e <_vfiprintf_r+0x86>
 800b49a:	2a25      	cmp	r2, #37	@ 0x25
 800b49c:	d1f9      	bne.n	800b492 <_vfiprintf_r+0x7a>
 800b49e:	ebba 0b04 	subs.w	fp, sl, r4
 800b4a2:	d00b      	beq.n	800b4bc <_vfiprintf_r+0xa4>
 800b4a4:	465b      	mov	r3, fp
 800b4a6:	4622      	mov	r2, r4
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	f7ff ffa1 	bl	800b3f2 <__sfputs_r>
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	f000 80a7 	beq.w	800b604 <_vfiprintf_r+0x1ec>
 800b4b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4b8:	445a      	add	r2, fp
 800b4ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	f000 809f 	beq.w	800b604 <_vfiprintf_r+0x1ec>
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4d0:	f10a 0a01 	add.w	sl, sl, #1
 800b4d4:	9304      	str	r3, [sp, #16]
 800b4d6:	9307      	str	r3, [sp, #28]
 800b4d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4de:	4654      	mov	r4, sl
 800b4e0:	2205      	movs	r2, #5
 800b4e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4e6:	4853      	ldr	r0, [pc, #332]	@ (800b634 <_vfiprintf_r+0x21c>)
 800b4e8:	f7f4 fe82 	bl	80001f0 <memchr>
 800b4ec:	9a04      	ldr	r2, [sp, #16]
 800b4ee:	b9d8      	cbnz	r0, 800b528 <_vfiprintf_r+0x110>
 800b4f0:	06d1      	lsls	r1, r2, #27
 800b4f2:	bf44      	itt	mi
 800b4f4:	2320      	movmi	r3, #32
 800b4f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4fa:	0713      	lsls	r3, r2, #28
 800b4fc:	bf44      	itt	mi
 800b4fe:	232b      	movmi	r3, #43	@ 0x2b
 800b500:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b504:	f89a 3000 	ldrb.w	r3, [sl]
 800b508:	2b2a      	cmp	r3, #42	@ 0x2a
 800b50a:	d015      	beq.n	800b538 <_vfiprintf_r+0x120>
 800b50c:	9a07      	ldr	r2, [sp, #28]
 800b50e:	4654      	mov	r4, sl
 800b510:	2000      	movs	r0, #0
 800b512:	f04f 0c0a 	mov.w	ip, #10
 800b516:	4621      	mov	r1, r4
 800b518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b51c:	3b30      	subs	r3, #48	@ 0x30
 800b51e:	2b09      	cmp	r3, #9
 800b520:	d94b      	bls.n	800b5ba <_vfiprintf_r+0x1a2>
 800b522:	b1b0      	cbz	r0, 800b552 <_vfiprintf_r+0x13a>
 800b524:	9207      	str	r2, [sp, #28]
 800b526:	e014      	b.n	800b552 <_vfiprintf_r+0x13a>
 800b528:	eba0 0308 	sub.w	r3, r0, r8
 800b52c:	fa09 f303 	lsl.w	r3, r9, r3
 800b530:	4313      	orrs	r3, r2
 800b532:	9304      	str	r3, [sp, #16]
 800b534:	46a2      	mov	sl, r4
 800b536:	e7d2      	b.n	800b4de <_vfiprintf_r+0xc6>
 800b538:	9b03      	ldr	r3, [sp, #12]
 800b53a:	1d19      	adds	r1, r3, #4
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	9103      	str	r1, [sp, #12]
 800b540:	2b00      	cmp	r3, #0
 800b542:	bfbb      	ittet	lt
 800b544:	425b      	neglt	r3, r3
 800b546:	f042 0202 	orrlt.w	r2, r2, #2
 800b54a:	9307      	strge	r3, [sp, #28]
 800b54c:	9307      	strlt	r3, [sp, #28]
 800b54e:	bfb8      	it	lt
 800b550:	9204      	strlt	r2, [sp, #16]
 800b552:	7823      	ldrb	r3, [r4, #0]
 800b554:	2b2e      	cmp	r3, #46	@ 0x2e
 800b556:	d10a      	bne.n	800b56e <_vfiprintf_r+0x156>
 800b558:	7863      	ldrb	r3, [r4, #1]
 800b55a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b55c:	d132      	bne.n	800b5c4 <_vfiprintf_r+0x1ac>
 800b55e:	9b03      	ldr	r3, [sp, #12]
 800b560:	1d1a      	adds	r2, r3, #4
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	9203      	str	r2, [sp, #12]
 800b566:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b56a:	3402      	adds	r4, #2
 800b56c:	9305      	str	r3, [sp, #20]
 800b56e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b644 <_vfiprintf_r+0x22c>
 800b572:	7821      	ldrb	r1, [r4, #0]
 800b574:	2203      	movs	r2, #3
 800b576:	4650      	mov	r0, sl
 800b578:	f7f4 fe3a 	bl	80001f0 <memchr>
 800b57c:	b138      	cbz	r0, 800b58e <_vfiprintf_r+0x176>
 800b57e:	9b04      	ldr	r3, [sp, #16]
 800b580:	eba0 000a 	sub.w	r0, r0, sl
 800b584:	2240      	movs	r2, #64	@ 0x40
 800b586:	4082      	lsls	r2, r0
 800b588:	4313      	orrs	r3, r2
 800b58a:	3401      	adds	r4, #1
 800b58c:	9304      	str	r3, [sp, #16]
 800b58e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b592:	4829      	ldr	r0, [pc, #164]	@ (800b638 <_vfiprintf_r+0x220>)
 800b594:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b598:	2206      	movs	r2, #6
 800b59a:	f7f4 fe29 	bl	80001f0 <memchr>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d03f      	beq.n	800b622 <_vfiprintf_r+0x20a>
 800b5a2:	4b26      	ldr	r3, [pc, #152]	@ (800b63c <_vfiprintf_r+0x224>)
 800b5a4:	bb1b      	cbnz	r3, 800b5ee <_vfiprintf_r+0x1d6>
 800b5a6:	9b03      	ldr	r3, [sp, #12]
 800b5a8:	3307      	adds	r3, #7
 800b5aa:	f023 0307 	bic.w	r3, r3, #7
 800b5ae:	3308      	adds	r3, #8
 800b5b0:	9303      	str	r3, [sp, #12]
 800b5b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5b4:	443b      	add	r3, r7
 800b5b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5b8:	e76a      	b.n	800b490 <_vfiprintf_r+0x78>
 800b5ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5be:	460c      	mov	r4, r1
 800b5c0:	2001      	movs	r0, #1
 800b5c2:	e7a8      	b.n	800b516 <_vfiprintf_r+0xfe>
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	3401      	adds	r4, #1
 800b5c8:	9305      	str	r3, [sp, #20]
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	f04f 0c0a 	mov.w	ip, #10
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5d6:	3a30      	subs	r2, #48	@ 0x30
 800b5d8:	2a09      	cmp	r2, #9
 800b5da:	d903      	bls.n	800b5e4 <_vfiprintf_r+0x1cc>
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d0c6      	beq.n	800b56e <_vfiprintf_r+0x156>
 800b5e0:	9105      	str	r1, [sp, #20]
 800b5e2:	e7c4      	b.n	800b56e <_vfiprintf_r+0x156>
 800b5e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e7f0      	b.n	800b5d0 <_vfiprintf_r+0x1b8>
 800b5ee:	ab03      	add	r3, sp, #12
 800b5f0:	9300      	str	r3, [sp, #0]
 800b5f2:	462a      	mov	r2, r5
 800b5f4:	4b12      	ldr	r3, [pc, #72]	@ (800b640 <_vfiprintf_r+0x228>)
 800b5f6:	a904      	add	r1, sp, #16
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	f7fc fd0b 	bl	8008014 <_printf_float>
 800b5fe:	4607      	mov	r7, r0
 800b600:	1c78      	adds	r0, r7, #1
 800b602:	d1d6      	bne.n	800b5b2 <_vfiprintf_r+0x19a>
 800b604:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b606:	07d9      	lsls	r1, r3, #31
 800b608:	d405      	bmi.n	800b616 <_vfiprintf_r+0x1fe>
 800b60a:	89ab      	ldrh	r3, [r5, #12]
 800b60c:	059a      	lsls	r2, r3, #22
 800b60e:	d402      	bmi.n	800b616 <_vfiprintf_r+0x1fe>
 800b610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b612:	f7fd fd85 	bl	8009120 <__retarget_lock_release_recursive>
 800b616:	89ab      	ldrh	r3, [r5, #12]
 800b618:	065b      	lsls	r3, r3, #25
 800b61a:	f53f af1f 	bmi.w	800b45c <_vfiprintf_r+0x44>
 800b61e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b620:	e71e      	b.n	800b460 <_vfiprintf_r+0x48>
 800b622:	ab03      	add	r3, sp, #12
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	462a      	mov	r2, r5
 800b628:	4b05      	ldr	r3, [pc, #20]	@ (800b640 <_vfiprintf_r+0x228>)
 800b62a:	a904      	add	r1, sp, #16
 800b62c:	4630      	mov	r0, r6
 800b62e:	f7fc ff89 	bl	8008544 <_printf_i>
 800b632:	e7e4      	b.n	800b5fe <_vfiprintf_r+0x1e6>
 800b634:	0800c089 	.word	0x0800c089
 800b638:	0800c093 	.word	0x0800c093
 800b63c:	08008015 	.word	0x08008015
 800b640:	0800b3f3 	.word	0x0800b3f3
 800b644:	0800c08f 	.word	0x0800c08f

0800b648 <__sflush_r>:
 800b648:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b650:	0716      	lsls	r6, r2, #28
 800b652:	4605      	mov	r5, r0
 800b654:	460c      	mov	r4, r1
 800b656:	d454      	bmi.n	800b702 <__sflush_r+0xba>
 800b658:	684b      	ldr	r3, [r1, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	dc02      	bgt.n	800b664 <__sflush_r+0x1c>
 800b65e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b660:	2b00      	cmp	r3, #0
 800b662:	dd48      	ble.n	800b6f6 <__sflush_r+0xae>
 800b664:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b666:	2e00      	cmp	r6, #0
 800b668:	d045      	beq.n	800b6f6 <__sflush_r+0xae>
 800b66a:	2300      	movs	r3, #0
 800b66c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b670:	682f      	ldr	r7, [r5, #0]
 800b672:	6a21      	ldr	r1, [r4, #32]
 800b674:	602b      	str	r3, [r5, #0]
 800b676:	d030      	beq.n	800b6da <__sflush_r+0x92>
 800b678:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b67a:	89a3      	ldrh	r3, [r4, #12]
 800b67c:	0759      	lsls	r1, r3, #29
 800b67e:	d505      	bpl.n	800b68c <__sflush_r+0x44>
 800b680:	6863      	ldr	r3, [r4, #4]
 800b682:	1ad2      	subs	r2, r2, r3
 800b684:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b686:	b10b      	cbz	r3, 800b68c <__sflush_r+0x44>
 800b688:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b68a:	1ad2      	subs	r2, r2, r3
 800b68c:	2300      	movs	r3, #0
 800b68e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b690:	6a21      	ldr	r1, [r4, #32]
 800b692:	4628      	mov	r0, r5
 800b694:	47b0      	blx	r6
 800b696:	1c43      	adds	r3, r0, #1
 800b698:	89a3      	ldrh	r3, [r4, #12]
 800b69a:	d106      	bne.n	800b6aa <__sflush_r+0x62>
 800b69c:	6829      	ldr	r1, [r5, #0]
 800b69e:	291d      	cmp	r1, #29
 800b6a0:	d82b      	bhi.n	800b6fa <__sflush_r+0xb2>
 800b6a2:	4a2a      	ldr	r2, [pc, #168]	@ (800b74c <__sflush_r+0x104>)
 800b6a4:	410a      	asrs	r2, r1
 800b6a6:	07d6      	lsls	r6, r2, #31
 800b6a8:	d427      	bmi.n	800b6fa <__sflush_r+0xb2>
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	6062      	str	r2, [r4, #4]
 800b6ae:	04d9      	lsls	r1, r3, #19
 800b6b0:	6922      	ldr	r2, [r4, #16]
 800b6b2:	6022      	str	r2, [r4, #0]
 800b6b4:	d504      	bpl.n	800b6c0 <__sflush_r+0x78>
 800b6b6:	1c42      	adds	r2, r0, #1
 800b6b8:	d101      	bne.n	800b6be <__sflush_r+0x76>
 800b6ba:	682b      	ldr	r3, [r5, #0]
 800b6bc:	b903      	cbnz	r3, 800b6c0 <__sflush_r+0x78>
 800b6be:	6560      	str	r0, [r4, #84]	@ 0x54
 800b6c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6c2:	602f      	str	r7, [r5, #0]
 800b6c4:	b1b9      	cbz	r1, 800b6f6 <__sflush_r+0xae>
 800b6c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6ca:	4299      	cmp	r1, r3
 800b6cc:	d002      	beq.n	800b6d4 <__sflush_r+0x8c>
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	f7fe fb9a 	bl	8009e08 <_free_r>
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6d8:	e00d      	b.n	800b6f6 <__sflush_r+0xae>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	4628      	mov	r0, r5
 800b6de:	47b0      	blx	r6
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	1c50      	adds	r0, r2, #1
 800b6e4:	d1c9      	bne.n	800b67a <__sflush_r+0x32>
 800b6e6:	682b      	ldr	r3, [r5, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d0c6      	beq.n	800b67a <__sflush_r+0x32>
 800b6ec:	2b1d      	cmp	r3, #29
 800b6ee:	d001      	beq.n	800b6f4 <__sflush_r+0xac>
 800b6f0:	2b16      	cmp	r3, #22
 800b6f2:	d11e      	bne.n	800b732 <__sflush_r+0xea>
 800b6f4:	602f      	str	r7, [r5, #0]
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	e022      	b.n	800b740 <__sflush_r+0xf8>
 800b6fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6fe:	b21b      	sxth	r3, r3
 800b700:	e01b      	b.n	800b73a <__sflush_r+0xf2>
 800b702:	690f      	ldr	r7, [r1, #16]
 800b704:	2f00      	cmp	r7, #0
 800b706:	d0f6      	beq.n	800b6f6 <__sflush_r+0xae>
 800b708:	0793      	lsls	r3, r2, #30
 800b70a:	680e      	ldr	r6, [r1, #0]
 800b70c:	bf08      	it	eq
 800b70e:	694b      	ldreq	r3, [r1, #20]
 800b710:	600f      	str	r7, [r1, #0]
 800b712:	bf18      	it	ne
 800b714:	2300      	movne	r3, #0
 800b716:	eba6 0807 	sub.w	r8, r6, r7
 800b71a:	608b      	str	r3, [r1, #8]
 800b71c:	f1b8 0f00 	cmp.w	r8, #0
 800b720:	dde9      	ble.n	800b6f6 <__sflush_r+0xae>
 800b722:	6a21      	ldr	r1, [r4, #32]
 800b724:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b726:	4643      	mov	r3, r8
 800b728:	463a      	mov	r2, r7
 800b72a:	4628      	mov	r0, r5
 800b72c:	47b0      	blx	r6
 800b72e:	2800      	cmp	r0, #0
 800b730:	dc08      	bgt.n	800b744 <__sflush_r+0xfc>
 800b732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b73a:	81a3      	strh	r3, [r4, #12]
 800b73c:	f04f 30ff 	mov.w	r0, #4294967295
 800b740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b744:	4407      	add	r7, r0
 800b746:	eba8 0800 	sub.w	r8, r8, r0
 800b74a:	e7e7      	b.n	800b71c <__sflush_r+0xd4>
 800b74c:	dfbffffe 	.word	0xdfbffffe

0800b750 <_fflush_r>:
 800b750:	b538      	push	{r3, r4, r5, lr}
 800b752:	690b      	ldr	r3, [r1, #16]
 800b754:	4605      	mov	r5, r0
 800b756:	460c      	mov	r4, r1
 800b758:	b913      	cbnz	r3, 800b760 <_fflush_r+0x10>
 800b75a:	2500      	movs	r5, #0
 800b75c:	4628      	mov	r0, r5
 800b75e:	bd38      	pop	{r3, r4, r5, pc}
 800b760:	b118      	cbz	r0, 800b76a <_fflush_r+0x1a>
 800b762:	6a03      	ldr	r3, [r0, #32]
 800b764:	b90b      	cbnz	r3, 800b76a <_fflush_r+0x1a>
 800b766:	f7fd faad 	bl	8008cc4 <__sinit>
 800b76a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d0f3      	beq.n	800b75a <_fflush_r+0xa>
 800b772:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b774:	07d0      	lsls	r0, r2, #31
 800b776:	d404      	bmi.n	800b782 <_fflush_r+0x32>
 800b778:	0599      	lsls	r1, r3, #22
 800b77a:	d402      	bmi.n	800b782 <_fflush_r+0x32>
 800b77c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b77e:	f7fd fcce 	bl	800911e <__retarget_lock_acquire_recursive>
 800b782:	4628      	mov	r0, r5
 800b784:	4621      	mov	r1, r4
 800b786:	f7ff ff5f 	bl	800b648 <__sflush_r>
 800b78a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b78c:	07da      	lsls	r2, r3, #31
 800b78e:	4605      	mov	r5, r0
 800b790:	d4e4      	bmi.n	800b75c <_fflush_r+0xc>
 800b792:	89a3      	ldrh	r3, [r4, #12]
 800b794:	059b      	lsls	r3, r3, #22
 800b796:	d4e1      	bmi.n	800b75c <_fflush_r+0xc>
 800b798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b79a:	f7fd fcc1 	bl	8009120 <__retarget_lock_release_recursive>
 800b79e:	e7dd      	b.n	800b75c <_fflush_r+0xc>

0800b7a0 <__swhatbuf_r>:
 800b7a0:	b570      	push	{r4, r5, r6, lr}
 800b7a2:	460c      	mov	r4, r1
 800b7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a8:	2900      	cmp	r1, #0
 800b7aa:	b096      	sub	sp, #88	@ 0x58
 800b7ac:	4615      	mov	r5, r2
 800b7ae:	461e      	mov	r6, r3
 800b7b0:	da0d      	bge.n	800b7ce <__swhatbuf_r+0x2e>
 800b7b2:	89a3      	ldrh	r3, [r4, #12]
 800b7b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b7b8:	f04f 0100 	mov.w	r1, #0
 800b7bc:	bf14      	ite	ne
 800b7be:	2340      	movne	r3, #64	@ 0x40
 800b7c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	6031      	str	r1, [r6, #0]
 800b7c8:	602b      	str	r3, [r5, #0]
 800b7ca:	b016      	add	sp, #88	@ 0x58
 800b7cc:	bd70      	pop	{r4, r5, r6, pc}
 800b7ce:	466a      	mov	r2, sp
 800b7d0:	f000 f862 	bl	800b898 <_fstat_r>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	dbec      	blt.n	800b7b2 <__swhatbuf_r+0x12>
 800b7d8:	9901      	ldr	r1, [sp, #4]
 800b7da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b7de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b7e2:	4259      	negs	r1, r3
 800b7e4:	4159      	adcs	r1, r3
 800b7e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7ea:	e7eb      	b.n	800b7c4 <__swhatbuf_r+0x24>

0800b7ec <__smakebuf_r>:
 800b7ec:	898b      	ldrh	r3, [r1, #12]
 800b7ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7f0:	079d      	lsls	r5, r3, #30
 800b7f2:	4606      	mov	r6, r0
 800b7f4:	460c      	mov	r4, r1
 800b7f6:	d507      	bpl.n	800b808 <__smakebuf_r+0x1c>
 800b7f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b7fc:	6023      	str	r3, [r4, #0]
 800b7fe:	6123      	str	r3, [r4, #16]
 800b800:	2301      	movs	r3, #1
 800b802:	6163      	str	r3, [r4, #20]
 800b804:	b003      	add	sp, #12
 800b806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b808:	ab01      	add	r3, sp, #4
 800b80a:	466a      	mov	r2, sp
 800b80c:	f7ff ffc8 	bl	800b7a0 <__swhatbuf_r>
 800b810:	9f00      	ldr	r7, [sp, #0]
 800b812:	4605      	mov	r5, r0
 800b814:	4639      	mov	r1, r7
 800b816:	4630      	mov	r0, r6
 800b818:	f7fe fea4 	bl	800a564 <_malloc_r>
 800b81c:	b948      	cbnz	r0, 800b832 <__smakebuf_r+0x46>
 800b81e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b822:	059a      	lsls	r2, r3, #22
 800b824:	d4ee      	bmi.n	800b804 <__smakebuf_r+0x18>
 800b826:	f023 0303 	bic.w	r3, r3, #3
 800b82a:	f043 0302 	orr.w	r3, r3, #2
 800b82e:	81a3      	strh	r3, [r4, #12]
 800b830:	e7e2      	b.n	800b7f8 <__smakebuf_r+0xc>
 800b832:	89a3      	ldrh	r3, [r4, #12]
 800b834:	6020      	str	r0, [r4, #0]
 800b836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b83a:	81a3      	strh	r3, [r4, #12]
 800b83c:	9b01      	ldr	r3, [sp, #4]
 800b83e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b842:	b15b      	cbz	r3, 800b85c <__smakebuf_r+0x70>
 800b844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b848:	4630      	mov	r0, r6
 800b84a:	f000 f837 	bl	800b8bc <_isatty_r>
 800b84e:	b128      	cbz	r0, 800b85c <__smakebuf_r+0x70>
 800b850:	89a3      	ldrh	r3, [r4, #12]
 800b852:	f023 0303 	bic.w	r3, r3, #3
 800b856:	f043 0301 	orr.w	r3, r3, #1
 800b85a:	81a3      	strh	r3, [r4, #12]
 800b85c:	89a3      	ldrh	r3, [r4, #12]
 800b85e:	431d      	orrs	r5, r3
 800b860:	81a5      	strh	r5, [r4, #12]
 800b862:	e7cf      	b.n	800b804 <__smakebuf_r+0x18>

0800b864 <memmove>:
 800b864:	4288      	cmp	r0, r1
 800b866:	b510      	push	{r4, lr}
 800b868:	eb01 0402 	add.w	r4, r1, r2
 800b86c:	d902      	bls.n	800b874 <memmove+0x10>
 800b86e:	4284      	cmp	r4, r0
 800b870:	4623      	mov	r3, r4
 800b872:	d807      	bhi.n	800b884 <memmove+0x20>
 800b874:	1e43      	subs	r3, r0, #1
 800b876:	42a1      	cmp	r1, r4
 800b878:	d008      	beq.n	800b88c <memmove+0x28>
 800b87a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b87e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b882:	e7f8      	b.n	800b876 <memmove+0x12>
 800b884:	4402      	add	r2, r0
 800b886:	4601      	mov	r1, r0
 800b888:	428a      	cmp	r2, r1
 800b88a:	d100      	bne.n	800b88e <memmove+0x2a>
 800b88c:	bd10      	pop	{r4, pc}
 800b88e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b896:	e7f7      	b.n	800b888 <memmove+0x24>

0800b898 <_fstat_r>:
 800b898:	b538      	push	{r3, r4, r5, lr}
 800b89a:	4d07      	ldr	r5, [pc, #28]	@ (800b8b8 <_fstat_r+0x20>)
 800b89c:	2300      	movs	r3, #0
 800b89e:	4604      	mov	r4, r0
 800b8a0:	4608      	mov	r0, r1
 800b8a2:	4611      	mov	r1, r2
 800b8a4:	602b      	str	r3, [r5, #0]
 800b8a6:	f7f6 fbb3 	bl	8002010 <_fstat>
 800b8aa:	1c43      	adds	r3, r0, #1
 800b8ac:	d102      	bne.n	800b8b4 <_fstat_r+0x1c>
 800b8ae:	682b      	ldr	r3, [r5, #0]
 800b8b0:	b103      	cbz	r3, 800b8b4 <_fstat_r+0x1c>
 800b8b2:	6023      	str	r3, [r4, #0]
 800b8b4:	bd38      	pop	{r3, r4, r5, pc}
 800b8b6:	bf00      	nop
 800b8b8:	20000680 	.word	0x20000680

0800b8bc <_isatty_r>:
 800b8bc:	b538      	push	{r3, r4, r5, lr}
 800b8be:	4d06      	ldr	r5, [pc, #24]	@ (800b8d8 <_isatty_r+0x1c>)
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	4608      	mov	r0, r1
 800b8c6:	602b      	str	r3, [r5, #0]
 800b8c8:	f7f6 fbb2 	bl	8002030 <_isatty>
 800b8cc:	1c43      	adds	r3, r0, #1
 800b8ce:	d102      	bne.n	800b8d6 <_isatty_r+0x1a>
 800b8d0:	682b      	ldr	r3, [r5, #0]
 800b8d2:	b103      	cbz	r3, 800b8d6 <_isatty_r+0x1a>
 800b8d4:	6023      	str	r3, [r4, #0]
 800b8d6:	bd38      	pop	{r3, r4, r5, pc}
 800b8d8:	20000680 	.word	0x20000680

0800b8dc <_sbrk_r>:
 800b8dc:	b538      	push	{r3, r4, r5, lr}
 800b8de:	4d06      	ldr	r5, [pc, #24]	@ (800b8f8 <_sbrk_r+0x1c>)
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	4608      	mov	r0, r1
 800b8e6:	602b      	str	r3, [r5, #0]
 800b8e8:	f7f6 fbba 	bl	8002060 <_sbrk>
 800b8ec:	1c43      	adds	r3, r0, #1
 800b8ee:	d102      	bne.n	800b8f6 <_sbrk_r+0x1a>
 800b8f0:	682b      	ldr	r3, [r5, #0]
 800b8f2:	b103      	cbz	r3, 800b8f6 <_sbrk_r+0x1a>
 800b8f4:	6023      	str	r3, [r4, #0]
 800b8f6:	bd38      	pop	{r3, r4, r5, pc}
 800b8f8:	20000680 	.word	0x20000680

0800b8fc <__assert_func>:
 800b8fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8fe:	4614      	mov	r4, r2
 800b900:	461a      	mov	r2, r3
 800b902:	4b09      	ldr	r3, [pc, #36]	@ (800b928 <__assert_func+0x2c>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4605      	mov	r5, r0
 800b908:	68d8      	ldr	r0, [r3, #12]
 800b90a:	b954      	cbnz	r4, 800b922 <__assert_func+0x26>
 800b90c:	4b07      	ldr	r3, [pc, #28]	@ (800b92c <__assert_func+0x30>)
 800b90e:	461c      	mov	r4, r3
 800b910:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b914:	9100      	str	r1, [sp, #0]
 800b916:	462b      	mov	r3, r5
 800b918:	4905      	ldr	r1, [pc, #20]	@ (800b930 <__assert_func+0x34>)
 800b91a:	f000 f84f 	bl	800b9bc <fiprintf>
 800b91e:	f000 f85f 	bl	800b9e0 <abort>
 800b922:	4b04      	ldr	r3, [pc, #16]	@ (800b934 <__assert_func+0x38>)
 800b924:	e7f4      	b.n	800b910 <__assert_func+0x14>
 800b926:	bf00      	nop
 800b928:	20000184 	.word	0x20000184
 800b92c:	0800c0d5 	.word	0x0800c0d5
 800b930:	0800c0a7 	.word	0x0800c0a7
 800b934:	0800c09a 	.word	0x0800c09a

0800b938 <_calloc_r>:
 800b938:	b570      	push	{r4, r5, r6, lr}
 800b93a:	fba1 5402 	umull	r5, r4, r1, r2
 800b93e:	b93c      	cbnz	r4, 800b950 <_calloc_r+0x18>
 800b940:	4629      	mov	r1, r5
 800b942:	f7fe fe0f 	bl	800a564 <_malloc_r>
 800b946:	4606      	mov	r6, r0
 800b948:	b928      	cbnz	r0, 800b956 <_calloc_r+0x1e>
 800b94a:	2600      	movs	r6, #0
 800b94c:	4630      	mov	r0, r6
 800b94e:	bd70      	pop	{r4, r5, r6, pc}
 800b950:	220c      	movs	r2, #12
 800b952:	6002      	str	r2, [r0, #0]
 800b954:	e7f9      	b.n	800b94a <_calloc_r+0x12>
 800b956:	462a      	mov	r2, r5
 800b958:	4621      	mov	r1, r4
 800b95a:	f7fd fb51 	bl	8009000 <memset>
 800b95e:	e7f5      	b.n	800b94c <_calloc_r+0x14>

0800b960 <_realloc_r>:
 800b960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b964:	4680      	mov	r8, r0
 800b966:	4615      	mov	r5, r2
 800b968:	460c      	mov	r4, r1
 800b96a:	b921      	cbnz	r1, 800b976 <_realloc_r+0x16>
 800b96c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b970:	4611      	mov	r1, r2
 800b972:	f7fe bdf7 	b.w	800a564 <_malloc_r>
 800b976:	b92a      	cbnz	r2, 800b984 <_realloc_r+0x24>
 800b978:	f7fe fa46 	bl	8009e08 <_free_r>
 800b97c:	2400      	movs	r4, #0
 800b97e:	4620      	mov	r0, r4
 800b980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b984:	f000 f833 	bl	800b9ee <_malloc_usable_size_r>
 800b988:	4285      	cmp	r5, r0
 800b98a:	4606      	mov	r6, r0
 800b98c:	d802      	bhi.n	800b994 <_realloc_r+0x34>
 800b98e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b992:	d8f4      	bhi.n	800b97e <_realloc_r+0x1e>
 800b994:	4629      	mov	r1, r5
 800b996:	4640      	mov	r0, r8
 800b998:	f7fe fde4 	bl	800a564 <_malloc_r>
 800b99c:	4607      	mov	r7, r0
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d0ec      	beq.n	800b97c <_realloc_r+0x1c>
 800b9a2:	42b5      	cmp	r5, r6
 800b9a4:	462a      	mov	r2, r5
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	bf28      	it	cs
 800b9aa:	4632      	movcs	r2, r6
 800b9ac:	f7fd fbc1 	bl	8009132 <memcpy>
 800b9b0:	4621      	mov	r1, r4
 800b9b2:	4640      	mov	r0, r8
 800b9b4:	f7fe fa28 	bl	8009e08 <_free_r>
 800b9b8:	463c      	mov	r4, r7
 800b9ba:	e7e0      	b.n	800b97e <_realloc_r+0x1e>

0800b9bc <fiprintf>:
 800b9bc:	b40e      	push	{r1, r2, r3}
 800b9be:	b503      	push	{r0, r1, lr}
 800b9c0:	4601      	mov	r1, r0
 800b9c2:	ab03      	add	r3, sp, #12
 800b9c4:	4805      	ldr	r0, [pc, #20]	@ (800b9dc <fiprintf+0x20>)
 800b9c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ca:	6800      	ldr	r0, [r0, #0]
 800b9cc:	9301      	str	r3, [sp, #4]
 800b9ce:	f7ff fd23 	bl	800b418 <_vfiprintf_r>
 800b9d2:	b002      	add	sp, #8
 800b9d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9d8:	b003      	add	sp, #12
 800b9da:	4770      	bx	lr
 800b9dc:	20000184 	.word	0x20000184

0800b9e0 <abort>:
 800b9e0:	b508      	push	{r3, lr}
 800b9e2:	2006      	movs	r0, #6
 800b9e4:	f000 f834 	bl	800ba50 <raise>
 800b9e8:	2001      	movs	r0, #1
 800b9ea:	f7f6 fac1 	bl	8001f70 <_exit>

0800b9ee <_malloc_usable_size_r>:
 800b9ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9f2:	1f18      	subs	r0, r3, #4
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	bfbc      	itt	lt
 800b9f8:	580b      	ldrlt	r3, [r1, r0]
 800b9fa:	18c0      	addlt	r0, r0, r3
 800b9fc:	4770      	bx	lr

0800b9fe <_raise_r>:
 800b9fe:	291f      	cmp	r1, #31
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	4605      	mov	r5, r0
 800ba04:	460c      	mov	r4, r1
 800ba06:	d904      	bls.n	800ba12 <_raise_r+0x14>
 800ba08:	2316      	movs	r3, #22
 800ba0a:	6003      	str	r3, [r0, #0]
 800ba0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba10:	bd38      	pop	{r3, r4, r5, pc}
 800ba12:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba14:	b112      	cbz	r2, 800ba1c <_raise_r+0x1e>
 800ba16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba1a:	b94b      	cbnz	r3, 800ba30 <_raise_r+0x32>
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	f000 f831 	bl	800ba84 <_getpid_r>
 800ba22:	4622      	mov	r2, r4
 800ba24:	4601      	mov	r1, r0
 800ba26:	4628      	mov	r0, r5
 800ba28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba2c:	f000 b818 	b.w	800ba60 <_kill_r>
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d00a      	beq.n	800ba4a <_raise_r+0x4c>
 800ba34:	1c59      	adds	r1, r3, #1
 800ba36:	d103      	bne.n	800ba40 <_raise_r+0x42>
 800ba38:	2316      	movs	r3, #22
 800ba3a:	6003      	str	r3, [r0, #0]
 800ba3c:	2001      	movs	r0, #1
 800ba3e:	e7e7      	b.n	800ba10 <_raise_r+0x12>
 800ba40:	2100      	movs	r1, #0
 800ba42:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ba46:	4620      	mov	r0, r4
 800ba48:	4798      	blx	r3
 800ba4a:	2000      	movs	r0, #0
 800ba4c:	e7e0      	b.n	800ba10 <_raise_r+0x12>
	...

0800ba50 <raise>:
 800ba50:	4b02      	ldr	r3, [pc, #8]	@ (800ba5c <raise+0xc>)
 800ba52:	4601      	mov	r1, r0
 800ba54:	6818      	ldr	r0, [r3, #0]
 800ba56:	f7ff bfd2 	b.w	800b9fe <_raise_r>
 800ba5a:	bf00      	nop
 800ba5c:	20000184 	.word	0x20000184

0800ba60 <_kill_r>:
 800ba60:	b538      	push	{r3, r4, r5, lr}
 800ba62:	4d07      	ldr	r5, [pc, #28]	@ (800ba80 <_kill_r+0x20>)
 800ba64:	2300      	movs	r3, #0
 800ba66:	4604      	mov	r4, r0
 800ba68:	4608      	mov	r0, r1
 800ba6a:	4611      	mov	r1, r2
 800ba6c:	602b      	str	r3, [r5, #0]
 800ba6e:	f7f6 fa6f 	bl	8001f50 <_kill>
 800ba72:	1c43      	adds	r3, r0, #1
 800ba74:	d102      	bne.n	800ba7c <_kill_r+0x1c>
 800ba76:	682b      	ldr	r3, [r5, #0]
 800ba78:	b103      	cbz	r3, 800ba7c <_kill_r+0x1c>
 800ba7a:	6023      	str	r3, [r4, #0]
 800ba7c:	bd38      	pop	{r3, r4, r5, pc}
 800ba7e:	bf00      	nop
 800ba80:	20000680 	.word	0x20000680

0800ba84 <_getpid_r>:
 800ba84:	f7f6 ba5c 	b.w	8001f40 <_getpid>

0800ba88 <_init>:
 800ba88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba8a:	bf00      	nop
 800ba8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba8e:	bc08      	pop	{r3}
 800ba90:	469e      	mov	lr, r3
 800ba92:	4770      	bx	lr

0800ba94 <_fini>:
 800ba94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba96:	bf00      	nop
 800ba98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba9a:	bc08      	pop	{r3}
 800ba9c:	469e      	mov	lr, r3
 800ba9e:	4770      	bx	lr
