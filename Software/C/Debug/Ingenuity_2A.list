
Ingenuity_2A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000def8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  0800e088  0800e088  0000f088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e888  0800e888  000101d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e888  0800e888  0000f888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e890  0800e890  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e890  0800e890  0000f890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e894  0800e894  0000f894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800e898  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  200001d4  0800ea6c  000101d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e8  0800ea6c  000107e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb06  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004305  00000000  00000000  0002ed0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf8  00000000  00000000  00033010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015b2  00000000  00000000  00034c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000202f0  00000000  00000000  000361ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022f81  00000000  00000000  000564aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5225  00000000  00000000  0007942b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e650  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c6c  00000000  00000000  0013e694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  00147300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e070 	.word	0x0800e070

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800e070 	.word	0x0800e070

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	@ 0x28
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
 8001024:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001026:	4b2f      	ldr	r3, [pc, #188]	@ (80010e4 <MX_ADC1_Init+0xe0>)
 8001028:	4a2f      	ldr	r2, [pc, #188]	@ (80010e8 <MX_ADC1_Init+0xe4>)
 800102a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800102c:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <MX_ADC1_Init+0xe0>)
 800102e:	2200      	movs	r2, #0
 8001030:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001032:	4b2c      	ldr	r3, [pc, #176]	@ (80010e4 <MX_ADC1_Init+0xe0>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001038:	4b2a      	ldr	r3, [pc, #168]	@ (80010e4 <MX_ADC1_Init+0xe0>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800103e:	4b29      	ldr	r3, [pc, #164]	@ (80010e4 <MX_ADC1_Init+0xe0>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001044:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <MX_ADC1_Init+0xe0>)
 8001046:	2204      	movs	r2, #4
 8001048:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800104a:	4b26      	ldr	r3, [pc, #152]	@ (80010e4 <MX_ADC1_Init+0xe0>)
 800104c:	2200      	movs	r2, #0
 800104e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001050:	4b24      	ldr	r3, [pc, #144]	@ (80010e4 <MX_ADC1_Init+0xe0>)
 8001052:	2200      	movs	r2, #0
 8001054:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001056:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <MX_ADC1_Init+0xe0>)
 8001058:	2201      	movs	r2, #1
 800105a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800105c:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <MX_ADC1_Init+0xe0>)
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001064:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <MX_ADC1_Init+0xe0>)
 8001066:	2200      	movs	r2, #0
 8001068:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106a:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <MX_ADC1_Init+0xe0>)
 800106c:	2200      	movs	r2, #0
 800106e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001070:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <MX_ADC1_Init+0xe0>)
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001078:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <MX_ADC1_Init+0xe0>)
 800107a:	2200      	movs	r2, #0
 800107c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800107e:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <MX_ADC1_Init+0xe0>)
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001086:	4817      	ldr	r0, [pc, #92]	@ (80010e4 <MX_ADC1_Init+0xe0>)
 8001088:	f001 ff98 	bl	8002fbc <HAL_ADC_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001092:	f000 fff1 	bl	8002078 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	4810      	ldr	r0, [pc, #64]	@ (80010e4 <MX_ADC1_Init+0xe0>)
 80010a2:	f002 fcf7 	bl	8003a94 <HAL_ADCEx_MultiModeConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010ac:	f000 ffe4 	bl	8002078 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80010b0:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <MX_ADC1_Init+0xe8>)
 80010b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b4:	2306      	movs	r3, #6
 80010b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010bc:	237f      	movs	r3, #127	@ 0x7f
 80010be:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010c0:	2304      	movs	r3, #4
 80010c2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <MX_ADC1_Init+0xe0>)
 80010ce:	f002 f8bf 	bl	8003250 <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80010d8:	f000 ffce 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	@ 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200001f0 	.word	0x200001f0
 80010e8:	50040000 	.word	0x50040000
 80010ec:	3ef08000 	.word	0x3ef08000

080010f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	@ 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a15      	ldr	r2, [pc, #84]	@ (8001164 <HAL_ADC_MspInit+0x74>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d123      	bne.n	800115a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <HAL_ADC_MspInit+0x78>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a14      	ldr	r2, [pc, #80]	@ (8001168 <HAL_ADC_MspInit+0x78>)
 8001118:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <HAL_ADC_MspInit+0x78>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <HAL_ADC_MspInit+0x78>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a0e      	ldr	r2, [pc, #56]	@ (8001168 <HAL_ADC_MspInit+0x78>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <HAL_ADC_MspInit+0x78>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = BATTERIE_Pin;
 8001142:	2301      	movs	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001146:	230b      	movs	r3, #11
 8001148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATTERIE_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	@ (800116c <HAL_ADC_MspInit+0x7c>)
 8001156:	f002 fed1 	bl	8003efc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800115a:	bf00      	nop
 800115c:	3728      	adds	r7, #40	@ 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	50040000 	.word	0x50040000
 8001168:	40021000 	.word	0x40021000
 800116c:	48000400 	.word	0x48000400

08001170 <inString>:
#include "decodeInstruction.h"


// int used as bool in this function

int inString (char c, char* str){
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
	char* currentChar = str;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	60fb      	str	r3, [r7, #12]

	while (*currentChar != '\0') {
 8001180:	e009      	b.n	8001196 <inString+0x26>
		if(*currentChar == c) {
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	79fa      	ldrb	r2, [r7, #7]
 8001188:	429a      	cmp	r2, r3
 800118a:	d101      	bne.n	8001190 <inString+0x20>
			return 1;
 800118c:	2301      	movs	r3, #1
 800118e:	e007      	b.n	80011a0 <inString+0x30>
		}
		currentChar++;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
	while (*currentChar != '\0') {
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f1      	bne.n	8001182 <inString+0x12>
	}
	return 0;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <isFloat>:


int isFloat (char* str){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	char* currentChar = str;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	617b      	str	r3, [r7, #20]
	char* numbers = "0123456789";
 80011b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <isFloat+0x8c>)
 80011ba:	60fb      	str	r3, [r7, #12]

	int etat = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]

	while (*currentChar != '\0') {
 80011c0:	e031      	b.n	8001226 <isFloat+0x7a>
		switch (etat) {
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <isFloat+0x24>
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d012      	beq.n	80011f4 <isFloat+0x48>
 80011ce:	e027      	b.n	8001220 <isFloat+0x74>
		case 0:
			if (*currentChar == '.') {
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80011d6:	d102      	bne.n	80011de <isFloat+0x32>
				etat = 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	613b      	str	r3, [r7, #16]
			} else if (inString(*currentChar, numbers)) {
				//ok
			} else {
				return 0;
			}
			break;
 80011dc:	e01d      	b.n	800121a <isFloat+0x6e>
			} else if (inString(*currentChar, numbers)) {
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	68f9      	ldr	r1, [r7, #12]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ffc3 	bl	8001170 <inString>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d114      	bne.n	800121a <isFloat+0x6e>
				return 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e01d      	b.n	8001230 <isFloat+0x84>

		case 1:
			if (*currentChar == '\0') {
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d103      	bne.n	8001204 <isFloat+0x58>
				etat = 2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	613b      	str	r3, [r7, #16]
				return 1;
 8001200:	2301      	movs	r3, #1
 8001202:	e015      	b.n	8001230 <isFloat+0x84>
			} else if (inString(*currentChar, numbers)) {
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	68f9      	ldr	r1, [r7, #12]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ffb0 	bl	8001170 <inString>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d103      	bne.n	800121e <isFloat+0x72>
				//ok
			} else {
				return 0;
 8001216:	2300      	movs	r3, #0
 8001218:	e00a      	b.n	8001230 <isFloat+0x84>
			break;
 800121a:	bf00      	nop
 800121c:	e000      	b.n	8001220 <isFloat+0x74>
			}
			break;
 800121e:	bf00      	nop
		}
	currentChar++;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
	while (*currentChar != '\0') {
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1c9      	bne.n	80011c2 <isFloat+0x16>
	}
	return 1;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	0800e088 	.word	0x0800e088

0800123c <printLabelValue>:



void printLabelValue(LabelValue lv) {
 800123c:	b084      	sub	sp, #16
 800123e:	b580      	push	{r7, lr}
 8001240:	af00      	add	r7, sp, #0
 8001242:	f107 0c08 	add.w	ip, r7, #8
 8001246:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	printf("LabelValue structure instance. Label: %s, Value: %f", lv.label, lv.value);
 800124a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f98b 	bl	8000568 <__aeabi_f2d>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	f107 0108 	add.w	r1, r7, #8
 800125a:	4804      	ldr	r0, [pc, #16]	@ (800126c <printLabelValue+0x30>)
 800125c:	f00a f85c 	bl	800b318 <iprintf>
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001268:	b004      	add	sp, #16
 800126a:	4770      	bx	lr
 800126c:	0800e094 	.word	0x0800e094

08001270 <checkInstruction>:


LabelValue checkInstruction(char* instruction){
 8001270:	b5b0      	push	{r4, r5, r7, lr}
 8001272:	b0d6      	sub	sp, #344	@ 0x158
 8001274:	af00      	add	r7, sp, #0
 8001276:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800127a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800127e:	6018      	str	r0, [r3, #0]
 8001280:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001284:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001288:	6019      	str	r1, [r3, #0]
	char* i = instruction;
 800128a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800128e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	char* caracteresPermisLabel = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
 8001298:	4b81      	ldr	r3, [pc, #516]	@ (80014a0 <checkInstruction+0x230>)
 800129a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	char* caracteresPermisValue = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.";
 800129e:	4b81      	ldr	r3, [pc, #516]	@ (80014a4 <checkInstruction+0x234>)
 80012a0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

	char caractereDelimitation = '=';
 80012a4:	233d      	movs	r3, #61	@ 0x3d
 80012a6:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	char label[100];
	char value[100];

	int indiceLabel = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
	int indiceValue = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

	int etat = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

	while(etat != 2) {
 80012bc:	e074      	b.n	80013a8 <checkInstruction+0x138>
		switch (etat) {
 80012be:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d004      	beq.n	80012d0 <checkInstruction+0x60>
 80012c6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d032      	beq.n	8001334 <checkInstruction+0xc4>
 80012ce:	e066      	b.n	800139e <checkInstruction+0x12e>
		case 0:
			if(*i == '\0'){
 80012d0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d05e      	beq.n	8001398 <checkInstruction+0x128>
				//error case
			} else if(*i == caractereDelimitation){
 80012da:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d10a      	bne.n	80012fe <checkInstruction+0x8e>
				etat = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
				label[indiceLabel] = '\0';
 80012ee:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 80012f2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80012f6:	4413      	add	r3, r2
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
				label[indiceLabel] = *i;
				indiceLabel++;
			} else {
				//error case
			}
			break;
 80012fc:	e04c      	b.n	8001398 <checkInstruction+0x128>
			} else if (inString(*i, caracteresPermisLabel)) {
 80012fe:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff31 	bl	8001170 <inString>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d041      	beq.n	8001398 <checkInstruction+0x128>
				label[indiceLabel] = *i;
 8001314:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001318:	7819      	ldrb	r1, [r3, #0]
 800131a:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 800131e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001322:	4413      	add	r3, r2
 8001324:	460a      	mov	r2, r1
 8001326:	701a      	strb	r2, [r3, #0]
				indiceLabel++;
 8001328:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800132c:	3301      	adds	r3, #1
 800132e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
			break;
 8001332:	e031      	b.n	8001398 <checkInstruction+0x128>

		case 1:
			if(*i == '\0'){
 8001334:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10a      	bne.n	8001354 <checkInstruction+0xe4>
				etat = 2;
 800133e:	2302      	movs	r3, #2
 8001340:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
				value[indiceValue] = '\0';
 8001344:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8001348:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800134c:	4413      	add	r3, r2
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
				value[indiceValue] = *i;
				indiceValue++;
			} else {
				//error case
			}
			break;
 8001352:	e023      	b.n	800139c <checkInstruction+0x12c>
			} else if(*i == caractereDelimitation){
 8001354:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800135e:	429a      	cmp	r2, r3
 8001360:	d01c      	beq.n	800139c <checkInstruction+0x12c>
			} else if (inString(*i, caracteresPermisValue)) {
 8001362:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff feff 	bl	8001170 <inString>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d011      	beq.n	800139c <checkInstruction+0x12c>
				value[indiceValue] = *i;
 8001378:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800137c:	7819      	ldrb	r1, [r3, #0]
 800137e:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8001382:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001386:	4413      	add	r3, r2
 8001388:	460a      	mov	r2, r1
 800138a:	701a      	strb	r2, [r3, #0]
				indiceValue++;
 800138c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001390:	3301      	adds	r3, #1
 8001392:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
			break;
 8001396:	e001      	b.n	800139c <checkInstruction+0x12c>
			break;
 8001398:	bf00      	nop
 800139a:	e000      	b.n	800139e <checkInstruction+0x12e>
			break;
 800139c:	bf00      	nop
		}
	i++;
 800139e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80013a2:	3301      	adds	r3, #1
 80013a4:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	while(etat != 2) {
 80013a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d186      	bne.n	80012be <checkInstruction+0x4e>
	}
	if (etat == 2) {
 80013b0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d150      	bne.n	800145a <checkInstruction+0x1ea>
		if (isFloat(value)) {
 80013b8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fef5 	bl	80011ac <isFloat>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d025      	beq.n	8001414 <checkInstruction+0x1a4>
			LabelValue result;
			strcpy(result.label, label);
 80013c8:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	4611      	mov	r1, r2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f00a f999 	bl	800b70a <strcpy>
			result.value = strtof(value, NULL);
 80013d8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f009 f808 	bl	800a3f4 <strtof>
 80013e4:	eef0 7a40 	vmov.f32	s15, s0
 80013e8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80013ec:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80013f0:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
			return result;
 80013f4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80013f8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001402:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	2368      	movs	r3, #104	@ 0x68
 800140c:	461a      	mov	r2, r3
 800140e:	f00a f984 	bl	800b71a <memcpy>
			.value = NAN
		};

		return result;
	}
}
 8001412:	e03c      	b.n	800148e <checkInstruction+0x21e>
			strcpy(result.label, "LABELVALUE ERROR: VALUE FIELD NOT FLOAT");
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	4a23      	ldr	r2, [pc, #140]	@ (80014a8 <checkInstruction+0x238>)
 800141a:	461c      	mov	r4, r3
 800141c:	4615      	mov	r5, r2
 800141e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001426:	e895 0003 	ldmia.w	r5, {r0, r1}
 800142a:	e884 0003 	stmia.w	r4, {r0, r1}
			result.value = NAN;
 800142e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001432:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001436:	4a1d      	ldr	r2, [pc, #116]	@ (80014ac <checkInstruction+0x23c>)
 8001438:	665a      	str	r2, [r3, #100]	@ 0x64
			return result;
 800143a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800143e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001448:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	2368      	movs	r3, #104	@ 0x68
 8001452:	461a      	mov	r2, r3
 8001454:	f00a f961 	bl	800b71a <memcpy>
}
 8001458:	e019      	b.n	800148e <checkInstruction+0x21e>
		LabelValue result = {
 800145a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800145e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001462:	4a13      	ldr	r2, [pc, #76]	@ (80014b0 <checkInstruction+0x240>)
 8001464:	4618      	mov	r0, r3
 8001466:	4611      	mov	r1, r2
 8001468:	2368      	movs	r3, #104	@ 0x68
 800146a:	461a      	mov	r2, r3
 800146c:	f00a f955 	bl	800b71a <memcpy>
		return result;
 8001470:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001474:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800147e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	2368      	movs	r3, #104	@ 0x68
 8001488:	461a      	mov	r2, r3
 800148a:	f00a f946 	bl	800b71a <memcpy>
}
 800148e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001492:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 800149c:	46bd      	mov	sp, r7
 800149e:	bdb0      	pop	{r4, r5, r7, pc}
 80014a0:	0800e0c8 	.word	0x0800e0c8
 80014a4:	0800e108 	.word	0x0800e108
 80014a8:	0800e148 	.word	0x0800e148
 80014ac:	7fc00000 	.word	0x7fc00000
 80014b0:	0800e170 	.word	0x0800e170

080014b4 <applyLabelValue>:
	return arrayOfInstructions;
}



 int applyLabelValue(LabelValue lv, DictOfFloatVariables dictOfVar) {
 80014b4:	b084      	sub	sp, #16
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b084      	sub	sp, #16
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	f107 0c18 	add.w	ip, r7, #24
 80014c0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 char * nameOfVariableToBeChanged = lv.label;
 80014c4:	f107 0318 	add.w	r3, r7, #24
 80014c8:	60bb      	str	r3, [r7, #8]
	 float newValue = lv.value;
 80014ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80014cc:	607b      	str	r3, [r7, #4]

	 int i = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]

	 //strcmp: equal strings => returns 0
	 //strcmp: difft strings => returns 1

	 while (i < dictOfVar.n && strcmp(nameOfVariableToBeChanged, dictOfVar.variableNames[i])) {
 80014d2:	e002      	b.n	80014da <applyLabelValue+0x26>
		 i++;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	3301      	adds	r3, #1
 80014d8:	60fb      	str	r3, [r7, #12]
	 while (i < dictOfVar.n && strcmp(nameOfVariableToBeChanged, dictOfVar.variableNames[i])) {
 80014da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	da0c      	bge.n	80014fe <applyLabelValue+0x4a>
 80014e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	68b8      	ldr	r0, [r7, #8]
 80014f4:	f7fe fe6c 	bl	80001d0 <strcmp>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1ea      	bne.n	80014d4 <applyLabelValue+0x20>
	 }

	 if (i == dictOfVar.n) {
 80014fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	429a      	cmp	r2, r3
 8001506:	d101      	bne.n	800150c <applyLabelValue+0x58>
		 // Error case
		 return 1;
 8001508:	2301      	movs	r3, #1
 800150a:	e00a      	b.n	8001522 <applyLabelValue+0x6e>
	 } else {
		 float* pointerToVariableAddress = dictOfVar.variables[i];
 800150c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	603b      	str	r3, [r7, #0]

		 *pointerToVariableAddress = newValue;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	601a      	str	r2, [r3, #0]
	 }
	 return 0;
 8001520:	2300      	movs	r3, #0
 }
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800152c:	b004      	add	sp, #16
 800152e:	4770      	bx	lr

08001530 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	4b2d      	ldr	r3, [pc, #180]	@ (80015fc <MX_GPIO_Init+0xcc>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	4a2c      	ldr	r2, [pc, #176]	@ (80015fc <MX_GPIO_Init+0xcc>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001552:	4b2a      	ldr	r3, [pc, #168]	@ (80015fc <MX_GPIO_Init+0xcc>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	4b27      	ldr	r3, [pc, #156]	@ (80015fc <MX_GPIO_Init+0xcc>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	4a26      	ldr	r2, [pc, #152]	@ (80015fc <MX_GPIO_Init+0xcc>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156a:	4b24      	ldr	r3, [pc, #144]	@ (80015fc <MX_GPIO_Init+0xcc>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800157c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001580:	f002 fe2e 	bl	80041e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	2118      	movs	r1, #24
 8001588:	481d      	ldr	r0, [pc, #116]	@ (8001600 <MX_GPIO_Init+0xd0>)
 800158a:	f002 fe29 	bl	80041e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED3_Pin;
 800158e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015aa:	f002 fca7 	bl	8003efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 80015ae:	2318      	movs	r3, #24
 80015b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	4619      	mov	r1, r3
 80015c4:	480e      	ldr	r0, [pc, #56]	@ (8001600 <MX_GPIO_Init+0xd0>)
 80015c6:	f002 fc99 	bl	8003efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_INT_Pin;
 80015ca:	2320      	movs	r3, #32
 80015cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TOF_INT_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	4619      	mov	r1, r3
 80015de:	4808      	ldr	r0, [pc, #32]	@ (8001600 <MX_GPIO_Init+0xd0>)
 80015e0:	f002 fc8c 	bl	8003efc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2100      	movs	r1, #0
 80015e8:	2017      	movs	r0, #23
 80015ea:	f002 fbd2 	bl	8003d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015ee:	2017      	movs	r0, #23
 80015f0:	f002 fbeb 	bl	8003dca <HAL_NVIC_EnableIRQ>

}
 80015f4:	bf00      	nop
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40021000 	.word	0x40021000
 8001600:	48000400 	.word	0x48000400

08001604 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001608:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <MX_I2C1_Init+0x74>)
 800160a:	4a1c      	ldr	r2, [pc, #112]	@ (800167c <MX_I2C1_Init+0x78>)
 800160c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800160e:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <MX_I2C1_Init+0x74>)
 8001610:	4a1b      	ldr	r2, [pc, #108]	@ (8001680 <MX_I2C1_Init+0x7c>)
 8001612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001614:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <MX_I2C1_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800161a:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <MX_I2C1_Init+0x74>)
 800161c:	2201      	movs	r2, #1
 800161e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001620:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <MX_I2C1_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001626:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <MX_I2C1_Init+0x74>)
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800162c:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <MX_I2C1_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <MX_I2C1_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001638:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <MX_I2C1_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800163e:	480e      	ldr	r0, [pc, #56]	@ (8001678 <MX_I2C1_Init+0x74>)
 8001640:	f002 fdfe 	bl	8004240 <HAL_I2C_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800164a:	f000 fd15 	bl	8002078 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800164e:	2100      	movs	r1, #0
 8001650:	4809      	ldr	r0, [pc, #36]	@ (8001678 <MX_I2C1_Init+0x74>)
 8001652:	f003 fb45 	bl	8004ce0 <HAL_I2CEx_ConfigAnalogFilter>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800165c:	f000 fd0c 	bl	8002078 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001660:	2100      	movs	r1, #0
 8001662:	4805      	ldr	r0, [pc, #20]	@ (8001678 <MX_I2C1_Init+0x74>)
 8001664:	f003 fb87 	bl	8004d76 <HAL_I2CEx_ConfigDigitalFilter>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800166e:	f000 fd03 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000254 	.word	0x20000254
 800167c:	40005400 	.word	0x40005400
 8001680:	10909cec 	.word	0x10909cec

08001684 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b096      	sub	sp, #88	@ 0x58
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	2234      	movs	r2, #52	@ 0x34
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f009 ff9f 	bl	800b5e8 <memset>
  if(i2cHandle->Instance==I2C1)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001728 <HAL_I2C_MspInit+0xa4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d135      	bne.n	8001720 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016b4:	2340      	movs	r3, #64	@ 0x40
 80016b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	4618      	mov	r0, r3
 80016c2:	f004 fa8f 	bl	8005be4 <HAL_RCCEx_PeriphCLKConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80016cc:	f000 fcd4 	bl	8002078 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d0:	4b16      	ldr	r3, [pc, #88]	@ (800172c <HAL_I2C_MspInit+0xa8>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d4:	4a15      	ldr	r2, [pc, #84]	@ (800172c <HAL_I2C_MspInit+0xa8>)
 80016d6:	f043 0302 	orr.w	r3, r3, #2
 80016da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016dc:	4b13      	ldr	r3, [pc, #76]	@ (800172c <HAL_I2C_MspInit+0xa8>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016e8:	23c0      	movs	r3, #192	@ 0xc0
 80016ea:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ec:	2312      	movs	r3, #18
 80016ee:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016f8:	2304      	movs	r3, #4
 80016fa:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001700:	4619      	mov	r1, r3
 8001702:	480b      	ldr	r0, [pc, #44]	@ (8001730 <HAL_I2C_MspInit+0xac>)
 8001704:	f002 fbfa 	bl	8003efc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001708:	4b08      	ldr	r3, [pc, #32]	@ (800172c <HAL_I2C_MspInit+0xa8>)
 800170a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170c:	4a07      	ldr	r2, [pc, #28]	@ (800172c <HAL_I2C_MspInit+0xa8>)
 800170e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001712:	6593      	str	r3, [r2, #88]	@ 0x58
 8001714:	4b05      	ldr	r3, [pc, #20]	@ (800172c <HAL_I2C_MspInit+0xa8>)
 8001716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001720:	bf00      	nop
 8001722:	3758      	adds	r7, #88	@ 0x58
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40005400 	.word	0x40005400
 800172c:	40021000 	.word	0x40021000
 8001730:	48000400 	.word	0x48000400

08001734 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800173c:	1d39      	adds	r1, r7, #4
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	2201      	movs	r2, #1
 8001744:	4803      	ldr	r0, [pc, #12]	@ (8001754 <__io_putchar+0x20>)
 8001746:	f005 fdef 	bl	8007328 <HAL_UART_Transmit>
  return ch;
 800174a:	687b      	ldr	r3, [r7, #4]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000488 	.word	0x20000488

08001758 <__io_getchar>:

int __io_getchar(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	71fb      	strb	r3, [r7, #7]
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 8001762:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <__io_getchar+0x38>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2208      	movs	r2, #8
 8001768:	621a      	str	r2, [r3, #32]
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800176a:	1df9      	adds	r1, r7, #7
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
 8001770:	2201      	movs	r2, #1
 8001772:	4807      	ldr	r0, [pc, #28]	@ (8001790 <__io_getchar+0x38>)
 8001774:	f005 fe61 	bl	800743a <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001778:	1df9      	adds	r1, r7, #7
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	2201      	movs	r2, #1
 8001780:	4803      	ldr	r0, [pc, #12]	@ (8001790 <__io_getchar+0x38>)
 8001782:	f005 fdd1 	bl	8007328 <HAL_UART_Transmit>
  return ch;
 8001786:	79fb      	ldrb	r3, [r7, #7]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000488 	.word	0x20000488

08001794 <HAL_TIM_PeriodElapsedCallback>:

volatile int flagUART1 = 0;
volatile int flagTIM6 = 0;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == TIM6) {
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a05      	ldr	r2, [pc, #20]	@ (80017b8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d102      	bne.n	80017ac <HAL_TIM_PeriodElapsedCallback+0x18>
		flagTIM6 = 1;
 80017a6:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	601a      	str	r2, [r3, #0]
	}
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	40001000 	.word	0x40001000
 80017bc:	2000037c 	.word	0x2000037c

080017c0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]

	instruction[indexInstruction] = rx_char;
 80017c8:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <HAL_UART_RxCpltCallback+0x50>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a11      	ldr	r2, [pc, #68]	@ (8001814 <HAL_UART_RxCpltCallback+0x54>)
 80017ce:	7811      	ldrb	r1, [r2, #0]
 80017d0:	4a11      	ldr	r2, [pc, #68]	@ (8001818 <HAL_UART_RxCpltCallback+0x58>)
 80017d2:	54d1      	strb	r1, [r2, r3]
	indexInstruction++;
 80017d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <HAL_UART_RxCpltCallback+0x50>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	3301      	adds	r3, #1
 80017da:	4a0d      	ldr	r2, [pc, #52]	@ (8001810 <HAL_UART_RxCpltCallback+0x50>)
 80017dc:	6013      	str	r3, [r2, #0]

	// Re-enable UART interrupt reception
	HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 80017de:	2201      	movs	r2, #1
 80017e0:	490c      	ldr	r1, [pc, #48]	@ (8001814 <HAL_UART_RxCpltCallback+0x54>)
 80017e2:	480e      	ldr	r0, [pc, #56]	@ (800181c <HAL_UART_RxCpltCallback+0x5c>)
 80017e4:	f005 ff50 	bl	8007688 <HAL_UART_Receive_IT>

	if (rx_char == '#')
 80017e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <HAL_UART_RxCpltCallback+0x54>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b23      	cmp	r3, #35	@ 0x23
 80017ee:	d10a      	bne.n	8001806 <HAL_UART_RxCpltCallback+0x46>
	{
		instruction[indexInstruction] = 0; // 0 character for the printf
 80017f0:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <HAL_UART_RxCpltCallback+0x50>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a08      	ldr	r2, [pc, #32]	@ (8001818 <HAL_UART_RxCpltCallback+0x58>)
 80017f6:	2100      	movs	r1, #0
 80017f8:	54d1      	strb	r1, [r2, r3]
		indexInstruction = 0;
 80017fa:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <HAL_UART_RxCpltCallback+0x50>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
		flagUART1 = 1;
 8001800:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <HAL_UART_RxCpltCallback+0x60>)
 8001802:	2201      	movs	r2, #1
 8001804:	601a      	str	r2, [r3, #0]
	}
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000374 	.word	0x20000374
 8001814:	200002a8 	.word	0x200002a8
 8001818:	200002ac 	.word	0x200002ac
 800181c:	20000510 	.word	0x20000510
 8001820:	20000378 	.word	0x20000378

08001824 <HAL_GPIO_EXTI_Callback>:
uint32_t measure_counter = 0;
uint8_t data_available = 0;
uint16_t distance;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	80fb      	strh	r3, [r7, #6]
	if (TOF_INT_Pin == GPIO_Pin)
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	2b20      	cmp	r3, #32
 8001832:	d10a      	bne.n	800184a <HAL_GPIO_EXTI_Callback+0x26>
	{
		measure_counter++;
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x34>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	3301      	adds	r3, #1
 800183a:	4a07      	ldr	r2, [pc, #28]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x34>)
 800183c:	6013      	str	r3, [r2, #0]
		data_available++;
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <HAL_GPIO_EXTI_Callback+0x38>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4b05      	ldr	r3, [pc, #20]	@ (800185c <HAL_GPIO_EXTI_Callback+0x38>)
 8001848:	701a      	strb	r2, [r3, #0]
	}
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000380 	.word	0x20000380
 800185c:	20000384 	.word	0x20000384

08001860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8001866:	af1a      	add	r7, sp, #104	@ 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001868:	f001 f96f 	bl	8002b4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800186c:	f000 fbb4 	bl	8001fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001870:	f7ff fe5e 	bl	8001530 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001874:	f7ff fbc6 	bl	8001004 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001878:	f7ff fec4 	bl	8001604 <MX_I2C1_Init>
  MX_SPI1_Init();
 800187c:	f000 fd52 	bl	8002324 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001880:	f000 ff16 	bl	80026b0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001884:	f001 f838 	bl	80028f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001888:	f001 f866 	bl	8002958 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800188c:	f000 ff92 	bl	80027b4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	printf("\r\n===== VL53L1X-SATEL =====\r\n");
 8001890:	48bd      	ldr	r0, [pc, #756]	@ (8001b88 <main+0x328>)
 8001892:	f009 fda9 	bl	800b3e8 <puts>

	uint16_t id;
	if (VL53L1X_GetSensorId(VL53L1X_DEFAULT_ADDRESS, &id) != VL53L1_ERROR_NONE)
 8001896:	f507 73e1 	add.w	r3, r7, #450	@ 0x1c2
 800189a:	4619      	mov	r1, r3
 800189c:	2052      	movs	r0, #82	@ 0x52
 800189e:	f007 fe17 	bl	80094d0 <VL53L1X_GetSensorId>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <main+0x4c>
	{
		Error_Handler();
 80018a8:	f000 fbe6 	bl	8002078 <Error_Handler>
	}
	printf("SensorID : 0x%X\r\n", id);
 80018ac:	f8b7 31c2 	ldrh.w	r3, [r7, #450]	@ 0x1c2
 80018b0:	4619      	mov	r1, r3
 80018b2:	48b6      	ldr	r0, [pc, #728]	@ (8001b8c <main+0x32c>)
 80018b4:	f009 fd30 	bl	800b318 <iprintf>

	VL53L1X_Version_t version;
	if (VL53L1X_GetSWVersion(&version) != VL53L1_ERROR_NONE)
 80018b8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80018bc:	4618      	mov	r0, r3
 80018be:	f007 fa53 	bl	8008d68 <VL53L1X_GetSWVersion>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <main+0x6c>
	{
		Error_Handler();
 80018c8:	f000 fbd6 	bl	8002078 <Error_Handler>
	}
	printf("Version : %u.%ub%ur%lu\r\n", version.major, version.minor, version.build, version.revision);
 80018cc:	f897 31b8 	ldrb.w	r3, [r7, #440]	@ 0x1b8
 80018d0:	4619      	mov	r1, r3
 80018d2:	f897 31b9 	ldrb.w	r3, [r7, #441]	@ 0x1b9
 80018d6:	461a      	mov	r2, r3
 80018d8:	f897 31ba 	ldrb.w	r3, [r7, #442]	@ 0x1ba
 80018dc:	4618      	mov	r0, r3
 80018de:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	4603      	mov	r3, r0
 80018e6:	48aa      	ldr	r0, [pc, #680]	@ (8001b90 <main+0x330>)
 80018e8:	f009 fd16 	bl	800b318 <iprintf>

	uint8_t boot_state = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f887 31b7 	strb.w	r3, [r7, #439]	@ 0x1b7
	uint8_t boot_state_counter = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f

	while(boot_state == 0)
 80018f8:	e012      	b.n	8001920 <main+0xc0>
	{
		boot_state_counter++;
 80018fa:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 80018fe:	3301      	adds	r3, #1
 8001900:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
		if (VL53L1X_BootState(VL53L1X_DEFAULT_ADDRESS, &boot_state) != VL53L1_ERROR_NONE)
 8001904:	f207 13b7 	addw	r3, r7, #439	@ 0x1b7
 8001908:	4619      	mov	r1, r3
 800190a:	2052      	movs	r0, #82	@ 0x52
 800190c:	f007 fdc4 	bl	8009498 <VL53L1X_BootState>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <main+0xba>
		{
			Error_Handler();
 8001916:	f000 fbaf 	bl	8002078 <Error_Handler>
		}
		HAL_Delay(1);
 800191a:	2001      	movs	r0, #1
 800191c:	f001 f98a 	bl	8002c34 <HAL_Delay>
	while(boot_state == 0)
 8001920:	f897 31b7 	ldrb.w	r3, [r7, #439]	@ 0x1b7
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0e8      	beq.n	80018fa <main+0x9a>
	}

	printf("Chip booted in %d...\r\n", boot_state_counter);
 8001928:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 800192c:	4619      	mov	r1, r3
 800192e:	4899      	ldr	r0, [pc, #612]	@ (8001b94 <main+0x334>)
 8001930:	f009 fcf2 	bl	800b318 <iprintf>

	//Loads the 135 bytes default values to initialize the sensor.
	if (VL53L1X_SensorInit(VL53L1X_DEFAULT_ADDRESS) != VL53L1_ERROR_NONE)
 8001934:	2052      	movs	r0, #82	@ 0x52
 8001936:	f007 fa31 	bl	8008d9c <VL53L1X_SensorInit>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <main+0xe4>
	{
		Error_Handler();
 8001940:	f000 fb9a 	bl	8002078 <Error_Handler>
	}
	printf("Sensor initialized with the default values\r\n");
 8001944:	4894      	ldr	r0, [pc, #592]	@ (8001b98 <main+0x338>)
 8001946:	f009 fd4f 	bl	800b3e8 <puts>

	if (VL53L1X_SetDistanceMode(VL53L1X_DEFAULT_ADDRESS, 1) != VL53L1_ERROR_NONE) // 1=short, limited to 1.3m
 800194a:	2101      	movs	r1, #1
 800194c:	2052      	movs	r0, #82	@ 0x52
 800194e:	f007 fca9 	bl	80092a4 <VL53L1X_SetDistanceMode>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <main+0xfc>
	{
		Error_Handler();
 8001958:	f000 fb8e 	bl	8002078 <Error_Handler>
	}
	printf("Short distance mode\r\n");
 800195c:	488f      	ldr	r0, [pc, #572]	@ (8001b9c <main+0x33c>)
 800195e:	f009 fd43 	bl	800b3e8 <puts>

	if (VL53L1X_SetTimingBudgetInMs(VL53L1X_DEFAULT_ADDRESS, 50) != VL53L1_ERROR_NONE) // in ms possible values [20, 50, 100, 200, 500]
 8001962:	2132      	movs	r1, #50	@ 0x32
 8001964:	2052      	movs	r0, #82	@ 0x52
 8001966:	f007 fb08 	bl	8008f7a <VL53L1X_SetTimingBudgetInMs>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <main+0x114>
	{
		Error_Handler();
 8001970:	f000 fb82 	bl	8002078 <Error_Handler>
	}

	if (VL53L1X_SetInterMeasurementInMs(VL53L1X_DEFAULT_ADDRESS, 50) != VL53L1_ERROR_NONE) // in ms, IM must be >= TB
 8001974:	2132      	movs	r1, #50	@ 0x32
 8001976:	2052      	movs	r0, #82	@ 0x52
 8001978:	f007 fd52 	bl	8009420 <VL53L1X_SetInterMeasurementInMs>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <main+0x126>
	{
		Error_Handler();
 8001982:	f000 fb79 	bl	8002078 <Error_Handler>
	}

	printf("Timing budget set\r\n");
 8001986:	4886      	ldr	r0, [pc, #536]	@ (8001ba0 <main+0x340>)
 8001988:	f009 fd2e 	bl	800b3e8 <puts>

	if (VL53L1X_StartRanging(VL53L1X_DEFAULT_ADDRESS) != VL53L1_ERROR_NONE)
 800198c:	2052      	movs	r0, #82	@ 0x52
 800198e:	f007 fa99 	bl	8008ec4 <VL53L1X_StartRanging>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <main+0x13c>
	{
		Error_Handler();
 8001998:	f000 fb6e 	bl	8002078 <Error_Handler>




  //Start Timer 6
  HAL_TIM_Base_Start_IT(&htim6);
 800199c:	4881      	ldr	r0, [pc, #516]	@ (8001ba4 <main+0x344>)
 800199e:	f004 fba1 	bl	80060e4 <HAL_TIM_Base_Start_IT>

	printf("--------------EXECUTION BEGINS--------------\r\n\n");
 80019a2:	4881      	ldr	r0, [pc, #516]	@ (8001ba8 <main+0x348>)
 80019a4:	f009 fd20 	bl	800b3e8 <puts>

	// We define the dictionary of variables that can get modified by receiving a UART signal
	float height = 0.0;
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
	float LEDState = 0.0;
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
	float eLanding = 0.0;
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	char* variableNames[3] = {"height", "LEDState", "eLanding"};
 80019c0:	4a7a      	ldr	r2, [pc, #488]	@ (8001bac <main+0x34c>)
 80019c2:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 80019c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80019c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float* variablePointers[3] = {&height, &LEDState, &eLanding};
 80019cc:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80019d0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80019d4:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 80019d8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80019dc:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80019e0:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
	DictOfFloatVariables dictOfVariables = {
 80019e4:	2303      	movs	r3, #3
 80019e6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80019ea:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 80019ee:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80019f2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80019f6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c


	h_motor_t upperMotor;
	h_motor_t lowerMotor;

	upperMotor.htim = &htim2;
 80019fa:	4b6d      	ldr	r3, [pc, #436]	@ (8001bb0 <main+0x350>)
 80019fc:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
	lowerMotor.htim = &htim2;
 8001a00:	4b6b      	ldr	r3, [pc, #428]	@ (8001bb0 <main+0x350>)
 8001a02:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

	upperMotor.channel = TIM_CHANNEL_1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
	lowerMotor.channel = TIM_CHANNEL_2;
 8001a0c:	2304      	movs	r3, #4
 8001a0e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170

	MOTOR_InitBoth(&lowerMotor, &upperMotor);
 8001a12:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 8001a16:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fbeb 	bl	80021f8 <MOTOR_InitBoth>


	// Important, initiate character reception.
	// This line also being in HAL_UART_RxCpltCallback's body ensures continuous reception
	HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 8001a22:	2201      	movs	r2, #1
 8001a24:	4963      	ldr	r1, [pc, #396]	@ (8001bb4 <main+0x354>)
 8001a26:	4864      	ldr	r0, [pc, #400]	@ (8001bb8 <main+0x358>)
 8001a28:	f005 fe2e 	bl	8007688 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // This variable sets if the vertical control is constant (0), proportional (1) or proportional-derivative (2)
  int approach = 1;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208

  // Variables for Proportional Derivative Approach
  float Kp = 1.0;
 8001a32:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001a36:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  float Kd = 0.5;
 8001a3a:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8001a3e:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200

  float previousError = 0;
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
  float dt = 0.05; // Time step (I calculated it based on our tim6 configuration)
 8001a4a:	4b5c      	ldr	r3, [pc, #368]	@ (8001bbc <main+0x35c>)
 8001a4c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc

  while (1)
  {

	  if (data_available > 0)
 8001a50:	4b5b      	ldr	r3, [pc, #364]	@ (8001bc0 <main+0x360>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d024      	beq.n	8001aa2 <main+0x242>
		{
			data_available = 0;
 8001a58:	4b59      	ldr	r3, [pc, #356]	@ (8001bc0 <main+0x360>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
			uint16_t newDistance;

			if (VL53L1X_ClearInterrupt(VL53L1X_DEFAULT_ADDRESS) != VL53L1_ERROR_NONE)
 8001a5e:	2052      	movs	r0, #82	@ 0x52
 8001a60:	f007 f9f4 	bl	8008e4c <VL53L1X_ClearInterrupt>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <main+0x20e>
			{
				Error_Handler();
 8001a6a:	f000 fb05 	bl	8002078 <Error_Handler>
			}
			if (VL53L1X_GetDistance(VL53L1X_DEFAULT_ADDRESS, &newDistance) != VL53L1_ERROR_NONE)
 8001a6e:	f507 73b5 	add.w	r3, r7, #362	@ 0x16a
 8001a72:	4619      	mov	r1, r3
 8001a74:	2052      	movs	r0, #82	@ 0x52
 8001a76:	f007 fd48 	bl	800950a <VL53L1X_GetDistance>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <main+0x224>
			{
				Error_Handler();
 8001a80:	f000 fafa 	bl	8002078 <Error_Handler>
			}

			if (height != 0 && newDistance == 0) {
 8001a84:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8001a88:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a90:	d003      	beq.n	8001a9a <main+0x23a>
 8001a92:	f8b7 316a 	ldrh.w	r3, [r7, #362]	@ 0x16a
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <main+0x242>
				// keep current value of distance to make sure to avoid any division by zero
			} else {
				distance = newDistance;
 8001a9a:	f8b7 216a 	ldrh.w	r2, [r7, #362]	@ 0x16a
 8001a9e:	4b49      	ldr	r3, [pc, #292]	@ (8001bc4 <main+0x364>)
 8001aa0:	801a      	strh	r2, [r3, #0]
			}
		}

	  if (flagTIM6 == 1) {
 8001aa2:	4b49      	ldr	r3, [pc, #292]	@ (8001bc8 <main+0x368>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	f040 81fc 	bne.w	8001ea4 <main+0x644>
		  flagUART1 = 0;
 8001aac:	4b47      	ldr	r3, [pc, #284]	@ (8001bcc <main+0x36c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]

		  //printf("distance(%lu) : %u\r\n", measure_counter, distance);

		  if (approach == 0) {
 8001ab2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f040 808a 	bne.w	8001bd0 <main+0x370>
			  if(distance < height) {
 8001abc:	4b41      	ldr	r3, [pc, #260]	@ (8001bc4 <main+0x364>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac8:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8001acc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad4:	d524      	bpl.n	8001b20 <main+0x2c0>
				  int current_percentage = upperMotor.PercentageOfTotalPower;
 8001ad6:	edd7 7a60 	vldr	s15, [r7, #384]	@ 0x180
 8001ada:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ade:	ee17 3a90 	vmov	r3, s15
 8001ae2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
				  MOTOR_SetPower(&upperMotor, current_percentage + 1);
 8001ae6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001aea:	3301      	adds	r3, #1
 8001aec:	ee07 3a90 	vmov	s15, r3
 8001af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001af8:	eeb0 0a67 	vmov.f32	s0, s15
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 fb09 	bl	8002114 <MOTOR_SetPower>
				  MOTOR_SetPower(&lowerMotor, current_percentage + 1);
 8001b02:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001b06:	3301      	adds	r3, #1
 8001b08:	ee07 3a90 	vmov	s15, r3
 8001b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b10:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001b14:	eeb0 0a67 	vmov.f32	s0, s15
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 fafb 	bl	8002114 <MOTOR_SetPower>
 8001b1e:	e1c1      	b.n	8001ea4 <main+0x644>
			  } else if(distance > height) {
 8001b20:	4b28      	ldr	r3, [pc, #160]	@ (8001bc4 <main+0x364>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	ee07 3a90 	vmov	s15, r3
 8001b28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b2c:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8001b30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b38:	f340 81b4 	ble.w	8001ea4 <main+0x644>
				  int current_percentage = upperMotor.PercentageOfTotalPower;
 8001b3c:	edd7 7a60 	vldr	s15, [r7, #384]	@ 0x180
 8001b40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b44:	ee17 3a90 	vmov	r3, s15
 8001b48:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
				  MOTOR_SetPower(&upperMotor, current_percentage - 1);
 8001b4c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001b50:	3b01      	subs	r3, #1
 8001b52:	ee07 3a90 	vmov	s15, r3
 8001b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b5a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 fad6 	bl	8002114 <MOTOR_SetPower>
				  MOTOR_SetPower(&lowerMotor, current_percentage - 1);
 8001b68:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	ee07 3a90 	vmov	s15, r3
 8001b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b76:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 fac8 	bl	8002114 <MOTOR_SetPower>
 8001b84:	e18e      	b.n	8001ea4 <main+0x644>
 8001b86:	bf00      	nop
 8001b88:	0800e1d8 	.word	0x0800e1d8
 8001b8c:	0800e1f8 	.word	0x0800e1f8
 8001b90:	0800e20c 	.word	0x0800e20c
 8001b94:	0800e228 	.word	0x0800e228
 8001b98:	0800e240 	.word	0x0800e240
 8001b9c:	0800e26c 	.word	0x0800e26c
 8001ba0:	0800e284 	.word	0x0800e284
 8001ba4:	2000043c 	.word	0x2000043c
 8001ba8:	0800e298 	.word	0x0800e298
 8001bac:	0800e308 	.word	0x0800e308
 8001bb0:	200003f0 	.word	0x200003f0
 8001bb4:	200002a8 	.word	0x200002a8
 8001bb8:	20000510 	.word	0x20000510
 8001bbc:	3d4ccccd 	.word	0x3d4ccccd
 8001bc0:	20000384 	.word	0x20000384
 8001bc4:	20000386 	.word	0x20000386
 8001bc8:	2000037c 	.word	0x2000037c
 8001bcc:	20000378 	.word	0x20000378
			  }
		  } else if (approach == 1) {
 8001bd0:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	f040 80bd 	bne.w	8001d54 <main+0x4f4>
			  int maxPercentageVariation = 5;
 8001bda:	2305      	movs	r3, #5
 8001bdc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
			  if(distance < height) {
 8001be0:	4b5a      	ldr	r3, [pc, #360]	@ (8001d4c <main+0x4ec>)
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	ee07 3a90 	vmov	s15, r3
 8001be8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bec:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8001bf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf8:	d54c      	bpl.n	8001c94 <main+0x434>
				  int distanceToGoal = height - distance;
 8001bfa:	ed97 7a6c 	vldr	s14, [r7, #432]	@ 0x1b0
 8001bfe:	4b53      	ldr	r3, [pc, #332]	@ (8001d4c <main+0x4ec>)
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	ee07 3a90 	vmov	s15, r3
 8001c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c12:	ee17 3a90 	vmov	r3, s15
 8001c16:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

				  int percentageVariation = distanceToGoal/10;
 8001c1a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001c1e:	4a4c      	ldr	r2, [pc, #304]	@ (8001d50 <main+0x4f0>)
 8001c20:	fb82 1203 	smull	r1, r2, r2, r3
 8001c24:	1092      	asrs	r2, r2, #2
 8001c26:	17db      	asrs	r3, r3, #31
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214

				  if (percentageVariation > maxPercentageVariation) {
 8001c2e:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8001c32:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001c36:	429a      	cmp	r2, r3
 8001c38:	dd03      	ble.n	8001c42 <main+0x3e2>
					  percentageVariation = maxPercentageVariation;
 8001c3a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001c3e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
				  }

				  int current_percentage = upperMotor.PercentageOfTotalPower;
 8001c42:	edd7 7a60 	vldr	s15, [r7, #384]	@ 0x180
 8001c46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c4a:	ee17 3a90 	vmov	r3, s15
 8001c4e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
				  MOTOR_SetPower(&upperMotor, current_percentage + percentageVariation);
 8001c52:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8001c56:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001c5a:	4413      	add	r3, r2
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c64:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001c68:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 fa51 	bl	8002114 <MOTOR_SetPower>
				  MOTOR_SetPower(&lowerMotor, current_percentage + percentageVariation);
 8001c72:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8001c76:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001c7a:	4413      	add	r3, r2
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c84:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001c88:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 fa41 	bl	8002114 <MOTOR_SetPower>
 8001c92:	e107      	b.n	8001ea4 <main+0x644>

			  } else if(distance > height) {
 8001c94:	4b2d      	ldr	r3, [pc, #180]	@ (8001d4c <main+0x4ec>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	ee07 3a90 	vmov	s15, r3
 8001c9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ca0:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8001ca4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cac:	f340 80fa 	ble.w	8001ea4 <main+0x644>
				  int distanceToGoal = distance - height;
 8001cb0:	4b26      	ldr	r3, [pc, #152]	@ (8001d4c <main+0x4ec>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	ee07 3a90 	vmov	s15, r3
 8001cb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cbc:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8001cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cc8:	ee17 3a90 	vmov	r3, s15
 8001ccc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc

				  int percentageVariation = distanceToGoal/10;
 8001cd0:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8001cd4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d50 <main+0x4f0>)
 8001cd6:	fb82 1203 	smull	r1, r2, r2, r3
 8001cda:	1092      	asrs	r2, r2, #2
 8001cdc:	17db      	asrs	r3, r3, #31
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

				  if (percentageVariation > maxPercentageVariation) {
 8001ce4:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001ce8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001cec:	429a      	cmp	r2, r3
 8001cee:	dd03      	ble.n	8001cf8 <main+0x498>
					  percentageVariation = maxPercentageVariation;
 8001cf0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001cf4:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
				  }

				  int current_percentage = upperMotor.PercentageOfTotalPower;
 8001cf8:	edd7 7a60 	vldr	s15, [r7, #384]	@ 0x180
 8001cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d00:	ee17 3a90 	vmov	r3, s15
 8001d04:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
				  MOTOR_SetPower(&upperMotor, current_percentage - percentageVariation);
 8001d08:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001d0c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d1a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f9f6 	bl	8002114 <MOTOR_SetPower>
				  MOTOR_SetPower(&lowerMotor, current_percentage - percentageVariation);
 8001d28:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001d2c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3a:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 f9e6 	bl	8002114 <MOTOR_SetPower>
 8001d48:	e0ac      	b.n	8001ea4 <main+0x644>
 8001d4a:	bf00      	nop
 8001d4c:	20000386 	.word	0x20000386
 8001d50:	66666667 	.word	0x66666667
			  }
		  } else if (approach == 2) {
 8001d54:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	f040 80a3 	bne.w	8001ea4 <main+0x644>
			  int error = height - distance;
 8001d5e:	ed97 7a6c 	vldr	s14, [r7, #432]	@ 0x1b0
 8001d62:	4b96      	ldr	r3, [pc, #600]	@ (8001fbc <main+0x75c>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d76:	ee17 3a90 	vmov	r3, s15
 8001d7a:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8

			  float P = Kp * error;
 8001d7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d82:	ee07 3a90 	vmov	s15, r3
 8001d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8a:	ed97 7a81 	vldr	s14, [r7, #516]	@ 0x204
 8001d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d92:	edc7 7a7d 	vstr	s15, [r7, #500]	@ 0x1f4

			  float derivative = (error - previousError) / dt;
 8001d96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d9a:	ee07 3a90 	vmov	s15, r3
 8001d9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da2:	edd7 7a86 	vldr	s15, [r7, #536]	@ 0x218
 8001da6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001daa:	ed97 7a7f 	vldr	s14, [r7, #508]	@ 0x1fc
 8001dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001db2:	edc7 7a7c 	vstr	s15, [r7, #496]	@ 0x1f0
			  float D = Kd * derivative;
 8001db6:	ed97 7a80 	vldr	s14, [r7, #512]	@ 0x200
 8001dba:	edd7 7a7c 	vldr	s15, [r7, #496]	@ 0x1f0
 8001dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc2:	edc7 7a7b 	vstr	s15, [r7, #492]	@ 0x1ec

			  float pdOutput = P + D;
 8001dc6:	ed97 7a7d 	vldr	s14, [r7, #500]	@ 0x1f4
 8001dca:	edd7 7a7b 	vldr	s15, [r7, #492]	@ 0x1ec
 8001dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd2:	edc7 7a83 	vstr	s15, [r7, #524]	@ 0x20c

			  int maxVariation = 5;
 8001dd6:	2305      	movs	r3, #5
 8001dd8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
			  if (pdOutput > maxVariation) pdOutput = maxVariation;
 8001ddc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de8:	ed97 7a83 	vldr	s14, [r7, #524]	@ 0x20c
 8001dec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df4:	dd07      	ble.n	8001e06 <main+0x5a6>
 8001df6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001dfa:	ee07 3a90 	vmov	s15, r3
 8001dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e02:	edc7 7a83 	vstr	s15, [r7, #524]	@ 0x20c
			  if (pdOutput < -maxVariation) pdOutput = -maxVariation;
 8001e06:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001e0a:	425b      	negs	r3, r3
 8001e0c:	ee07 3a90 	vmov	s15, r3
 8001e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e14:	ed97 7a83 	vldr	s14, [r7, #524]	@ 0x20c
 8001e18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e20:	d508      	bpl.n	8001e34 <main+0x5d4>
 8001e22:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001e26:	425b      	negs	r3, r3
 8001e28:	ee07 3a90 	vmov	s15, r3
 8001e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e30:	edc7 7a83 	vstr	s15, [r7, #524]	@ 0x20c

			  int currentPower = upperMotor.PercentageOfTotalPower;
 8001e34:	edd7 7a60 	vldr	s15, [r7, #384]	@ 0x180
 8001e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e3c:	ee17 3a90 	vmov	r3, s15
 8001e40:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4

			  MOTOR_SetPower(&upperMotor, currentPower + (int)pdOutput);
 8001e44:	edd7 7a83 	vldr	s15, [r7, #524]	@ 0x20c
 8001e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e4c:	ee17 2a90 	vmov	r2, s15
 8001e50:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001e54:	4413      	add	r3, r2
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001e62:	eeb0 0a67 	vmov.f32	s0, s15
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 f954 	bl	8002114 <MOTOR_SetPower>
			  MOTOR_SetPower(&lowerMotor, currentPower + (int)pdOutput);
 8001e6c:	edd7 7a83 	vldr	s15, [r7, #524]	@ 0x20c
 8001e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e74:	ee17 2a90 	vmov	r2, s15
 8001e78:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001e7c:	4413      	add	r3, r2
 8001e7e:	ee07 3a90 	vmov	s15, r3
 8001e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e86:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 f940 	bl	8002114 <MOTOR_SetPower>

			  previousError = error;
 8001e94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e98:	ee07 3a90 	vmov	s15, r3
 8001e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea0:	edc7 7a86 	vstr	s15, [r7, #536]	@ 0x218
	  }


	  // This is a test to check that instructions can correctly be received
	  // by UART and affect change (modified variables, LED toggled)
	  if (flagUART1 == 1) {
 8001ea4:	4b46      	ldr	r3, [pc, #280]	@ (8001fc0 <main+0x760>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	f47f add1 	bne.w	8001a50 <main+0x1f0>
		  printf("instruction = %s\r\n", instruction);
 8001eae:	4945      	ldr	r1, [pc, #276]	@ (8001fc4 <main+0x764>)
 8001eb0:	4845      	ldr	r0, [pc, #276]	@ (8001fc8 <main+0x768>)
 8001eb2:	f009 fa31 	bl	800b318 <iprintf>

		  flagUART1 = 0;
 8001eb6:	4b42      	ldr	r3, [pc, #264]	@ (8001fc0 <main+0x760>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

		  LabelValue lv = checkInstruction(instruction);
 8001ebc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001ec0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001ec4:	493f      	ldr	r1, [pc, #252]	@ (8001fc4 <main+0x764>)
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff f9d2 	bl	8001270 <checkInstruction>
		  printLabelValue(lv);
 8001ecc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001ed0:	f5a3 7408 	sub.w	r4, r3, #544	@ 0x220
 8001ed4:	4668      	mov	r0, sp
 8001ed6:	f104 0310 	add.w	r3, r4, #16
 8001eda:	2258      	movs	r2, #88	@ 0x58
 8001edc:	4619      	mov	r1, r3
 8001ede:	f009 fc1c 	bl	800b71a <memcpy>
 8001ee2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ee6:	f7ff f9a9 	bl	800123c <printLabelValue>

		  if (isnan(lv.value)) {
 8001eea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001eee:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001ef2:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001ef6:	eef4 7a67 	vcmp.f32	s15, s15
 8001efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efe:	d62f      	bvs.n	8001f60 <main+0x700>
			  // error case
		  } else {
			  int applyLVReturnValue = applyLabelValue(lv, dictOfVariables);
 8001f00:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001f04:	f5a3 7408 	sub.w	r4, r3, #544	@ 0x220
 8001f08:	ad16      	add	r5, sp, #88	@ 0x58
 8001f0a:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8001f0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f12:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001f16:	4668      	mov	r0, sp
 8001f18:	f104 0310 	add.w	r3, r4, #16
 8001f1c:	2258      	movs	r2, #88	@ 0x58
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f009 fbfb 	bl	800b71a <memcpy>
 8001f24:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f28:	f7ff fac4 	bl	80014b4 <applyLabelValue>
 8001f2c:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4

			  if (applyLVReturnValue) { // If the return value is 1, it failed
 8001f30:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d113      	bne.n	8001f60 <main+0x700>
				  // error case
			  } else {
				  char ackReceivedSuccess[MAX_ACK_MESSAGE_LENGTH];

				  sprintf(ackReceivedSuccess, "Received %s", instruction);
 8001f38:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001f3c:	4a21      	ldr	r2, [pc, #132]	@ (8001fc4 <main+0x764>)
 8001f3e:	4923      	ldr	r1, [pc, #140]	@ (8001fcc <main+0x76c>)
 8001f40:	4618      	mov	r0, r3
 8001f42:	f009 fa59 	bl	800b3f8 <siprintf>
				  HAL_UART_Transmit_IT(&huart2, (uint8_t*)ackReceivedSuccess, strlen(ackReceivedSuccess));
 8001f46:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe f9a0 	bl	8000290 <strlen>
 8001f50:	4603      	mov	r3, r0
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001f58:	4619      	mov	r1, r3
 8001f5a:	481d      	ldr	r0, [pc, #116]	@ (8001fd0 <main+0x770>)
 8001f5c:	f005 fb36 	bl	80075cc <HAL_UART_Transmit_IT>
			  }
		  }


		  if (eLanding != 0.0) {
 8001f60:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001f64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6c:	d00e      	beq.n	8001f8c <main+0x72c>
			  MOTOR_SetLinearBoth(&upperMotor, &lowerMotor, 0.0, 5000);
 8001f6e:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8001f72:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f7a:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8001fd4 <main+0x774>
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f97e 	bl	8002280 <MOTOR_SetLinearBoth>
			  //wait 5 s
			  eLanding = 0.0;
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
			  //MOTOR_SetPower(&lowerMotor, height);
		  }


		  // You can use this LED test to check if communication works without any danger
		  if(LEDState != 0.0) {
 8001f8c:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 8001f90:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f98:	d007      	beq.n	8001faa <main+0x74a>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fa4:	f002 f91c 	bl	80041e0 <HAL_GPIO_WritePin>
 8001fa8:	e552      	b.n	8001a50 <main+0x1f0>
		  } else {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fb4:	f002 f914 	bl	80041e0 <HAL_GPIO_WritePin>
	  if (data_available > 0)
 8001fb8:	e54a      	b.n	8001a50 <main+0x1f0>
 8001fba:	bf00      	nop
 8001fbc:	20000386 	.word	0x20000386
 8001fc0:	20000378 	.word	0x20000378
 8001fc4:	200002ac 	.word	0x200002ac
 8001fc8:	0800e2c8 	.word	0x0800e2c8
 8001fcc:	0800e2dc 	.word	0x0800e2dc
 8001fd0:	20000510 	.word	0x20000510
 8001fd4:	00000000 	.word	0x00000000

08001fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b096      	sub	sp, #88	@ 0x58
 8001fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	2244      	movs	r2, #68	@ 0x44
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f009 fafe 	bl	800b5e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fec:	463b      	mov	r3, r7
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
 8001ff8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ffa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ffe:	f002 ff15 	bl	8004e2c <HAL_PWREx_ControlVoltageScaling>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002008:	f000 f836 	bl	8002078 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800200c:	2310      	movs	r3, #16
 800200e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002010:	2301      	movs	r3, #1
 8002012:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002018:	2360      	movs	r3, #96	@ 0x60
 800201a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800201c:	2302      	movs	r3, #2
 800201e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002020:	2301      	movs	r3, #1
 8002022:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002024:	2301      	movs	r3, #1
 8002026:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002028:	2328      	movs	r3, #40	@ 0x28
 800202a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800202c:	2302      	movs	r3, #2
 800202e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002030:	2302      	movs	r3, #2
 8002032:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	4618      	mov	r0, r3
 800203a:	f002 ff4d 	bl	8004ed8 <HAL_RCC_OscConfig>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8002044:	f000 f818 	bl	8002078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002048:	230f      	movs	r3, #15
 800204a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800204c:	2303      	movs	r3, #3
 800204e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002050:	2300      	movs	r3, #0
 8002052:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002058:	2300      	movs	r3, #0
 800205a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800205c:	463b      	mov	r3, r7
 800205e:	2104      	movs	r1, #4
 8002060:	4618      	mov	r0, r3
 8002062:	f003 fb9b 	bl	800579c <HAL_RCC_ClockConfig>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800206c:	f000 f804 	bl	8002078 <Error_Handler>
  }
}
 8002070:	bf00      	nop
 8002072:	3758      	adds	r7, #88	@ 0x58
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800207c:	b672      	cpsid	i
}
 800207e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <Error_Handler+0x8>
 8002084:	0000      	movs	r0, r0
	...

08002088 <percentageToMicrosecondsAtHighState>:
#define COUNTER_PERIOD 19999 //Maximal counter value
#define MIN_POWER_DUTY_CYCLE 6 //%
#define MAX_POWER_DUTY_CYCLE 10 //%


int percentageToMicrosecondsAtHighState(float percentage) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	ed87 0a01 	vstr	s0, [r7, #4]
	float neededDutyCycle = MIN_POWER_DUTY_CYCLE + (MAX_POWER_DUTY_CYCLE - MIN_POWER_DUTY_CYCLE) * 0.01 * percentage;
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7fe fa68 	bl	8000568 <__aeabi_f2d>
 8002098:	a31c      	add	r3, pc, #112	@ (adr r3, 800210c <percentageToMicrosecondsAtHighState+0x84>)
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	f7fe fabb 	bl	8000618 <__aeabi_dmul>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	4b14      	ldr	r3, [pc, #80]	@ (8002100 <percentageToMicrosecondsAtHighState+0x78>)
 80020b0:	f7fe f8fc 	bl	80002ac <__adddf3>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4610      	mov	r0, r2
 80020ba:	4619      	mov	r1, r3
 80020bc:	f7fe fda4 	bl	8000c08 <__aeabi_d2f>
 80020c0:	4603      	mov	r3, r0
 80020c2:	60fb      	str	r3, [r7, #12]
	printf("->      neededDutyCycle = %f percent \r\n", neededDutyCycle);
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f7fe fa4f 	bl	8000568 <__aeabi_f2d>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	480d      	ldr	r0, [pc, #52]	@ (8002104 <percentageToMicrosecondsAtHighState+0x7c>)
 80020d0:	f009 f922 	bl	800b318 <iprintf>

	return (int) (COUNTER_PERIOD + 1) * 0.01 * neededDutyCycle;
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f7fe fa47 	bl	8000568 <__aeabi_f2d>
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	4b0a      	ldr	r3, [pc, #40]	@ (8002108 <percentageToMicrosecondsAtHighState+0x80>)
 80020e0:	f7fe fa9a 	bl	8000618 <__aeabi_dmul>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	f7fe fd44 	bl	8000b78 <__aeabi_d2iz>
 80020f0:	4603      	mov	r3, r0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	f3af 8000 	nop.w
 8002100:	40180000 	.word	0x40180000
 8002104:	0800e314 	.word	0x0800e314
 8002108:	40690000 	.word	0x40690000
 800210c:	47ae147b 	.word	0x47ae147b
 8002110:	3fa47ae1 	.word	0x3fa47ae1

08002114 <MOTOR_SetPower>:


void MOTOR_SetPower(h_motor_t* h_motor, float percentage) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	ed87 0a00 	vstr	s0, [r7]
	if (percentage > 100) {
 8002120:	edd7 7a00 	vldr	s15, [r7]
 8002124:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80021e8 <MOTOR_SetPower+0xd4>
 8002128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800212c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002130:	dd01      	ble.n	8002136 <MOTOR_SetPower+0x22>
		percentage = 100;
 8002132:	4b2e      	ldr	r3, [pc, #184]	@ (80021ec <MOTOR_SetPower+0xd8>)
 8002134:	603b      	str	r3, [r7, #0]
	}

	if (percentage < 0) {
 8002136:	edd7 7a00 	vldr	s15, [r7]
 800213a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800213e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002142:	d502      	bpl.n	800214a <MOTOR_SetPower+0x36>
		percentage = 0;
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	603b      	str	r3, [r7, #0]
	}

	printf("-> power set to %f percent \r\n", percentage);
 800214a:	6838      	ldr	r0, [r7, #0]
 800214c:	f7fe fa0c 	bl	8000568 <__aeabi_f2d>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4826      	ldr	r0, [pc, #152]	@ (80021f0 <MOTOR_SetPower+0xdc>)
 8002156:	f009 f8df 	bl	800b318 <iprintf>

	int microsecondsAtHighState = percentageToMicrosecondsAtHighState(percentage);
 800215a:	ed97 0a00 	vldr	s0, [r7]
 800215e:	f7ff ff93 	bl	8002088 <percentageToMicrosecondsAtHighState>
 8002162:	60f8      	str	r0, [r7, #12]

	__HAL_TIM_SET_COMPARE(h_motor->htim, h_motor->channel, microsecondsAtHighState);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d105      	bne.n	8002178 <MOTOR_SetPower+0x64>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	635a      	str	r2, [r3, #52]	@ 0x34
 8002176:	e02c      	b.n	80021d2 <MOTOR_SetPower+0xbe>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b04      	cmp	r3, #4
 800217e:	d105      	bne.n	800218c <MOTOR_SetPower+0x78>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6393      	str	r3, [r2, #56]	@ 0x38
 800218a:	e022      	b.n	80021d2 <MOTOR_SetPower+0xbe>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b08      	cmp	r3, #8
 8002192:	d105      	bne.n	80021a0 <MOTOR_SetPower+0x8c>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800219e:	e018      	b.n	80021d2 <MOTOR_SetPower+0xbe>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b0c      	cmp	r3, #12
 80021a6:	d105      	bne.n	80021b4 <MOTOR_SetPower+0xa0>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b2:	e00e      	b.n	80021d2 <MOTOR_SetPower+0xbe>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b10      	cmp	r3, #16
 80021ba:	d105      	bne.n	80021c8 <MOTOR_SetPower+0xb4>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80021c6:	e004      	b.n	80021d2 <MOTOR_SetPower+0xbe>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	65d3      	str	r3, [r2, #92]	@ 0x5c

	printf("->      microsecondsAtHighState = %d \r\n", microsecondsAtHighState);
 80021d2:	68f9      	ldr	r1, [r7, #12]
 80021d4:	4807      	ldr	r0, [pc, #28]	@ (80021f4 <MOTOR_SetPower+0xe0>)
 80021d6:	f009 f89f 	bl	800b318 <iprintf>

	h_motor -> PercentageOfTotalPower = percentage;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	609a      	str	r2, [r3, #8]
}
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	42c80000 	.word	0x42c80000
 80021ec:	42c80000 	.word	0x42c80000
 80021f0:	0800e33c 	.word	0x0800e33c
 80021f4:	0800e35c 	.word	0x0800e35c

080021f8 <MOTOR_InitBoth>:

	printf("INITIALISATION COMPLETED\r\n");
}


void MOTOR_InitBoth(h_motor_t* h_motor1, h_motor_t* h_motor2) {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
	printf("INITIALISATION STARTED\r\n");
 8002202:	481b      	ldr	r0, [pc, #108]	@ (8002270 <MOTOR_InitBoth+0x78>)
 8002204:	f009 f8f0 	bl	800b3e8 <puts>

	MOTOR_SetPower(h_motor1, 100);
 8002208:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8002274 <MOTOR_InitBoth+0x7c>
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ff81 	bl	8002114 <MOTOR_SetPower>
	MOTOR_SetPower(h_motor2, 100);
 8002212:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8002274 <MOTOR_InitBoth+0x7c>
 8002216:	6838      	ldr	r0, [r7, #0]
 8002218:	f7ff ff7c 	bl	8002114 <MOTOR_SetPower>

	HAL_TIM_PWM_Start(h_motor1->htim, h_motor1->channel);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4619      	mov	r1, r3
 8002226:	4610      	mov	r0, r2
 8002228:	f004 f812 	bl	8006250 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(h_motor2->htim, h_motor2->channel);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4619      	mov	r1, r3
 8002236:	4610      	mov	r0, r2
 8002238:	f004 f80a 	bl	8006250 <HAL_TIM_PWM_Start>

	HAL_Delay(2000);
 800223c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002240:	f000 fcf8 	bl	8002c34 <HAL_Delay>

	MOTOR_SetPower(h_motor1, 0);
 8002244:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8002278 <MOTOR_InitBoth+0x80>
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ff63 	bl	8002114 <MOTOR_SetPower>
	MOTOR_SetPower(h_motor2, 0);
 800224e:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8002278 <MOTOR_InitBoth+0x80>
 8002252:	6838      	ldr	r0, [r7, #0]
 8002254:	f7ff ff5e 	bl	8002114 <MOTOR_SetPower>
	HAL_Delay(3000);
 8002258:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800225c:	f000 fcea 	bl	8002c34 <HAL_Delay>

	printf("INITIALISATION COMPLETED\r\n");
 8002260:	4806      	ldr	r0, [pc, #24]	@ (800227c <MOTOR_InitBoth+0x84>)
 8002262:	f009 f8c1 	bl	800b3e8 <puts>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	0800e384 	.word	0x0800e384
 8002274:	42c80000 	.word	0x42c80000
 8002278:	00000000 	.word	0x00000000
 800227c:	0800e39c 	.word	0x0800e39c

08002280 <MOTOR_SetLinearBoth>:
		HAL_Delay(millisInterval);
	}

}

void MOTOR_SetLinearBoth(h_motor_t* h_motor1, h_motor_t* h_motor2, float finalPercentage, int timeInMilliseconds) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b08a      	sub	sp, #40	@ 0x28
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	ed87 0a01 	vstr	s0, [r7, #4]
 800228e:	603a      	str	r2, [r7, #0]
	//Assumes both motors are set to the same power value
	float initialPercentage = h_motor1 -> PercentageOfTotalPower;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	61bb      	str	r3, [r7, #24]

	int millisInterval = 50;
 8002296:	2332      	movs	r3, #50	@ 0x32
 8002298:	627b      	str	r3, [r7, #36]	@ 0x24

	if (2*millisInterval > timeInMilliseconds) {
 800229a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	da04      	bge.n	80022ae <MOTOR_SetLinearBoth+0x2e>
		millisInterval = 50;
 80022a4:	2332      	movs	r3, #50	@ 0x32
 80022a6:	627b      	str	r3, [r7, #36]	@ 0x24
		timeInMilliseconds = 4000;
 80022a8:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80022ac:	603b      	str	r3, [r7, #0]
	}

	int nSteps = timeInMilliseconds / millisInterval;
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80022b6:	617b      	str	r3, [r7, #20]

	float currentPercentage = initialPercentage;
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	623b      	str	r3, [r7, #32]
	float percentagePerStep = (finalPercentage - initialPercentage) / nSteps;
 80022bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80022c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80022c4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022d6:	edc7 7a04 	vstr	s15, [r7, #16]

	for (int i = 0; i < nSteps; i++) {
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	e018      	b.n	8002312 <MOTOR_SetLinearBoth+0x92>
		currentPercentage += percentagePerStep;
 80022e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80022e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80022e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ec:	edc7 7a08 	vstr	s15, [r7, #32]

		MOTOR_SetPower(h_motor1, currentPercentage);
 80022f0:	ed97 0a08 	vldr	s0, [r7, #32]
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f7ff ff0d 	bl	8002114 <MOTOR_SetPower>
		MOTOR_SetPower(h_motor2, currentPercentage);
 80022fa:	ed97 0a08 	vldr	s0, [r7, #32]
 80022fe:	68b8      	ldr	r0, [r7, #8]
 8002300:	f7ff ff08 	bl	8002114 <MOTOR_SetPower>
		HAL_Delay(millisInterval);
 8002304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fc94 	bl	8002c34 <HAL_Delay>
	for (int i = 0; i < nSteps; i++) {
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	3301      	adds	r3, #1
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	429a      	cmp	r2, r3
 8002318:	dbe2      	blt.n	80022e0 <MOTOR_SetLinearBoth+0x60>
	}

}
 800231a:	bf00      	nop
 800231c:	bf00      	nop
 800231e:	3728      	adds	r7, #40	@ 0x28
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002328:	4b1b      	ldr	r3, [pc, #108]	@ (8002398 <MX_SPI1_Init+0x74>)
 800232a:	4a1c      	ldr	r2, [pc, #112]	@ (800239c <MX_SPI1_Init+0x78>)
 800232c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800232e:	4b1a      	ldr	r3, [pc, #104]	@ (8002398 <MX_SPI1_Init+0x74>)
 8002330:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002334:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002336:	4b18      	ldr	r3, [pc, #96]	@ (8002398 <MX_SPI1_Init+0x74>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800233c:	4b16      	ldr	r3, [pc, #88]	@ (8002398 <MX_SPI1_Init+0x74>)
 800233e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002342:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002344:	4b14      	ldr	r3, [pc, #80]	@ (8002398 <MX_SPI1_Init+0x74>)
 8002346:	2200      	movs	r2, #0
 8002348:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800234a:	4b13      	ldr	r3, [pc, #76]	@ (8002398 <MX_SPI1_Init+0x74>)
 800234c:	2200      	movs	r2, #0
 800234e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002350:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <MX_SPI1_Init+0x74>)
 8002352:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002356:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002358:	4b0f      	ldr	r3, [pc, #60]	@ (8002398 <MX_SPI1_Init+0x74>)
 800235a:	2200      	movs	r2, #0
 800235c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800235e:	4b0e      	ldr	r3, [pc, #56]	@ (8002398 <MX_SPI1_Init+0x74>)
 8002360:	2200      	movs	r2, #0
 8002362:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002364:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <MX_SPI1_Init+0x74>)
 8002366:	2200      	movs	r2, #0
 8002368:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800236a:	4b0b      	ldr	r3, [pc, #44]	@ (8002398 <MX_SPI1_Init+0x74>)
 800236c:	2200      	movs	r2, #0
 800236e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002370:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <MX_SPI1_Init+0x74>)
 8002372:	2207      	movs	r2, #7
 8002374:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002376:	4b08      	ldr	r3, [pc, #32]	@ (8002398 <MX_SPI1_Init+0x74>)
 8002378:	2200      	movs	r2, #0
 800237a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800237c:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <MX_SPI1_Init+0x74>)
 800237e:	2208      	movs	r2, #8
 8002380:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002382:	4805      	ldr	r0, [pc, #20]	@ (8002398 <MX_SPI1_Init+0x74>)
 8002384:	f003 fdb4 	bl	8005ef0 <HAL_SPI_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800238e:	f7ff fe73 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000388 	.word	0x20000388
 800239c:	40013000 	.word	0x40013000

080023a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a17      	ldr	r2, [pc, #92]	@ (800241c <HAL_SPI_MspInit+0x7c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d128      	bne.n	8002414 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023c2:	4b17      	ldr	r3, [pc, #92]	@ (8002420 <HAL_SPI_MspInit+0x80>)
 80023c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c6:	4a16      	ldr	r2, [pc, #88]	@ (8002420 <HAL_SPI_MspInit+0x80>)
 80023c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80023ce:	4b14      	ldr	r3, [pc, #80]	@ (8002420 <HAL_SPI_MspInit+0x80>)
 80023d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023da:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <HAL_SPI_MspInit+0x80>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023de:	4a10      	ldr	r2, [pc, #64]	@ (8002420 <HAL_SPI_MspInit+0x80>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <HAL_SPI_MspInit+0x80>)
 80023e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80023f2:	23f0      	movs	r3, #240	@ 0xf0
 80023f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fe:	2303      	movs	r3, #3
 8002400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002402:	2305      	movs	r3, #5
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	4619      	mov	r1, r3
 800240c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002410:	f001 fd74 	bl	8003efc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002414:	bf00      	nop
 8002416:	3728      	adds	r7, #40	@ 0x28
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40013000 	.word	0x40013000
 8002420:	40021000 	.word	0x40021000

08002424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242a:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <HAL_MspInit+0x44>)
 800242c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800242e:	4a0e      	ldr	r2, [pc, #56]	@ (8002468 <HAL_MspInit+0x44>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6613      	str	r3, [r2, #96]	@ 0x60
 8002436:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <HAL_MspInit+0x44>)
 8002438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <HAL_MspInit+0x44>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002446:	4a08      	ldr	r2, [pc, #32]	@ (8002468 <HAL_MspInit+0x44>)
 8002448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800244c:	6593      	str	r3, [r2, #88]	@ 0x58
 800244e:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <HAL_MspInit+0x44>)
 8002450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000

0800246c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <NMI_Handler+0x4>

08002474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002478:	bf00      	nop
 800247a:	e7fd      	b.n	8002478 <HardFault_Handler+0x4>

0800247c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002480:	bf00      	nop
 8002482:	e7fd      	b.n	8002480 <MemManage_Handler+0x4>

08002484 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002488:	bf00      	nop
 800248a:	e7fd      	b.n	8002488 <BusFault_Handler+0x4>

0800248c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <UsageFault_Handler+0x4>

08002494 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c2:	f000 fb97 	bl	8002bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}

080024ca <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOF_INT_Pin);
 80024ce:	2020      	movs	r0, #32
 80024d0:	f001 fe9e 	bl	8004210 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	//printf("RECEIVED USART2\n\r");
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024dc:	4802      	ldr	r0, [pc, #8]	@ (80024e8 <USART2_IRQHandler+0x10>)
 80024de:	f005 f91f 	bl	8007720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000510 	.word	0x20000510

080024ec <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024f0:	4802      	ldr	r0, [pc, #8]	@ (80024fc <TIM6_IRQHandler+0x10>)
 80024f2:	f003 ff8b 	bl	800640c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	2000043c 	.word	0x2000043c

08002500 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return 1;
 8002504:	2301      	movs	r3, #1
}
 8002506:	4618      	mov	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <_kill>:

int _kill(int pid, int sig)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800251a:	f009 f8c9 	bl	800b6b0 <__errno>
 800251e:	4603      	mov	r3, r0
 8002520:	2216      	movs	r2, #22
 8002522:	601a      	str	r2, [r3, #0]
  return -1;
 8002524:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <_exit>:

void _exit (int status)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002538:	f04f 31ff 	mov.w	r1, #4294967295
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ffe7 	bl	8002510 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002542:	bf00      	nop
 8002544:	e7fd      	b.n	8002542 <_exit+0x12>

08002546 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b086      	sub	sp, #24
 800254a:	af00      	add	r7, sp, #0
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	e00a      	b.n	800256e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002558:	f7ff f8fe 	bl	8001758 <__io_getchar>
 800255c:	4601      	mov	r1, r0
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	60ba      	str	r2, [r7, #8]
 8002564:	b2ca      	uxtb	r2, r1
 8002566:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3301      	adds	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	429a      	cmp	r2, r3
 8002574:	dbf0      	blt.n	8002558 <_read+0x12>
  }

  return len;
 8002576:	687b      	ldr	r3, [r7, #4]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	e009      	b.n	80025a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	60ba      	str	r2, [r7, #8]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff f8ca 	bl	8001734 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	3301      	adds	r3, #1
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	dbf1      	blt.n	8002592 <_write+0x12>
  }
  return len;
 80025ae:	687b      	ldr	r3, [r7, #4]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <_close>:

int _close(int file)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025e0:	605a      	str	r2, [r3, #4]
  return 0;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <_isatty>:

int _isatty(int file)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025f8:	2301      	movs	r3, #1
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002606:	b480      	push	{r7}
 8002608:	b085      	sub	sp, #20
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002628:	4a14      	ldr	r2, [pc, #80]	@ (800267c <_sbrk+0x5c>)
 800262a:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <_sbrk+0x60>)
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002634:	4b13      	ldr	r3, [pc, #76]	@ (8002684 <_sbrk+0x64>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d102      	bne.n	8002642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800263c:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <_sbrk+0x64>)
 800263e:	4a12      	ldr	r2, [pc, #72]	@ (8002688 <_sbrk+0x68>)
 8002640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002642:	4b10      	ldr	r3, [pc, #64]	@ (8002684 <_sbrk+0x64>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	429a      	cmp	r2, r3
 800264e:	d207      	bcs.n	8002660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002650:	f009 f82e 	bl	800b6b0 <__errno>
 8002654:	4603      	mov	r3, r0
 8002656:	220c      	movs	r2, #12
 8002658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800265a:	f04f 33ff 	mov.w	r3, #4294967295
 800265e:	e009      	b.n	8002674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002660:	4b08      	ldr	r3, [pc, #32]	@ (8002684 <_sbrk+0x64>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002666:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <_sbrk+0x64>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	4a05      	ldr	r2, [pc, #20]	@ (8002684 <_sbrk+0x64>)
 8002670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002672:	68fb      	ldr	r3, [r7, #12]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	2000a000 	.word	0x2000a000
 8002680:	00000400 	.word	0x00000400
 8002684:	200003ec 	.word	0x200003ec
 8002688:	200007e8 	.word	0x200007e8

0800268c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002690:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <SystemInit+0x20>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002696:	4a05      	ldr	r2, [pc, #20]	@ (80026ac <SystemInit+0x20>)
 8002698:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800269c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08e      	sub	sp, #56	@ 0x38
 80026b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	609a      	str	r2, [r3, #8]
 80026c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c4:	f107 031c 	add.w	r3, r7, #28
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026d0:	463b      	mov	r3, r7
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	60da      	str	r2, [r3, #12]
 80026dc:	611a      	str	r2, [r3, #16]
 80026de:	615a      	str	r2, [r3, #20]
 80026e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026e2:	4b33      	ldr	r3, [pc, #204]	@ (80027b0 <MX_TIM2_Init+0x100>)
 80026e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 80026ea:	4b31      	ldr	r3, [pc, #196]	@ (80027b0 <MX_TIM2_Init+0x100>)
 80026ec:	2250      	movs	r2, #80	@ 0x50
 80026ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f0:	4b2f      	ldr	r3, [pc, #188]	@ (80027b0 <MX_TIM2_Init+0x100>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80026f6:	4b2e      	ldr	r3, [pc, #184]	@ (80027b0 <MX_TIM2_Init+0x100>)
 80026f8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80026fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026fe:	4b2c      	ldr	r3, [pc, #176]	@ (80027b0 <MX_TIM2_Init+0x100>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002704:	4b2a      	ldr	r3, [pc, #168]	@ (80027b0 <MX_TIM2_Init+0x100>)
 8002706:	2200      	movs	r2, #0
 8002708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800270a:	4829      	ldr	r0, [pc, #164]	@ (80027b0 <MX_TIM2_Init+0x100>)
 800270c:	f003 fc93 	bl	8006036 <HAL_TIM_Base_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002716:	f7ff fcaf 	bl	8002078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800271a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800271e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002720:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002724:	4619      	mov	r1, r3
 8002726:	4822      	ldr	r0, [pc, #136]	@ (80027b0 <MX_TIM2_Init+0x100>)
 8002728:	f004 f88c 	bl	8006844 <HAL_TIM_ConfigClockSource>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002732:	f7ff fca1 	bl	8002078 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002736:	481e      	ldr	r0, [pc, #120]	@ (80027b0 <MX_TIM2_Init+0x100>)
 8002738:	f003 fd28 	bl	800618c <HAL_TIM_PWM_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002742:	f7ff fc99 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800274a:	2300      	movs	r3, #0
 800274c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	4619      	mov	r1, r3
 8002754:	4816      	ldr	r0, [pc, #88]	@ (80027b0 <MX_TIM2_Init+0x100>)
 8002756:	f004 fd15 	bl	8007184 <HAL_TIMEx_MasterConfigSynchronization>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002760:	f7ff fc8a 	bl	8002078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002764:	2360      	movs	r3, #96	@ 0x60
 8002766:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800276c:	2300      	movs	r3, #0
 800276e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002774:	463b      	mov	r3, r7
 8002776:	2200      	movs	r2, #0
 8002778:	4619      	mov	r1, r3
 800277a:	480d      	ldr	r0, [pc, #52]	@ (80027b0 <MX_TIM2_Init+0x100>)
 800277c:	f003 ff4e 	bl	800661c <HAL_TIM_PWM_ConfigChannel>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002786:	f7ff fc77 	bl	8002078 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800278a:	463b      	mov	r3, r7
 800278c:	2204      	movs	r2, #4
 800278e:	4619      	mov	r1, r3
 8002790:	4807      	ldr	r0, [pc, #28]	@ (80027b0 <MX_TIM2_Init+0x100>)
 8002792:	f003 ff43 	bl	800661c <HAL_TIM_PWM_ConfigChannel>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800279c:	f7ff fc6c 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80027a0:	4803      	ldr	r0, [pc, #12]	@ (80027b0 <MX_TIM2_Init+0x100>)
 80027a2:	f000 f875 	bl	8002890 <HAL_TIM_MspPostInit>

}
 80027a6:	bf00      	nop
 80027a8:	3738      	adds	r7, #56	@ 0x38
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200003f0 	.word	0x200003f0

080027b4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80027c4:	4b14      	ldr	r3, [pc, #80]	@ (8002818 <MX_TIM6_Init+0x64>)
 80027c6:	4a15      	ldr	r2, [pc, #84]	@ (800281c <MX_TIM6_Init+0x68>)
 80027c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80;
 80027ca:	4b13      	ldr	r3, [pc, #76]	@ (8002818 <MX_TIM6_Init+0x64>)
 80027cc:	2250      	movs	r2, #80	@ 0x50
 80027ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d0:	4b11      	ldr	r3, [pc, #68]	@ (8002818 <MX_TIM6_Init+0x64>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000;
 80027d6:	4b10      	ldr	r3, [pc, #64]	@ (8002818 <MX_TIM6_Init+0x64>)
 80027d8:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80027dc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027de:	4b0e      	ldr	r3, [pc, #56]	@ (8002818 <MX_TIM6_Init+0x64>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027e4:	480c      	ldr	r0, [pc, #48]	@ (8002818 <MX_TIM6_Init+0x64>)
 80027e6:	f003 fc26 	bl	8006036 <HAL_TIM_Base_Init>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80027f0:	f7ff fc42 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f4:	2300      	movs	r3, #0
 80027f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027fc:	1d3b      	adds	r3, r7, #4
 80027fe:	4619      	mov	r1, r3
 8002800:	4805      	ldr	r0, [pc, #20]	@ (8002818 <MX_TIM6_Init+0x64>)
 8002802:	f004 fcbf 	bl	8007184 <HAL_TIMEx_MasterConfigSynchronization>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800280c:	f7ff fc34 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	2000043c 	.word	0x2000043c
 800281c:	40001000 	.word	0x40001000

08002820 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002830:	d10c      	bne.n	800284c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002832:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <HAL_TIM_Base_MspInit+0x68>)
 8002834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002836:	4a14      	ldr	r2, [pc, #80]	@ (8002888 <HAL_TIM_Base_MspInit+0x68>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6593      	str	r3, [r2, #88]	@ 0x58
 800283e:	4b12      	ldr	r3, [pc, #72]	@ (8002888 <HAL_TIM_Base_MspInit+0x68>)
 8002840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800284a:	e018      	b.n	800287e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0e      	ldr	r2, [pc, #56]	@ (800288c <HAL_TIM_Base_MspInit+0x6c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d113      	bne.n	800287e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002856:	4b0c      	ldr	r3, [pc, #48]	@ (8002888 <HAL_TIM_Base_MspInit+0x68>)
 8002858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285a:	4a0b      	ldr	r2, [pc, #44]	@ (8002888 <HAL_TIM_Base_MspInit+0x68>)
 800285c:	f043 0310 	orr.w	r3, r3, #16
 8002860:	6593      	str	r3, [r2, #88]	@ 0x58
 8002862:	4b09      	ldr	r3, [pc, #36]	@ (8002888 <HAL_TIM_Base_MspInit+0x68>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	2100      	movs	r1, #0
 8002872:	2036      	movs	r0, #54	@ 0x36
 8002874:	f001 fa8d 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002878:	2036      	movs	r0, #54	@ 0x36
 800287a:	f001 faa6 	bl	8003dca <HAL_NVIC_EnableIRQ>
}
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000
 800288c:	40001000 	.word	0x40001000

08002890 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 030c 	add.w	r3, r7, #12
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b0:	d11c      	bne.n	80028ec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b2:	4b10      	ldr	r3, [pc, #64]	@ (80028f4 <HAL_TIM_MspPostInit+0x64>)
 80028b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b6:	4a0f      	ldr	r2, [pc, #60]	@ (80028f4 <HAL_TIM_MspPostInit+0x64>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028be:	4b0d      	ldr	r3, [pc, #52]	@ (80028f4 <HAL_TIM_MspPostInit+0x64>)
 80028c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-CK_IN     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028ca:	2303      	movs	r3, #3
 80028cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2302      	movs	r3, #2
 80028d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028da:	2301      	movs	r3, #1
 80028dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028de:	f107 030c 	add.w	r3, r7, #12
 80028e2:	4619      	mov	r1, r3
 80028e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028e8:	f001 fb08 	bl	8003efc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80028ec:	bf00      	nop
 80028ee:	3720      	adds	r7, #32
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000

080028f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028fc:	4b14      	ldr	r3, [pc, #80]	@ (8002950 <MX_USART1_UART_Init+0x58>)
 80028fe:	4a15      	ldr	r2, [pc, #84]	@ (8002954 <MX_USART1_UART_Init+0x5c>)
 8002900:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002902:	4b13      	ldr	r3, [pc, #76]	@ (8002950 <MX_USART1_UART_Init+0x58>)
 8002904:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002908:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800290a:	4b11      	ldr	r3, [pc, #68]	@ (8002950 <MX_USART1_UART_Init+0x58>)
 800290c:	2200      	movs	r2, #0
 800290e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002910:	4b0f      	ldr	r3, [pc, #60]	@ (8002950 <MX_USART1_UART_Init+0x58>)
 8002912:	2200      	movs	r2, #0
 8002914:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002916:	4b0e      	ldr	r3, [pc, #56]	@ (8002950 <MX_USART1_UART_Init+0x58>)
 8002918:	2200      	movs	r2, #0
 800291a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800291c:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <MX_USART1_UART_Init+0x58>)
 800291e:	220c      	movs	r2, #12
 8002920:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002922:	4b0b      	ldr	r3, [pc, #44]	@ (8002950 <MX_USART1_UART_Init+0x58>)
 8002924:	2200      	movs	r2, #0
 8002926:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002928:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <MX_USART1_UART_Init+0x58>)
 800292a:	2200      	movs	r2, #0
 800292c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800292e:	4b08      	ldr	r3, [pc, #32]	@ (8002950 <MX_USART1_UART_Init+0x58>)
 8002930:	2200      	movs	r2, #0
 8002932:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002934:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <MX_USART1_UART_Init+0x58>)
 8002936:	2200      	movs	r2, #0
 8002938:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800293a:	4805      	ldr	r0, [pc, #20]	@ (8002950 <MX_USART1_UART_Init+0x58>)
 800293c:	f004 fca6 	bl	800728c <HAL_UART_Init>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002946:	f7ff fb97 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000488 	.word	0x20000488
 8002954:	40013800 	.word	0x40013800

08002958 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800295c:	4b14      	ldr	r3, [pc, #80]	@ (80029b0 <MX_USART2_UART_Init+0x58>)
 800295e:	4a15      	ldr	r2, [pc, #84]	@ (80029b4 <MX_USART2_UART_Init+0x5c>)
 8002960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002962:	4b13      	ldr	r3, [pc, #76]	@ (80029b0 <MX_USART2_UART_Init+0x58>)
 8002964:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800296a:	4b11      	ldr	r3, [pc, #68]	@ (80029b0 <MX_USART2_UART_Init+0x58>)
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002970:	4b0f      	ldr	r3, [pc, #60]	@ (80029b0 <MX_USART2_UART_Init+0x58>)
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002976:	4b0e      	ldr	r3, [pc, #56]	@ (80029b0 <MX_USART2_UART_Init+0x58>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800297c:	4b0c      	ldr	r3, [pc, #48]	@ (80029b0 <MX_USART2_UART_Init+0x58>)
 800297e:	220c      	movs	r2, #12
 8002980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002982:	4b0b      	ldr	r3, [pc, #44]	@ (80029b0 <MX_USART2_UART_Init+0x58>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002988:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <MX_USART2_UART_Init+0x58>)
 800298a:	2200      	movs	r2, #0
 800298c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800298e:	4b08      	ldr	r3, [pc, #32]	@ (80029b0 <MX_USART2_UART_Init+0x58>)
 8002990:	2200      	movs	r2, #0
 8002992:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002994:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <MX_USART2_UART_Init+0x58>)
 8002996:	2200      	movs	r2, #0
 8002998:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800299a:	4805      	ldr	r0, [pc, #20]	@ (80029b0 <MX_USART2_UART_Init+0x58>)
 800299c:	f004 fc76 	bl	800728c <HAL_UART_Init>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80029a6:	f7ff fb67 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000510 	.word	0x20000510
 80029b4:	40004400 	.word	0x40004400

080029b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b098      	sub	sp, #96	@ 0x60
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029d0:	f107 0318 	add.w	r3, r7, #24
 80029d4:	2234      	movs	r2, #52	@ 0x34
 80029d6:	2100      	movs	r1, #0
 80029d8:	4618      	mov	r0, r3
 80029da:	f008 fe05 	bl	800b5e8 <memset>
  if(uartHandle->Instance==USART1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a42      	ldr	r2, [pc, #264]	@ (8002aec <HAL_UART_MspInit+0x134>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d138      	bne.n	8002a5a <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029e8:	2301      	movs	r3, #1
 80029ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029f0:	f107 0318 	add.w	r3, r7, #24
 80029f4:	4618      	mov	r0, r3
 80029f6:	f003 f8f5 	bl	8005be4 <HAL_RCCEx_PeriphCLKConfig>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a00:	f7ff fb3a 	bl	8002078 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a04:	4b3a      	ldr	r3, [pc, #232]	@ (8002af0 <HAL_UART_MspInit+0x138>)
 8002a06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a08:	4a39      	ldr	r2, [pc, #228]	@ (8002af0 <HAL_UART_MspInit+0x138>)
 8002a0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a10:	4b37      	ldr	r3, [pc, #220]	@ (8002af0 <HAL_UART_MspInit+0x138>)
 8002a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1c:	4b34      	ldr	r3, [pc, #208]	@ (8002af0 <HAL_UART_MspInit+0x138>)
 8002a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a20:	4a33      	ldr	r2, [pc, #204]	@ (8002af0 <HAL_UART_MspInit+0x138>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a28:	4b31      	ldr	r3, [pc, #196]	@ (8002af0 <HAL_UART_MspInit+0x138>)
 8002a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a34:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a42:	2303      	movs	r3, #3
 8002a44:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a46:	2307      	movs	r3, #7
 8002a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a54:	f001 fa52 	bl	8003efc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a58:	e043      	b.n	8002ae2 <HAL_UART_MspInit+0x12a>
  else if(uartHandle->Instance==USART2)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a25      	ldr	r2, [pc, #148]	@ (8002af4 <HAL_UART_MspInit+0x13c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d13e      	bne.n	8002ae2 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a64:	2302      	movs	r3, #2
 8002a66:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a6c:	f107 0318 	add.w	r3, r7, #24
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 f8b7 	bl	8005be4 <HAL_RCCEx_PeriphCLKConfig>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8002a7c:	f7ff fafc 	bl	8002078 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a80:	4b1b      	ldr	r3, [pc, #108]	@ (8002af0 <HAL_UART_MspInit+0x138>)
 8002a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a84:	4a1a      	ldr	r2, [pc, #104]	@ (8002af0 <HAL_UART_MspInit+0x138>)
 8002a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a8c:	4b18      	ldr	r3, [pc, #96]	@ (8002af0 <HAL_UART_MspInit+0x138>)
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a98:	4b15      	ldr	r3, [pc, #84]	@ (8002af0 <HAL_UART_MspInit+0x138>)
 8002a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9c:	4a14      	ldr	r2, [pc, #80]	@ (8002af0 <HAL_UART_MspInit+0x138>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002aa4:	4b12      	ldr	r3, [pc, #72]	@ (8002af0 <HAL_UART_MspInit+0x138>)
 8002aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ab0:	230c      	movs	r3, #12
 8002ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abc:	2303      	movs	r3, #3
 8002abe:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ac0:	2307      	movs	r3, #7
 8002ac2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ace:	f001 fa15 	bl	8003efc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	2026      	movs	r0, #38	@ 0x26
 8002ad8:	f001 f95b 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002adc:	2026      	movs	r0, #38	@ 0x26
 8002ade:	f001 f974 	bl	8003dca <HAL_NVIC_EnableIRQ>
}
 8002ae2:	bf00      	nop
 8002ae4:	3760      	adds	r7, #96	@ 0x60
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40013800 	.word	0x40013800
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40004400 	.word	0x40004400

08002af8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002af8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002afc:	f7ff fdc6 	bl	800268c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b00:	480c      	ldr	r0, [pc, #48]	@ (8002b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b02:	490d      	ldr	r1, [pc, #52]	@ (8002b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b04:	4a0d      	ldr	r2, [pc, #52]	@ (8002b3c <LoopForever+0xe>)
  movs r3, #0
 8002b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b08:	e002      	b.n	8002b10 <LoopCopyDataInit>

08002b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b0e:	3304      	adds	r3, #4

08002b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b14:	d3f9      	bcc.n	8002b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b16:	4a0a      	ldr	r2, [pc, #40]	@ (8002b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b18:	4c0a      	ldr	r4, [pc, #40]	@ (8002b44 <LoopForever+0x16>)
  movs r3, #0
 8002b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b1c:	e001      	b.n	8002b22 <LoopFillZerobss>

08002b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b20:	3204      	adds	r2, #4

08002b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b24:	d3fb      	bcc.n	8002b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b26:	f008 fdc9 	bl	800b6bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b2a:	f7fe fe99 	bl	8001860 <main>

08002b2e <LoopForever>:

LoopForever:
    b LoopForever
 8002b2e:	e7fe      	b.n	8002b2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b30:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b38:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002b3c:	0800e898 	.word	0x0800e898
  ldr r2, =_sbss
 8002b40:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002b44:	200007e8 	.word	0x200007e8

08002b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b48:	e7fe      	b.n	8002b48 <ADC1_2_IRQHandler>

08002b4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b54:	2003      	movs	r0, #3
 8002b56:	f001 f911 	bl	8003d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b5a:	200f      	movs	r0, #15
 8002b5c:	f000 f80e 	bl	8002b7c <HAL_InitTick>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	71fb      	strb	r3, [r7, #7]
 8002b6a:	e001      	b.n	8002b70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b6c:	f7ff fc5a 	bl	8002424 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b70:	79fb      	ldrb	r3, [r7, #7]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002b88:	4b17      	ldr	r3, [pc, #92]	@ (8002be8 <HAL_InitTick+0x6c>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d023      	beq.n	8002bd8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002b90:	4b16      	ldr	r3, [pc, #88]	@ (8002bec <HAL_InitTick+0x70>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4b14      	ldr	r3, [pc, #80]	@ (8002be8 <HAL_InitTick+0x6c>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f001 f91d 	bl	8003de6 <HAL_SYSTICK_Config>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10f      	bne.n	8002bd2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b0f      	cmp	r3, #15
 8002bb6:	d809      	bhi.n	8002bcc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc0:	f001 f8e7 	bl	8003d92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf0 <HAL_InitTick+0x74>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	e007      	b.n	8002bdc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
 8002bd0:	e004      	b.n	8002bdc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	73fb      	strb	r3, [r7, #15]
 8002bd6:	e001      	b.n	8002bdc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000008 	.word	0x20000008
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	20000004 	.word	0x20000004

08002bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bf8:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <HAL_IncTick+0x20>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <HAL_IncTick+0x24>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	4a04      	ldr	r2, [pc, #16]	@ (8002c18 <HAL_IncTick+0x24>)
 8002c06:	6013      	str	r3, [r2, #0]
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000008 	.word	0x20000008
 8002c18:	20000598 	.word	0x20000598

08002c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c20:	4b03      	ldr	r3, [pc, #12]	@ (8002c30 <HAL_GetTick+0x14>)
 8002c22:	681b      	ldr	r3, [r3, #0]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20000598 	.word	0x20000598

08002c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c3c:	f7ff ffee 	bl	8002c1c <HAL_GetTick>
 8002c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d005      	beq.n	8002c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c78 <HAL_Delay+0x44>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4413      	add	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c5a:	bf00      	nop
 8002c5c:	f7ff ffde 	bl	8002c1c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d8f7      	bhi.n	8002c5c <HAL_Delay+0x28>
  {
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000008 	.word	0x20000008

08002c7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	609a      	str	r2, [r3, #8]
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	609a      	str	r2, [r3, #8]
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	3360      	adds	r3, #96	@ 0x60
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4b08      	ldr	r3, [pc, #32]	@ (8002d28 <LL_ADC_SetOffset+0x44>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002d1c:	bf00      	nop
 8002d1e:	371c      	adds	r7, #28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	03fff000 	.word	0x03fff000

08002d2c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3360      	adds	r3, #96	@ 0x60
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	3360      	adds	r3, #96	@ 0x60
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	615a      	str	r2, [r3, #20]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3330      	adds	r3, #48	@ 0x30
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	0a1b      	lsrs	r3, r3, #8
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	f003 030c 	and.w	r3, r3, #12
 8002dd0:	4413      	add	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	211f      	movs	r1, #31
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	401a      	ands	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0e9b      	lsrs	r3, r3, #26
 8002dec:	f003 011f 	and.w	r1, r3, #31
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e00:	bf00      	nop
 8002e02:	371c      	adds	r7, #28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	3314      	adds	r3, #20
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	0e5b      	lsrs	r3, r3, #25
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	4413      	add	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	0d1b      	lsrs	r3, r3, #20
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	2107      	movs	r1, #7
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	401a      	ands	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	0d1b      	lsrs	r3, r3, #20
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e50:	431a      	orrs	r2, r3
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e56:	bf00      	nop
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	401a      	ands	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f003 0318 	and.w	r3, r3, #24
 8002e86:	4908      	ldr	r1, [pc, #32]	@ (8002ea8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002e88:	40d9      	lsrs	r1, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	400b      	ands	r3, r1
 8002e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e92:	431a      	orrs	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002e9a:	bf00      	nop
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	0007ffff 	.word	0x0007ffff

08002eac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002ebc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6093      	str	r3, [r2, #8]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ee0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ee4:	d101      	bne.n	8002eea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002f08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f0c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f34:	d101      	bne.n	8002f3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <LL_ADC_IsEnabled+0x18>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <LL_ADC_IsEnabled+0x1a>
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d101      	bne.n	8002f86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d101      	bne.n	8002fac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fbc:	b590      	push	{r4, r7, lr}
 8002fbe:	b089      	sub	sp, #36	@ 0x24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e12b      	b.n	800322e <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d109      	bne.n	8002ff8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7fe f883 	bl	80010f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff ff67 	bl	8002ed0 <LL_ADC_IsDeepPowerDownEnabled>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d004      	beq.n	8003012 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff ff4d 	bl	8002eac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff ff82 	bl	8002f20 <LL_ADC_IsInternalRegulatorEnabled>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d115      	bne.n	800304e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff ff66 	bl	8002ef8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800302c:	4b82      	ldr	r3, [pc, #520]	@ (8003238 <HAL_ADC_Init+0x27c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	099b      	lsrs	r3, r3, #6
 8003032:	4a82      	ldr	r2, [pc, #520]	@ (800323c <HAL_ADC_Init+0x280>)
 8003034:	fba2 2303 	umull	r2, r3, r2, r3
 8003038:	099b      	lsrs	r3, r3, #6
 800303a:	3301      	adds	r3, #1
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003040:	e002      	b.n	8003048 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	3b01      	subs	r3, #1
 8003046:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f9      	bne.n	8003042 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff ff64 	bl	8002f20 <LL_ADC_IsInternalRegulatorEnabled>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10d      	bne.n	800307a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003062:	f043 0210 	orr.w	r2, r3, #16
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800306e:	f043 0201 	orr.w	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff ff75 	bl	8002f6e <LL_ADC_REG_IsConversionOngoing>
 8003084:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 80c4 	bne.w	800321c <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 80c0 	bne.w	800321c <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80030a4:	f043 0202 	orr.w	r2, r3, #2
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff49 	bl	8002f48 <LL_ADC_IsEnabled>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d110      	bne.n	80030de <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030bc:	4860      	ldr	r0, [pc, #384]	@ (8003240 <HAL_ADC_Init+0x284>)
 80030be:	f7ff ff43 	bl	8002f48 <LL_ADC_IsEnabled>
 80030c2:	4604      	mov	r4, r0
 80030c4:	485f      	ldr	r0, [pc, #380]	@ (8003244 <HAL_ADC_Init+0x288>)
 80030c6:	f7ff ff3f 	bl	8002f48 <LL_ADC_IsEnabled>
 80030ca:	4603      	mov	r3, r0
 80030cc:	4323      	orrs	r3, r4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d105      	bne.n	80030de <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4619      	mov	r1, r3
 80030d8:	485b      	ldr	r0, [pc, #364]	@ (8003248 <HAL_ADC_Init+0x28c>)
 80030da:	f7ff fdcf 	bl	8002c7c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	7e5b      	ldrb	r3, [r3, #25]
 80030e2:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030e8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80030ee:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80030f4:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030fc:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d106      	bne.n	800311a <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003110:	3b01      	subs	r3, #1
 8003112:	045b      	lsls	r3, r3, #17
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003126:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800312e:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	4b43      	ldr	r3, [pc, #268]	@ (800324c <HAL_ADC_Init+0x290>)
 800313e:	4013      	ands	r3, r2
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	69b9      	ldr	r1, [r7, #24]
 8003146:	430b      	orrs	r3, r1
 8003148:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff ff20 	bl	8002f94 <LL_ADC_INJ_IsConversionOngoing>
 8003154:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d13d      	bne.n	80031d8 <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d13a      	bne.n	80031d8 <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003166:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800316e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003170:	4313      	orrs	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800317e:	f023 0302 	bic.w	r3, r3, #2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	69b9      	ldr	r1, [r7, #24]
 8003188:	430b      	orrs	r3, r1
 800318a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003192:	2b01      	cmp	r3, #1
 8003194:	d118      	bne.n	80031c8 <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80031a0:	f023 0304 	bic.w	r3, r3, #4
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80031ac:	4311      	orrs	r1, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80031b2:	4311      	orrs	r1, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031b8:	430a      	orrs	r2, r1
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0201 	orr.w	r2, r2, #1
 80031c4:	611a      	str	r2, [r3, #16]
 80031c6:	e007      	b.n	80031d8 <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0201 	bic.w	r2, r2, #1
 80031d6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d10c      	bne.n	80031fa <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	f023 010f 	bic.w	r1, r3, #15
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	1e5a      	subs	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80031f8:	e007      	b.n	800320a <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 020f 	bic.w	r2, r2, #15
 8003208:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320e:	f023 0303 	bic.w	r3, r3, #3
 8003212:	f043 0201 	orr.w	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	655a      	str	r2, [r3, #84]	@ 0x54
 800321a:	e007      	b.n	800322c <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003220:	f043 0210 	orr.w	r2, r3, #16
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800322c:	7ffb      	ldrb	r3, [r7, #31]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3724      	adds	r7, #36	@ 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd90      	pop	{r4, r7, pc}
 8003236:	bf00      	nop
 8003238:	20000000 	.word	0x20000000
 800323c:	053e2d63 	.word	0x053e2d63
 8003240:	50040000 	.word	0x50040000
 8003244:	50040100 	.word	0x50040100
 8003248:	50040300 	.word	0x50040300
 800324c:	fff0c007 	.word	0xfff0c007

08003250 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b0b6      	sub	sp, #216	@ 0xd8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003260:	2300      	movs	r3, #0
 8003262:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x22>
 800326e:	2302      	movs	r3, #2
 8003270:	e3d5      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x7ce>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fe75 	bl	8002f6e <LL_ADC_REG_IsConversionOngoing>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 83ba 	bne.w	8003a00 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b05      	cmp	r3, #5
 800329a:	d824      	bhi.n	80032e6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	3b02      	subs	r3, #2
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d81b      	bhi.n	80032de <HAL_ADC_ConfigChannel+0x8e>
 80032a6:	a201      	add	r2, pc, #4	@ (adr r2, 80032ac <HAL_ADC_ConfigChannel+0x5c>)
 80032a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ac:	080032bd 	.word	0x080032bd
 80032b0:	080032c5 	.word	0x080032c5
 80032b4:	080032cd 	.word	0x080032cd
 80032b8:	080032d5 	.word	0x080032d5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80032bc:	230c      	movs	r3, #12
 80032be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80032c2:	e010      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80032c4:	2312      	movs	r3, #18
 80032c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80032ca:	e00c      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80032cc:	2318      	movs	r3, #24
 80032ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80032d2:	e008      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80032d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80032dc:	e003      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80032de:	2306      	movs	r3, #6
 80032e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80032e4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80032f4:	f7ff fd5e 	bl	8002db4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fe36 	bl	8002f6e <LL_ADC_REG_IsConversionOngoing>
 8003302:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fe42 	bl	8002f94 <LL_ADC_INJ_IsConversionOngoing>
 8003310:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003314:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003318:	2b00      	cmp	r3, #0
 800331a:	f040 81bf 	bne.w	800369c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800331e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003322:	2b00      	cmp	r3, #0
 8003324:	f040 81ba 	bne.w	800369c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003330:	d10f      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2200      	movs	r2, #0
 800333c:	4619      	mov	r1, r3
 800333e:	f7ff fd65 	bl	8002e0c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fd1f 	bl	8002d8e <LL_ADC_SetSamplingTimeCommonConfig>
 8003350:	e00e      	b.n	8003370 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	6819      	ldr	r1, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	461a      	mov	r2, r3
 8003360:	f7ff fd54 	bl	8002e0c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fd0f 	bl	8002d8e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	695a      	ldr	r2, [r3, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	08db      	lsrs	r3, r3, #3
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b04      	cmp	r3, #4
 8003390:	d00a      	beq.n	80033a8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6919      	ldr	r1, [r3, #16]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033a2:	f7ff fc9f 	bl	8002ce4 <LL_ADC_SetOffset>
 80033a6:	e179      	b.n	800369c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2100      	movs	r1, #0
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fcbc 	bl	8002d2c <LL_ADC_GetOffsetChannel>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10a      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x184>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fcb1 	bl	8002d2c <LL_ADC_GetOffsetChannel>
 80033ca:	4603      	mov	r3, r0
 80033cc:	0e9b      	lsrs	r3, r3, #26
 80033ce:	f003 021f 	and.w	r2, r3, #31
 80033d2:	e01e      	b.n	8003412 <HAL_ADC_ConfigChannel+0x1c2>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2100      	movs	r1, #0
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fca6 	bl	8002d2c <LL_ADC_GetOffsetChannel>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80033ea:	fa93 f3a3 	rbit	r3, r3
 80033ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003402:	2320      	movs	r3, #32
 8003404:	e004      	b.n	8003410 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003406:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800340a:	fab3 f383 	clz	r3, r3
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800341a:	2b00      	cmp	r3, #0
 800341c:	d105      	bne.n	800342a <HAL_ADC_ConfigChannel+0x1da>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	0e9b      	lsrs	r3, r3, #26
 8003424:	f003 031f 	and.w	r3, r3, #31
 8003428:	e018      	b.n	800345c <HAL_ADC_ConfigChannel+0x20c>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003436:	fa93 f3a3 	rbit	r3, r3
 800343a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800343e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003442:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003446:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800344e:	2320      	movs	r3, #32
 8003450:	e004      	b.n	800345c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003452:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800345c:	429a      	cmp	r2, r3
 800345e:	d106      	bne.n	800346e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2200      	movs	r2, #0
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff fc75 	bl	8002d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2101      	movs	r1, #1
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fc59 	bl	8002d2c <LL_ADC_GetOffsetChannel>
 800347a:	4603      	mov	r3, r0
 800347c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10a      	bne.n	800349a <HAL_ADC_ConfigChannel+0x24a>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2101      	movs	r1, #1
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff fc4e 	bl	8002d2c <LL_ADC_GetOffsetChannel>
 8003490:	4603      	mov	r3, r0
 8003492:	0e9b      	lsrs	r3, r3, #26
 8003494:	f003 021f 	and.w	r2, r3, #31
 8003498:	e01e      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x288>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2101      	movs	r1, #1
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff fc43 	bl	8002d2c <LL_ADC_GetOffsetChannel>
 80034a6:	4603      	mov	r3, r0
 80034a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034b0:	fa93 f3a3 	rbit	r3, r3
 80034b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80034b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80034c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80034c8:	2320      	movs	r3, #32
 80034ca:	e004      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80034cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80034d0:	fab3 f383 	clz	r3, r3
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d105      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x2a0>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	0e9b      	lsrs	r3, r3, #26
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	e018      	b.n	8003522 <HAL_ADC_ConfigChannel+0x2d2>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034fc:	fa93 f3a3 	rbit	r3, r3
 8003500:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003504:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003508:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800350c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003514:	2320      	movs	r3, #32
 8003516:	e004      	b.n	8003522 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003518:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800351c:	fab3 f383 	clz	r3, r3
 8003520:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003522:	429a      	cmp	r2, r3
 8003524:	d106      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2200      	movs	r2, #0
 800352c:	2101      	movs	r1, #1
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff fc12 	bl	8002d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2102      	movs	r1, #2
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff fbf6 	bl	8002d2c <LL_ADC_GetOffsetChannel>
 8003540:	4603      	mov	r3, r0
 8003542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10a      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x310>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2102      	movs	r1, #2
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff fbeb 	bl	8002d2c <LL_ADC_GetOffsetChannel>
 8003556:	4603      	mov	r3, r0
 8003558:	0e9b      	lsrs	r3, r3, #26
 800355a:	f003 021f 	and.w	r2, r3, #31
 800355e:	e01e      	b.n	800359e <HAL_ADC_ConfigChannel+0x34e>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2102      	movs	r1, #2
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fbe0 	bl	8002d2c <LL_ADC_GetOffsetChannel>
 800356c:	4603      	mov	r3, r0
 800356e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800357e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003582:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003586:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800358e:	2320      	movs	r3, #32
 8003590:	e004      	b.n	800359c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003592:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003596:	fab3 f383 	clz	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d105      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x366>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	0e9b      	lsrs	r3, r3, #26
 80035b0:	f003 031f 	and.w	r3, r3, #31
 80035b4:	e014      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x390>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80035c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80035ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80035d2:	2320      	movs	r3, #32
 80035d4:	e004      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80035d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035da:	fab3 f383 	clz	r3, r3
 80035de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d106      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2200      	movs	r2, #0
 80035ea:	2102      	movs	r1, #2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fbb3 	bl	8002d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2103      	movs	r1, #3
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff fb97 	bl	8002d2c <LL_ADC_GetOffsetChannel>
 80035fe:	4603      	mov	r3, r0
 8003600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <HAL_ADC_ConfigChannel+0x3ce>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2103      	movs	r1, #3
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff fb8c 	bl	8002d2c <LL_ADC_GetOffsetChannel>
 8003614:	4603      	mov	r3, r0
 8003616:	0e9b      	lsrs	r3, r3, #26
 8003618:	f003 021f 	and.w	r2, r3, #31
 800361c:	e017      	b.n	800364e <HAL_ADC_ConfigChannel+0x3fe>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2103      	movs	r1, #3
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff fb81 	bl	8002d2c <LL_ADC_GetOffsetChannel>
 800362a:	4603      	mov	r3, r0
 800362c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003630:	fa93 f3a3 	rbit	r3, r3
 8003634:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003636:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003638:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800363a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003640:	2320      	movs	r3, #32
 8003642:	e003      	b.n	800364c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003644:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003656:	2b00      	cmp	r3, #0
 8003658:	d105      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x416>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	0e9b      	lsrs	r3, r3, #26
 8003660:	f003 031f 	and.w	r3, r3, #31
 8003664:	e011      	b.n	800368a <HAL_ADC_ConfigChannel+0x43a>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003674:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003676:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003678:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800367e:	2320      	movs	r3, #32
 8003680:	e003      	b.n	800368a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003682:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003684:	fab3 f383 	clz	r3, r3
 8003688:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800368a:	429a      	cmp	r2, r3
 800368c:	d106      	bne.n	800369c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2200      	movs	r2, #0
 8003694:	2103      	movs	r1, #3
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fb5e 	bl	8002d58 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff fc51 	bl	8002f48 <LL_ADC_IsEnabled>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f040 813f 	bne.w	800392c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	6819      	ldr	r1, [r3, #0]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	461a      	mov	r2, r3
 80036bc:	f7ff fbd2 	bl	8002e64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4a8e      	ldr	r2, [pc, #568]	@ (8003900 <HAL_ADC_ConfigChannel+0x6b0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	f040 8130 	bne.w	800392c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10b      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x4a4>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	0e9b      	lsrs	r3, r3, #26
 80036e2:	3301      	adds	r3, #1
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	2b09      	cmp	r3, #9
 80036ea:	bf94      	ite	ls
 80036ec:	2301      	movls	r3, #1
 80036ee:	2300      	movhi	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	e019      	b.n	8003728 <HAL_ADC_ConfigChannel+0x4d8>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003704:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003706:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800370c:	2320      	movs	r3, #32
 800370e:	e003      	b.n	8003718 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003710:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003712:	fab3 f383 	clz	r3, r3
 8003716:	b2db      	uxtb	r3, r3
 8003718:	3301      	adds	r3, #1
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	2b09      	cmp	r3, #9
 8003720:	bf94      	ite	ls
 8003722:	2301      	movls	r3, #1
 8003724:	2300      	movhi	r3, #0
 8003726:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003728:	2b00      	cmp	r3, #0
 800372a:	d079      	beq.n	8003820 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003734:	2b00      	cmp	r3, #0
 8003736:	d107      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x4f8>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	0e9b      	lsrs	r3, r3, #26
 800373e:	3301      	adds	r3, #1
 8003740:	069b      	lsls	r3, r3, #26
 8003742:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003746:	e015      	b.n	8003774 <HAL_ADC_ConfigChannel+0x524>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003750:	fa93 f3a3 	rbit	r3, r3
 8003754:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003758:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800375a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003760:	2320      	movs	r3, #32
 8003762:	e003      	b.n	800376c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003764:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003766:	fab3 f383 	clz	r3, r3
 800376a:	b2db      	uxtb	r3, r3
 800376c:	3301      	adds	r3, #1
 800376e:	069b      	lsls	r3, r3, #26
 8003770:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377c:	2b00      	cmp	r3, #0
 800377e:	d109      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x544>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	0e9b      	lsrs	r3, r3, #26
 8003786:	3301      	adds	r3, #1
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	2101      	movs	r1, #1
 800378e:	fa01 f303 	lsl.w	r3, r1, r3
 8003792:	e017      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x574>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800379c:	fa93 f3a3 	rbit	r3, r3
 80037a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80037a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80037a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80037ac:	2320      	movs	r3, #32
 80037ae:	e003      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80037b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037b2:	fab3 f383 	clz	r3, r3
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	3301      	adds	r3, #1
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	2101      	movs	r1, #1
 80037c0:	fa01 f303 	lsl.w	r3, r1, r3
 80037c4:	ea42 0103 	orr.w	r1, r2, r3
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x59a>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	0e9b      	lsrs	r3, r3, #26
 80037da:	3301      	adds	r3, #1
 80037dc:	f003 021f 	and.w	r2, r3, #31
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	051b      	lsls	r3, r3, #20
 80037e8:	e018      	b.n	800381c <HAL_ADC_ConfigChannel+0x5cc>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80037f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80037fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003802:	2320      	movs	r3, #32
 8003804:	e003      	b.n	800380e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003808:	fab3 f383 	clz	r3, r3
 800380c:	b2db      	uxtb	r3, r3
 800380e:	3301      	adds	r3, #1
 8003810:	f003 021f 	and.w	r2, r3, #31
 8003814:	4613      	mov	r3, r2
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	4413      	add	r3, r2
 800381a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800381c:	430b      	orrs	r3, r1
 800381e:	e080      	b.n	8003922 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003828:	2b00      	cmp	r3, #0
 800382a:	d107      	bne.n	800383c <HAL_ADC_ConfigChannel+0x5ec>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	0e9b      	lsrs	r3, r3, #26
 8003832:	3301      	adds	r3, #1
 8003834:	069b      	lsls	r3, r3, #26
 8003836:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800383a:	e015      	b.n	8003868 <HAL_ADC_ConfigChannel+0x618>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003844:	fa93 f3a3 	rbit	r3, r3
 8003848:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800384a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800384e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003854:	2320      	movs	r3, #32
 8003856:	e003      	b.n	8003860 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	3301      	adds	r3, #1
 8003862:	069b      	lsls	r3, r3, #26
 8003864:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003870:	2b00      	cmp	r3, #0
 8003872:	d109      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x638>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	0e9b      	lsrs	r3, r3, #26
 800387a:	3301      	adds	r3, #1
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	2101      	movs	r1, #1
 8003882:	fa01 f303 	lsl.w	r3, r1, r3
 8003886:	e017      	b.n	80038b8 <HAL_ADC_ConfigChannel+0x668>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	fa93 f3a3 	rbit	r3, r3
 8003894:	61bb      	str	r3, [r7, #24]
  return result;
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80038a0:	2320      	movs	r3, #32
 80038a2:	e003      	b.n	80038ac <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	fab3 f383 	clz	r3, r3
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	3301      	adds	r3, #1
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	2101      	movs	r1, #1
 80038b4:	fa01 f303 	lsl.w	r3, r1, r3
 80038b8:	ea42 0103 	orr.w	r1, r2, r3
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10d      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x694>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	0e9b      	lsrs	r3, r3, #26
 80038ce:	3301      	adds	r3, #1
 80038d0:	f003 021f 	and.w	r2, r3, #31
 80038d4:	4613      	mov	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4413      	add	r3, r2
 80038da:	3b1e      	subs	r3, #30
 80038dc:	051b      	lsls	r3, r3, #20
 80038de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80038e2:	e01d      	b.n	8003920 <HAL_ADC_ConfigChannel+0x6d0>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	fa93 f3a3 	rbit	r3, r3
 80038f0:	60fb      	str	r3, [r7, #12]
  return result;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d103      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80038fc:	2320      	movs	r3, #32
 80038fe:	e005      	b.n	800390c <HAL_ADC_ConfigChannel+0x6bc>
 8003900:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	fab3 f383 	clz	r3, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	3301      	adds	r3, #1
 800390e:	f003 021f 	and.w	r2, r3, #31
 8003912:	4613      	mov	r3, r2
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	4413      	add	r3, r2
 8003918:	3b1e      	subs	r3, #30
 800391a:	051b      	lsls	r3, r3, #20
 800391c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003920:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003926:	4619      	mov	r1, r3
 8003928:	f7ff fa70 	bl	8002e0c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b3d      	ldr	r3, [pc, #244]	@ (8003a28 <HAL_ADC_ConfigChannel+0x7d8>)
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d06c      	beq.n	8003a12 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003938:	483c      	ldr	r0, [pc, #240]	@ (8003a2c <HAL_ADC_ConfigChannel+0x7dc>)
 800393a:	f7ff f9c5 	bl	8002cc8 <LL_ADC_GetCommonPathInternalCh>
 800393e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a3a      	ldr	r2, [pc, #232]	@ (8003a30 <HAL_ADC_ConfigChannel+0x7e0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d127      	bne.n	800399c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800394c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003950:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d121      	bne.n	800399c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a35      	ldr	r2, [pc, #212]	@ (8003a34 <HAL_ADC_ConfigChannel+0x7e4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d157      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003962:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003966:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800396a:	4619      	mov	r1, r3
 800396c:	482f      	ldr	r0, [pc, #188]	@ (8003a2c <HAL_ADC_ConfigChannel+0x7dc>)
 800396e:	f7ff f998 	bl	8002ca2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003972:	4b31      	ldr	r3, [pc, #196]	@ (8003a38 <HAL_ADC_ConfigChannel+0x7e8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	099b      	lsrs	r3, r3, #6
 8003978:	4a30      	ldr	r2, [pc, #192]	@ (8003a3c <HAL_ADC_ConfigChannel+0x7ec>)
 800397a:	fba2 2303 	umull	r2, r3, r2, r3
 800397e:	099b      	lsrs	r3, r3, #6
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	4613      	mov	r3, r2
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800398c:	e002      	b.n	8003994 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	3b01      	subs	r3, #1
 8003992:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f9      	bne.n	800398e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800399a:	e03a      	b.n	8003a12 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a27      	ldr	r2, [pc, #156]	@ (8003a40 <HAL_ADC_ConfigChannel+0x7f0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d113      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10d      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a34 <HAL_ADC_ConfigChannel+0x7e4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d12a      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039c4:	4619      	mov	r1, r3
 80039c6:	4819      	ldr	r0, [pc, #100]	@ (8003a2c <HAL_ADC_ConfigChannel+0x7dc>)
 80039c8:	f7ff f96b 	bl	8002ca2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039cc:	e021      	b.n	8003a12 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a44 <HAL_ADC_ConfigChannel+0x7f4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d11c      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d116      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a12      	ldr	r2, [pc, #72]	@ (8003a34 <HAL_ADC_ConfigChannel+0x7e4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d111      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80039f6:	4619      	mov	r1, r3
 80039f8:	480c      	ldr	r0, [pc, #48]	@ (8003a2c <HAL_ADC_ConfigChannel+0x7dc>)
 80039fa:	f7ff f952 	bl	8002ca2 <LL_ADC_SetCommonPathInternalCh>
 80039fe:	e008      	b.n	8003a12 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a04:	f043 0220 	orr.w	r2, r3, #32
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a1a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	37d8      	adds	r7, #216	@ 0xd8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	80080000 	.word	0x80080000
 8003a2c:	50040300 	.word	0x50040300
 8003a30:	c7520000 	.word	0xc7520000
 8003a34:	50040000 	.word	0x50040000
 8003a38:	20000000 	.word	0x20000000
 8003a3c:	053e2d63 	.word	0x053e2d63
 8003a40:	cb840000 	.word	0xcb840000
 8003a44:	80000001 	.word	0x80000001

08003a48 <LL_ADC_IsEnabled>:
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <LL_ADC_IsEnabled+0x18>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <LL_ADC_IsEnabled+0x1a>
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <LL_ADC_REG_IsConversionOngoing>:
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d101      	bne.n	8003a86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b09f      	sub	sp, #124	@ 0x7c
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e089      	b.n	8003bc6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003aba:	2300      	movs	r3, #0
 8003abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003abe:	2300      	movs	r3, #0
 8003ac0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a42      	ldr	r2, [pc, #264]	@ (8003bd0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d102      	bne.n	8003ad2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003acc:	4b41      	ldr	r3, [pc, #260]	@ (8003bd4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	e001      	b.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10b      	bne.n	8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e068      	b.n	8003bc6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff ffb9 	bl	8003a6e <LL_ADC_REG_IsConversionOngoing>
 8003afc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff ffb3 	bl	8003a6e <LL_ADC_REG_IsConversionOngoing>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d14a      	bne.n	8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d147      	bne.n	8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b14:	4b30      	ldr	r3, [pc, #192]	@ (8003bd8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003b16:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d027      	beq.n	8003b70 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	6859      	ldr	r1, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003b32:	035b      	lsls	r3, r3, #13
 8003b34:	430b      	orrs	r3, r1
 8003b36:	431a      	orrs	r2, r3
 8003b38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b3a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b3c:	4824      	ldr	r0, [pc, #144]	@ (8003bd0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003b3e:	f7ff ff83 	bl	8003a48 <LL_ADC_IsEnabled>
 8003b42:	4604      	mov	r4, r0
 8003b44:	4823      	ldr	r0, [pc, #140]	@ (8003bd4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b46:	f7ff ff7f 	bl	8003a48 <LL_ADC_IsEnabled>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4323      	orrs	r3, r4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d132      	bne.n	8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b5a:	f023 030f 	bic.w	r3, r3, #15
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	6811      	ldr	r1, [r2, #0]
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	6892      	ldr	r2, [r2, #8]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b6c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b6e:	e023      	b.n	8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b7a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b7c:	4814      	ldr	r0, [pc, #80]	@ (8003bd0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003b7e:	f7ff ff63 	bl	8003a48 <LL_ADC_IsEnabled>
 8003b82:	4604      	mov	r4, r0
 8003b84:	4813      	ldr	r0, [pc, #76]	@ (8003bd4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b86:	f7ff ff5f 	bl	8003a48 <LL_ADC_IsEnabled>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	4323      	orrs	r3, r4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d112      	bne.n	8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b9a:	f023 030f 	bic.w	r3, r3, #15
 8003b9e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ba0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ba2:	e009      	b.n	8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba8:	f043 0220 	orr.w	r2, r3, #32
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003bb6:	e000      	b.n	8003bba <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bb8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003bc2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	377c      	adds	r7, #124	@ 0x7c
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd90      	pop	{r4, r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	50040000 	.word	0x50040000
 8003bd4:	50040100 	.word	0x50040100
 8003bd8:	50040300 	.word	0x50040300

08003bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bec:	4b0c      	ldr	r3, [pc, #48]	@ (8003c20 <__NVIC_SetPriorityGrouping+0x44>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c0e:	4a04      	ldr	r2, [pc, #16]	@ (8003c20 <__NVIC_SetPriorityGrouping+0x44>)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	60d3      	str	r3, [r2, #12]
}
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c28:	4b04      	ldr	r3, [pc, #16]	@ (8003c3c <__NVIC_GetPriorityGrouping+0x18>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	0a1b      	lsrs	r3, r3, #8
 8003c2e:	f003 0307 	and.w	r3, r3, #7
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	e000ed00 	.word	0xe000ed00

08003c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	db0b      	blt.n	8003c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	f003 021f 	and.w	r2, r3, #31
 8003c58:	4907      	ldr	r1, [pc, #28]	@ (8003c78 <__NVIC_EnableIRQ+0x38>)
 8003c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	2001      	movs	r0, #1
 8003c62:	fa00 f202 	lsl.w	r2, r0, r2
 8003c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	e000e100 	.word	0xe000e100

08003c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	db0a      	blt.n	8003ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	490c      	ldr	r1, [pc, #48]	@ (8003cc8 <__NVIC_SetPriority+0x4c>)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	0112      	lsls	r2, r2, #4
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ca4:	e00a      	b.n	8003cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	4908      	ldr	r1, [pc, #32]	@ (8003ccc <__NVIC_SetPriority+0x50>)
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	3b04      	subs	r3, #4
 8003cb4:	0112      	lsls	r2, r2, #4
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	440b      	add	r3, r1
 8003cba:	761a      	strb	r2, [r3, #24]
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	e000e100 	.word	0xe000e100
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b089      	sub	sp, #36	@ 0x24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f1c3 0307 	rsb	r3, r3, #7
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	bf28      	it	cs
 8003cee:	2304      	movcs	r3, #4
 8003cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	2b06      	cmp	r3, #6
 8003cf8:	d902      	bls.n	8003d00 <NVIC_EncodePriority+0x30>
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	3b03      	subs	r3, #3
 8003cfe:	e000      	b.n	8003d02 <NVIC_EncodePriority+0x32>
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d04:	f04f 32ff 	mov.w	r2, #4294967295
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43da      	mvns	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	401a      	ands	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d18:	f04f 31ff 	mov.w	r1, #4294967295
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d22:	43d9      	mvns	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d28:	4313      	orrs	r3, r2
         );
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3724      	adds	r7, #36	@ 0x24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d48:	d301      	bcc.n	8003d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e00f      	b.n	8003d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d78 <SysTick_Config+0x40>)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d56:	210f      	movs	r1, #15
 8003d58:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5c:	f7ff ff8e 	bl	8003c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d60:	4b05      	ldr	r3, [pc, #20]	@ (8003d78 <SysTick_Config+0x40>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d66:	4b04      	ldr	r3, [pc, #16]	@ (8003d78 <SysTick_Config+0x40>)
 8003d68:	2207      	movs	r2, #7
 8003d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	e000e010 	.word	0xe000e010

08003d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff ff29 	bl	8003bdc <__NVIC_SetPriorityGrouping>
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b086      	sub	sp, #24
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	4603      	mov	r3, r0
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003da4:	f7ff ff3e 	bl	8003c24 <__NVIC_GetPriorityGrouping>
 8003da8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	6978      	ldr	r0, [r7, #20]
 8003db0:	f7ff ff8e 	bl	8003cd0 <NVIC_EncodePriority>
 8003db4:	4602      	mov	r2, r0
 8003db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dba:	4611      	mov	r1, r2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff ff5d 	bl	8003c7c <__NVIC_SetPriority>
}
 8003dc2:	bf00      	nop
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff ff31 	bl	8003c40 <__NVIC_EnableIRQ>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ffa2 	bl	8003d38 <SysTick_Config>
 8003df4:	4603      	mov	r3, r0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b085      	sub	sp, #20
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d008      	beq.n	8003e28 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2204      	movs	r2, #4
 8003e1a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e022      	b.n	8003e6e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 020e 	bic.w	r2, r2, #14
 8003e36:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4c:	f003 021c 	and.w	r2, r3, #28
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e54:	2101      	movs	r1, #1
 8003e56:	fa01 f202 	lsl.w	r2, r1, r2
 8003e5a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d005      	beq.n	8003e9e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2204      	movs	r2, #4
 8003e96:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
 8003e9c:	e029      	b.n	8003ef2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 020e 	bic.w	r2, r2, #14
 8003eac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0201 	bic.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec2:	f003 021c 	and.w	r2, r3, #28
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	2101      	movs	r1, #1
 8003ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	4798      	blx	r3
    }
  }
  return status;
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f0a:	e14e      	b.n	80041aa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	2101      	movs	r1, #1
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	fa01 f303 	lsl.w	r3, r1, r3
 8003f18:	4013      	ands	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 8140 	beq.w	80041a4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 0303 	and.w	r3, r3, #3
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d005      	beq.n	8003f3c <HAL_GPIO_Init+0x40>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d130      	bne.n	8003f9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	2203      	movs	r2, #3
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4013      	ands	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f72:	2201      	movs	r2, #1
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	091b      	lsrs	r3, r3, #4
 8003f88:	f003 0201 	and.w	r2, r3, #1
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d017      	beq.n	8003fda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d123      	bne.n	800402e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	08da      	lsrs	r2, r3, #3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3208      	adds	r2, #8
 8003fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	220f      	movs	r2, #15
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4013      	ands	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	691a      	ldr	r2, [r3, #16]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	08da      	lsrs	r2, r3, #3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3208      	adds	r2, #8
 8004028:	6939      	ldr	r1, [r7, #16]
 800402a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	2203      	movs	r2, #3
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4013      	ands	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f003 0203 	and.w	r2, r3, #3
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 809a 	beq.w	80041a4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004070:	4b55      	ldr	r3, [pc, #340]	@ (80041c8 <HAL_GPIO_Init+0x2cc>)
 8004072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004074:	4a54      	ldr	r2, [pc, #336]	@ (80041c8 <HAL_GPIO_Init+0x2cc>)
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	6613      	str	r3, [r2, #96]	@ 0x60
 800407c:	4b52      	ldr	r3, [pc, #328]	@ (80041c8 <HAL_GPIO_Init+0x2cc>)
 800407e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	60bb      	str	r3, [r7, #8]
 8004086:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004088:	4a50      	ldr	r2, [pc, #320]	@ (80041cc <HAL_GPIO_Init+0x2d0>)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	089b      	lsrs	r3, r3, #2
 800408e:	3302      	adds	r3, #2
 8004090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004094:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	220f      	movs	r2, #15
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	43db      	mvns	r3, r3
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4013      	ands	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80040b2:	d013      	beq.n	80040dc <HAL_GPIO_Init+0x1e0>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a46      	ldr	r2, [pc, #280]	@ (80041d0 <HAL_GPIO_Init+0x2d4>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00d      	beq.n	80040d8 <HAL_GPIO_Init+0x1dc>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a45      	ldr	r2, [pc, #276]	@ (80041d4 <HAL_GPIO_Init+0x2d8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d007      	beq.n	80040d4 <HAL_GPIO_Init+0x1d8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a44      	ldr	r2, [pc, #272]	@ (80041d8 <HAL_GPIO_Init+0x2dc>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d101      	bne.n	80040d0 <HAL_GPIO_Init+0x1d4>
 80040cc:	2303      	movs	r3, #3
 80040ce:	e006      	b.n	80040de <HAL_GPIO_Init+0x1e2>
 80040d0:	2307      	movs	r3, #7
 80040d2:	e004      	b.n	80040de <HAL_GPIO_Init+0x1e2>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e002      	b.n	80040de <HAL_GPIO_Init+0x1e2>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <HAL_GPIO_Init+0x1e2>
 80040dc:	2300      	movs	r3, #0
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	f002 0203 	and.w	r2, r2, #3
 80040e4:	0092      	lsls	r2, r2, #2
 80040e6:	4093      	lsls	r3, r2
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040ee:	4937      	ldr	r1, [pc, #220]	@ (80041cc <HAL_GPIO_Init+0x2d0>)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	089b      	lsrs	r3, r3, #2
 80040f4:	3302      	adds	r3, #2
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040fc:	4b37      	ldr	r3, [pc, #220]	@ (80041dc <HAL_GPIO_Init+0x2e0>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	43db      	mvns	r3, r3
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4013      	ands	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004120:	4a2e      	ldr	r2, [pc, #184]	@ (80041dc <HAL_GPIO_Init+0x2e0>)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004126:	4b2d      	ldr	r3, [pc, #180]	@ (80041dc <HAL_GPIO_Init+0x2e0>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	43db      	mvns	r3, r3
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4013      	ands	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800414a:	4a24      	ldr	r2, [pc, #144]	@ (80041dc <HAL_GPIO_Init+0x2e0>)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004150:	4b22      	ldr	r3, [pc, #136]	@ (80041dc <HAL_GPIO_Init+0x2e0>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	43db      	mvns	r3, r3
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4013      	ands	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004174:	4a19      	ldr	r2, [pc, #100]	@ (80041dc <HAL_GPIO_Init+0x2e0>)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800417a:	4b18      	ldr	r3, [pc, #96]	@ (80041dc <HAL_GPIO_Init+0x2e0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	43db      	mvns	r3, r3
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4013      	ands	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800419e:	4a0f      	ldr	r2, [pc, #60]	@ (80041dc <HAL_GPIO_Init+0x2e0>)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	3301      	adds	r3, #1
 80041a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	fa22 f303 	lsr.w	r3, r2, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f47f aea9 	bne.w	8003f0c <HAL_GPIO_Init+0x10>
  }
}
 80041ba:	bf00      	nop
 80041bc:	bf00      	nop
 80041be:	371c      	adds	r7, #28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	40021000 	.word	0x40021000
 80041cc:	40010000 	.word	0x40010000
 80041d0:	48000400 	.word	0x48000400
 80041d4:	48000800 	.word	0x48000800
 80041d8:	48000c00 	.word	0x48000c00
 80041dc:	40010400 	.word	0x40010400

080041e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	807b      	strh	r3, [r7, #2]
 80041ec:	4613      	mov	r3, r2
 80041ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041f0:	787b      	ldrb	r3, [r7, #1]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041f6:	887a      	ldrh	r2, [r7, #2]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041fc:	e002      	b.n	8004204 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041fe:	887a      	ldrh	r2, [r7, #2]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800421a:	4b08      	ldr	r3, [pc, #32]	@ (800423c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800421c:	695a      	ldr	r2, [r3, #20]
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	4013      	ands	r3, r2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d006      	beq.n	8004234 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004226:	4a05      	ldr	r2, [pc, #20]	@ (800423c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004228:	88fb      	ldrh	r3, [r7, #6]
 800422a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800422c:	88fb      	ldrh	r3, [r7, #6]
 800422e:	4618      	mov	r0, r3
 8004230:	f7fd faf8 	bl	8001824 <HAL_GPIO_EXTI_Callback>
  }
}
 8004234:	bf00      	nop
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40010400 	.word	0x40010400

08004240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e08d      	b.n	800436e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fd fa0c 	bl	8001684 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2224      	movs	r2, #36	@ 0x24
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0201 	bic.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004290:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d107      	bne.n	80042ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042b6:	609a      	str	r2, [r3, #8]
 80042b8:	e006      	b.n	80042c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80042c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d108      	bne.n	80042e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042de:	605a      	str	r2, [r3, #4]
 80042e0:	e007      	b.n	80042f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004300:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004304:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004314:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69d9      	ldr	r1, [r3, #28]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1a      	ldr	r2, [r3, #32]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2220      	movs	r2, #32
 800435a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af02      	add	r7, sp, #8
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	607a      	str	r2, [r7, #4]
 8004382:	461a      	mov	r2, r3
 8004384:	460b      	mov	r3, r1
 8004386:	817b      	strh	r3, [r7, #10]
 8004388:	4613      	mov	r3, r2
 800438a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b20      	cmp	r3, #32
 8004396:	f040 80fd 	bne.w	8004594 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_I2C_Master_Transmit+0x30>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e0f6      	b.n	8004596 <HAL_I2C_Master_Transmit+0x21e>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043b0:	f7fe fc34 	bl	8002c1c <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	2319      	movs	r3, #25
 80043bc:	2201      	movs	r2, #1
 80043be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fa0a 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e0e1      	b.n	8004596 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2221      	movs	r2, #33	@ 0x21
 80043d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2210      	movs	r2, #16
 80043de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	893a      	ldrh	r2, [r7, #8]
 80043f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2bff      	cmp	r3, #255	@ 0xff
 8004402:	d906      	bls.n	8004412 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	22ff      	movs	r2, #255	@ 0xff
 8004408:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800440a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	e007      	b.n	8004422 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800441c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004420:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004426:	2b00      	cmp	r3, #0
 8004428:	d024      	beq.n	8004474 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442e:	781a      	ldrb	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800445e:	b2db      	uxtb	r3, r3
 8004460:	3301      	adds	r3, #1
 8004462:	b2da      	uxtb	r2, r3
 8004464:	8979      	ldrh	r1, [r7, #10]
 8004466:	4b4e      	ldr	r3, [pc, #312]	@ (80045a0 <HAL_I2C_Master_Transmit+0x228>)
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 fc05 	bl	8004c7c <I2C_TransferConfig>
 8004472:	e066      	b.n	8004542 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004478:	b2da      	uxtb	r2, r3
 800447a:	8979      	ldrh	r1, [r7, #10]
 800447c:	4b48      	ldr	r3, [pc, #288]	@ (80045a0 <HAL_I2C_Master_Transmit+0x228>)
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 fbfa 	bl	8004c7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004488:	e05b      	b.n	8004542 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	6a39      	ldr	r1, [r7, #32]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 f9fd 	bl	800488e <I2C_WaitOnTXISFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e07b      	b.n	8004596 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	781a      	ldrb	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d034      	beq.n	8004542 <HAL_I2C_Master_Transmit+0x1ca>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d130      	bne.n	8004542 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	2200      	movs	r2, #0
 80044e8:	2180      	movs	r1, #128	@ 0x80
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f976 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e04d      	b.n	8004596 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2bff      	cmp	r3, #255	@ 0xff
 8004502:	d90e      	bls.n	8004522 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	22ff      	movs	r2, #255	@ 0xff
 8004508:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800450e:	b2da      	uxtb	r2, r3
 8004510:	8979      	ldrh	r1, [r7, #10]
 8004512:	2300      	movs	r3, #0
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 fbae 	bl	8004c7c <I2C_TransferConfig>
 8004520:	e00f      	b.n	8004542 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004530:	b2da      	uxtb	r2, r3
 8004532:	8979      	ldrh	r1, [r7, #10]
 8004534:	2300      	movs	r3, #0
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 fb9d 	bl	8004c7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d19e      	bne.n	800448a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	6a39      	ldr	r1, [r7, #32]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 f9e3 	bl	800491c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e01a      	b.n	8004596 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2220      	movs	r2, #32
 8004566:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6859      	ldr	r1, [r3, #4]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4b0c      	ldr	r3, [pc, #48]	@ (80045a4 <HAL_I2C_Master_Transmit+0x22c>)
 8004574:	400b      	ands	r3, r1
 8004576:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	e000      	b.n	8004596 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004594:	2302      	movs	r3, #2
  }
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	80002000 	.word	0x80002000
 80045a4:	fe00e800 	.word	0xfe00e800

080045a8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	461a      	mov	r2, r3
 80045b4:	460b      	mov	r3, r1
 80045b6:	817b      	strh	r3, [r7, #10]
 80045b8:	4613      	mov	r3, r2
 80045ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	f040 80db 	bne.w	8004780 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_I2C_Master_Receive+0x30>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e0d4      	b.n	8004782 <HAL_I2C_Master_Receive+0x1da>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045e0:	f7fe fb1c 	bl	8002c1c <HAL_GetTick>
 80045e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	2319      	movs	r3, #25
 80045ec:	2201      	movs	r2, #1
 80045ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 f8f2 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e0bf      	b.n	8004782 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2222      	movs	r2, #34	@ 0x22
 8004606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2210      	movs	r2, #16
 800460e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	893a      	ldrh	r2, [r7, #8]
 8004622:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800462e:	b29b      	uxth	r3, r3
 8004630:	2bff      	cmp	r3, #255	@ 0xff
 8004632:	d90e      	bls.n	8004652 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2201      	movs	r2, #1
 8004638:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800463e:	b2da      	uxtb	r2, r3
 8004640:	8979      	ldrh	r1, [r7, #10]
 8004642:	4b52      	ldr	r3, [pc, #328]	@ (800478c <HAL_I2C_Master_Receive+0x1e4>)
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 fb16 	bl	8004c7c <I2C_TransferConfig>
 8004650:	e06d      	b.n	800472e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004660:	b2da      	uxtb	r2, r3
 8004662:	8979      	ldrh	r1, [r7, #10]
 8004664:	4b49      	ldr	r3, [pc, #292]	@ (800478c <HAL_I2C_Master_Receive+0x1e4>)
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 fb05 	bl	8004c7c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004672:	e05c      	b.n	800472e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	6a39      	ldr	r1, [r7, #32]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f993 	bl	80049a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e07c      	b.n	8004782 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d034      	beq.n	800472e <HAL_I2C_Master_Receive+0x186>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d130      	bne.n	800472e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	2200      	movs	r2, #0
 80046d4:	2180      	movs	r1, #128	@ 0x80
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f880 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e04d      	b.n	8004782 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2bff      	cmp	r3, #255	@ 0xff
 80046ee:	d90e      	bls.n	800470e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	22ff      	movs	r2, #255	@ 0xff
 80046f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	8979      	ldrh	r1, [r7, #10]
 80046fe:	2300      	movs	r3, #0
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 fab8 	bl	8004c7c <I2C_TransferConfig>
 800470c:	e00f      	b.n	800472e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471c:	b2da      	uxtb	r2, r3
 800471e:	8979      	ldrh	r1, [r7, #10]
 8004720:	2300      	movs	r3, #0
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 faa7 	bl	8004c7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004732:	b29b      	uxth	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d19d      	bne.n	8004674 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	6a39      	ldr	r1, [r7, #32]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f8ed 	bl	800491c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e01a      	b.n	8004782 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2220      	movs	r2, #32
 8004752:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6859      	ldr	r1, [r3, #4]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	4b0c      	ldr	r3, [pc, #48]	@ (8004790 <HAL_I2C_Master_Receive+0x1e8>)
 8004760:	400b      	ands	r3, r1
 8004762:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	e000      	b.n	8004782 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004780:	2302      	movs	r3, #2
  }
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	80002400 	.word	0x80002400
 8004790:	fe00e800 	.word	0xfe00e800

08004794 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d103      	bne.n	80047b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2200      	movs	r2, #0
 80047b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d007      	beq.n	80047d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	619a      	str	r2, [r3, #24]
  }
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ec:	e03b      	b.n	8004866 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	6839      	ldr	r1, [r7, #0]
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 f962 	bl	8004abc <I2C_IsErrorOccurred>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e041      	b.n	8004886 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004808:	d02d      	beq.n	8004866 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480a:	f7fe fa07 	bl	8002c1c <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d302      	bcc.n	8004820 <I2C_WaitOnFlagUntilTimeout+0x44>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d122      	bne.n	8004866 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	429a      	cmp	r2, r3
 800483c:	d113      	bne.n	8004866 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004842:	f043 0220 	orr.w	r2, r3, #32
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e00f      	b.n	8004886 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699a      	ldr	r2, [r3, #24]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4013      	ands	r3, r2
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	429a      	cmp	r2, r3
 8004874:	bf0c      	ite	eq
 8004876:	2301      	moveq	r3, #1
 8004878:	2300      	movne	r3, #0
 800487a:	b2db      	uxtb	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	429a      	cmp	r2, r3
 8004882:	d0b4      	beq.n	80047ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800489a:	e033      	b.n	8004904 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	68b9      	ldr	r1, [r7, #8]
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 f90b 	bl	8004abc <I2C_IsErrorOccurred>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e031      	b.n	8004914 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b6:	d025      	beq.n	8004904 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b8:	f7fe f9b0 	bl	8002c1c <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d302      	bcc.n	80048ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d11a      	bne.n	8004904 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d013      	beq.n	8004904 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e0:	f043 0220 	orr.w	r2, r3, #32
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e007      	b.n	8004914 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b02      	cmp	r3, #2
 8004910:	d1c4      	bne.n	800489c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004928:	e02f      	b.n	800498a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f8c4 	bl	8004abc <I2C_IsErrorOccurred>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e02d      	b.n	800499a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493e:	f7fe f96d 	bl	8002c1c <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	429a      	cmp	r2, r3
 800494c:	d302      	bcc.n	8004954 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d11a      	bne.n	800498a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b20      	cmp	r3, #32
 8004960:	d013      	beq.n	800498a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004966:	f043 0220 	orr.w	r2, r3, #32
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2220      	movs	r2, #32
 8004972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e007      	b.n	800499a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	f003 0320 	and.w	r3, r3, #32
 8004994:	2b20      	cmp	r3, #32
 8004996:	d1c8      	bne.n	800492a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80049b4:	e071      	b.n	8004a9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	68b9      	ldr	r1, [r7, #8]
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 f87e 	bl	8004abc <I2C_IsErrorOccurred>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	d13b      	bne.n	8004a50 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d138      	bne.n	8004a50 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	d105      	bne.n	80049f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	f003 0310 	and.w	r3, r3, #16
 8004a02:	2b10      	cmp	r3, #16
 8004a04:	d121      	bne.n	8004a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2210      	movs	r2, #16
 8004a0c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2204      	movs	r2, #4
 8004a12:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6859      	ldr	r1, [r3, #4]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b24      	ldr	r3, [pc, #144]	@ (8004ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004a28:	400b      	ands	r3, r1
 8004a2a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	75fb      	strb	r3, [r7, #23]
 8004a48:	e002      	b.n	8004a50 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004a50:	f7fe f8e4 	bl	8002c1c <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d302      	bcc.n	8004a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d119      	bne.n	8004a9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8004a66:	7dfb      	ldrb	r3, [r7, #23]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d116      	bne.n	8004a9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d00f      	beq.n	8004a9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7e:	f043 0220 	orr.w	r2, r3, #32
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d002      	beq.n	8004aae <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004aa8:	7dfb      	ldrb	r3, [r7, #23]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d083      	beq.n	80049b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	fe00e800 	.word	0xfe00e800

08004abc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08a      	sub	sp, #40	@ 0x28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d068      	beq.n	8004bba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2210      	movs	r2, #16
 8004aee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004af0:	e049      	b.n	8004b86 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d045      	beq.n	8004b86 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004afa:	f7fe f88f 	bl	8002c1c <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d302      	bcc.n	8004b10 <I2C_IsErrorOccurred+0x54>
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d13a      	bne.n	8004b86 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b32:	d121      	bne.n	8004b78 <I2C_IsErrorOccurred+0xbc>
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b3a:	d01d      	beq.n	8004b78 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004b3c:	7cfb      	ldrb	r3, [r7, #19]
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	d01a      	beq.n	8004b78 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004b52:	f7fe f863 	bl	8002c1c <HAL_GetTick>
 8004b56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b58:	e00e      	b.n	8004b78 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004b5a:	f7fe f85f 	bl	8002c1c <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b19      	cmp	r3, #25
 8004b66:	d907      	bls.n	8004b78 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	f043 0320 	orr.w	r3, r3, #32
 8004b6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004b76:	e006      	b.n	8004b86 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	f003 0320 	and.w	r3, r3, #32
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	d1e9      	bne.n	8004b5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	d003      	beq.n	8004b9c <I2C_IsErrorOccurred+0xe0>
 8004b94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0aa      	beq.n	8004af2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d103      	bne.n	8004bac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	f043 0304 	orr.w	r3, r3, #4
 8004bb2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00b      	beq.n	8004be4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004bdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00b      	beq.n	8004c06 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	f043 0308 	orr.w	r3, r3, #8
 8004bf4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004bfe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00b      	beq.n	8004c28 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	f043 0302 	orr.w	r3, r3, #2
 8004c16:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004c28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01c      	beq.n	8004c6a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f7ff fdaf 	bl	8004794 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6859      	ldr	r1, [r3, #4]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	4b0d      	ldr	r3, [pc, #52]	@ (8004c78 <I2C_IsErrorOccurred+0x1bc>)
 8004c42:	400b      	ands	r3, r1
 8004c44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004c6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3728      	adds	r7, #40	@ 0x28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	fe00e800 	.word	0xfe00e800

08004c7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	607b      	str	r3, [r7, #4]
 8004c86:	460b      	mov	r3, r1
 8004c88:	817b      	strh	r3, [r7, #10]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c8e:	897b      	ldrh	r3, [r7, #10]
 8004c90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c94:	7a7b      	ldrb	r3, [r7, #9]
 8004c96:	041b      	lsls	r3, r3, #16
 8004c98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004caa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	0d5b      	lsrs	r3, r3, #21
 8004cb6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004cba:	4b08      	ldr	r3, [pc, #32]	@ (8004cdc <I2C_TransferConfig+0x60>)
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	ea02 0103 	and.w	r1, r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004cce:	bf00      	nop
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	03ff63ff 	.word	0x03ff63ff

08004ce0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d138      	bne.n	8004d68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e032      	b.n	8004d6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2224      	movs	r2, #36	@ 0x24
 8004d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0201 	bic.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6819      	ldr	r1, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	e000      	b.n	8004d6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d68:	2302      	movs	r3, #2
  }
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b085      	sub	sp, #20
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b20      	cmp	r3, #32
 8004d8a:	d139      	bne.n	8004e00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d101      	bne.n	8004d9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d96:	2302      	movs	r3, #2
 8004d98:	e033      	b.n	8004e02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2224      	movs	r2, #36	@ 0x24
 8004da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0201 	bic.w	r2, r2, #1
 8004db8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004dc8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	021b      	lsls	r3, r3, #8
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0201 	orr.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	e000      	b.n	8004e02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e00:	2302      	movs	r3, #2
  }
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004e14:	4b04      	ldr	r3, [pc, #16]	@ (8004e28 <HAL_PWREx_GetVoltageRange+0x18>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40007000 	.word	0x40007000

08004e2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e3a:	d130      	bne.n	8004e9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e3c:	4b23      	ldr	r3, [pc, #140]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e48:	d038      	beq.n	8004ebc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e4a:	4b20      	ldr	r3, [pc, #128]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e52:	4a1e      	ldr	r2, [pc, #120]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ed0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2232      	movs	r2, #50	@ 0x32
 8004e60:	fb02 f303 	mul.w	r3, r2, r3
 8004e64:	4a1b      	ldr	r2, [pc, #108]	@ (8004ed4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	0c9b      	lsrs	r3, r3, #18
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e70:	e002      	b.n	8004e78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e78:	4b14      	ldr	r3, [pc, #80]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e84:	d102      	bne.n	8004e8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1f2      	bne.n	8004e72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e98:	d110      	bne.n	8004ebc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e00f      	b.n	8004ebe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eaa:	d007      	beq.n	8004ebc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004eac:	4b07      	ldr	r3, [pc, #28]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004eb4:	4a05      	ldr	r2, [pc, #20]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004eb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004eba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40007000 	.word	0x40007000
 8004ed0:	20000000 	.word	0x20000000
 8004ed4:	431bde83 	.word	0x431bde83

08004ed8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08a      	sub	sp, #40	@ 0x28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d102      	bne.n	8004eec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	f000 bc4f 	b.w	800578a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eec:	4b97      	ldr	r3, [pc, #604]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f003 030c 	and.w	r3, r3, #12
 8004ef4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ef6:	4b95      	ldr	r3, [pc, #596]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0310 	and.w	r3, r3, #16
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 80e6 	beq.w	80050da <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d007      	beq.n	8004f24 <HAL_RCC_OscConfig+0x4c>
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	2b0c      	cmp	r3, #12
 8004f18:	f040 808d 	bne.w	8005036 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	f040 8089 	bne.w	8005036 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f24:	4b89      	ldr	r3, [pc, #548]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d006      	beq.n	8004f3e <HAL_RCC_OscConfig+0x66>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d102      	bne.n	8004f3e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f000 bc26 	b.w	800578a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f42:	4b82      	ldr	r3, [pc, #520]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d004      	beq.n	8004f58 <HAL_RCC_OscConfig+0x80>
 8004f4e:	4b7f      	ldr	r3, [pc, #508]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f56:	e005      	b.n	8004f64 <HAL_RCC_OscConfig+0x8c>
 8004f58:	4b7c      	ldr	r3, [pc, #496]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8004f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f5e:	091b      	lsrs	r3, r3, #4
 8004f60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d224      	bcs.n	8004fb2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fdd9 	bl	8005b24 <RCC_SetFlashLatencyFromMSIRange>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f000 bc06 	b.w	800578a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f7e:	4b73      	ldr	r3, [pc, #460]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a72      	ldr	r2, [pc, #456]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8004f84:	f043 0308 	orr.w	r3, r3, #8
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	4b70      	ldr	r3, [pc, #448]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f96:	496d      	ldr	r1, [pc, #436]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f9c:	4b6b      	ldr	r3, [pc, #428]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	021b      	lsls	r3, r3, #8
 8004faa:	4968      	ldr	r1, [pc, #416]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	604b      	str	r3, [r1, #4]
 8004fb0:	e025      	b.n	8004ffe <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fb2:	4b66      	ldr	r3, [pc, #408]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a65      	ldr	r2, [pc, #404]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8004fb8:	f043 0308 	orr.w	r3, r3, #8
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	4b63      	ldr	r3, [pc, #396]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	4960      	ldr	r1, [pc, #384]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fd0:	4b5e      	ldr	r3, [pc, #376]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	021b      	lsls	r3, r3, #8
 8004fde:	495b      	ldr	r1, [pc, #364]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d109      	bne.n	8004ffe <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fd98 	bl	8005b24 <RCC_SetFlashLatencyFromMSIRange>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e3c5      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ffe:	f000 fccd 	bl	800599c <HAL_RCC_GetSysClockFreq>
 8005002:	4602      	mov	r2, r0
 8005004:	4b51      	ldr	r3, [pc, #324]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	091b      	lsrs	r3, r3, #4
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	4950      	ldr	r1, [pc, #320]	@ (8005150 <HAL_RCC_OscConfig+0x278>)
 8005010:	5ccb      	ldrb	r3, [r1, r3]
 8005012:	f003 031f 	and.w	r3, r3, #31
 8005016:	fa22 f303 	lsr.w	r3, r2, r3
 800501a:	4a4e      	ldr	r2, [pc, #312]	@ (8005154 <HAL_RCC_OscConfig+0x27c>)
 800501c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800501e:	4b4e      	ldr	r3, [pc, #312]	@ (8005158 <HAL_RCC_OscConfig+0x280>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4618      	mov	r0, r3
 8005024:	f7fd fdaa 	bl	8002b7c <HAL_InitTick>
 8005028:	4603      	mov	r3, r0
 800502a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800502c:	7dfb      	ldrb	r3, [r7, #23]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d052      	beq.n	80050d8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8005032:	7dfb      	ldrb	r3, [r7, #23]
 8005034:	e3a9      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d032      	beq.n	80050a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800503e:	4b43      	ldr	r3, [pc, #268]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a42      	ldr	r2, [pc, #264]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800504a:	f7fd fde7 	bl	8002c1c <HAL_GetTick>
 800504e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005052:	f7fd fde3 	bl	8002c1c <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e392      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005064:	4b39      	ldr	r3, [pc, #228]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0f0      	beq.n	8005052 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005070:	4b36      	ldr	r3, [pc, #216]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a35      	ldr	r2, [pc, #212]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8005076:	f043 0308 	orr.w	r3, r3, #8
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	4b33      	ldr	r3, [pc, #204]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005088:	4930      	ldr	r1, [pc, #192]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 800508a:	4313      	orrs	r3, r2
 800508c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800508e:	4b2f      	ldr	r3, [pc, #188]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	021b      	lsls	r3, r3, #8
 800509c:	492b      	ldr	r1, [pc, #172]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	604b      	str	r3, [r1, #4]
 80050a2:	e01a      	b.n	80050da <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80050a4:	4b29      	ldr	r3, [pc, #164]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a28      	ldr	r2, [pc, #160]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 80050aa:	f023 0301 	bic.w	r3, r3, #1
 80050ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050b0:	f7fd fdb4 	bl	8002c1c <HAL_GetTick>
 80050b4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050b8:	f7fd fdb0 	bl	8002c1c <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e35f      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050ca:	4b20      	ldr	r3, [pc, #128]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1f0      	bne.n	80050b8 <HAL_RCC_OscConfig+0x1e0>
 80050d6:	e000      	b.n	80050da <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d073      	beq.n	80051ce <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d005      	beq.n	80050f8 <HAL_RCC_OscConfig+0x220>
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	2b0c      	cmp	r3, #12
 80050f0:	d10e      	bne.n	8005110 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	d10b      	bne.n	8005110 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f8:	4b14      	ldr	r3, [pc, #80]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d063      	beq.n	80051cc <HAL_RCC_OscConfig+0x2f4>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d15f      	bne.n	80051cc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e33c      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005118:	d106      	bne.n	8005128 <HAL_RCC_OscConfig+0x250>
 800511a:	4b0c      	ldr	r3, [pc, #48]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a0b      	ldr	r2, [pc, #44]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8005120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	e025      	b.n	8005174 <HAL_RCC_OscConfig+0x29c>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005130:	d114      	bne.n	800515c <HAL_RCC_OscConfig+0x284>
 8005132:	4b06      	ldr	r3, [pc, #24]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a05      	ldr	r2, [pc, #20]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8005138:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	4b03      	ldr	r3, [pc, #12]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a02      	ldr	r2, [pc, #8]	@ (800514c <HAL_RCC_OscConfig+0x274>)
 8005144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	e013      	b.n	8005174 <HAL_RCC_OscConfig+0x29c>
 800514c:	40021000 	.word	0x40021000
 8005150:	0800e3b8 	.word	0x0800e3b8
 8005154:	20000000 	.word	0x20000000
 8005158:	20000004 	.word	0x20000004
 800515c:	4b8f      	ldr	r3, [pc, #572]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a8e      	ldr	r2, [pc, #568]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 8005162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	4b8c      	ldr	r3, [pc, #560]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a8b      	ldr	r2, [pc, #556]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 800516e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d013      	beq.n	80051a4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517c:	f7fd fd4e 	bl	8002c1c <HAL_GetTick>
 8005180:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005184:	f7fd fd4a 	bl	8002c1c <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b64      	cmp	r3, #100	@ 0x64
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e2f9      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005196:	4b81      	ldr	r3, [pc, #516]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0f0      	beq.n	8005184 <HAL_RCC_OscConfig+0x2ac>
 80051a2:	e014      	b.n	80051ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a4:	f7fd fd3a 	bl	8002c1c <HAL_GetTick>
 80051a8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051ac:	f7fd fd36 	bl	8002c1c <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b64      	cmp	r3, #100	@ 0x64
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e2e5      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051be:	4b77      	ldr	r3, [pc, #476]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f0      	bne.n	80051ac <HAL_RCC_OscConfig+0x2d4>
 80051ca:	e000      	b.n	80051ce <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d060      	beq.n	800529c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d005      	beq.n	80051ec <HAL_RCC_OscConfig+0x314>
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	2b0c      	cmp	r3, #12
 80051e4:	d119      	bne.n	800521a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d116      	bne.n	800521a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051ec:	4b6b      	ldr	r3, [pc, #428]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d005      	beq.n	8005204 <HAL_RCC_OscConfig+0x32c>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e2c2      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005204:	4b65      	ldr	r3, [pc, #404]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	061b      	lsls	r3, r3, #24
 8005212:	4962      	ldr	r1, [pc, #392]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 8005214:	4313      	orrs	r3, r2
 8005216:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005218:	e040      	b.n	800529c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d023      	beq.n	800526a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005222:	4b5e      	ldr	r3, [pc, #376]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a5d      	ldr	r2, [pc, #372]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 8005228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800522c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522e:	f7fd fcf5 	bl	8002c1c <HAL_GetTick>
 8005232:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005236:	f7fd fcf1 	bl	8002c1c <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e2a0      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005248:	4b54      	ldr	r3, [pc, #336]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0f0      	beq.n	8005236 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005254:	4b51      	ldr	r3, [pc, #324]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	061b      	lsls	r3, r3, #24
 8005262:	494e      	ldr	r1, [pc, #312]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 8005264:	4313      	orrs	r3, r2
 8005266:	604b      	str	r3, [r1, #4]
 8005268:	e018      	b.n	800529c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800526a:	4b4c      	ldr	r3, [pc, #304]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a4b      	ldr	r2, [pc, #300]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 8005270:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005276:	f7fd fcd1 	bl	8002c1c <HAL_GetTick>
 800527a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800527c:	e008      	b.n	8005290 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800527e:	f7fd fccd 	bl	8002c1c <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e27c      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005290:	4b42      	ldr	r3, [pc, #264]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1f0      	bne.n	800527e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 8082 	beq.w	80053ae <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d05f      	beq.n	8005372 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80052b2:	4b3a      	ldr	r3, [pc, #232]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 80052b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052b8:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f003 0310 	and.w	r3, r3, #16
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d037      	beq.n	8005338 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d006      	beq.n	80052e0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e254      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d01b      	beq.n	8005322 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80052ea:	4b2c      	ldr	r3, [pc, #176]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 80052ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052f0:	4a2a      	ldr	r2, [pc, #168]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 80052f2:	f023 0301 	bic.w	r3, r3, #1
 80052f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052fa:	f7fd fc8f 	bl	8002c1c <HAL_GetTick>
 80052fe:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005300:	e008      	b.n	8005314 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005302:	f7fd fc8b 	bl	8002c1c <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b11      	cmp	r3, #17
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e23a      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005314:	4b21      	ldr	r3, [pc, #132]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 8005316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1ef      	bne.n	8005302 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8005322:	4b1e      	ldr	r3, [pc, #120]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 8005324:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005328:	f023 0210 	bic.w	r2, r3, #16
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	491a      	ldr	r1, [pc, #104]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005338:	4b18      	ldr	r3, [pc, #96]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 800533a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800533e:	4a17      	ldr	r2, [pc, #92]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 8005340:	f043 0301 	orr.w	r3, r3, #1
 8005344:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005348:	f7fd fc68 	bl	8002c1c <HAL_GetTick>
 800534c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005350:	f7fd fc64 	bl	8002c1c <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b11      	cmp	r3, #17
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e213      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005362:	4b0e      	ldr	r3, [pc, #56]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 8005364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0ef      	beq.n	8005350 <HAL_RCC_OscConfig+0x478>
 8005370:	e01d      	b.n	80053ae <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005372:	4b0a      	ldr	r3, [pc, #40]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 8005374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005378:	4a08      	ldr	r2, [pc, #32]	@ (800539c <HAL_RCC_OscConfig+0x4c4>)
 800537a:	f023 0301 	bic.w	r3, r3, #1
 800537e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005382:	f7fd fc4b 	bl	8002c1c <HAL_GetTick>
 8005386:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005388:	e00a      	b.n	80053a0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800538a:	f7fd fc47 	bl	8002c1c <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b11      	cmp	r3, #17
 8005396:	d903      	bls.n	80053a0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e1f6      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
 800539c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053a0:	4ba9      	ldr	r3, [pc, #676]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 80053a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1ed      	bne.n	800538a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 80bd 	beq.w	8005536 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053bc:	2300      	movs	r3, #0
 80053be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80053c2:	4ba1      	ldr	r3, [pc, #644]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 80053c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10e      	bne.n	80053ec <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ce:	4b9e      	ldr	r3, [pc, #632]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 80053d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d2:	4a9d      	ldr	r2, [pc, #628]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 80053d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80053da:	4b9b      	ldr	r3, [pc, #620]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 80053dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053e6:	2301      	movs	r3, #1
 80053e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053ec:	4b97      	ldr	r3, [pc, #604]	@ (800564c <HAL_RCC_OscConfig+0x774>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d118      	bne.n	800542a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053f8:	4b94      	ldr	r3, [pc, #592]	@ (800564c <HAL_RCC_OscConfig+0x774>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a93      	ldr	r2, [pc, #588]	@ (800564c <HAL_RCC_OscConfig+0x774>)
 80053fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005402:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005404:	f7fd fc0a 	bl	8002c1c <HAL_GetTick>
 8005408:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800540c:	f7fd fc06 	bl	8002c1c <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e1b5      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800541e:	4b8b      	ldr	r3, [pc, #556]	@ (800564c <HAL_RCC_OscConfig+0x774>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f0      	beq.n	800540c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d02c      	beq.n	8005490 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8005436:	4b84      	ldr	r3, [pc, #528]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 8005438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800543c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005448:	497f      	ldr	r1, [pc, #508]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	d010      	beq.n	800547e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800545c:	4b7a      	ldr	r3, [pc, #488]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005462:	4a79      	ldr	r2, [pc, #484]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 8005464:	f043 0304 	orr.w	r3, r3, #4
 8005468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800546c:	4b76      	ldr	r3, [pc, #472]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 800546e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005472:	4a75      	ldr	r2, [pc, #468]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 8005474:	f043 0301 	orr.w	r3, r3, #1
 8005478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800547c:	e018      	b.n	80054b0 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800547e:	4b72      	ldr	r3, [pc, #456]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 8005480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005484:	4a70      	ldr	r2, [pc, #448]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 8005486:	f043 0301 	orr.w	r3, r3, #1
 800548a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800548e:	e00f      	b.n	80054b0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005490:	4b6d      	ldr	r3, [pc, #436]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 8005492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005496:	4a6c      	ldr	r2, [pc, #432]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 8005498:	f023 0301 	bic.w	r3, r3, #1
 800549c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80054a0:	4b69      	ldr	r3, [pc, #420]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a6:	4a68      	ldr	r2, [pc, #416]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 80054a8:	f023 0304 	bic.w	r3, r3, #4
 80054ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d016      	beq.n	80054e6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b8:	f7fd fbb0 	bl	8002c1c <HAL_GetTick>
 80054bc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054be:	e00a      	b.n	80054d6 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c0:	f7fd fbac 	bl	8002c1c <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e159      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054d6:	4b5c      	ldr	r3, [pc, #368]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 80054d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0ed      	beq.n	80054c0 <HAL_RCC_OscConfig+0x5e8>
 80054e4:	e01d      	b.n	8005522 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e6:	f7fd fb99 	bl	8002c1c <HAL_GetTick>
 80054ea:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054ec:	e00a      	b.n	8005504 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ee:	f7fd fb95 	bl	8002c1c <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e142      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005504:	4b50      	ldr	r3, [pc, #320]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 8005506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1ed      	bne.n	80054ee <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8005512:	4b4d      	ldr	r3, [pc, #308]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 8005514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005518:	4a4b      	ldr	r2, [pc, #300]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 800551a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800551e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005522:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005526:	2b01      	cmp	r3, #1
 8005528:	d105      	bne.n	8005536 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800552a:	4b47      	ldr	r3, [pc, #284]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 800552c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800552e:	4a46      	ldr	r2, [pc, #280]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 8005530:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005534:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0320 	and.w	r3, r3, #32
 800553e:	2b00      	cmp	r3, #0
 8005540:	d03c      	beq.n	80055bc <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005546:	2b00      	cmp	r3, #0
 8005548:	d01c      	beq.n	8005584 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800554a:	4b3f      	ldr	r3, [pc, #252]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 800554c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005550:	4a3d      	ldr	r2, [pc, #244]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555a:	f7fd fb5f 	bl	8002c1c <HAL_GetTick>
 800555e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005562:	f7fd fb5b 	bl	8002c1c <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e10a      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005574:	4b34      	ldr	r3, [pc, #208]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 8005576:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0ef      	beq.n	8005562 <HAL_RCC_OscConfig+0x68a>
 8005582:	e01b      	b.n	80055bc <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005584:	4b30      	ldr	r3, [pc, #192]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 8005586:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800558a:	4a2f      	ldr	r2, [pc, #188]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 800558c:	f023 0301 	bic.w	r3, r3, #1
 8005590:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005594:	f7fd fb42 	bl	8002c1c <HAL_GetTick>
 8005598:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800559c:	f7fd fb3e 	bl	8002c1c <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e0ed      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055ae:	4b26      	ldr	r3, [pc, #152]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 80055b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1ef      	bne.n	800559c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 80e1 	beq.w	8005788 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	f040 80b5 	bne.w	800573a <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80055d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f003 0203 	and.w	r2, r3, #3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d124      	bne.n	800562e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ee:	3b01      	subs	r3, #1
 80055f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d11b      	bne.n	800562e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005600:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005602:	429a      	cmp	r2, r3
 8005604:	d113      	bne.n	800562e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005610:	085b      	lsrs	r3, r3, #1
 8005612:	3b01      	subs	r3, #1
 8005614:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005616:	429a      	cmp	r2, r3
 8005618:	d109      	bne.n	800562e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005624:	085b      	lsrs	r3, r3, #1
 8005626:	3b01      	subs	r3, #1
 8005628:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800562a:	429a      	cmp	r2, r3
 800562c:	d05f      	beq.n	80056ee <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	2b0c      	cmp	r3, #12
 8005632:	d05a      	beq.n	80056ea <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005634:	4b04      	ldr	r3, [pc, #16]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a03      	ldr	r2, [pc, #12]	@ (8005648 <HAL_RCC_OscConfig+0x770>)
 800563a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800563e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005640:	f7fd faec 	bl	8002c1c <HAL_GetTick>
 8005644:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005646:	e00c      	b.n	8005662 <HAL_RCC_OscConfig+0x78a>
 8005648:	40021000 	.word	0x40021000
 800564c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005650:	f7fd fae4 	bl	8002c1c <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e093      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005662:	4b4c      	ldr	r3, [pc, #304]	@ (8005794 <HAL_RCC_OscConfig+0x8bc>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f0      	bne.n	8005650 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800566e:	4b49      	ldr	r3, [pc, #292]	@ (8005794 <HAL_RCC_OscConfig+0x8bc>)
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	4b49      	ldr	r3, [pc, #292]	@ (8005798 <HAL_RCC_OscConfig+0x8c0>)
 8005674:	4013      	ands	r3, r2
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800567e:	3a01      	subs	r2, #1
 8005680:	0112      	lsls	r2, r2, #4
 8005682:	4311      	orrs	r1, r2
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005688:	0212      	lsls	r2, r2, #8
 800568a:	4311      	orrs	r1, r2
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005690:	0852      	lsrs	r2, r2, #1
 8005692:	3a01      	subs	r2, #1
 8005694:	0552      	lsls	r2, r2, #21
 8005696:	4311      	orrs	r1, r2
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800569c:	0852      	lsrs	r2, r2, #1
 800569e:	3a01      	subs	r2, #1
 80056a0:	0652      	lsls	r2, r2, #25
 80056a2:	430a      	orrs	r2, r1
 80056a4:	493b      	ldr	r1, [pc, #236]	@ (8005794 <HAL_RCC_OscConfig+0x8bc>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80056aa:	4b3a      	ldr	r3, [pc, #232]	@ (8005794 <HAL_RCC_OscConfig+0x8bc>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a39      	ldr	r2, [pc, #228]	@ (8005794 <HAL_RCC_OscConfig+0x8bc>)
 80056b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056b4:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056b6:	4b37      	ldr	r3, [pc, #220]	@ (8005794 <HAL_RCC_OscConfig+0x8bc>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	4a36      	ldr	r2, [pc, #216]	@ (8005794 <HAL_RCC_OscConfig+0x8bc>)
 80056bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056c0:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056c2:	f7fd faab 	bl	8002c1c <HAL_GetTick>
 80056c6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056c8:	e008      	b.n	80056dc <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ca:	f7fd faa7 	bl	8002c1c <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e056      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056dc:	4b2d      	ldr	r3, [pc, #180]	@ (8005794 <HAL_RCC_OscConfig+0x8bc>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0f0      	beq.n	80056ca <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056e8:	e04e      	b.n	8005788 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e04d      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ee:	4b29      	ldr	r3, [pc, #164]	@ (8005794 <HAL_RCC_OscConfig+0x8bc>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d146      	bne.n	8005788 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80056fa:	4b26      	ldr	r3, [pc, #152]	@ (8005794 <HAL_RCC_OscConfig+0x8bc>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a25      	ldr	r2, [pc, #148]	@ (8005794 <HAL_RCC_OscConfig+0x8bc>)
 8005700:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005704:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005706:	4b23      	ldr	r3, [pc, #140]	@ (8005794 <HAL_RCC_OscConfig+0x8bc>)
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	4a22      	ldr	r2, [pc, #136]	@ (8005794 <HAL_RCC_OscConfig+0x8bc>)
 800570c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005710:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005712:	f7fd fa83 	bl	8002c1c <HAL_GetTick>
 8005716:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005718:	e008      	b.n	800572c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800571a:	f7fd fa7f 	bl	8002c1c <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d901      	bls.n	800572c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e02e      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800572c:	4b19      	ldr	r3, [pc, #100]	@ (8005794 <HAL_RCC_OscConfig+0x8bc>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0f0      	beq.n	800571a <HAL_RCC_OscConfig+0x842>
 8005738:	e026      	b.n	8005788 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	2b0c      	cmp	r3, #12
 800573e:	d021      	beq.n	8005784 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005740:	4b14      	ldr	r3, [pc, #80]	@ (8005794 <HAL_RCC_OscConfig+0x8bc>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a13      	ldr	r2, [pc, #76]	@ (8005794 <HAL_RCC_OscConfig+0x8bc>)
 8005746:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800574a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574c:	f7fd fa66 	bl	8002c1c <HAL_GetTick>
 8005750:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005754:	f7fd fa62 	bl	8002c1c <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e011      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005766:	4b0b      	ldr	r3, [pc, #44]	@ (8005794 <HAL_RCC_OscConfig+0x8bc>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f0      	bne.n	8005754 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8005772:	4b08      	ldr	r3, [pc, #32]	@ (8005794 <HAL_RCC_OscConfig+0x8bc>)
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	4a07      	ldr	r2, [pc, #28]	@ (8005794 <HAL_RCC_OscConfig+0x8bc>)
 8005778:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800577c:	f023 0303 	bic.w	r3, r3, #3
 8005780:	60d3      	str	r3, [r2, #12]
 8005782:	e001      	b.n	8005788 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e000      	b.n	800578a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3728      	adds	r7, #40	@ 0x28
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40021000 	.word	0x40021000
 8005798:	f99f808c 	.word	0xf99f808c

0800579c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e0e7      	b.n	8005980 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057b0:	4b75      	ldr	r3, [pc, #468]	@ (8005988 <HAL_RCC_ClockConfig+0x1ec>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0307 	and.w	r3, r3, #7
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d910      	bls.n	80057e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057be:	4b72      	ldr	r3, [pc, #456]	@ (8005988 <HAL_RCC_ClockConfig+0x1ec>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f023 0207 	bic.w	r2, r3, #7
 80057c6:	4970      	ldr	r1, [pc, #448]	@ (8005988 <HAL_RCC_ClockConfig+0x1ec>)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ce:	4b6e      	ldr	r3, [pc, #440]	@ (8005988 <HAL_RCC_ClockConfig+0x1ec>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d001      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e0cf      	b.n	8005980 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d010      	beq.n	800580e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	4b66      	ldr	r3, [pc, #408]	@ (800598c <HAL_RCC_ClockConfig+0x1f0>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d908      	bls.n	800580e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057fc:	4b63      	ldr	r3, [pc, #396]	@ (800598c <HAL_RCC_ClockConfig+0x1f0>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	4960      	ldr	r1, [pc, #384]	@ (800598c <HAL_RCC_ClockConfig+0x1f0>)
 800580a:	4313      	orrs	r3, r2
 800580c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d04c      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2b03      	cmp	r3, #3
 8005820:	d107      	bne.n	8005832 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005822:	4b5a      	ldr	r3, [pc, #360]	@ (800598c <HAL_RCC_ClockConfig+0x1f0>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d121      	bne.n	8005872 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e0a6      	b.n	8005980 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	2b02      	cmp	r3, #2
 8005838:	d107      	bne.n	800584a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800583a:	4b54      	ldr	r3, [pc, #336]	@ (800598c <HAL_RCC_ClockConfig+0x1f0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d115      	bne.n	8005872 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e09a      	b.n	8005980 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d107      	bne.n	8005862 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005852:	4b4e      	ldr	r3, [pc, #312]	@ (800598c <HAL_RCC_ClockConfig+0x1f0>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d109      	bne.n	8005872 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e08e      	b.n	8005980 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005862:	4b4a      	ldr	r3, [pc, #296]	@ (800598c <HAL_RCC_ClockConfig+0x1f0>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e086      	b.n	8005980 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005872:	4b46      	ldr	r3, [pc, #280]	@ (800598c <HAL_RCC_ClockConfig+0x1f0>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f023 0203 	bic.w	r2, r3, #3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	4943      	ldr	r1, [pc, #268]	@ (800598c <HAL_RCC_ClockConfig+0x1f0>)
 8005880:	4313      	orrs	r3, r2
 8005882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005884:	f7fd f9ca 	bl	8002c1c <HAL_GetTick>
 8005888:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800588a:	e00a      	b.n	80058a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800588c:	f7fd f9c6 	bl	8002c1c <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800589a:	4293      	cmp	r3, r2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e06e      	b.n	8005980 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058a2:	4b3a      	ldr	r3, [pc, #232]	@ (800598c <HAL_RCC_ClockConfig+0x1f0>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 020c 	and.w	r2, r3, #12
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d1eb      	bne.n	800588c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d010      	beq.n	80058e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	4b31      	ldr	r3, [pc, #196]	@ (800598c <HAL_RCC_ClockConfig+0x1f0>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d208      	bcs.n	80058e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058d0:	4b2e      	ldr	r3, [pc, #184]	@ (800598c <HAL_RCC_ClockConfig+0x1f0>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	492b      	ldr	r1, [pc, #172]	@ (800598c <HAL_RCC_ClockConfig+0x1f0>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058e2:	4b29      	ldr	r3, [pc, #164]	@ (8005988 <HAL_RCC_ClockConfig+0x1ec>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d210      	bcs.n	8005912 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f0:	4b25      	ldr	r3, [pc, #148]	@ (8005988 <HAL_RCC_ClockConfig+0x1ec>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f023 0207 	bic.w	r2, r3, #7
 80058f8:	4923      	ldr	r1, [pc, #140]	@ (8005988 <HAL_RCC_ClockConfig+0x1ec>)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005900:	4b21      	ldr	r3, [pc, #132]	@ (8005988 <HAL_RCC_ClockConfig+0x1ec>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d001      	beq.n	8005912 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e036      	b.n	8005980 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b00      	cmp	r3, #0
 800591c:	d008      	beq.n	8005930 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800591e:	4b1b      	ldr	r3, [pc, #108]	@ (800598c <HAL_RCC_ClockConfig+0x1f0>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	4918      	ldr	r1, [pc, #96]	@ (800598c <HAL_RCC_ClockConfig+0x1f0>)
 800592c:	4313      	orrs	r3, r2
 800592e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0308 	and.w	r3, r3, #8
 8005938:	2b00      	cmp	r3, #0
 800593a:	d009      	beq.n	8005950 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800593c:	4b13      	ldr	r3, [pc, #76]	@ (800598c <HAL_RCC_ClockConfig+0x1f0>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	4910      	ldr	r1, [pc, #64]	@ (800598c <HAL_RCC_ClockConfig+0x1f0>)
 800594c:	4313      	orrs	r3, r2
 800594e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005950:	f000 f824 	bl	800599c <HAL_RCC_GetSysClockFreq>
 8005954:	4602      	mov	r2, r0
 8005956:	4b0d      	ldr	r3, [pc, #52]	@ (800598c <HAL_RCC_ClockConfig+0x1f0>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	091b      	lsrs	r3, r3, #4
 800595c:	f003 030f 	and.w	r3, r3, #15
 8005960:	490b      	ldr	r1, [pc, #44]	@ (8005990 <HAL_RCC_ClockConfig+0x1f4>)
 8005962:	5ccb      	ldrb	r3, [r1, r3]
 8005964:	f003 031f 	and.w	r3, r3, #31
 8005968:	fa22 f303 	lsr.w	r3, r2, r3
 800596c:	4a09      	ldr	r2, [pc, #36]	@ (8005994 <HAL_RCC_ClockConfig+0x1f8>)
 800596e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005970:	4b09      	ldr	r3, [pc, #36]	@ (8005998 <HAL_RCC_ClockConfig+0x1fc>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4618      	mov	r0, r3
 8005976:	f7fd f901 	bl	8002b7c <HAL_InitTick>
 800597a:	4603      	mov	r3, r0
 800597c:	72fb      	strb	r3, [r7, #11]

  return status;
 800597e:	7afb      	ldrb	r3, [r7, #11]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	40022000 	.word	0x40022000
 800598c:	40021000 	.word	0x40021000
 8005990:	0800e3b8 	.word	0x0800e3b8
 8005994:	20000000 	.word	0x20000000
 8005998:	20000004 	.word	0x20000004

0800599c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800599c:	b480      	push	{r7}
 800599e:	b089      	sub	sp, #36	@ 0x24
 80059a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61fb      	str	r3, [r7, #28]
 80059a6:	2300      	movs	r3, #0
 80059a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059aa:	4b3e      	ldr	r3, [pc, #248]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 030c 	and.w	r3, r3, #12
 80059b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059b4:	4b3b      	ldr	r3, [pc, #236]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f003 0303 	and.w	r3, r3, #3
 80059bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d005      	beq.n	80059d0 <HAL_RCC_GetSysClockFreq+0x34>
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	2b0c      	cmp	r3, #12
 80059c8:	d121      	bne.n	8005a0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d11e      	bne.n	8005a0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80059d0:	4b34      	ldr	r3, [pc, #208]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0308 	and.w	r3, r3, #8
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d107      	bne.n	80059ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80059dc:	4b31      	ldr	r3, [pc, #196]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80059de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059e2:	0a1b      	lsrs	r3, r3, #8
 80059e4:	f003 030f 	and.w	r3, r3, #15
 80059e8:	61fb      	str	r3, [r7, #28]
 80059ea:	e005      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80059ec:	4b2d      	ldr	r3, [pc, #180]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	091b      	lsrs	r3, r3, #4
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80059f8:	4a2b      	ldr	r2, [pc, #172]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10d      	bne.n	8005a24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a0c:	e00a      	b.n	8005a24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	d102      	bne.n	8005a1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a14:	4b25      	ldr	r3, [pc, #148]	@ (8005aac <HAL_RCC_GetSysClockFreq+0x110>)
 8005a16:	61bb      	str	r3, [r7, #24]
 8005a18:	e004      	b.n	8005a24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	d101      	bne.n	8005a24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a20:	4b23      	ldr	r3, [pc, #140]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	2b0c      	cmp	r3, #12
 8005a28:	d134      	bne.n	8005a94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d003      	beq.n	8005a42 <HAL_RCC_GetSysClockFreq+0xa6>
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d003      	beq.n	8005a48 <HAL_RCC_GetSysClockFreq+0xac>
 8005a40:	e005      	b.n	8005a4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005a42:	4b1a      	ldr	r3, [pc, #104]	@ (8005aac <HAL_RCC_GetSysClockFreq+0x110>)
 8005a44:	617b      	str	r3, [r7, #20]
      break;
 8005a46:	e005      	b.n	8005a54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005a48:	4b19      	ldr	r3, [pc, #100]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a4a:	617b      	str	r3, [r7, #20]
      break;
 8005a4c:	e002      	b.n	8005a54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	617b      	str	r3, [r7, #20]
      break;
 8005a52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a54:	4b13      	ldr	r3, [pc, #76]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	091b      	lsrs	r3, r3, #4
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	3301      	adds	r3, #1
 8005a60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a62:	4b10      	ldr	r3, [pc, #64]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	0a1b      	lsrs	r3, r3, #8
 8005a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	fb03 f202 	mul.w	r2, r3, r2
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	0e5b      	lsrs	r3, r3, #25
 8005a80:	f003 0303 	and.w	r3, r3, #3
 8005a84:	3301      	adds	r3, #1
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005a94:	69bb      	ldr	r3, [r7, #24]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3724      	adds	r7, #36	@ 0x24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	0800e3d0 	.word	0x0800e3d0
 8005aac:	00f42400 	.word	0x00f42400
 8005ab0:	007a1200 	.word	0x007a1200

08005ab4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ab8:	4b03      	ldr	r3, [pc, #12]	@ (8005ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005aba:	681b      	ldr	r3, [r3, #0]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	20000000 	.word	0x20000000

08005acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ad0:	f7ff fff0 	bl	8005ab4 <HAL_RCC_GetHCLKFreq>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	4b06      	ldr	r3, [pc, #24]	@ (8005af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	0a1b      	lsrs	r3, r3, #8
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	4904      	ldr	r1, [pc, #16]	@ (8005af4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ae2:	5ccb      	ldrb	r3, [r1, r3]
 8005ae4:	f003 031f 	and.w	r3, r3, #31
 8005ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40021000 	.word	0x40021000
 8005af4:	0800e3c8 	.word	0x0800e3c8

08005af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005afc:	f7ff ffda 	bl	8005ab4 <HAL_RCC_GetHCLKFreq>
 8005b00:	4602      	mov	r2, r0
 8005b02:	4b06      	ldr	r3, [pc, #24]	@ (8005b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	0adb      	lsrs	r3, r3, #11
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	4904      	ldr	r1, [pc, #16]	@ (8005b20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b0e:	5ccb      	ldrb	r3, [r1, r3]
 8005b10:	f003 031f 	and.w	r3, r3, #31
 8005b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	0800e3c8 	.word	0x0800e3c8

08005b24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005b30:	4b2a      	ldr	r3, [pc, #168]	@ (8005bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005b3c:	f7ff f968 	bl	8004e10 <HAL_PWREx_GetVoltageRange>
 8005b40:	6178      	str	r0, [r7, #20]
 8005b42:	e014      	b.n	8005b6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b44:	4b25      	ldr	r3, [pc, #148]	@ (8005bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b48:	4a24      	ldr	r2, [pc, #144]	@ (8005bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b50:	4b22      	ldr	r3, [pc, #136]	@ (8005bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005b5c:	f7ff f958 	bl	8004e10 <HAL_PWREx_GetVoltageRange>
 8005b60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005b62:	4b1e      	ldr	r3, [pc, #120]	@ (8005bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b66:	4a1d      	ldr	r2, [pc, #116]	@ (8005bdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b74:	d10b      	bne.n	8005b8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b80      	cmp	r3, #128	@ 0x80
 8005b7a:	d919      	bls.n	8005bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005b80:	d902      	bls.n	8005b88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b82:	2302      	movs	r3, #2
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	e013      	b.n	8005bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b88:	2301      	movs	r3, #1
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	e010      	b.n	8005bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b80      	cmp	r3, #128	@ 0x80
 8005b92:	d902      	bls.n	8005b9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005b94:	2303      	movs	r3, #3
 8005b96:	613b      	str	r3, [r7, #16]
 8005b98:	e00a      	b.n	8005bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b80      	cmp	r3, #128	@ 0x80
 8005b9e:	d102      	bne.n	8005ba6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	613b      	str	r3, [r7, #16]
 8005ba4:	e004      	b.n	8005bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b70      	cmp	r3, #112	@ 0x70
 8005baa:	d101      	bne.n	8005bb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005bac:	2301      	movs	r3, #1
 8005bae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f023 0207 	bic.w	r2, r3, #7
 8005bb8:	4909      	ldr	r1, [pc, #36]	@ (8005be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005bc0:	4b07      	ldr	r3, [pc, #28]	@ (8005be0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d001      	beq.n	8005bd2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	40022000 	.word	0x40022000

08005be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bec:	2300      	movs	r3, #0
 8005bee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 809e 	beq.w	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c02:	2300      	movs	r3, #0
 8005c04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c06:	4b46      	ldr	r3, [pc, #280]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005c12:	2301      	movs	r3, #1
 8005c14:	e000      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005c16:	2300      	movs	r3, #0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00d      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c1c:	4b40      	ldr	r3, [pc, #256]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c20:	4a3f      	ldr	r2, [pc, #252]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c26:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c28:	4b3d      	ldr	r3, [pc, #244]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c30:	60bb      	str	r3, [r7, #8]
 8005c32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c34:	2301      	movs	r3, #1
 8005c36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c38:	4b3a      	ldr	r3, [pc, #232]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a39      	ldr	r2, [pc, #228]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c44:	f7fc ffea 	bl	8002c1c <HAL_GetTick>
 8005c48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c4a:	e009      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c4c:	f7fc ffe6 	bl	8002c1c <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d902      	bls.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	74fb      	strb	r3, [r7, #19]
        break;
 8005c5e:	e005      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c60:	4b30      	ldr	r3, [pc, #192]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0ef      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8005c6c:	7cfb      	ldrb	r3, [r7, #19]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d15a      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c72:	4b2b      	ldr	r3, [pc, #172]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d01e      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d019      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c8e:	4b24      	ldr	r3, [pc, #144]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c98:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c9a:	4b21      	ldr	r3, [pc, #132]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005ca2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ca6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005caa:	4b1d      	ldr	r3, [pc, #116]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005cb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cba:	4a19      	ldr	r2, [pc, #100]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d016      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ccc:	f7fc ffa6 	bl	8002c1c <HAL_GetTick>
 8005cd0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cd2:	e00b      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cd4:	f7fc ffa2 	bl	8002c1c <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d902      	bls.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	74fb      	strb	r3, [r7, #19]
            break;
 8005cea:	e006      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cec:	4b0c      	ldr	r3, [pc, #48]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0ec      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8005cfa:	7cfb      	ldrb	r3, [r7, #19]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10b      	bne.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d00:	4b07      	ldr	r3, [pc, #28]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d06:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0e:	4904      	ldr	r1, [pc, #16]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005d16:	e009      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d18:	7cfb      	ldrb	r3, [r7, #19]
 8005d1a:	74bb      	strb	r3, [r7, #18]
 8005d1c:	e006      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8005d1e:	bf00      	nop
 8005d20:	40021000 	.word	0x40021000
 8005d24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d28:	7cfb      	ldrb	r3, [r7, #19]
 8005d2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d2c:	7c7b      	ldrb	r3, [r7, #17]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d105      	bne.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d32:	4b6e      	ldr	r3, [pc, #440]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d36:	4a6d      	ldr	r2, [pc, #436]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005d38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d3c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d4a:	4b68      	ldr	r3, [pc, #416]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d50:	f023 0203 	bic.w	r2, r3, #3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	4964      	ldr	r1, [pc, #400]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d6c:	4b5f      	ldr	r3, [pc, #380]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d72:	f023 020c 	bic.w	r2, r3, #12
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	495c      	ldr	r1, [pc, #368]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0304 	and.w	r3, r3, #4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d8e:	4b57      	ldr	r3, [pc, #348]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d94:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	4953      	ldr	r1, [pc, #332]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0320 	and.w	r3, r3, #32
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00a      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005db0:	4b4e      	ldr	r3, [pc, #312]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	494b      	ldr	r1, [pc, #300]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dd2:	4b46      	ldr	r3, [pc, #280]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	4942      	ldr	r1, [pc, #264]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00a      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005df4:	4b3d      	ldr	r3, [pc, #244]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e02:	493a      	ldr	r1, [pc, #232]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e16:	4b35      	ldr	r3, [pc, #212]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e1c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	4931      	ldr	r1, [pc, #196]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00a      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e38:	4b2c      	ldr	r3, [pc, #176]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e3e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	4929      	ldr	r1, [pc, #164]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e5a:	4b24      	ldr	r3, [pc, #144]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	4920      	ldr	r1, [pc, #128]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d015      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8a:	4918      	ldr	r1, [pc, #96]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e9a:	d105      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e9c:	4b13      	ldr	r3, [pc, #76]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	4a12      	ldr	r2, [pc, #72]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ea6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d015      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec2:	490a      	ldr	r1, [pc, #40]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ece:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ed2:	d105      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ed4:	4b05      	ldr	r3, [pc, #20]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	4a04      	ldr	r2, [pc, #16]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005eda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ede:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005ee0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	40021000 	.word	0x40021000

08005ef0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e095      	b.n	800602e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d108      	bne.n	8005f1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f12:	d009      	beq.n	8005f28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	61da      	str	r2, [r3, #28]
 8005f1a:	e005      	b.n	8005f28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fc fa2c 	bl	80023a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f68:	d902      	bls.n	8005f70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	e002      	b.n	8005f76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005f74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005f7e:	d007      	beq.n	8005f90 <HAL_SPI_Init+0xa0>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f88:	d002      	beq.n	8005f90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd2:	ea42 0103 	orr.w	r1, r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fda:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	0c1b      	lsrs	r3, r3, #16
 8005fec:	f003 0204 	and.w	r2, r3, #4
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff4:	f003 0310 	and.w	r3, r3, #16
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ffe:	f003 0308 	and.w	r3, r3, #8
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800600c:	ea42 0103 	orr.w	r1, r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e049      	b.n	80060dc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	d106      	bne.n	8006062 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7fc fbdf 	bl	8002820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2202      	movs	r2, #2
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	3304      	adds	r3, #4
 8006072:	4619      	mov	r1, r3
 8006074:	4610      	mov	r0, r2
 8006076:	f000 fcd7 	bl	8006a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d001      	beq.n	80060fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e03b      	b.n	8006174 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68da      	ldr	r2, [r3, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 0201 	orr.w	r2, r2, #1
 8006112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a19      	ldr	r2, [pc, #100]	@ (8006180 <HAL_TIM_Base_Start_IT+0x9c>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d009      	beq.n	8006132 <HAL_TIM_Base_Start_IT+0x4e>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006126:	d004      	beq.n	8006132 <HAL_TIM_Base_Start_IT+0x4e>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a15      	ldr	r2, [pc, #84]	@ (8006184 <HAL_TIM_Base_Start_IT+0xa0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d115      	bne.n	800615e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	4b13      	ldr	r3, [pc, #76]	@ (8006188 <HAL_TIM_Base_Start_IT+0xa4>)
 800613a:	4013      	ands	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b06      	cmp	r3, #6
 8006142:	d015      	beq.n	8006170 <HAL_TIM_Base_Start_IT+0x8c>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800614a:	d011      	beq.n	8006170 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0201 	orr.w	r2, r2, #1
 800615a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615c:	e008      	b.n	8006170 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 0201 	orr.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	e000      	b.n	8006172 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006170:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	40012c00 	.word	0x40012c00
 8006184:	40014000 	.word	0x40014000
 8006188:	00010007 	.word	0x00010007

0800618c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e049      	b.n	8006232 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f841 	bl	800623a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3304      	adds	r3, #4
 80061c8:	4619      	mov	r1, r3
 80061ca:	4610      	mov	r0, r2
 80061cc:	f000 fc2c 	bl	8006a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
	...

08006250 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d109      	bne.n	8006274 <HAL_TIM_PWM_Start+0x24>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b01      	cmp	r3, #1
 800626a:	bf14      	ite	ne
 800626c:	2301      	movne	r3, #1
 800626e:	2300      	moveq	r3, #0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	e03c      	b.n	80062ee <HAL_TIM_PWM_Start+0x9e>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b04      	cmp	r3, #4
 8006278:	d109      	bne.n	800628e <HAL_TIM_PWM_Start+0x3e>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b01      	cmp	r3, #1
 8006284:	bf14      	ite	ne
 8006286:	2301      	movne	r3, #1
 8006288:	2300      	moveq	r3, #0
 800628a:	b2db      	uxtb	r3, r3
 800628c:	e02f      	b.n	80062ee <HAL_TIM_PWM_Start+0x9e>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b08      	cmp	r3, #8
 8006292:	d109      	bne.n	80062a8 <HAL_TIM_PWM_Start+0x58>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b01      	cmp	r3, #1
 800629e:	bf14      	ite	ne
 80062a0:	2301      	movne	r3, #1
 80062a2:	2300      	moveq	r3, #0
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	e022      	b.n	80062ee <HAL_TIM_PWM_Start+0x9e>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2b0c      	cmp	r3, #12
 80062ac:	d109      	bne.n	80062c2 <HAL_TIM_PWM_Start+0x72>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	bf14      	ite	ne
 80062ba:	2301      	movne	r3, #1
 80062bc:	2300      	moveq	r3, #0
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	e015      	b.n	80062ee <HAL_TIM_PWM_Start+0x9e>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b10      	cmp	r3, #16
 80062c6:	d109      	bne.n	80062dc <HAL_TIM_PWM_Start+0x8c>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	bf14      	ite	ne
 80062d4:	2301      	movne	r3, #1
 80062d6:	2300      	moveq	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	e008      	b.n	80062ee <HAL_TIM_PWM_Start+0x9e>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	bf14      	ite	ne
 80062e8:	2301      	movne	r3, #1
 80062ea:	2300      	moveq	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e07e      	b.n	80063f4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d104      	bne.n	8006306 <HAL_TIM_PWM_Start+0xb6>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006304:	e023      	b.n	800634e <HAL_TIM_PWM_Start+0xfe>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b04      	cmp	r3, #4
 800630a:	d104      	bne.n	8006316 <HAL_TIM_PWM_Start+0xc6>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006314:	e01b      	b.n	800634e <HAL_TIM_PWM_Start+0xfe>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b08      	cmp	r3, #8
 800631a:	d104      	bne.n	8006326 <HAL_TIM_PWM_Start+0xd6>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006324:	e013      	b.n	800634e <HAL_TIM_PWM_Start+0xfe>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b0c      	cmp	r3, #12
 800632a:	d104      	bne.n	8006336 <HAL_TIM_PWM_Start+0xe6>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006334:	e00b      	b.n	800634e <HAL_TIM_PWM_Start+0xfe>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b10      	cmp	r3, #16
 800633a:	d104      	bne.n	8006346 <HAL_TIM_PWM_Start+0xf6>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006344:	e003      	b.n	800634e <HAL_TIM_PWM_Start+0xfe>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2202      	movs	r2, #2
 800634a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2201      	movs	r2, #1
 8006354:	6839      	ldr	r1, [r7, #0]
 8006356:	4618      	mov	r0, r3
 8006358:	f000 feee 	bl	8007138 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a26      	ldr	r2, [pc, #152]	@ (80063fc <HAL_TIM_PWM_Start+0x1ac>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d009      	beq.n	800637a <HAL_TIM_PWM_Start+0x12a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a25      	ldr	r2, [pc, #148]	@ (8006400 <HAL_TIM_PWM_Start+0x1b0>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d004      	beq.n	800637a <HAL_TIM_PWM_Start+0x12a>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a23      	ldr	r2, [pc, #140]	@ (8006404 <HAL_TIM_PWM_Start+0x1b4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d101      	bne.n	800637e <HAL_TIM_PWM_Start+0x12e>
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <HAL_TIM_PWM_Start+0x130>
 800637e:	2300      	movs	r3, #0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d007      	beq.n	8006394 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006392:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a18      	ldr	r2, [pc, #96]	@ (80063fc <HAL_TIM_PWM_Start+0x1ac>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d009      	beq.n	80063b2 <HAL_TIM_PWM_Start+0x162>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a6:	d004      	beq.n	80063b2 <HAL_TIM_PWM_Start+0x162>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a14      	ldr	r2, [pc, #80]	@ (8006400 <HAL_TIM_PWM_Start+0x1b0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d115      	bne.n	80063de <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	4b13      	ldr	r3, [pc, #76]	@ (8006408 <HAL_TIM_PWM_Start+0x1b8>)
 80063ba:	4013      	ands	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b06      	cmp	r3, #6
 80063c2:	d015      	beq.n	80063f0 <HAL_TIM_PWM_Start+0x1a0>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063ca:	d011      	beq.n	80063f0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063dc:	e008      	b.n	80063f0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f042 0201 	orr.w	r2, r2, #1
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	e000      	b.n	80063f2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	40012c00 	.word	0x40012c00
 8006400:	40014000 	.word	0x40014000
 8006404:	40014400 	.word	0x40014400
 8006408:	00010007 	.word	0x00010007

0800640c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d020      	beq.n	8006470 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d01b      	beq.n	8006470 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f06f 0202 	mvn.w	r2, #2
 8006440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fac7 	bl	80069ea <HAL_TIM_IC_CaptureCallback>
 800645c:	e005      	b.n	800646a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fab9 	bl	80069d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 faca 	bl	80069fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f003 0304 	and.w	r3, r3, #4
 8006476:	2b00      	cmp	r3, #0
 8006478:	d020      	beq.n	80064bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d01b      	beq.n	80064bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f06f 0204 	mvn.w	r2, #4
 800648c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2202      	movs	r2, #2
 8006492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 faa1 	bl	80069ea <HAL_TIM_IC_CaptureCallback>
 80064a8:	e005      	b.n	80064b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fa93 	bl	80069d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 faa4 	bl	80069fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f003 0308 	and.w	r3, r3, #8
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d020      	beq.n	8006508 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d01b      	beq.n	8006508 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0208 	mvn.w	r2, #8
 80064d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2204      	movs	r2, #4
 80064de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fa7b 	bl	80069ea <HAL_TIM_IC_CaptureCallback>
 80064f4:	e005      	b.n	8006502 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fa6d 	bl	80069d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fa7e 	bl	80069fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f003 0310 	and.w	r3, r3, #16
 800650e:	2b00      	cmp	r3, #0
 8006510:	d020      	beq.n	8006554 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f003 0310 	and.w	r3, r3, #16
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01b      	beq.n	8006554 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f06f 0210 	mvn.w	r2, #16
 8006524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2208      	movs	r2, #8
 800652a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fa55 	bl	80069ea <HAL_TIM_IC_CaptureCallback>
 8006540:	e005      	b.n	800654e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fa47 	bl	80069d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fa58 	bl	80069fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00c      	beq.n	8006578 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	d007      	beq.n	8006578 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f06f 0201 	mvn.w	r2, #1
 8006570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fb f90e 	bl	8001794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800657e:	2b00      	cmp	r3, #0
 8006580:	d104      	bne.n	800658c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00c      	beq.n	80065a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006592:	2b00      	cmp	r3, #0
 8006594:	d007      	beq.n	80065a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800659e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fe5f 	bl	8007264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00c      	beq.n	80065ca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d007      	beq.n	80065ca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80065c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fe57 	bl	8007278 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00c      	beq.n	80065ee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d007      	beq.n	80065ee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80065e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fa12 	bl	8006a12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f003 0320 	and.w	r3, r3, #32
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00c      	beq.n	8006612 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d007      	beq.n	8006612 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f06f 0220 	mvn.w	r2, #32
 800660a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fe1f 	bl	8007250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006612:	bf00      	nop
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
	...

0800661c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006632:	2b01      	cmp	r3, #1
 8006634:	d101      	bne.n	800663a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006636:	2302      	movs	r3, #2
 8006638:	e0ff      	b.n	800683a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b14      	cmp	r3, #20
 8006646:	f200 80f0 	bhi.w	800682a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800664a:	a201      	add	r2, pc, #4	@ (adr r2, 8006650 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800664c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006650:	080066a5 	.word	0x080066a5
 8006654:	0800682b 	.word	0x0800682b
 8006658:	0800682b 	.word	0x0800682b
 800665c:	0800682b 	.word	0x0800682b
 8006660:	080066e5 	.word	0x080066e5
 8006664:	0800682b 	.word	0x0800682b
 8006668:	0800682b 	.word	0x0800682b
 800666c:	0800682b 	.word	0x0800682b
 8006670:	08006727 	.word	0x08006727
 8006674:	0800682b 	.word	0x0800682b
 8006678:	0800682b 	.word	0x0800682b
 800667c:	0800682b 	.word	0x0800682b
 8006680:	08006767 	.word	0x08006767
 8006684:	0800682b 	.word	0x0800682b
 8006688:	0800682b 	.word	0x0800682b
 800668c:	0800682b 	.word	0x0800682b
 8006690:	080067a9 	.word	0x080067a9
 8006694:	0800682b 	.word	0x0800682b
 8006698:	0800682b 	.word	0x0800682b
 800669c:	0800682b 	.word	0x0800682b
 80066a0:	080067e9 	.word	0x080067e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68b9      	ldr	r1, [r7, #8]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fa2c 	bl	8006b08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699a      	ldr	r2, [r3, #24]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 0208 	orr.w	r2, r2, #8
 80066be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699a      	ldr	r2, [r3, #24]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0204 	bic.w	r2, r2, #4
 80066ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6999      	ldr	r1, [r3, #24]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	691a      	ldr	r2, [r3, #16]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	619a      	str	r2, [r3, #24]
      break;
 80066e2:	e0a5      	b.n	8006830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68b9      	ldr	r1, [r7, #8]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fa88 	bl	8006c00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699a      	ldr	r2, [r3, #24]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699a      	ldr	r2, [r3, #24]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800670e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6999      	ldr	r1, [r3, #24]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	021a      	lsls	r2, r3, #8
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	619a      	str	r2, [r3, #24]
      break;
 8006724:	e084      	b.n	8006830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	4618      	mov	r0, r3
 800672e:	f000 fae1 	bl	8006cf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	69da      	ldr	r2, [r3, #28]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0208 	orr.w	r2, r2, #8
 8006740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69da      	ldr	r2, [r3, #28]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 0204 	bic.w	r2, r2, #4
 8006750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69d9      	ldr	r1, [r3, #28]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	61da      	str	r2, [r3, #28]
      break;
 8006764:	e064      	b.n	8006830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68b9      	ldr	r1, [r7, #8]
 800676c:	4618      	mov	r0, r3
 800676e:	f000 fb39 	bl	8006de4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	69da      	ldr	r2, [r3, #28]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	69da      	ldr	r2, [r3, #28]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	69d9      	ldr	r1, [r3, #28]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	021a      	lsls	r2, r3, #8
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	61da      	str	r2, [r3, #28]
      break;
 80067a6:	e043      	b.n	8006830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68b9      	ldr	r1, [r7, #8]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 fb76 	bl	8006ea0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0208 	orr.w	r2, r2, #8
 80067c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 0204 	bic.w	r2, r2, #4
 80067d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	691a      	ldr	r2, [r3, #16]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80067e6:	e023      	b.n	8006830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68b9      	ldr	r1, [r7, #8]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fbae 	bl	8006f50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006802:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006812:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	021a      	lsls	r2, r3, #8
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006828:	e002      	b.n	8006830 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	75fb      	strb	r3, [r7, #23]
      break;
 800682e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006838:	7dfb      	ldrb	r3, [r7, #23]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop

08006844 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006858:	2b01      	cmp	r3, #1
 800685a:	d101      	bne.n	8006860 <HAL_TIM_ConfigClockSource+0x1c>
 800685c:	2302      	movs	r3, #2
 800685e:	e0b6      	b.n	80069ce <HAL_TIM_ConfigClockSource+0x18a>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800687e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800688a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800689c:	d03e      	beq.n	800691c <HAL_TIM_ConfigClockSource+0xd8>
 800689e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068a2:	f200 8087 	bhi.w	80069b4 <HAL_TIM_ConfigClockSource+0x170>
 80068a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068aa:	f000 8086 	beq.w	80069ba <HAL_TIM_ConfigClockSource+0x176>
 80068ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068b2:	d87f      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x170>
 80068b4:	2b70      	cmp	r3, #112	@ 0x70
 80068b6:	d01a      	beq.n	80068ee <HAL_TIM_ConfigClockSource+0xaa>
 80068b8:	2b70      	cmp	r3, #112	@ 0x70
 80068ba:	d87b      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x170>
 80068bc:	2b60      	cmp	r3, #96	@ 0x60
 80068be:	d050      	beq.n	8006962 <HAL_TIM_ConfigClockSource+0x11e>
 80068c0:	2b60      	cmp	r3, #96	@ 0x60
 80068c2:	d877      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x170>
 80068c4:	2b50      	cmp	r3, #80	@ 0x50
 80068c6:	d03c      	beq.n	8006942 <HAL_TIM_ConfigClockSource+0xfe>
 80068c8:	2b50      	cmp	r3, #80	@ 0x50
 80068ca:	d873      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x170>
 80068cc:	2b40      	cmp	r3, #64	@ 0x40
 80068ce:	d058      	beq.n	8006982 <HAL_TIM_ConfigClockSource+0x13e>
 80068d0:	2b40      	cmp	r3, #64	@ 0x40
 80068d2:	d86f      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x170>
 80068d4:	2b30      	cmp	r3, #48	@ 0x30
 80068d6:	d064      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x15e>
 80068d8:	2b30      	cmp	r3, #48	@ 0x30
 80068da:	d86b      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x170>
 80068dc:	2b20      	cmp	r3, #32
 80068de:	d060      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x15e>
 80068e0:	2b20      	cmp	r3, #32
 80068e2:	d867      	bhi.n	80069b4 <HAL_TIM_ConfigClockSource+0x170>
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d05c      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x15e>
 80068e8:	2b10      	cmp	r3, #16
 80068ea:	d05a      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x15e>
 80068ec:	e062      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068fe:	f000 fbfb 	bl	80070f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006910:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	609a      	str	r2, [r3, #8]
      break;
 800691a:	e04f      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800692c:	f000 fbe4 	bl	80070f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689a      	ldr	r2, [r3, #8]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800693e:	609a      	str	r2, [r3, #8]
      break;
 8006940:	e03c      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800694e:	461a      	mov	r2, r3
 8006950:	f000 fb58 	bl	8007004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2150      	movs	r1, #80	@ 0x50
 800695a:	4618      	mov	r0, r3
 800695c:	f000 fbb1 	bl	80070c2 <TIM_ITRx_SetConfig>
      break;
 8006960:	e02c      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800696e:	461a      	mov	r2, r3
 8006970:	f000 fb77 	bl	8007062 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2160      	movs	r1, #96	@ 0x60
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fba1 	bl	80070c2 <TIM_ITRx_SetConfig>
      break;
 8006980:	e01c      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800698e:	461a      	mov	r2, r3
 8006990:	f000 fb38 	bl	8007004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2140      	movs	r1, #64	@ 0x40
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fb91 	bl	80070c2 <TIM_ITRx_SetConfig>
      break;
 80069a0:	e00c      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4619      	mov	r1, r3
 80069ac:	4610      	mov	r0, r2
 80069ae:	f000 fb88 	bl	80070c2 <TIM_ITRx_SetConfig>
      break;
 80069b2:	e003      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	73fb      	strb	r3, [r7, #15]
      break;
 80069b8:	e000      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80069ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b083      	sub	sp, #12
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069f2:	bf00      	nop
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a1a:	bf00      	nop
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
	...

08006a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a30      	ldr	r2, [pc, #192]	@ (8006afc <TIM_Base_SetConfig+0xd4>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d003      	beq.n	8006a48 <TIM_Base_SetConfig+0x20>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a46:	d108      	bne.n	8006a5a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a27      	ldr	r2, [pc, #156]	@ (8006afc <TIM_Base_SetConfig+0xd4>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d00b      	beq.n	8006a7a <TIM_Base_SetConfig+0x52>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a68:	d007      	beq.n	8006a7a <TIM_Base_SetConfig+0x52>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a24      	ldr	r2, [pc, #144]	@ (8006b00 <TIM_Base_SetConfig+0xd8>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d003      	beq.n	8006a7a <TIM_Base_SetConfig+0x52>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a23      	ldr	r2, [pc, #140]	@ (8006b04 <TIM_Base_SetConfig+0xdc>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d108      	bne.n	8006a8c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a12      	ldr	r2, [pc, #72]	@ (8006afc <TIM_Base_SetConfig+0xd4>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d007      	beq.n	8006ac8 <TIM_Base_SetConfig+0xa0>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a11      	ldr	r2, [pc, #68]	@ (8006b00 <TIM_Base_SetConfig+0xd8>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d003      	beq.n	8006ac8 <TIM_Base_SetConfig+0xa0>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a10      	ldr	r2, [pc, #64]	@ (8006b04 <TIM_Base_SetConfig+0xdc>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d103      	bne.n	8006ad0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	691a      	ldr	r2, [r3, #16]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d105      	bne.n	8006aee <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	f023 0201 	bic.w	r2, r3, #1
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	611a      	str	r2, [r3, #16]
  }
}
 8006aee:	bf00      	nop
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	40012c00 	.word	0x40012c00
 8006b00:	40014000 	.word	0x40014000
 8006b04:	40014400 	.word	0x40014400

08006b08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	f023 0201 	bic.w	r2, r3, #1
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0303 	bic.w	r3, r3, #3
 8006b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f023 0302 	bic.w	r3, r3, #2
 8006b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a24      	ldr	r2, [pc, #144]	@ (8006bf4 <TIM_OC1_SetConfig+0xec>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d007      	beq.n	8006b78 <TIM_OC1_SetConfig+0x70>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a23      	ldr	r2, [pc, #140]	@ (8006bf8 <TIM_OC1_SetConfig+0xf0>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d003      	beq.n	8006b78 <TIM_OC1_SetConfig+0x70>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a22      	ldr	r2, [pc, #136]	@ (8006bfc <TIM_OC1_SetConfig+0xf4>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d10c      	bne.n	8006b92 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f023 0308 	bic.w	r3, r3, #8
 8006b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f023 0304 	bic.w	r3, r3, #4
 8006b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a17      	ldr	r2, [pc, #92]	@ (8006bf4 <TIM_OC1_SetConfig+0xec>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d007      	beq.n	8006baa <TIM_OC1_SetConfig+0xa2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a16      	ldr	r2, [pc, #88]	@ (8006bf8 <TIM_OC1_SetConfig+0xf0>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d003      	beq.n	8006baa <TIM_OC1_SetConfig+0xa2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a15      	ldr	r2, [pc, #84]	@ (8006bfc <TIM_OC1_SetConfig+0xf4>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d111      	bne.n	8006bce <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	621a      	str	r2, [r3, #32]
}
 8006be8:	bf00      	nop
 8006bea:	371c      	adds	r7, #28
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	40012c00 	.word	0x40012c00
 8006bf8:	40014000 	.word	0x40014000
 8006bfc:	40014400 	.word	0x40014400

08006c00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	f023 0210 	bic.w	r2, r3, #16
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	021b      	lsls	r3, r3, #8
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f023 0320 	bic.w	r3, r3, #32
 8006c4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	011b      	lsls	r3, r3, #4
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a22      	ldr	r2, [pc, #136]	@ (8006ce8 <TIM_OC2_SetConfig+0xe8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d10d      	bne.n	8006c80 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	011b      	lsls	r3, r3, #4
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a19      	ldr	r2, [pc, #100]	@ (8006ce8 <TIM_OC2_SetConfig+0xe8>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d007      	beq.n	8006c98 <TIM_OC2_SetConfig+0x98>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a18      	ldr	r2, [pc, #96]	@ (8006cec <TIM_OC2_SetConfig+0xec>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d003      	beq.n	8006c98 <TIM_OC2_SetConfig+0x98>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a17      	ldr	r2, [pc, #92]	@ (8006cf0 <TIM_OC2_SetConfig+0xf0>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d113      	bne.n	8006cc0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	621a      	str	r2, [r3, #32]
}
 8006cda:	bf00      	nop
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	40012c00 	.word	0x40012c00
 8006cec:	40014000 	.word	0x40014000
 8006cf0:	40014400 	.word	0x40014400

08006cf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f023 0303 	bic.w	r3, r3, #3
 8006d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	021b      	lsls	r3, r3, #8
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a21      	ldr	r2, [pc, #132]	@ (8006dd8 <TIM_OC3_SetConfig+0xe4>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d10d      	bne.n	8006d72 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	021b      	lsls	r3, r3, #8
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a18      	ldr	r2, [pc, #96]	@ (8006dd8 <TIM_OC3_SetConfig+0xe4>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d007      	beq.n	8006d8a <TIM_OC3_SetConfig+0x96>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a17      	ldr	r2, [pc, #92]	@ (8006ddc <TIM_OC3_SetConfig+0xe8>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d003      	beq.n	8006d8a <TIM_OC3_SetConfig+0x96>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a16      	ldr	r2, [pc, #88]	@ (8006de0 <TIM_OC3_SetConfig+0xec>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d113      	bne.n	8006db2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	011b      	lsls	r3, r3, #4
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	011b      	lsls	r3, r3, #4
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	621a      	str	r2, [r3, #32]
}
 8006dcc:	bf00      	nop
 8006dce:	371c      	adds	r7, #28
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	40012c00 	.word	0x40012c00
 8006ddc:	40014000 	.word	0x40014000
 8006de0:	40014400 	.word	0x40014400

08006de4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	021b      	lsls	r3, r3, #8
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	031b      	lsls	r3, r3, #12
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a14      	ldr	r2, [pc, #80]	@ (8006e94 <TIM_OC4_SetConfig+0xb0>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d007      	beq.n	8006e58 <TIM_OC4_SetConfig+0x74>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a13      	ldr	r2, [pc, #76]	@ (8006e98 <TIM_OC4_SetConfig+0xb4>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d003      	beq.n	8006e58 <TIM_OC4_SetConfig+0x74>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a12      	ldr	r2, [pc, #72]	@ (8006e9c <TIM_OC4_SetConfig+0xb8>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d109      	bne.n	8006e6c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	019b      	lsls	r3, r3, #6
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	621a      	str	r2, [r3, #32]
}
 8006e86:	bf00      	nop
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	40012c00 	.word	0x40012c00
 8006e98:	40014000 	.word	0x40014000
 8006e9c:	40014400 	.word	0x40014400

08006ea0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006ee4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	041b      	lsls	r3, r3, #16
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a13      	ldr	r2, [pc, #76]	@ (8006f44 <TIM_OC5_SetConfig+0xa4>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d007      	beq.n	8006f0a <TIM_OC5_SetConfig+0x6a>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a12      	ldr	r2, [pc, #72]	@ (8006f48 <TIM_OC5_SetConfig+0xa8>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d003      	beq.n	8006f0a <TIM_OC5_SetConfig+0x6a>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a11      	ldr	r2, [pc, #68]	@ (8006f4c <TIM_OC5_SetConfig+0xac>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d109      	bne.n	8006f1e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	021b      	lsls	r3, r3, #8
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	621a      	str	r2, [r3, #32]
}
 8006f38:	bf00      	nop
 8006f3a:	371c      	adds	r7, #28
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	40012c00 	.word	0x40012c00
 8006f48:	40014000 	.word	0x40014000
 8006f4c:	40014400 	.word	0x40014400

08006f50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	021b      	lsls	r3, r3, #8
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	051b      	lsls	r3, r3, #20
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a14      	ldr	r2, [pc, #80]	@ (8006ff8 <TIM_OC6_SetConfig+0xa8>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d007      	beq.n	8006fbc <TIM_OC6_SetConfig+0x6c>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a13      	ldr	r2, [pc, #76]	@ (8006ffc <TIM_OC6_SetConfig+0xac>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d003      	beq.n	8006fbc <TIM_OC6_SetConfig+0x6c>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a12      	ldr	r2, [pc, #72]	@ (8007000 <TIM_OC6_SetConfig+0xb0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d109      	bne.n	8006fd0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	029b      	lsls	r3, r3, #10
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	621a      	str	r2, [r3, #32]
}
 8006fea:	bf00      	nop
 8006fec:	371c      	adds	r7, #28
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	40012c00 	.word	0x40012c00
 8006ffc:	40014000 	.word	0x40014000
 8007000:	40014400 	.word	0x40014400

08007004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	f023 0201 	bic.w	r2, r3, #1
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800702e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	011b      	lsls	r3, r3, #4
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	4313      	orrs	r3, r2
 8007038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f023 030a 	bic.w	r3, r3, #10
 8007040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	621a      	str	r2, [r3, #32]
}
 8007056:	bf00      	nop
 8007058:	371c      	adds	r7, #28
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007062:	b480      	push	{r7}
 8007064:	b087      	sub	sp, #28
 8007066:	af00      	add	r7, sp, #0
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	f023 0210 	bic.w	r2, r3, #16
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800708c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	031b      	lsls	r3, r3, #12
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	4313      	orrs	r3, r2
 8007096:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800709e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	621a      	str	r2, [r3, #32]
}
 80070b6:	bf00      	nop
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b085      	sub	sp, #20
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4313      	orrs	r3, r2
 80070e0:	f043 0307 	orr.w	r3, r3, #7
 80070e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	609a      	str	r2, [r3, #8]
}
 80070ec:	bf00      	nop
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007112:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	021a      	lsls	r2, r3, #8
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	431a      	orrs	r2, r3
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4313      	orrs	r3, r2
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	4313      	orrs	r3, r2
 8007124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	609a      	str	r2, [r3, #8]
}
 800712c:	bf00      	nop
 800712e:	371c      	adds	r7, #28
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f003 031f 	and.w	r3, r3, #31
 800714a:	2201      	movs	r2, #1
 800714c:	fa02 f303 	lsl.w	r3, r2, r3
 8007150:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6a1a      	ldr	r2, [r3, #32]
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	43db      	mvns	r3, r3
 800715a:	401a      	ands	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6a1a      	ldr	r2, [r3, #32]
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f003 031f 	and.w	r3, r3, #31
 800716a:	6879      	ldr	r1, [r7, #4]
 800716c:	fa01 f303 	lsl.w	r3, r1, r3
 8007170:	431a      	orrs	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	621a      	str	r2, [r3, #32]
}
 8007176:	bf00      	nop
 8007178:	371c      	adds	r7, #28
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
	...

08007184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007194:	2b01      	cmp	r3, #1
 8007196:	d101      	bne.n	800719c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007198:	2302      	movs	r3, #2
 800719a:	e04f      	b.n	800723c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a21      	ldr	r2, [pc, #132]	@ (8007248 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d108      	bne.n	80071d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80071cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a14      	ldr	r2, [pc, #80]	@ (8007248 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d009      	beq.n	8007210 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007204:	d004      	beq.n	8007210 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a10      	ldr	r2, [pc, #64]	@ (800724c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d10c      	bne.n	800722a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007216:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	4313      	orrs	r3, r2
 8007220:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	40012c00 	.word	0x40012c00
 800724c:	40014000 	.word	0x40014000

08007250 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e040      	b.n	8007320 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d106      	bne.n	80072b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7fb fb82 	bl	80029b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2224      	movs	r2, #36	@ 0x24
 80072b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f022 0201 	bic.w	r2, r2, #1
 80072c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 ffa4 	bl	8008220 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fd47 	bl	8007d6c <UART_SetConfig>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e01b      	b.n	8007320 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689a      	ldr	r2, [r3, #8]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007306:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f042 0201 	orr.w	r2, r2, #1
 8007316:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f001 f823 	bl	8008364 <UART_CheckIdleState>
 800731e:	4603      	mov	r3, r0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b08a      	sub	sp, #40	@ 0x28
 800732c:	af02      	add	r7, sp, #8
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	603b      	str	r3, [r7, #0]
 8007334:	4613      	mov	r3, r2
 8007336:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800733c:	2b20      	cmp	r3, #32
 800733e:	d177      	bne.n	8007430 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <HAL_UART_Transmit+0x24>
 8007346:	88fb      	ldrh	r3, [r7, #6]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e070      	b.n	8007432 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2221      	movs	r2, #33	@ 0x21
 800735c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800735e:	f7fb fc5d 	bl	8002c1c <HAL_GetTick>
 8007362:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	88fa      	ldrh	r2, [r7, #6]
 8007368:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	88fa      	ldrh	r2, [r7, #6]
 8007370:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800737c:	d108      	bne.n	8007390 <HAL_UART_Transmit+0x68>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d104      	bne.n	8007390 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007386:	2300      	movs	r3, #0
 8007388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	61bb      	str	r3, [r7, #24]
 800738e:	e003      	b.n	8007398 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007394:	2300      	movs	r3, #0
 8007396:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007398:	e02f      	b.n	80073fa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2200      	movs	r2, #0
 80073a2:	2180      	movs	r1, #128	@ 0x80
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f001 f885 	bl	80084b4 <UART_WaitOnFlagUntilTimeout>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d004      	beq.n	80073ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2220      	movs	r2, #32
 80073b4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e03b      	b.n	8007432 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10b      	bne.n	80073d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	881a      	ldrh	r2, [r3, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073cc:	b292      	uxth	r2, r2
 80073ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	3302      	adds	r3, #2
 80073d4:	61bb      	str	r3, [r7, #24]
 80073d6:	e007      	b.n	80073e8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	781a      	ldrb	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	3301      	adds	r3, #1
 80073e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007400:	b29b      	uxth	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1c9      	bne.n	800739a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2200      	movs	r2, #0
 800740e:	2140      	movs	r1, #64	@ 0x40
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f001 f84f 	bl	80084b4 <UART_WaitOnFlagUntilTimeout>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d004      	beq.n	8007426 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2220      	movs	r2, #32
 8007420:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e005      	b.n	8007432 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2220      	movs	r2, #32
 800742a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	e000      	b.n	8007432 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007430:	2302      	movs	r3, #2
  }
}
 8007432:	4618      	mov	r0, r3
 8007434:	3720      	adds	r7, #32
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b08a      	sub	sp, #40	@ 0x28
 800743e:	af02      	add	r7, sp, #8
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	60b9      	str	r1, [r7, #8]
 8007444:	603b      	str	r3, [r7, #0]
 8007446:	4613      	mov	r3, r2
 8007448:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007450:	2b20      	cmp	r3, #32
 8007452:	f040 80b6 	bne.w	80075c2 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <HAL_UART_Receive+0x28>
 800745c:	88fb      	ldrh	r3, [r7, #6]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e0ae      	b.n	80075c4 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2222      	movs	r2, #34	@ 0x22
 8007472:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800747c:	f7fb fbce 	bl	8002c1c <HAL_GetTick>
 8007480:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	88fa      	ldrh	r2, [r7, #6]
 8007486:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	88fa      	ldrh	r2, [r7, #6]
 800748e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800749a:	d10e      	bne.n	80074ba <HAL_UART_Receive+0x80>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d105      	bne.n	80074b0 <HAL_UART_Receive+0x76>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80074aa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074ae:	e02d      	b.n	800750c <HAL_UART_Receive+0xd2>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	22ff      	movs	r2, #255	@ 0xff
 80074b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074b8:	e028      	b.n	800750c <HAL_UART_Receive+0xd2>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10d      	bne.n	80074de <HAL_UART_Receive+0xa4>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d104      	bne.n	80074d4 <HAL_UART_Receive+0x9a>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	22ff      	movs	r2, #255	@ 0xff
 80074ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074d2:	e01b      	b.n	800750c <HAL_UART_Receive+0xd2>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	227f      	movs	r2, #127	@ 0x7f
 80074d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074dc:	e016      	b.n	800750c <HAL_UART_Receive+0xd2>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074e6:	d10d      	bne.n	8007504 <HAL_UART_Receive+0xca>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d104      	bne.n	80074fa <HAL_UART_Receive+0xc0>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	227f      	movs	r2, #127	@ 0x7f
 80074f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074f8:	e008      	b.n	800750c <HAL_UART_Receive+0xd2>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	223f      	movs	r2, #63	@ 0x3f
 80074fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007502:	e003      	b.n	800750c <HAL_UART_Receive+0xd2>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007512:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800751c:	d108      	bne.n	8007530 <HAL_UART_Receive+0xf6>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d104      	bne.n	8007530 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007526:	2300      	movs	r3, #0
 8007528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	61bb      	str	r3, [r7, #24]
 800752e:	e003      	b.n	8007538 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007534:	2300      	movs	r3, #0
 8007536:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007538:	e037      	b.n	80075aa <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2200      	movs	r2, #0
 8007542:	2120      	movs	r1, #32
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 ffb5 	bl	80084b4 <UART_WaitOnFlagUntilTimeout>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d005      	beq.n	800755c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2220      	movs	r2, #32
 8007554:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e033      	b.n	80075c4 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10c      	bne.n	800757c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007568:	b29a      	uxth	r2, r3
 800756a:	8a7b      	ldrh	r3, [r7, #18]
 800756c:	4013      	ands	r3, r2
 800756e:	b29a      	uxth	r2, r3
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	3302      	adds	r3, #2
 8007578:	61bb      	str	r3, [r7, #24]
 800757a:	e00d      	b.n	8007598 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007582:	b29b      	uxth	r3, r3
 8007584:	b2da      	uxtb	r2, r3
 8007586:	8a7b      	ldrh	r3, [r7, #18]
 8007588:	b2db      	uxtb	r3, r3
 800758a:	4013      	ands	r3, r2
 800758c:	b2da      	uxtb	r2, r3
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	3301      	adds	r3, #1
 8007596:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800759e:	b29b      	uxth	r3, r3
 80075a0:	3b01      	subs	r3, #1
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1c1      	bne.n	800753a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2220      	movs	r2, #32
 80075ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	e000      	b.n	80075c4 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80075c2:	2302      	movs	r3, #2
  }
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3720      	adds	r7, #32
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b08b      	sub	sp, #44	@ 0x2c
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	4613      	mov	r3, r2
 80075d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075de:	2b20      	cmp	r3, #32
 80075e0:	d147      	bne.n	8007672 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <HAL_UART_Transmit_IT+0x22>
 80075e8:	88fb      	ldrh	r3, [r7, #6]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e040      	b.n	8007674 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	88fa      	ldrh	r2, [r7, #6]
 80075fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	88fa      	ldrh	r2, [r7, #6]
 8007604:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2221      	movs	r2, #33	@ 0x21
 800761a:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007624:	d107      	bne.n	8007636 <HAL_UART_Transmit_IT+0x6a>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d103      	bne.n	8007636 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	4a13      	ldr	r2, [pc, #76]	@ (8007680 <HAL_UART_Transmit_IT+0xb4>)
 8007632:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007634:	e002      	b.n	800763c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	4a12      	ldr	r2, [pc, #72]	@ (8007684 <HAL_UART_Transmit_IT+0xb8>)
 800763a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	e853 3f00 	ldrex	r3, [r3]
 8007648:	613b      	str	r3, [r7, #16]
   return(result);
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007650:	627b      	str	r3, [r7, #36]	@ 0x24
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765a:	623b      	str	r3, [r7, #32]
 800765c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765e:	69f9      	ldr	r1, [r7, #28]
 8007660:	6a3a      	ldr	r2, [r7, #32]
 8007662:	e841 2300 	strex	r3, r2, [r1]
 8007666:	61bb      	str	r3, [r7, #24]
   return(result);
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1e6      	bne.n	800763c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	e000      	b.n	8007674 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007672:	2302      	movs	r3, #2
  }
}
 8007674:	4618      	mov	r0, r3
 8007676:	372c      	adds	r7, #44	@ 0x2c
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	080088c7 	.word	0x080088c7
 8007684:	08008811 	.word	0x08008811

08007688 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08a      	sub	sp, #40	@ 0x28
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	4613      	mov	r3, r2
 8007694:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800769c:	2b20      	cmp	r3, #32
 800769e:	d137      	bne.n	8007710 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d002      	beq.n	80076ac <HAL_UART_Receive_IT+0x24>
 80076a6:	88fb      	ldrh	r3, [r7, #6]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e030      	b.n	8007712 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a18      	ldr	r2, [pc, #96]	@ (800771c <HAL_UART_Receive_IT+0x94>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d01f      	beq.n	8007700 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d018      	beq.n	8007700 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	e853 3f00 	ldrex	r3, [r3]
 80076da:	613b      	str	r3, [r7, #16]
   return(result);
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80076e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	461a      	mov	r2, r3
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	623b      	str	r3, [r7, #32]
 80076ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f0:	69f9      	ldr	r1, [r7, #28]
 80076f2:	6a3a      	ldr	r2, [r7, #32]
 80076f4:	e841 2300 	strex	r3, r2, [r1]
 80076f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1e6      	bne.n	80076ce <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007700:	88fb      	ldrh	r3, [r7, #6]
 8007702:	461a      	mov	r2, r3
 8007704:	68b9      	ldr	r1, [r7, #8]
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 ff42 	bl	8008590 <UART_Start_Receive_IT>
 800770c:	4603      	mov	r3, r0
 800770e:	e000      	b.n	8007712 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007710:	2302      	movs	r3, #2
  }
}
 8007712:	4618      	mov	r0, r3
 8007714:	3728      	adds	r7, #40	@ 0x28
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	40008000 	.word	0x40008000

08007720 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b0ba      	sub	sp, #232	@ 0xe8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	69db      	ldr	r3, [r3, #28]
 800772e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007746:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800774a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800774e:	4013      	ands	r3, r2
 8007750:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007754:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007758:	2b00      	cmp	r3, #0
 800775a:	d115      	bne.n	8007788 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800775c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007760:	f003 0320 	and.w	r3, r3, #32
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00f      	beq.n	8007788 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800776c:	f003 0320 	and.w	r3, r3, #32
 8007770:	2b00      	cmp	r3, #0
 8007772:	d009      	beq.n	8007788 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 82ca 	beq.w	8007d12 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	4798      	blx	r3
      }
      return;
 8007786:	e2c4      	b.n	8007d12 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007788:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 8117 	beq.w	80079c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	2b00      	cmp	r3, #0
 800779c:	d106      	bne.n	80077ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800779e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80077a2:	4b85      	ldr	r3, [pc, #532]	@ (80079b8 <HAL_UART_IRQHandler+0x298>)
 80077a4:	4013      	ands	r3, r2
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 810a 	beq.w	80079c0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d011      	beq.n	80077dc <HAL_UART_IRQHandler+0xbc>
 80077b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00b      	beq.n	80077dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2201      	movs	r2, #1
 80077ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077d2:	f043 0201 	orr.w	r2, r3, #1
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d011      	beq.n	800780c <HAL_UART_IRQHandler+0xec>
 80077e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00b      	beq.n	800780c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2202      	movs	r2, #2
 80077fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007802:	f043 0204 	orr.w	r2, r3, #4
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800780c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b00      	cmp	r3, #0
 8007816:	d011      	beq.n	800783c <HAL_UART_IRQHandler+0x11c>
 8007818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00b      	beq.n	800783c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2204      	movs	r2, #4
 800782a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007832:	f043 0202 	orr.w	r2, r3, #2
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800783c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007840:	f003 0308 	and.w	r3, r3, #8
 8007844:	2b00      	cmp	r3, #0
 8007846:	d017      	beq.n	8007878 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800784c:	f003 0320 	and.w	r3, r3, #32
 8007850:	2b00      	cmp	r3, #0
 8007852:	d105      	bne.n	8007860 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007858:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00b      	beq.n	8007878 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2208      	movs	r2, #8
 8007866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800786e:	f043 0208 	orr.w	r2, r3, #8
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800787c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007880:	2b00      	cmp	r3, #0
 8007882:	d012      	beq.n	80078aa <HAL_UART_IRQHandler+0x18a>
 8007884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007888:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00c      	beq.n	80078aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007898:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078a0:	f043 0220 	orr.w	r2, r3, #32
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 8230 	beq.w	8007d16 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80078b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078ba:	f003 0320 	and.w	r3, r3, #32
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00d      	beq.n	80078de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80078c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078c6:	f003 0320 	and.w	r3, r3, #32
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d007      	beq.n	80078de <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d003      	beq.n	80078de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f2:	2b40      	cmp	r3, #64	@ 0x40
 80078f4:	d005      	beq.n	8007902 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80078f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d04f      	beq.n	80079a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 ff0a 	bl	800871c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007912:	2b40      	cmp	r3, #64	@ 0x40
 8007914:	d141      	bne.n	800799a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3308      	adds	r3, #8
 800791c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007920:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007924:	e853 3f00 	ldrex	r3, [r3]
 8007928:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800792c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007930:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007934:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3308      	adds	r3, #8
 800793e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007942:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007946:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800794e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007952:	e841 2300 	strex	r3, r2, [r1]
 8007956:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800795a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1d9      	bne.n	8007916 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007966:	2b00      	cmp	r3, #0
 8007968:	d013      	beq.n	8007992 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800796e:	4a13      	ldr	r2, [pc, #76]	@ (80079bc <HAL_UART_IRQHandler+0x29c>)
 8007970:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007976:	4618      	mov	r0, r3
 8007978:	f7fc fa7f 	bl	8003e7a <HAL_DMA_Abort_IT>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d017      	beq.n	80079b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800798c:	4610      	mov	r0, r2
 800798e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007990:	e00f      	b.n	80079b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f9d4 	bl	8007d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007998:	e00b      	b.n	80079b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f9d0 	bl	8007d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a0:	e007      	b.n	80079b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f9cc 	bl	8007d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80079b0:	e1b1      	b.n	8007d16 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b2:	bf00      	nop
    return;
 80079b4:	e1af      	b.n	8007d16 <HAL_UART_IRQHandler+0x5f6>
 80079b6:	bf00      	nop
 80079b8:	04000120 	.word	0x04000120
 80079bc:	080087e5 	.word	0x080087e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	f040 816a 	bne.w	8007c9e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80079ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079ce:	f003 0310 	and.w	r3, r3, #16
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 8163 	beq.w	8007c9e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80079d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079dc:	f003 0310 	and.w	r3, r3, #16
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 815c 	beq.w	8007c9e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2210      	movs	r2, #16
 80079ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079f8:	2b40      	cmp	r3, #64	@ 0x40
 80079fa:	f040 80d4 	bne.w	8007ba6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 80ad 	beq.w	8007b6e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	f080 80a5 	bcs.w	8007b6e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0320 	and.w	r3, r3, #32
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f040 8086 	bne.w	8007b4c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a4c:	e853 3f00 	ldrex	r3, [r3]
 8007a50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	461a      	mov	r2, r3
 8007a66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a6e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1da      	bne.n	8007a40 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3308      	adds	r3, #8
 8007a90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a94:	e853 3f00 	ldrex	r3, [r3]
 8007a98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a9c:	f023 0301 	bic.w	r3, r3, #1
 8007aa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3308      	adds	r3, #8
 8007aaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007aae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007ab2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007ab6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ac0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e1      	bne.n	8007a8a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3308      	adds	r3, #8
 8007acc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ad6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ad8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007adc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3308      	adds	r3, #8
 8007ae6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007aea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007aec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007af0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007af8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1e3      	bne.n	8007ac6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b1c:	f023 0310 	bic.w	r3, r3, #16
 8007b20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e4      	bne.n	8007b0c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fc f959 	bl	8003dfe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f8f4 	bl	8007d54 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007b6c:	e0d5      	b.n	8007d1a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007b74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	f040 80ce 	bne.w	8007d1a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0320 	and.w	r3, r3, #32
 8007b8a:	2b20      	cmp	r3, #32
 8007b8c:	f040 80c5 	bne.w	8007d1a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2202      	movs	r2, #2
 8007b94:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f8d8 	bl	8007d54 <HAL_UARTEx_RxEventCallback>
      return;
 8007ba4:	e0b9      	b.n	8007d1a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f000 80ab 	beq.w	8007d1e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8007bc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 80a6 	beq.w	8007d1e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bda:	e853 3f00 	ldrex	r3, [r3]
 8007bde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007be2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007be6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007bf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bf6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007bfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bfc:	e841 2300 	strex	r3, r2, [r1]
 8007c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1e4      	bne.n	8007bd2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c12:	e853 3f00 	ldrex	r3, [r3]
 8007c16:	623b      	str	r3, [r7, #32]
   return(result);
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	f023 0301 	bic.w	r3, r3, #1
 8007c1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3308      	adds	r3, #8
 8007c28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007c2c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c34:	e841 2300 	strex	r3, r2, [r1]
 8007c38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1e3      	bne.n	8007c08 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2220      	movs	r2, #32
 8007c44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	e853 3f00 	ldrex	r3, [r3]
 8007c60:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f023 0310 	bic.w	r3, r3, #16
 8007c68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	461a      	mov	r2, r3
 8007c72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007c76:	61fb      	str	r3, [r7, #28]
 8007c78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	69b9      	ldr	r1, [r7, #24]
 8007c7c:	69fa      	ldr	r2, [r7, #28]
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	617b      	str	r3, [r7, #20]
   return(result);
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e4      	bne.n	8007c54 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2202      	movs	r2, #2
 8007c8e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c94:	4619      	mov	r1, r3
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f85c 	bl	8007d54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c9c:	e03f      	b.n	8007d1e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ca2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00e      	beq.n	8007cc8 <HAL_UART_IRQHandler+0x5a8>
 8007caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d008      	beq.n	8007cc8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007cbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f001 f847 	bl	8008d54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cc6:	e02d      	b.n	8007d24 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00e      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d008      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d01c      	beq.n	8007d22 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	4798      	blx	r3
    }
    return;
 8007cf0:	e017      	b.n	8007d22 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d012      	beq.n	8007d24 <HAL_UART_IRQHandler+0x604>
 8007cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00c      	beq.n	8007d24 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fe3b 	bl	8008986 <UART_EndTransmit_IT>
    return;
 8007d10:	e008      	b.n	8007d24 <HAL_UART_IRQHandler+0x604>
      return;
 8007d12:	bf00      	nop
 8007d14:	e006      	b.n	8007d24 <HAL_UART_IRQHandler+0x604>
    return;
 8007d16:	bf00      	nop
 8007d18:	e004      	b.n	8007d24 <HAL_UART_IRQHandler+0x604>
      return;
 8007d1a:	bf00      	nop
 8007d1c:	e002      	b.n	8007d24 <HAL_UART_IRQHandler+0x604>
      return;
 8007d1e:	bf00      	nop
 8007d20:	e000      	b.n	8007d24 <HAL_UART_IRQHandler+0x604>
    return;
 8007d22:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007d24:	37e8      	adds	r7, #232	@ 0xe8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop

08007d2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d70:	b08a      	sub	sp, #40	@ 0x28
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	689a      	ldr	r2, [r3, #8]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	431a      	orrs	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	69db      	ldr	r3, [r3, #28]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	4b9e      	ldr	r3, [pc, #632]	@ (8008014 <UART_SetConfig+0x2a8>)
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	6812      	ldr	r2, [r2, #0]
 8007da2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007da4:	430b      	orrs	r3, r1
 8007da6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	68da      	ldr	r2, [r3, #12]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a93      	ldr	r2, [pc, #588]	@ (8008018 <UART_SetConfig+0x2ac>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d004      	beq.n	8007dd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007de8:	430a      	orrs	r2, r1
 8007dea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a8a      	ldr	r2, [pc, #552]	@ (800801c <UART_SetConfig+0x2b0>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d126      	bne.n	8007e44 <UART_SetConfig+0xd8>
 8007df6:	4b8a      	ldr	r3, [pc, #552]	@ (8008020 <UART_SetConfig+0x2b4>)
 8007df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dfc:	f003 0303 	and.w	r3, r3, #3
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d81b      	bhi.n	8007e3c <UART_SetConfig+0xd0>
 8007e04:	a201      	add	r2, pc, #4	@ (adr r2, 8007e0c <UART_SetConfig+0xa0>)
 8007e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0a:	bf00      	nop
 8007e0c:	08007e1d 	.word	0x08007e1d
 8007e10:	08007e2d 	.word	0x08007e2d
 8007e14:	08007e25 	.word	0x08007e25
 8007e18:	08007e35 	.word	0x08007e35
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e22:	e0ab      	b.n	8007f7c <UART_SetConfig+0x210>
 8007e24:	2302      	movs	r3, #2
 8007e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e2a:	e0a7      	b.n	8007f7c <UART_SetConfig+0x210>
 8007e2c:	2304      	movs	r3, #4
 8007e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e32:	e0a3      	b.n	8007f7c <UART_SetConfig+0x210>
 8007e34:	2308      	movs	r3, #8
 8007e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e3a:	e09f      	b.n	8007f7c <UART_SetConfig+0x210>
 8007e3c:	2310      	movs	r3, #16
 8007e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e42:	e09b      	b.n	8007f7c <UART_SetConfig+0x210>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a76      	ldr	r2, [pc, #472]	@ (8008024 <UART_SetConfig+0x2b8>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d138      	bne.n	8007ec0 <UART_SetConfig+0x154>
 8007e4e:	4b74      	ldr	r3, [pc, #464]	@ (8008020 <UART_SetConfig+0x2b4>)
 8007e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e54:	f003 030c 	and.w	r3, r3, #12
 8007e58:	2b0c      	cmp	r3, #12
 8007e5a:	d82d      	bhi.n	8007eb8 <UART_SetConfig+0x14c>
 8007e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e64 <UART_SetConfig+0xf8>)
 8007e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e62:	bf00      	nop
 8007e64:	08007e99 	.word	0x08007e99
 8007e68:	08007eb9 	.word	0x08007eb9
 8007e6c:	08007eb9 	.word	0x08007eb9
 8007e70:	08007eb9 	.word	0x08007eb9
 8007e74:	08007ea9 	.word	0x08007ea9
 8007e78:	08007eb9 	.word	0x08007eb9
 8007e7c:	08007eb9 	.word	0x08007eb9
 8007e80:	08007eb9 	.word	0x08007eb9
 8007e84:	08007ea1 	.word	0x08007ea1
 8007e88:	08007eb9 	.word	0x08007eb9
 8007e8c:	08007eb9 	.word	0x08007eb9
 8007e90:	08007eb9 	.word	0x08007eb9
 8007e94:	08007eb1 	.word	0x08007eb1
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e9e:	e06d      	b.n	8007f7c <UART_SetConfig+0x210>
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ea6:	e069      	b.n	8007f7c <UART_SetConfig+0x210>
 8007ea8:	2304      	movs	r3, #4
 8007eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007eae:	e065      	b.n	8007f7c <UART_SetConfig+0x210>
 8007eb0:	2308      	movs	r3, #8
 8007eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007eb6:	e061      	b.n	8007f7c <UART_SetConfig+0x210>
 8007eb8:	2310      	movs	r3, #16
 8007eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ebe:	e05d      	b.n	8007f7c <UART_SetConfig+0x210>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a58      	ldr	r2, [pc, #352]	@ (8008028 <UART_SetConfig+0x2bc>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d125      	bne.n	8007f16 <UART_SetConfig+0x1aa>
 8007eca:	4b55      	ldr	r3, [pc, #340]	@ (8008020 <UART_SetConfig+0x2b4>)
 8007ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ed0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007ed4:	2b30      	cmp	r3, #48	@ 0x30
 8007ed6:	d016      	beq.n	8007f06 <UART_SetConfig+0x19a>
 8007ed8:	2b30      	cmp	r3, #48	@ 0x30
 8007eda:	d818      	bhi.n	8007f0e <UART_SetConfig+0x1a2>
 8007edc:	2b20      	cmp	r3, #32
 8007ede:	d00a      	beq.n	8007ef6 <UART_SetConfig+0x18a>
 8007ee0:	2b20      	cmp	r3, #32
 8007ee2:	d814      	bhi.n	8007f0e <UART_SetConfig+0x1a2>
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <UART_SetConfig+0x182>
 8007ee8:	2b10      	cmp	r3, #16
 8007eea:	d008      	beq.n	8007efe <UART_SetConfig+0x192>
 8007eec:	e00f      	b.n	8007f0e <UART_SetConfig+0x1a2>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ef4:	e042      	b.n	8007f7c <UART_SetConfig+0x210>
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007efc:	e03e      	b.n	8007f7c <UART_SetConfig+0x210>
 8007efe:	2304      	movs	r3, #4
 8007f00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f04:	e03a      	b.n	8007f7c <UART_SetConfig+0x210>
 8007f06:	2308      	movs	r3, #8
 8007f08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f0c:	e036      	b.n	8007f7c <UART_SetConfig+0x210>
 8007f0e:	2310      	movs	r3, #16
 8007f10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f14:	e032      	b.n	8007f7c <UART_SetConfig+0x210>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a3f      	ldr	r2, [pc, #252]	@ (8008018 <UART_SetConfig+0x2ac>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d12a      	bne.n	8007f76 <UART_SetConfig+0x20a>
 8007f20:	4b3f      	ldr	r3, [pc, #252]	@ (8008020 <UART_SetConfig+0x2b4>)
 8007f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f26:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007f2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f2e:	d01a      	beq.n	8007f66 <UART_SetConfig+0x1fa>
 8007f30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f34:	d81b      	bhi.n	8007f6e <UART_SetConfig+0x202>
 8007f36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f3a:	d00c      	beq.n	8007f56 <UART_SetConfig+0x1ea>
 8007f3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f40:	d815      	bhi.n	8007f6e <UART_SetConfig+0x202>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <UART_SetConfig+0x1e2>
 8007f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f4a:	d008      	beq.n	8007f5e <UART_SetConfig+0x1f2>
 8007f4c:	e00f      	b.n	8007f6e <UART_SetConfig+0x202>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f54:	e012      	b.n	8007f7c <UART_SetConfig+0x210>
 8007f56:	2302      	movs	r3, #2
 8007f58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f5c:	e00e      	b.n	8007f7c <UART_SetConfig+0x210>
 8007f5e:	2304      	movs	r3, #4
 8007f60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f64:	e00a      	b.n	8007f7c <UART_SetConfig+0x210>
 8007f66:	2308      	movs	r3, #8
 8007f68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f6c:	e006      	b.n	8007f7c <UART_SetConfig+0x210>
 8007f6e:	2310      	movs	r3, #16
 8007f70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f74:	e002      	b.n	8007f7c <UART_SetConfig+0x210>
 8007f76:	2310      	movs	r3, #16
 8007f78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a25      	ldr	r2, [pc, #148]	@ (8008018 <UART_SetConfig+0x2ac>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	f040 808a 	bne.w	800809c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007f8c:	2b08      	cmp	r3, #8
 8007f8e:	d824      	bhi.n	8007fda <UART_SetConfig+0x26e>
 8007f90:	a201      	add	r2, pc, #4	@ (adr r2, 8007f98 <UART_SetConfig+0x22c>)
 8007f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f96:	bf00      	nop
 8007f98:	08007fbd 	.word	0x08007fbd
 8007f9c:	08007fdb 	.word	0x08007fdb
 8007fa0:	08007fc5 	.word	0x08007fc5
 8007fa4:	08007fdb 	.word	0x08007fdb
 8007fa8:	08007fcb 	.word	0x08007fcb
 8007fac:	08007fdb 	.word	0x08007fdb
 8007fb0:	08007fdb 	.word	0x08007fdb
 8007fb4:	08007fdb 	.word	0x08007fdb
 8007fb8:	08007fd3 	.word	0x08007fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fbc:	f7fd fd86 	bl	8005acc <HAL_RCC_GetPCLK1Freq>
 8007fc0:	61f8      	str	r0, [r7, #28]
        break;
 8007fc2:	e010      	b.n	8007fe6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fc4:	4b19      	ldr	r3, [pc, #100]	@ (800802c <UART_SetConfig+0x2c0>)
 8007fc6:	61fb      	str	r3, [r7, #28]
        break;
 8007fc8:	e00d      	b.n	8007fe6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fca:	f7fd fce7 	bl	800599c <HAL_RCC_GetSysClockFreq>
 8007fce:	61f8      	str	r0, [r7, #28]
        break;
 8007fd0:	e009      	b.n	8007fe6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fd6:	61fb      	str	r3, [r7, #28]
        break;
 8007fd8:	e005      	b.n	8007fe6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007fe4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 8109 	beq.w	8008200 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	685a      	ldr	r2, [r3, #4]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	005b      	lsls	r3, r3, #1
 8007ff6:	4413      	add	r3, r2
 8007ff8:	69fa      	ldr	r2, [r7, #28]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d305      	bcc.n	800800a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008004:	69fa      	ldr	r2, [r7, #28]
 8008006:	429a      	cmp	r2, r3
 8008008:	d912      	bls.n	8008030 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008010:	e0f6      	b.n	8008200 <UART_SetConfig+0x494>
 8008012:	bf00      	nop
 8008014:	efff69f3 	.word	0xefff69f3
 8008018:	40008000 	.word	0x40008000
 800801c:	40013800 	.word	0x40013800
 8008020:	40021000 	.word	0x40021000
 8008024:	40004400 	.word	0x40004400
 8008028:	40004800 	.word	0x40004800
 800802c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	2200      	movs	r2, #0
 8008034:	461c      	mov	r4, r3
 8008036:	4615      	mov	r5, r2
 8008038:	f04f 0200 	mov.w	r2, #0
 800803c:	f04f 0300 	mov.w	r3, #0
 8008040:	022b      	lsls	r3, r5, #8
 8008042:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008046:	0222      	lsls	r2, r4, #8
 8008048:	68f9      	ldr	r1, [r7, #12]
 800804a:	6849      	ldr	r1, [r1, #4]
 800804c:	0849      	lsrs	r1, r1, #1
 800804e:	2000      	movs	r0, #0
 8008050:	4688      	mov	r8, r1
 8008052:	4681      	mov	r9, r0
 8008054:	eb12 0a08 	adds.w	sl, r2, r8
 8008058:	eb43 0b09 	adc.w	fp, r3, r9
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	603b      	str	r3, [r7, #0]
 8008064:	607a      	str	r2, [r7, #4]
 8008066:	e9d7 2300 	ldrd	r2, r3, [r7]
 800806a:	4650      	mov	r0, sl
 800806c:	4659      	mov	r1, fp
 800806e:	f7f8 fe1b 	bl	8000ca8 <__aeabi_uldivmod>
 8008072:	4602      	mov	r2, r0
 8008074:	460b      	mov	r3, r1
 8008076:	4613      	mov	r3, r2
 8008078:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008080:	d308      	bcc.n	8008094 <UART_SetConfig+0x328>
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008088:	d204      	bcs.n	8008094 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	69ba      	ldr	r2, [r7, #24]
 8008090:	60da      	str	r2, [r3, #12]
 8008092:	e0b5      	b.n	8008200 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800809a:	e0b1      	b.n	8008200 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	69db      	ldr	r3, [r3, #28]
 80080a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080a4:	d15d      	bne.n	8008162 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80080a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80080aa:	2b08      	cmp	r3, #8
 80080ac:	d827      	bhi.n	80080fe <UART_SetConfig+0x392>
 80080ae:	a201      	add	r2, pc, #4	@ (adr r2, 80080b4 <UART_SetConfig+0x348>)
 80080b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b4:	080080d9 	.word	0x080080d9
 80080b8:	080080e1 	.word	0x080080e1
 80080bc:	080080e9 	.word	0x080080e9
 80080c0:	080080ff 	.word	0x080080ff
 80080c4:	080080ef 	.word	0x080080ef
 80080c8:	080080ff 	.word	0x080080ff
 80080cc:	080080ff 	.word	0x080080ff
 80080d0:	080080ff 	.word	0x080080ff
 80080d4:	080080f7 	.word	0x080080f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080d8:	f7fd fcf8 	bl	8005acc <HAL_RCC_GetPCLK1Freq>
 80080dc:	61f8      	str	r0, [r7, #28]
        break;
 80080de:	e014      	b.n	800810a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080e0:	f7fd fd0a 	bl	8005af8 <HAL_RCC_GetPCLK2Freq>
 80080e4:	61f8      	str	r0, [r7, #28]
        break;
 80080e6:	e010      	b.n	800810a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080e8:	4b4c      	ldr	r3, [pc, #304]	@ (800821c <UART_SetConfig+0x4b0>)
 80080ea:	61fb      	str	r3, [r7, #28]
        break;
 80080ec:	e00d      	b.n	800810a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080ee:	f7fd fc55 	bl	800599c <HAL_RCC_GetSysClockFreq>
 80080f2:	61f8      	str	r0, [r7, #28]
        break;
 80080f4:	e009      	b.n	800810a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080fa:	61fb      	str	r3, [r7, #28]
        break;
 80080fc:	e005      	b.n	800810a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80080fe:	2300      	movs	r3, #0
 8008100:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008108:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d077      	beq.n	8008200 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	005a      	lsls	r2, r3, #1
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	085b      	lsrs	r3, r3, #1
 800811a:	441a      	add	r2, r3
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	fbb2 f3f3 	udiv	r3, r2, r3
 8008124:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	2b0f      	cmp	r3, #15
 800812a:	d916      	bls.n	800815a <UART_SetConfig+0x3ee>
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008132:	d212      	bcs.n	800815a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	b29b      	uxth	r3, r3
 8008138:	f023 030f 	bic.w	r3, r3, #15
 800813c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	085b      	lsrs	r3, r3, #1
 8008142:	b29b      	uxth	r3, r3
 8008144:	f003 0307 	and.w	r3, r3, #7
 8008148:	b29a      	uxth	r2, r3
 800814a:	8afb      	ldrh	r3, [r7, #22]
 800814c:	4313      	orrs	r3, r2
 800814e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	8afa      	ldrh	r2, [r7, #22]
 8008156:	60da      	str	r2, [r3, #12]
 8008158:	e052      	b.n	8008200 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008160:	e04e      	b.n	8008200 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008162:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008166:	2b08      	cmp	r3, #8
 8008168:	d827      	bhi.n	80081ba <UART_SetConfig+0x44e>
 800816a:	a201      	add	r2, pc, #4	@ (adr r2, 8008170 <UART_SetConfig+0x404>)
 800816c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008170:	08008195 	.word	0x08008195
 8008174:	0800819d 	.word	0x0800819d
 8008178:	080081a5 	.word	0x080081a5
 800817c:	080081bb 	.word	0x080081bb
 8008180:	080081ab 	.word	0x080081ab
 8008184:	080081bb 	.word	0x080081bb
 8008188:	080081bb 	.word	0x080081bb
 800818c:	080081bb 	.word	0x080081bb
 8008190:	080081b3 	.word	0x080081b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008194:	f7fd fc9a 	bl	8005acc <HAL_RCC_GetPCLK1Freq>
 8008198:	61f8      	str	r0, [r7, #28]
        break;
 800819a:	e014      	b.n	80081c6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800819c:	f7fd fcac 	bl	8005af8 <HAL_RCC_GetPCLK2Freq>
 80081a0:	61f8      	str	r0, [r7, #28]
        break;
 80081a2:	e010      	b.n	80081c6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081a4:	4b1d      	ldr	r3, [pc, #116]	@ (800821c <UART_SetConfig+0x4b0>)
 80081a6:	61fb      	str	r3, [r7, #28]
        break;
 80081a8:	e00d      	b.n	80081c6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081aa:	f7fd fbf7 	bl	800599c <HAL_RCC_GetSysClockFreq>
 80081ae:	61f8      	str	r0, [r7, #28]
        break;
 80081b0:	e009      	b.n	80081c6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081b6:	61fb      	str	r3, [r7, #28]
        break;
 80081b8:	e005      	b.n	80081c6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80081c4:	bf00      	nop
    }

    if (pclk != 0U)
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d019      	beq.n	8008200 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	085a      	lsrs	r2, r3, #1
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	441a      	add	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	fbb2 f3f3 	udiv	r3, r2, r3
 80081de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	2b0f      	cmp	r3, #15
 80081e4:	d909      	bls.n	80081fa <UART_SetConfig+0x48e>
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081ec:	d205      	bcs.n	80081fa <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	60da      	str	r2, [r3, #12]
 80081f8:	e002      	b.n	8008200 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800820c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008210:	4618      	mov	r0, r3
 8008212:	3728      	adds	r7, #40	@ 0x28
 8008214:	46bd      	mov	sp, r7
 8008216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800821a:	bf00      	nop
 800821c:	00f42400 	.word	0x00f42400

08008220 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800822c:	f003 0308 	and.w	r3, r3, #8
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00a      	beq.n	800824a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	430a      	orrs	r2, r1
 8008248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00a      	beq.n	800826c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	430a      	orrs	r2, r1
 800826a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008270:	f003 0302 	and.w	r3, r3, #2
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00a      	beq.n	800828e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	430a      	orrs	r2, r1
 800828c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008292:	f003 0304 	and.w	r3, r3, #4
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00a      	beq.n	80082b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	430a      	orrs	r2, r1
 80082ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b4:	f003 0310 	and.w	r3, r3, #16
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00a      	beq.n	80082d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	430a      	orrs	r2, r1
 80082d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d6:	f003 0320 	and.w	r3, r3, #32
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d01a      	beq.n	8008336 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	430a      	orrs	r2, r1
 8008314:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800831a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800831e:	d10a      	bne.n	8008336 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800833a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00a      	beq.n	8008358 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	605a      	str	r2, [r3, #4]
  }
}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b098      	sub	sp, #96	@ 0x60
 8008368:	af02      	add	r7, sp, #8
 800836a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008374:	f7fa fc52 	bl	8002c1c <HAL_GetTick>
 8008378:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0308 	and.w	r3, r3, #8
 8008384:	2b08      	cmp	r3, #8
 8008386:	d12e      	bne.n	80083e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008388:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008390:	2200      	movs	r2, #0
 8008392:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f88c 	bl	80084b4 <UART_WaitOnFlagUntilTimeout>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d021      	beq.n	80083e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083aa:	e853 3f00 	ldrex	r3, [r3]
 80083ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	461a      	mov	r2, r3
 80083be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80083c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083c8:	e841 2300 	strex	r3, r2, [r1]
 80083cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1e6      	bne.n	80083a2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2220      	movs	r2, #32
 80083d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e062      	b.n	80084ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 0304 	and.w	r3, r3, #4
 80083f0:	2b04      	cmp	r3, #4
 80083f2:	d149      	bne.n	8008488 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083fc:	2200      	movs	r2, #0
 80083fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f856 	bl	80084b4 <UART_WaitOnFlagUntilTimeout>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d03c      	beq.n	8008488 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008416:	e853 3f00 	ldrex	r3, [r3]
 800841a:	623b      	str	r3, [r7, #32]
   return(result);
 800841c:	6a3b      	ldr	r3, [r7, #32]
 800841e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	461a      	mov	r2, r3
 800842a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800842c:	633b      	str	r3, [r7, #48]	@ 0x30
 800842e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008430:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008434:	e841 2300 	strex	r3, r2, [r1]
 8008438:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800843a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1e6      	bne.n	800840e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	3308      	adds	r3, #8
 8008446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	e853 3f00 	ldrex	r3, [r3]
 800844e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f023 0301 	bic.w	r3, r3, #1
 8008456:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	3308      	adds	r3, #8
 800845e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008460:	61fa      	str	r2, [r7, #28]
 8008462:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008464:	69b9      	ldr	r1, [r7, #24]
 8008466:	69fa      	ldr	r2, [r7, #28]
 8008468:	e841 2300 	strex	r3, r2, [r1]
 800846c:	617b      	str	r3, [r7, #20]
   return(result);
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1e5      	bne.n	8008440 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2220      	movs	r2, #32
 8008478:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e011      	b.n	80084ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2220      	movs	r2, #32
 800848c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2220      	movs	r2, #32
 8008492:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3758      	adds	r7, #88	@ 0x58
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	603b      	str	r3, [r7, #0]
 80084c0:	4613      	mov	r3, r2
 80084c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084c4:	e04f      	b.n	8008566 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084cc:	d04b      	beq.n	8008566 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084ce:	f7fa fba5 	bl	8002c1c <HAL_GetTick>
 80084d2:	4602      	mov	r2, r0
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	69ba      	ldr	r2, [r7, #24]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d302      	bcc.n	80084e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e04e      	b.n	8008586 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0304 	and.w	r3, r3, #4
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d037      	beq.n	8008566 <UART_WaitOnFlagUntilTimeout+0xb2>
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	2b80      	cmp	r3, #128	@ 0x80
 80084fa:	d034      	beq.n	8008566 <UART_WaitOnFlagUntilTimeout+0xb2>
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2b40      	cmp	r3, #64	@ 0x40
 8008500:	d031      	beq.n	8008566 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	f003 0308 	and.w	r3, r3, #8
 800850c:	2b08      	cmp	r3, #8
 800850e:	d110      	bne.n	8008532 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2208      	movs	r2, #8
 8008516:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f000 f8ff 	bl	800871c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2208      	movs	r2, #8
 8008522:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e029      	b.n	8008586 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	69db      	ldr	r3, [r3, #28]
 8008538:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800853c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008540:	d111      	bne.n	8008566 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800854a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f000 f8e5 	bl	800871c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2220      	movs	r2, #32
 8008556:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e00f      	b.n	8008586 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	69da      	ldr	r2, [r3, #28]
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	4013      	ands	r3, r2
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	429a      	cmp	r2, r3
 8008574:	bf0c      	ite	eq
 8008576:	2301      	moveq	r3, #1
 8008578:	2300      	movne	r3, #0
 800857a:	b2db      	uxtb	r3, r3
 800857c:	461a      	mov	r2, r3
 800857e:	79fb      	ldrb	r3, [r7, #7]
 8008580:	429a      	cmp	r2, r3
 8008582:	d0a0      	beq.n	80084c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
	...

08008590 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008590:	b480      	push	{r7}
 8008592:	b097      	sub	sp, #92	@ 0x5c
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	4613      	mov	r3, r2
 800859c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	88fa      	ldrh	r2, [r7, #6]
 80085a8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	88fa      	ldrh	r2, [r7, #6]
 80085b0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085c2:	d10e      	bne.n	80085e2 <UART_Start_Receive_IT+0x52>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d105      	bne.n	80085d8 <UART_Start_Receive_IT+0x48>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80085d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80085d6:	e02d      	b.n	8008634 <UART_Start_Receive_IT+0xa4>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	22ff      	movs	r2, #255	@ 0xff
 80085dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80085e0:	e028      	b.n	8008634 <UART_Start_Receive_IT+0xa4>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10d      	bne.n	8008606 <UART_Start_Receive_IT+0x76>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d104      	bne.n	80085fc <UART_Start_Receive_IT+0x6c>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	22ff      	movs	r2, #255	@ 0xff
 80085f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80085fa:	e01b      	b.n	8008634 <UART_Start_Receive_IT+0xa4>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	227f      	movs	r2, #127	@ 0x7f
 8008600:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008604:	e016      	b.n	8008634 <UART_Start_Receive_IT+0xa4>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800860e:	d10d      	bne.n	800862c <UART_Start_Receive_IT+0x9c>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d104      	bne.n	8008622 <UART_Start_Receive_IT+0x92>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	227f      	movs	r2, #127	@ 0x7f
 800861c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008620:	e008      	b.n	8008634 <UART_Start_Receive_IT+0xa4>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	223f      	movs	r2, #63	@ 0x3f
 8008626:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800862a:	e003      	b.n	8008634 <UART_Start_Receive_IT+0xa4>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2222      	movs	r2, #34	@ 0x22
 8008640:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3308      	adds	r3, #8
 800864a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800864e:	e853 3f00 	ldrex	r3, [r3]
 8008652:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008656:	f043 0301 	orr.w	r3, r3, #1
 800865a:	657b      	str	r3, [r7, #84]	@ 0x54
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3308      	adds	r3, #8
 8008662:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008664:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008666:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008668:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800866a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800866c:	e841 2300 	strex	r3, r2, [r1]
 8008670:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1e5      	bne.n	8008644 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008680:	d107      	bne.n	8008692 <UART_Start_Receive_IT+0x102>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d103      	bne.n	8008692 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	4a21      	ldr	r2, [pc, #132]	@ (8008714 <UART_Start_Receive_IT+0x184>)
 800868e:	669a      	str	r2, [r3, #104]	@ 0x68
 8008690:	e002      	b.n	8008698 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	4a20      	ldr	r2, [pc, #128]	@ (8008718 <UART_Start_Receive_IT+0x188>)
 8008696:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d019      	beq.n	80086d4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a8:	e853 3f00 	ldrex	r3, [r3]
 80086ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80086b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086be:	637b      	str	r3, [r7, #52]	@ 0x34
 80086c0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80086c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086c6:	e841 2300 	strex	r3, r2, [r1]
 80086ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80086cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e6      	bne.n	80086a0 <UART_Start_Receive_IT+0x110>
 80086d2:	e018      	b.n	8008706 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	613b      	str	r3, [r7, #16]
   return(result);
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f043 0320 	orr.w	r3, r3, #32
 80086e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086f2:	623b      	str	r3, [r7, #32]
 80086f4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	69f9      	ldr	r1, [r7, #28]
 80086f8:	6a3a      	ldr	r2, [r7, #32]
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e6      	bne.n	80086d4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	375c      	adds	r7, #92	@ 0x5c
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	08008b99 	.word	0x08008b99
 8008718:	080089dd 	.word	0x080089dd

0800871c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800871c:	b480      	push	{r7}
 800871e:	b095      	sub	sp, #84	@ 0x54
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800872c:	e853 3f00 	ldrex	r3, [r3]
 8008730:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008734:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008738:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	461a      	mov	r2, r3
 8008740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008742:	643b      	str	r3, [r7, #64]	@ 0x40
 8008744:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008746:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008748:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800874a:	e841 2300 	strex	r3, r2, [r1]
 800874e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1e6      	bne.n	8008724 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	3308      	adds	r3, #8
 800875c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	e853 3f00 	ldrex	r3, [r3]
 8008764:	61fb      	str	r3, [r7, #28]
   return(result);
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	f023 0301 	bic.w	r3, r3, #1
 800876c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3308      	adds	r3, #8
 8008774:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008776:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008778:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800877c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800877e:	e841 2300 	strex	r3, r2, [r1]
 8008782:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1e5      	bne.n	8008756 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800878e:	2b01      	cmp	r3, #1
 8008790:	d118      	bne.n	80087c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	e853 3f00 	ldrex	r3, [r3]
 800879e:	60bb      	str	r3, [r7, #8]
   return(result);
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	f023 0310 	bic.w	r3, r3, #16
 80087a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	461a      	mov	r2, r3
 80087ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087b0:	61bb      	str	r3, [r7, #24]
 80087b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b4:	6979      	ldr	r1, [r7, #20]
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	e841 2300 	strex	r3, r2, [r1]
 80087bc:	613b      	str	r3, [r7, #16]
   return(result);
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1e6      	bne.n	8008792 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2220      	movs	r2, #32
 80087c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80087d8:	bf00      	nop
 80087da:	3754      	adds	r7, #84	@ 0x54
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f7ff fa9c 	bl	8007d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008808:	bf00      	nop
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008810:	b480      	push	{r7}
 8008812:	b08f      	sub	sp, #60	@ 0x3c
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800881c:	2b21      	cmp	r3, #33	@ 0x21
 800881e:	d14c      	bne.n	80088ba <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008826:	b29b      	uxth	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	d132      	bne.n	8008892 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	e853 3f00 	ldrex	r3, [r3]
 8008838:	61fb      	str	r3, [r7, #28]
   return(result);
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008840:	637b      	str	r3, [r7, #52]	@ 0x34
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	461a      	mov	r2, r3
 8008848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800884a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800884c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008850:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008852:	e841 2300 	strex	r3, r2, [r1]
 8008856:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1e6      	bne.n	800882c <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	e853 3f00 	ldrex	r3, [r3]
 800886a:	60bb      	str	r3, [r7, #8]
   return(result);
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008872:	633b      	str	r3, [r7, #48]	@ 0x30
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	461a      	mov	r2, r3
 800887a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887c:	61bb      	str	r3, [r7, #24]
 800887e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008880:	6979      	ldr	r1, [r7, #20]
 8008882:	69ba      	ldr	r2, [r7, #24]
 8008884:	e841 2300 	strex	r3, r2, [r1]
 8008888:	613b      	str	r3, [r7, #16]
   return(result);
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1e6      	bne.n	800885e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008890:	e013      	b.n	80088ba <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008896:	781a      	ldrb	r2, [r3, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088a2:	1c5a      	adds	r2, r3, #1
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	3b01      	subs	r3, #1
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80088ba:	bf00      	nop
 80088bc:	373c      	adds	r7, #60	@ 0x3c
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr

080088c6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80088c6:	b480      	push	{r7}
 80088c8:	b091      	sub	sp, #68	@ 0x44
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80088d2:	2b21      	cmp	r3, #33	@ 0x21
 80088d4:	d151      	bne.n	800897a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80088dc:	b29b      	uxth	r3, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d132      	bne.n	8008948 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ea:	e853 3f00 	ldrex	r3, [r3]
 80088ee:	623b      	str	r3, [r7, #32]
   return(result);
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	461a      	mov	r2, r3
 80088fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008900:	633b      	str	r3, [r7, #48]	@ 0x30
 8008902:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008904:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008908:	e841 2300 	strex	r3, r2, [r1]
 800890c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800890e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1e6      	bne.n	80088e2 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	e853 3f00 	ldrex	r3, [r3]
 8008920:	60fb      	str	r3, [r7, #12]
   return(result);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008928:	637b      	str	r3, [r7, #52]	@ 0x34
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	461a      	mov	r2, r3
 8008930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008932:	61fb      	str	r3, [r7, #28]
 8008934:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008936:	69b9      	ldr	r1, [r7, #24]
 8008938:	69fa      	ldr	r2, [r7, #28]
 800893a:	e841 2300 	strex	r3, r2, [r1]
 800893e:	617b      	str	r3, [r7, #20]
   return(result);
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1e6      	bne.n	8008914 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008946:	e018      	b.n	800897a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800894c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800894e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008950:	881a      	ldrh	r2, [r3, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800895a:	b292      	uxth	r2, r2
 800895c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008962:	1c9a      	adds	r2, r3, #2
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800896e:	b29b      	uxth	r3, r3
 8008970:	3b01      	subs	r3, #1
 8008972:	b29a      	uxth	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800897a:	bf00      	nop
 800897c:	3744      	adds	r7, #68	@ 0x44
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b088      	sub	sp, #32
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	e853 3f00 	ldrex	r3, [r3]
 800899a:	60bb      	str	r3, [r7, #8]
   return(result);
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089a2:	61fb      	str	r3, [r7, #28]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	461a      	mov	r2, r3
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	61bb      	str	r3, [r7, #24]
 80089ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b0:	6979      	ldr	r1, [r7, #20]
 80089b2:	69ba      	ldr	r2, [r7, #24]
 80089b4:	e841 2300 	strex	r3, r2, [r1]
 80089b8:	613b      	str	r3, [r7, #16]
   return(result);
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1e6      	bne.n	800898e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2220      	movs	r2, #32
 80089c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7ff f9ad 	bl	8007d2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089d2:	bf00      	nop
 80089d4:	3720      	adds	r7, #32
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
	...

080089dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b09c      	sub	sp, #112	@ 0x70
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089f4:	2b22      	cmp	r3, #34	@ 0x22
 80089f6:	f040 80be 	bne.w	8008b76 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008a00:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008a08:	b2d9      	uxtb	r1, r3
 8008a0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a14:	400a      	ands	r2, r1
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a1e:	1c5a      	adds	r2, r3, #1
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f040 80a3 	bne.w	8008b8a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a4c:	e853 3f00 	ldrex	r3, [r3]
 8008a50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a6a:	e841 2300 	strex	r3, r2, [r1]
 8008a6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1e6      	bne.n	8008a44 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	3308      	adds	r3, #8
 8008a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a80:	e853 3f00 	ldrex	r3, [r3]
 8008a84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a88:	f023 0301 	bic.w	r3, r3, #1
 8008a8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3308      	adds	r3, #8
 8008a94:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008a96:	647a      	str	r2, [r7, #68]	@ 0x44
 8008a98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a9e:	e841 2300 	strex	r3, r2, [r1]
 8008aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1e5      	bne.n	8008a76 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2220      	movs	r2, #32
 8008aae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a34      	ldr	r2, [pc, #208]	@ (8008b94 <UART_RxISR_8BIT+0x1b8>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d01f      	beq.n	8008b08 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d018      	beq.n	8008b08 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ade:	e853 3f00 	ldrex	r3, [r3]
 8008ae2:	623b      	str	r3, [r7, #32]
   return(result);
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008aea:	663b      	str	r3, [r7, #96]	@ 0x60
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	461a      	mov	r2, r3
 8008af2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008af6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008afa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008afc:	e841 2300 	strex	r3, r2, [r1]
 8008b00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1e6      	bne.n	8008ad6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d12e      	bne.n	8008b6e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	e853 3f00 	ldrex	r3, [r3]
 8008b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f023 0310 	bic.w	r3, r3, #16
 8008b2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	461a      	mov	r2, r3
 8008b32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b34:	61fb      	str	r3, [r7, #28]
 8008b36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b38:	69b9      	ldr	r1, [r7, #24]
 8008b3a:	69fa      	ldr	r2, [r7, #28]
 8008b3c:	e841 2300 	strex	r3, r2, [r1]
 8008b40:	617b      	str	r3, [r7, #20]
   return(result);
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1e6      	bne.n	8008b16 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	f003 0310 	and.w	r3, r3, #16
 8008b52:	2b10      	cmp	r3, #16
 8008b54:	d103      	bne.n	8008b5e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2210      	movs	r2, #16
 8008b5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008b64:	4619      	mov	r1, r3
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f7ff f8f4 	bl	8007d54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b6c:	e00d      	b.n	8008b8a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7f8 fe26 	bl	80017c0 <HAL_UART_RxCpltCallback>
}
 8008b74:	e009      	b.n	8008b8a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	8b1b      	ldrh	r3, [r3, #24]
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f042 0208 	orr.w	r2, r2, #8
 8008b86:	b292      	uxth	r2, r2
 8008b88:	831a      	strh	r2, [r3, #24]
}
 8008b8a:	bf00      	nop
 8008b8c:	3770      	adds	r7, #112	@ 0x70
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	40008000 	.word	0x40008000

08008b98 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b09c      	sub	sp, #112	@ 0x70
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ba6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bb0:	2b22      	cmp	r3, #34	@ 0x22
 8008bb2:	f040 80be 	bne.w	8008d32 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008bbc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008bc6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008bca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008bce:	4013      	ands	r3, r2
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008bd4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bda:	1c9a      	adds	r2, r3, #2
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	3b01      	subs	r3, #1
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f040 80a3 	bne.w	8008d46 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c08:	e853 3f00 	ldrex	r3, [r3]
 8008c0c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c14:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c20:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008c24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008c26:	e841 2300 	strex	r3, r2, [r1]
 8008c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1e6      	bne.n	8008c00 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	3308      	adds	r3, #8
 8008c38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c3c:	e853 3f00 	ldrex	r3, [r3]
 8008c40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c44:	f023 0301 	bic.w	r3, r3, #1
 8008c48:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	3308      	adds	r3, #8
 8008c50:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008c52:	643a      	str	r2, [r7, #64]	@ 0x40
 8008c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c5a:	e841 2300 	strex	r3, r2, [r1]
 8008c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1e5      	bne.n	8008c32 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2220      	movs	r2, #32
 8008c6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a34      	ldr	r2, [pc, #208]	@ (8008d50 <UART_RxISR_16BIT+0x1b8>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d01f      	beq.n	8008cc4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d018      	beq.n	8008cc4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	e853 3f00 	ldrex	r3, [r3]
 8008c9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ca6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	461a      	mov	r2, r3
 8008cae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cb2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cb8:	e841 2300 	strex	r3, r2, [r1]
 8008cbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1e6      	bne.n	8008c92 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d12e      	bne.n	8008d2a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	e853 3f00 	ldrex	r3, [r3]
 8008cde:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	f023 0310 	bic.w	r3, r3, #16
 8008ce6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	461a      	mov	r2, r3
 8008cee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008cf0:	61bb      	str	r3, [r7, #24]
 8008cf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf4:	6979      	ldr	r1, [r7, #20]
 8008cf6:	69ba      	ldr	r2, [r7, #24]
 8008cf8:	e841 2300 	strex	r3, r2, [r1]
 8008cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1e6      	bne.n	8008cd2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	69db      	ldr	r3, [r3, #28]
 8008d0a:	f003 0310 	and.w	r3, r3, #16
 8008d0e:	2b10      	cmp	r3, #16
 8008d10:	d103      	bne.n	8008d1a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2210      	movs	r2, #16
 8008d18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f7ff f816 	bl	8007d54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d28:	e00d      	b.n	8008d46 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f7f8 fd48 	bl	80017c0 <HAL_UART_RxCpltCallback>
}
 8008d30:	e009      	b.n	8008d46 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	8b1b      	ldrh	r3, [r3, #24]
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f042 0208 	orr.w	r2, r2, #8
 8008d42:	b292      	uxth	r2, r2
 8008d44:	831a      	strh	r2, [r3, #24]
}
 8008d46:	bf00      	nop
 8008d48:	3770      	adds	r7, #112	@ 0x70
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	40008000 	.word	0x40008000

08008d54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <VL53L1X_GetSWVersion>:
	255, 255, 9, 13, 255, 255, 255, 255, 10, 6,
	255, 255, 11, 12
};

VL53L1X_ERROR VL53L1X_GetSWVersion(VL53L1X_Version_t *pVersion)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
	VL53L1X_ERROR Status = 0;
 8008d70:	2300      	movs	r3, #0
 8008d72:	73fb      	strb	r3, [r7, #15]

	pVersion->major = VL53L1X_IMPLEMENTATION_VER_MAJOR;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2203      	movs	r2, #3
 8008d78:	701a      	strb	r2, [r3, #0]
	pVersion->minor = VL53L1X_IMPLEMENTATION_VER_MINOR;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2205      	movs	r2, #5
 8008d7e:	705a      	strb	r2, [r3, #1]
	pVersion->build = VL53L1X_IMPLEMENTATION_VER_SUB;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	709a      	strb	r2, [r3, #2]
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	605a      	str	r2, [r3, #4]
	return Status;
 8008d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3714      	adds	r7, #20
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <VL53L1X_SensorInit>:
	status = VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	4603      	mov	r3, r0
 8008da4:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8008da6:	2300      	movs	r3, #0
 8008da8:	73bb      	strb	r3, [r7, #14]
	uint8_t Addr = 0x00, tmp;
 8008daa:	2300      	movs	r3, #0
 8008dac:	73fb      	strb	r3, [r7, #15]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8008dae:	232d      	movs	r3, #45	@ 0x2d
 8008db0:	73fb      	strb	r3, [r7, #15]
 8008db2:	e00e      	b.n	8008dd2 <VL53L1X_SensorInit+0x36>
		status = VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
 8008db6:	b299      	uxth	r1, r3
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
 8008dba:	3b2d      	subs	r3, #45	@ 0x2d
 8008dbc:	4a22      	ldr	r2, [pc, #136]	@ (8008e48 <VL53L1X_SensorInit+0xac>)
 8008dbe:	5cd2      	ldrb	r2, [r2, r3]
 8008dc0:	88fb      	ldrh	r3, [r7, #6]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 fbfa 	bl	80095bc <VL53L1_WrByte>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	73bb      	strb	r3, [r7, #14]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	73fb      	strb	r3, [r7, #15]
 8008dd2:	7bfb      	ldrb	r3, [r7, #15]
 8008dd4:	2b87      	cmp	r3, #135	@ 0x87
 8008dd6:	d9ed      	bls.n	8008db4 <VL53L1X_SensorInit+0x18>
	}
	status = VL53L1X_StartRanging(dev);
 8008dd8:	88fb      	ldrh	r3, [r7, #6]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 f872 	bl	8008ec4 <VL53L1X_StartRanging>
 8008de0:	4603      	mov	r3, r0
 8008de2:	73bb      	strb	r3, [r7, #14]
	tmp  = 0;
 8008de4:	2300      	movs	r3, #0
 8008de6:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 8008de8:	e008      	b.n	8008dfc <VL53L1X_SensorInit+0x60>
			status = VL53L1X_CheckForDataReady(dev, &tmp);
 8008dea:	f107 020d 	add.w	r2, r7, #13
 8008dee:	88fb      	ldrh	r3, [r7, #6]
 8008df0:	4611      	mov	r1, r2
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 f890 	bl	8008f18 <VL53L1X_CheckForDataReady>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	73bb      	strb	r3, [r7, #14]
	while(tmp==0){
 8008dfc:	7b7b      	ldrb	r3, [r7, #13]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d0f3      	beq.n	8008dea <VL53L1X_SensorInit+0x4e>
	}
	status = VL53L1X_ClearInterrupt(dev);
 8008e02:	88fb      	ldrh	r3, [r7, #6]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f000 f821 	bl	8008e4c <VL53L1X_ClearInterrupt>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	73bb      	strb	r3, [r7, #14]
	status = VL53L1X_StopRanging(dev);
 8008e0e:	88fb      	ldrh	r3, [r7, #6]
 8008e10:	4618      	mov	r0, r3
 8008e12:	f000 f86c 	bl	8008eee <VL53L1X_StopRanging>
 8008e16:	4603      	mov	r3, r0
 8008e18:	73bb      	strb	r3, [r7, #14]
	status = VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8008e1a:	88fb      	ldrh	r3, [r7, #6]
 8008e1c:	2209      	movs	r2, #9
 8008e1e:	2108      	movs	r1, #8
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 fbcb 	bl	80095bc <VL53L1_WrByte>
 8008e26:	4603      	mov	r3, r0
 8008e28:	73bb      	strb	r3, [r7, #14]
	status = VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8008e2a:	88fb      	ldrh	r3, [r7, #6]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	210b      	movs	r1, #11
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 fbc3 	bl	80095bc <VL53L1_WrByte>
 8008e36:	4603      	mov	r3, r0
 8008e38:	73bb      	strb	r3, [r7, #14]
	return status;
 8008e3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	0800e400 	.word	0x0800e400

08008e4c <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	4603      	mov	r3, r0
 8008e54:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8008e5a:	88fb      	ldrh	r3, [r7, #6]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	2186      	movs	r1, #134	@ 0x86
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 fbab 	bl	80095bc <VL53L1_WrByte>
 8008e66:	4603      	mov	r3, r0
 8008e68:	73fb      	strb	r3, [r7, #15]
	return status;
 8008e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <VL53L1X_GetInterruptPolarity>:
	status = VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b084      	sub	sp, #16
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	6039      	str	r1, [r7, #0]
 8008e80:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8008e82:	2300      	movs	r3, #0
 8008e84:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8008e86:	f107 020e 	add.w	r2, r7, #14
 8008e8a:	88fb      	ldrh	r3, [r7, #6]
 8008e8c:	2130      	movs	r1, #48	@ 0x30
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 fc30 	bl	80096f4 <VL53L1_RdByte>
 8008e94:	4603      	mov	r3, r0
 8008e96:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8008e98:	7bbb      	ldrb	r3, [r7, #14]
 8008e9a:	f003 0310 	and.w	r3, r3, #16
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 8008ea2:	7bbb      	ldrb	r3, [r7, #14]
 8008ea4:	091b      	lsrs	r3, r3, #4
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	bf0c      	ite	eq
 8008eac:	2301      	moveq	r3, #1
 8008eae:	2300      	movne	r3, #0
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	701a      	strb	r2, [r3, #0]
	return status;
 8008eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	4603      	mov	r3, r0
 8008ecc:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8008ed2:	88fb      	ldrh	r3, [r7, #6]
 8008ed4:	2240      	movs	r2, #64	@ 0x40
 8008ed6:	2187      	movs	r1, #135	@ 0x87
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 fb6f 	bl	80095bc <VL53L1_WrByte>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	73fb      	strb	r3, [r7, #15]
	return status;
 8008ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b084      	sub	sp, #16
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8008efc:	88fb      	ldrh	r3, [r7, #6]
 8008efe:	2200      	movs	r2, #0
 8008f00:	2187      	movs	r1, #135	@ 0x87
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 fb5a 	bl	80095bc <VL53L1_WrByte>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	73fb      	strb	r3, [r7, #15]
	return status;
 8008f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	6039      	str	r1, [r7, #0]
 8008f22:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8008f24:	2300      	movs	r3, #0
 8008f26:	73fb      	strb	r3, [r7, #15]

	status = VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8008f28:	f107 020d 	add.w	r2, r7, #13
 8008f2c:	88fb      	ldrh	r3, [r7, #6]
 8008f2e:	4611      	mov	r1, r2
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7ff ffa0 	bl	8008e76 <VL53L1X_GetInterruptPolarity>
 8008f36:	4603      	mov	r3, r0
 8008f38:	73fb      	strb	r3, [r7, #15]
	status = VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8008f3a:	f107 020e 	add.w	r2, r7, #14
 8008f3e:	88fb      	ldrh	r3, [r7, #6]
 8008f40:	2131      	movs	r1, #49	@ 0x31
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 fbd6 	bl	80096f4 <VL53L1_RdByte>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8008f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10c      	bne.n	8008f6e <VL53L1X_CheckForDataReady+0x56>
		if ((Temp & 1) == IntPol)
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	f003 0301 	and.w	r3, r3, #1
 8008f5a:	7b7a      	ldrb	r2, [r7, #13]
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d103      	bne.n	8008f68 <VL53L1X_CheckForDataReady+0x50>
			*isDataReady = 1;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	2201      	movs	r2, #1
 8008f64:	701a      	strb	r2, [r3, #0]
 8008f66:	e002      	b.n	8008f6e <VL53L1X_CheckForDataReady+0x56>
		else
			*isDataReady = 0;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8008f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	4603      	mov	r3, r0
 8008f82:	460a      	mov	r2, r1
 8008f84:	80fb      	strh	r3, [r7, #6]
 8008f86:	4613      	mov	r3, r2
 8008f88:	80bb      	strh	r3, [r7, #4]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	73fb      	strb	r3, [r7, #15]

	status = VL53L1X_GetDistanceMode(dev, &DM);
 8008f8e:	f107 020c 	add.w	r2, r7, #12
 8008f92:	88fb      	ldrh	r3, [r7, #6]
 8008f94:	4611      	mov	r1, r2
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 fa1e 	bl	80093d8 <VL53L1X_GetDistanceMode>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73fb      	strb	r3, [r7, #15]
	if (DM == 0)
 8008fa0:	89bb      	ldrh	r3, [r7, #12]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d101      	bne.n	8008faa <VL53L1X_SetTimingBudgetInMs+0x30>
		return 1;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e0f6      	b.n	8009198 <VL53L1X_SetTimingBudgetInMs+0x21e>
	else if (DM == 1) {	/* Short DistanceMode */
 8008faa:	89bb      	ldrh	r3, [r7, #12]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	f040 8082 	bne.w	80090b6 <VL53L1X_SetTimingBudgetInMs+0x13c>
		switch (TimingBudgetInMs) {
 8008fb2:	88bb      	ldrh	r3, [r7, #4]
 8008fb4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008fb8:	d06b      	beq.n	8009092 <VL53L1X_SetTimingBudgetInMs+0x118>
 8008fba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008fbe:	dc77      	bgt.n	80090b0 <VL53L1X_SetTimingBudgetInMs+0x136>
 8008fc0:	2bc8      	cmp	r3, #200	@ 0xc8
 8008fc2:	d057      	beq.n	8009074 <VL53L1X_SetTimingBudgetInMs+0xfa>
 8008fc4:	2bc8      	cmp	r3, #200	@ 0xc8
 8008fc6:	dc73      	bgt.n	80090b0 <VL53L1X_SetTimingBudgetInMs+0x136>
 8008fc8:	2b64      	cmp	r3, #100	@ 0x64
 8008fca:	d044      	beq.n	8009056 <VL53L1X_SetTimingBudgetInMs+0xdc>
 8008fcc:	2b64      	cmp	r3, #100	@ 0x64
 8008fce:	dc6f      	bgt.n	80090b0 <VL53L1X_SetTimingBudgetInMs+0x136>
 8008fd0:	2b32      	cmp	r3, #50	@ 0x32
 8008fd2:	d031      	beq.n	8009038 <VL53L1X_SetTimingBudgetInMs+0xbe>
 8008fd4:	2b32      	cmp	r3, #50	@ 0x32
 8008fd6:	dc6b      	bgt.n	80090b0 <VL53L1X_SetTimingBudgetInMs+0x136>
 8008fd8:	2b21      	cmp	r3, #33	@ 0x21
 8008fda:	d020      	beq.n	800901e <VL53L1X_SetTimingBudgetInMs+0xa4>
 8008fdc:	2b21      	cmp	r3, #33	@ 0x21
 8008fde:	dc67      	bgt.n	80090b0 <VL53L1X_SetTimingBudgetInMs+0x136>
 8008fe0:	2b0f      	cmp	r3, #15
 8008fe2:	d002      	beq.n	8008fea <VL53L1X_SetTimingBudgetInMs+0x70>
 8008fe4:	2b14      	cmp	r3, #20
 8008fe6:	d00d      	beq.n	8009004 <VL53L1X_SetTimingBudgetInMs+0x8a>
 8008fe8:	e062      	b.n	80090b0 <VL53L1X_SetTimingBudgetInMs+0x136>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8008fea:	88fb      	ldrh	r3, [r7, #6]
 8008fec:	221d      	movs	r2, #29
 8008fee:	215e      	movs	r1, #94	@ 0x5e
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f000 fb0f 	bl	8009614 <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8008ff6:	88fb      	ldrh	r3, [r7, #6]
 8008ff8:	2227      	movs	r2, #39	@ 0x27
 8008ffa:	2161      	movs	r1, #97	@ 0x61
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f000 fb09 	bl	8009614 <VL53L1_WrWord>
					0x0027);
			break;
 8009002:	e0c7      	b.n	8009194 <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8009004:	88fb      	ldrh	r3, [r7, #6]
 8009006:	2251      	movs	r2, #81	@ 0x51
 8009008:	215e      	movs	r1, #94	@ 0x5e
 800900a:	4618      	mov	r0, r3
 800900c:	f000 fb02 	bl	8009614 <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8009010:	88fb      	ldrh	r3, [r7, #6]
 8009012:	226e      	movs	r2, #110	@ 0x6e
 8009014:	2161      	movs	r1, #97	@ 0x61
 8009016:	4618      	mov	r0, r3
 8009018:	f000 fafc 	bl	8009614 <VL53L1_WrWord>
					0x006E);
			break;
 800901c:	e0ba      	b.n	8009194 <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800901e:	88fb      	ldrh	r3, [r7, #6]
 8009020:	22d6      	movs	r2, #214	@ 0xd6
 8009022:	215e      	movs	r1, #94	@ 0x5e
 8009024:	4618      	mov	r0, r3
 8009026:	f000 faf5 	bl	8009614 <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800902a:	88fb      	ldrh	r3, [r7, #6]
 800902c:	226e      	movs	r2, #110	@ 0x6e
 800902e:	2161      	movs	r1, #97	@ 0x61
 8009030:	4618      	mov	r0, r3
 8009032:	f000 faef 	bl	8009614 <VL53L1_WrWord>
					0x006E);
			break;
 8009036:	e0ad      	b.n	8009194 <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8009038:	88fb      	ldrh	r3, [r7, #6]
 800903a:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 800903e:	215e      	movs	r1, #94	@ 0x5e
 8009040:	4618      	mov	r0, r3
 8009042:	f000 fae7 	bl	8009614 <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8009046:	88fb      	ldrh	r3, [r7, #6]
 8009048:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800904c:	2161      	movs	r1, #97	@ 0x61
 800904e:	4618      	mov	r0, r3
 8009050:	f000 fae0 	bl	8009614 <VL53L1_WrWord>
					0x01E8);
			break;
 8009054:	e09e      	b.n	8009194 <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8009056:	88fb      	ldrh	r3, [r7, #6]
 8009058:	f240 22e1 	movw	r2, #737	@ 0x2e1
 800905c:	215e      	movs	r1, #94	@ 0x5e
 800905e:	4618      	mov	r0, r3
 8009060:	f000 fad8 	bl	8009614 <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8009064:	88fb      	ldrh	r3, [r7, #6]
 8009066:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800906a:	2161      	movs	r1, #97	@ 0x61
 800906c:	4618      	mov	r0, r3
 800906e:	f000 fad1 	bl	8009614 <VL53L1_WrWord>
					0x0388);
			break;
 8009072:	e08f      	b.n	8009194 <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8009074:	88fb      	ldrh	r3, [r7, #6]
 8009076:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800907a:	215e      	movs	r1, #94	@ 0x5e
 800907c:	4618      	mov	r0, r3
 800907e:	f000 fac9 	bl	8009614 <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8009082:	88fb      	ldrh	r3, [r7, #6]
 8009084:	f240 4296 	movw	r2, #1174	@ 0x496
 8009088:	2161      	movs	r1, #97	@ 0x61
 800908a:	4618      	mov	r0, r3
 800908c:	f000 fac2 	bl	8009614 <VL53L1_WrWord>
					0x0496);
			break;
 8009090:	e080      	b.n	8009194 <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8009092:	88fb      	ldrh	r3, [r7, #6]
 8009094:	f240 5291 	movw	r2, #1425	@ 0x591
 8009098:	215e      	movs	r1, #94	@ 0x5e
 800909a:	4618      	mov	r0, r3
 800909c:	f000 faba 	bl	8009614 <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80090a0:	88fb      	ldrh	r3, [r7, #6]
 80090a2:	f240 52c1 	movw	r2, #1473	@ 0x5c1
 80090a6:	2161      	movs	r1, #97	@ 0x61
 80090a8:	4618      	mov	r0, r3
 80090aa:	f000 fab3 	bl	8009614 <VL53L1_WrWord>
					0x05C1);
			break;
 80090ae:	e071      	b.n	8009194 <VL53L1X_SetTimingBudgetInMs+0x21a>
		default:
			status = 1;
 80090b0:	2301      	movs	r3, #1
 80090b2:	73fb      	strb	r3, [r7, #15]
			break;
 80090b4:	e06e      	b.n	8009194 <VL53L1X_SetTimingBudgetInMs+0x21a>
		}
	} else {
		switch (TimingBudgetInMs) {
 80090b6:	88bb      	ldrh	r3, [r7, #4]
 80090b8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80090bc:	d058      	beq.n	8009170 <VL53L1X_SetTimingBudgetInMs+0x1f6>
 80090be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80090c2:	dc64      	bgt.n	800918e <VL53L1X_SetTimingBudgetInMs+0x214>
 80090c4:	2bc8      	cmp	r3, #200	@ 0xc8
 80090c6:	d044      	beq.n	8009152 <VL53L1X_SetTimingBudgetInMs+0x1d8>
 80090c8:	2bc8      	cmp	r3, #200	@ 0xc8
 80090ca:	dc60      	bgt.n	800918e <VL53L1X_SetTimingBudgetInMs+0x214>
 80090cc:	2b64      	cmp	r3, #100	@ 0x64
 80090ce:	d031      	beq.n	8009134 <VL53L1X_SetTimingBudgetInMs+0x1ba>
 80090d0:	2b64      	cmp	r3, #100	@ 0x64
 80090d2:	dc5c      	bgt.n	800918e <VL53L1X_SetTimingBudgetInMs+0x214>
 80090d4:	2b32      	cmp	r3, #50	@ 0x32
 80090d6:	d020      	beq.n	800911a <VL53L1X_SetTimingBudgetInMs+0x1a0>
 80090d8:	2b32      	cmp	r3, #50	@ 0x32
 80090da:	dc58      	bgt.n	800918e <VL53L1X_SetTimingBudgetInMs+0x214>
 80090dc:	2b14      	cmp	r3, #20
 80090de:	d002      	beq.n	80090e6 <VL53L1X_SetTimingBudgetInMs+0x16c>
 80090e0:	2b21      	cmp	r3, #33	@ 0x21
 80090e2:	d00d      	beq.n	8009100 <VL53L1X_SetTimingBudgetInMs+0x186>
 80090e4:	e053      	b.n	800918e <VL53L1X_SetTimingBudgetInMs+0x214>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80090e6:	88fb      	ldrh	r3, [r7, #6]
 80090e8:	221e      	movs	r2, #30
 80090ea:	215e      	movs	r1, #94	@ 0x5e
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 fa91 	bl	8009614 <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80090f2:	88fb      	ldrh	r3, [r7, #6]
 80090f4:	2222      	movs	r2, #34	@ 0x22
 80090f6:	2161      	movs	r1, #97	@ 0x61
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 fa8b 	bl	8009614 <VL53L1_WrWord>
					0x0022);
			break;
 80090fe:	e049      	b.n	8009194 <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8009100:	88fb      	ldrh	r3, [r7, #6]
 8009102:	2260      	movs	r2, #96	@ 0x60
 8009104:	215e      	movs	r1, #94	@ 0x5e
 8009106:	4618      	mov	r0, r3
 8009108:	f000 fa84 	bl	8009614 <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800910c:	88fb      	ldrh	r3, [r7, #6]
 800910e:	226e      	movs	r2, #110	@ 0x6e
 8009110:	2161      	movs	r1, #97	@ 0x61
 8009112:	4618      	mov	r0, r3
 8009114:	f000 fa7e 	bl	8009614 <VL53L1_WrWord>
					0x006E);
			break;
 8009118:	e03c      	b.n	8009194 <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800911a:	88fb      	ldrh	r3, [r7, #6]
 800911c:	22ad      	movs	r2, #173	@ 0xad
 800911e:	215e      	movs	r1, #94	@ 0x5e
 8009120:	4618      	mov	r0, r3
 8009122:	f000 fa77 	bl	8009614 <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8009126:	88fb      	ldrh	r3, [r7, #6]
 8009128:	22c6      	movs	r2, #198	@ 0xc6
 800912a:	2161      	movs	r1, #97	@ 0x61
 800912c:	4618      	mov	r0, r3
 800912e:	f000 fa71 	bl	8009614 <VL53L1_WrWord>
					0x00C6);
			break;
 8009132:	e02f      	b.n	8009194 <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8009134:	88fb      	ldrh	r3, [r7, #6]
 8009136:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800913a:	215e      	movs	r1, #94	@ 0x5e
 800913c:	4618      	mov	r0, r3
 800913e:	f000 fa69 	bl	8009614 <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8009142:	88fb      	ldrh	r3, [r7, #6]
 8009144:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 8009148:	2161      	movs	r1, #97	@ 0x61
 800914a:	4618      	mov	r0, r3
 800914c:	f000 fa62 	bl	8009614 <VL53L1_WrWord>
					0x01EA);
			break;
 8009150:	e020      	b.n	8009194 <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8009152:	88fb      	ldrh	r3, [r7, #6]
 8009154:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8009158:	215e      	movs	r1, #94	@ 0x5e
 800915a:	4618      	mov	r0, r3
 800915c:	f000 fa5a 	bl	8009614 <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8009160:	88fb      	ldrh	r3, [r7, #6]
 8009162:	f44f 723e 	mov.w	r2, #760	@ 0x2f8
 8009166:	2161      	movs	r1, #97	@ 0x61
 8009168:	4618      	mov	r0, r3
 800916a:	f000 fa53 	bl	8009614 <VL53L1_WrWord>
					0x02F8);
			break;
 800916e:	e011      	b.n	8009194 <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8009170:	88fb      	ldrh	r3, [r7, #6]
 8009172:	f240 428f 	movw	r2, #1167	@ 0x48f
 8009176:	215e      	movs	r1, #94	@ 0x5e
 8009178:	4618      	mov	r0, r3
 800917a:	f000 fa4b 	bl	8009614 <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800917e:	88fb      	ldrh	r3, [r7, #6]
 8009180:	f240 42a4 	movw	r2, #1188	@ 0x4a4
 8009184:	2161      	movs	r1, #97	@ 0x61
 8009186:	4618      	mov	r0, r3
 8009188:	f000 fa44 	bl	8009614 <VL53L1_WrWord>
					0x04A4);
			break;
 800918c:	e002      	b.n	8009194 <VL53L1X_SetTimingBudgetInMs+0x21a>
		default:
			status = 1;
 800918e:	2301      	movs	r3, #1
 8009190:	73fb      	strb	r3, [r7, #15]
			break;
 8009192:	bf00      	nop
		}
	}
	return status;
 8009194:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	4603      	mov	r3, r0
 80091a8:	6039      	str	r1, [r7, #0]
 80091aa:	80fb      	strh	r3, [r7, #6]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 80091ac:	2300      	movs	r3, #0
 80091ae:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 80091b0:	f107 020c 	add.w	r2, r7, #12
 80091b4:	88fb      	ldrh	r3, [r7, #6]
 80091b6:	215e      	movs	r1, #94	@ 0x5e
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 fad3 	bl	8009764 <VL53L1_RdWord>
 80091be:	4603      	mov	r3, r0
 80091c0:	73fb      	strb	r3, [r7, #15]
	switch (Temp) {
 80091c2:	89bb      	ldrh	r3, [r7, #12]
 80091c4:	f240 5291 	movw	r2, #1425	@ 0x591
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d05b      	beq.n	8009284 <VL53L1X_GetTimingBudgetInMs+0xe4>
 80091cc:	f240 5291 	movw	r2, #1425	@ 0x591
 80091d0:	4293      	cmp	r3, r2
 80091d2:	dc5c      	bgt.n	800928e <VL53L1X_GetTimingBudgetInMs+0xee>
 80091d4:	f240 428f 	movw	r2, #1167	@ 0x48f
 80091d8:	4293      	cmp	r3, r2
 80091da:	d053      	beq.n	8009284 <VL53L1X_GetTimingBudgetInMs+0xe4>
 80091dc:	f5b3 6f92 	cmp.w	r3, #1168	@ 0x490
 80091e0:	da55      	bge.n	800928e <VL53L1X_GetTimingBudgetInMs+0xee>
 80091e2:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d048      	beq.n	800927c <VL53L1X_GetTimingBudgetInMs+0xdc>
 80091ea:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80091ee:	4293      	cmp	r3, r2
 80091f0:	dc4d      	bgt.n	800928e <VL53L1X_GetTimingBudgetInMs+0xee>
 80091f2:	f240 22e1 	movw	r2, #737	@ 0x2e1
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d03c      	beq.n	8009274 <VL53L1X_GetTimingBudgetInMs+0xd4>
 80091fa:	f240 22e1 	movw	r2, #737	@ 0x2e1
 80091fe:	4293      	cmp	r3, r2
 8009200:	dc45      	bgt.n	800928e <VL53L1X_GetTimingBudgetInMs+0xee>
 8009202:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8009206:	4293      	cmp	r3, r2
 8009208:	d038      	beq.n	800927c <VL53L1X_GetTimingBudgetInMs+0xdc>
 800920a:	f240 22d9 	movw	r2, #729	@ 0x2d9
 800920e:	4293      	cmp	r3, r2
 8009210:	dc3d      	bgt.n	800928e <VL53L1X_GetTimingBudgetInMs+0xee>
 8009212:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 8009216:	d02d      	beq.n	8009274 <VL53L1X_GetTimingBudgetInMs+0xd4>
 8009218:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 800921c:	dc37      	bgt.n	800928e <VL53L1X_GetTimingBudgetInMs+0xee>
 800921e:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 8009222:	d023      	beq.n	800926c <VL53L1X_GetTimingBudgetInMs+0xcc>
 8009224:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 8009228:	dc31      	bgt.n	800928e <VL53L1X_GetTimingBudgetInMs+0xee>
 800922a:	2bd6      	cmp	r3, #214	@ 0xd6
 800922c:	d01a      	beq.n	8009264 <VL53L1X_GetTimingBudgetInMs+0xc4>
 800922e:	2bd6      	cmp	r3, #214	@ 0xd6
 8009230:	dc2d      	bgt.n	800928e <VL53L1X_GetTimingBudgetInMs+0xee>
 8009232:	2bad      	cmp	r3, #173	@ 0xad
 8009234:	d01a      	beq.n	800926c <VL53L1X_GetTimingBudgetInMs+0xcc>
 8009236:	2bad      	cmp	r3, #173	@ 0xad
 8009238:	dc29      	bgt.n	800928e <VL53L1X_GetTimingBudgetInMs+0xee>
 800923a:	2b60      	cmp	r3, #96	@ 0x60
 800923c:	d012      	beq.n	8009264 <VL53L1X_GetTimingBudgetInMs+0xc4>
 800923e:	2b60      	cmp	r3, #96	@ 0x60
 8009240:	dc25      	bgt.n	800928e <VL53L1X_GetTimingBudgetInMs+0xee>
 8009242:	2b51      	cmp	r3, #81	@ 0x51
 8009244:	d00a      	beq.n	800925c <VL53L1X_GetTimingBudgetInMs+0xbc>
 8009246:	2b51      	cmp	r3, #81	@ 0x51
 8009248:	dc21      	bgt.n	800928e <VL53L1X_GetTimingBudgetInMs+0xee>
 800924a:	2b1d      	cmp	r3, #29
 800924c:	d002      	beq.n	8009254 <VL53L1X_GetTimingBudgetInMs+0xb4>
 800924e:	2b1e      	cmp	r3, #30
 8009250:	d004      	beq.n	800925c <VL53L1X_GetTimingBudgetInMs+0xbc>
 8009252:	e01c      	b.n	800928e <VL53L1X_GetTimingBudgetInMs+0xee>
		case 0x001D :
			*pTimingBudget = 15;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	220f      	movs	r2, #15
 8009258:	801a      	strh	r2, [r3, #0]
			break;
 800925a:	e01d      	b.n	8009298 <VL53L1X_GetTimingBudgetInMs+0xf8>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	2214      	movs	r2, #20
 8009260:	801a      	strh	r2, [r3, #0]
			break;
 8009262:	e019      	b.n	8009298 <VL53L1X_GetTimingBudgetInMs+0xf8>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2221      	movs	r2, #33	@ 0x21
 8009268:	801a      	strh	r2, [r3, #0]
			break;
 800926a:	e015      	b.n	8009298 <VL53L1X_GetTimingBudgetInMs+0xf8>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	2232      	movs	r2, #50	@ 0x32
 8009270:	801a      	strh	r2, [r3, #0]
			break;
 8009272:	e011      	b.n	8009298 <VL53L1X_GetTimingBudgetInMs+0xf8>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	2264      	movs	r2, #100	@ 0x64
 8009278:	801a      	strh	r2, [r3, #0]
			break;
 800927a:	e00d      	b.n	8009298 <VL53L1X_GetTimingBudgetInMs+0xf8>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	22c8      	movs	r2, #200	@ 0xc8
 8009280:	801a      	strh	r2, [r3, #0]
			break;
 8009282:	e009      	b.n	8009298 <VL53L1X_GetTimingBudgetInMs+0xf8>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800928a:	801a      	strh	r2, [r3, #0]
			break;
 800928c:	e004      	b.n	8009298 <VL53L1X_GetTimingBudgetInMs+0xf8>
		default:
			status = 1;
 800928e:	2301      	movs	r3, #1
 8009290:	73fb      	strb	r3, [r7, #15]
			*pTimingBudget = 0;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	2200      	movs	r2, #0
 8009296:	801a      	strh	r2, [r3, #0]
	}
	return status;
 8009298:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	4603      	mov	r3, r0
 80092ac:	460a      	mov	r2, r1
 80092ae:	80fb      	strh	r3, [r7, #6]
 80092b0:	4613      	mov	r3, r2
 80092b2:	80bb      	strh	r3, [r7, #4]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 80092b4:	2300      	movs	r3, #0
 80092b6:	73fb      	strb	r3, [r7, #15]

	status = VL53L1X_GetTimingBudgetInMs(dev, &TB);
 80092b8:	f107 020c 	add.w	r2, r7, #12
 80092bc:	88fb      	ldrh	r3, [r7, #6]
 80092be:	4611      	mov	r1, r2
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7ff ff6d 	bl	80091a0 <VL53L1X_GetTimingBudgetInMs>
 80092c6:	4603      	mov	r3, r0
 80092c8:	73fb      	strb	r3, [r7, #15]
	if (status != 0)
 80092ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <VL53L1X_SetDistanceMode+0x32>
		return 1;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e07c      	b.n	80093d0 <VL53L1X_SetDistanceMode+0x12c>
	switch (DM) {
 80092d6:	88bb      	ldrh	r3, [r7, #4]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d002      	beq.n	80092e2 <VL53L1X_SetDistanceMode+0x3e>
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d033      	beq.n	8009348 <VL53L1X_SetDistanceMode+0xa4>
 80092e0:	e065      	b.n	80093ae <VL53L1X_SetDistanceMode+0x10a>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 80092e2:	88fb      	ldrh	r3, [r7, #6]
 80092e4:	2214      	movs	r2, #20
 80092e6:	214b      	movs	r1, #75	@ 0x4b
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 f967 	bl	80095bc <VL53L1_WrByte>
 80092ee:	4603      	mov	r3, r0
 80092f0:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 80092f2:	88fb      	ldrh	r3, [r7, #6]
 80092f4:	2207      	movs	r2, #7
 80092f6:	2160      	movs	r1, #96	@ 0x60
 80092f8:	4618      	mov	r0, r3
 80092fa:	f000 f95f 	bl	80095bc <VL53L1_WrByte>
 80092fe:	4603      	mov	r3, r0
 8009300:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 8009302:	88fb      	ldrh	r3, [r7, #6]
 8009304:	2205      	movs	r2, #5
 8009306:	2163      	movs	r1, #99	@ 0x63
 8009308:	4618      	mov	r0, r3
 800930a:	f000 f957 	bl	80095bc <VL53L1_WrByte>
 800930e:	4603      	mov	r3, r0
 8009310:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 8009312:	88fb      	ldrh	r3, [r7, #6]
 8009314:	2238      	movs	r2, #56	@ 0x38
 8009316:	2169      	movs	r1, #105	@ 0x69
 8009318:	4618      	mov	r0, r3
 800931a:	f000 f94f 	bl	80095bc <VL53L1_WrByte>
 800931e:	4603      	mov	r3, r0
 8009320:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 8009322:	88fb      	ldrh	r3, [r7, #6]
 8009324:	f240 7205 	movw	r2, #1797	@ 0x705
 8009328:	2178      	movs	r1, #120	@ 0x78
 800932a:	4618      	mov	r0, r3
 800932c:	f000 f972 	bl	8009614 <VL53L1_WrWord>
 8009330:	4603      	mov	r3, r0
 8009332:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 8009334:	88fb      	ldrh	r3, [r7, #6]
 8009336:	f240 6206 	movw	r2, #1542	@ 0x606
 800933a:	217a      	movs	r1, #122	@ 0x7a
 800933c:	4618      	mov	r0, r3
 800933e:	f000 f969 	bl	8009614 <VL53L1_WrWord>
 8009342:	4603      	mov	r3, r0
 8009344:	73fb      	strb	r3, [r7, #15]
		break;
 8009346:	e035      	b.n	80093b4 <VL53L1X_SetDistanceMode+0x110>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 8009348:	88fb      	ldrh	r3, [r7, #6]
 800934a:	220a      	movs	r2, #10
 800934c:	214b      	movs	r1, #75	@ 0x4b
 800934e:	4618      	mov	r0, r3
 8009350:	f000 f934 	bl	80095bc <VL53L1_WrByte>
 8009354:	4603      	mov	r3, r0
 8009356:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 8009358:	88fb      	ldrh	r3, [r7, #6]
 800935a:	220f      	movs	r2, #15
 800935c:	2160      	movs	r1, #96	@ 0x60
 800935e:	4618      	mov	r0, r3
 8009360:	f000 f92c 	bl	80095bc <VL53L1_WrByte>
 8009364:	4603      	mov	r3, r0
 8009366:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 8009368:	88fb      	ldrh	r3, [r7, #6]
 800936a:	220d      	movs	r2, #13
 800936c:	2163      	movs	r1, #99	@ 0x63
 800936e:	4618      	mov	r0, r3
 8009370:	f000 f924 	bl	80095bc <VL53L1_WrByte>
 8009374:	4603      	mov	r3, r0
 8009376:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 8009378:	88fb      	ldrh	r3, [r7, #6]
 800937a:	22b8      	movs	r2, #184	@ 0xb8
 800937c:	2169      	movs	r1, #105	@ 0x69
 800937e:	4618      	mov	r0, r3
 8009380:	f000 f91c 	bl	80095bc <VL53L1_WrByte>
 8009384:	4603      	mov	r3, r0
 8009386:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 8009388:	88fb      	ldrh	r3, [r7, #6]
 800938a:	f640 720d 	movw	r2, #3853	@ 0xf0d
 800938e:	2178      	movs	r1, #120	@ 0x78
 8009390:	4618      	mov	r0, r3
 8009392:	f000 f93f 	bl	8009614 <VL53L1_WrWord>
 8009396:	4603      	mov	r3, r0
 8009398:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 800939a:	88fb      	ldrh	r3, [r7, #6]
 800939c:	f640 620e 	movw	r2, #3598	@ 0xe0e
 80093a0:	217a      	movs	r1, #122	@ 0x7a
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 f936 	bl	8009614 <VL53L1_WrWord>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73fb      	strb	r3, [r7, #15]
		break;
 80093ac:	e002      	b.n	80093b4 <VL53L1X_SetDistanceMode+0x110>
	default:
		status = 1;
 80093ae:	2301      	movs	r3, #1
 80093b0:	73fb      	strb	r3, [r7, #15]
		break;
 80093b2:	bf00      	nop
	}

	if (status == 0)
 80093b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d107      	bne.n	80093cc <VL53L1X_SetDistanceMode+0x128>
		status = VL53L1X_SetTimingBudgetInMs(dev, TB);
 80093bc:	89ba      	ldrh	r2, [r7, #12]
 80093be:	88fb      	ldrh	r3, [r7, #6]
 80093c0:	4611      	mov	r1, r2
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7ff fdd9 	bl	8008f7a <VL53L1X_SetTimingBudgetInMs>
 80093c8:	4603      	mov	r3, r0
 80093ca:	73fb      	strb	r3, [r7, #15]
	return status;
 80093cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	4603      	mov	r3, r0
 80093e0:	6039      	str	r1, [r7, #0]
 80093e2:	80fb      	strh	r3, [r7, #6]
	uint8_t TempDM, status=0;
 80093e4:	2300      	movs	r3, #0
 80093e6:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 80093e8:	f107 020e 	add.w	r2, r7, #14
 80093ec:	88fb      	ldrh	r3, [r7, #6]
 80093ee:	214b      	movs	r1, #75	@ 0x4b
 80093f0:	4618      	mov	r0, r3
 80093f2:	f000 f97f 	bl	80096f4 <VL53L1_RdByte>
 80093f6:	4603      	mov	r3, r0
 80093f8:	73fb      	strb	r3, [r7, #15]
	if (TempDM == 0x14)
 80093fa:	7bbb      	ldrb	r3, [r7, #14]
 80093fc:	2b14      	cmp	r3, #20
 80093fe:	d102      	bne.n	8009406 <VL53L1X_GetDistanceMode+0x2e>
		*DM=1;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	2201      	movs	r2, #1
 8009404:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8009406:	7bbb      	ldrb	r3, [r7, #14]
 8009408:	2b0a      	cmp	r3, #10
 800940a:	d102      	bne.n	8009412 <VL53L1X_GetDistanceMode+0x3a>
		*DM=2;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	2202      	movs	r2, #2
 8009410:	801a      	strh	r2, [r3, #0]
	return status;
 8009412:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
	...

08009420 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	4603      	mov	r3, r0
 8009428:	6039      	str	r1, [r7, #0]
 800942a:	80fb      	strh	r3, [r7, #6]
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;
 800942c:	2300      	movs	r3, #0
 800942e:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 8009430:	f107 020c 	add.w	r2, r7, #12
 8009434:	88fb      	ldrh	r3, [r7, #6]
 8009436:	21de      	movs	r1, #222	@ 0xde
 8009438:	4618      	mov	r0, r3
 800943a:	f000 f993 	bl	8009764 <VL53L1_RdWord>
 800943e:	4603      	mov	r3, r0
 8009440:	73fb      	strb	r3, [r7, #15]
	ClockPLL = ClockPLL&0x3FF;
 8009442:	89bb      	ldrh	r3, [r7, #12]
 8009444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009448:	b29b      	uxth	r3, r3
 800944a:	81bb      	strh	r3, [r7, #12]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 800944c:	89bb      	ldrh	r3, [r7, #12]
 800944e:	461a      	mov	r2, r3
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	fb02 f303 	mul.w	r3, r2, r3
 8009456:	4618      	mov	r0, r3
 8009458:	f7f7 f864 	bl	8000524 <__aeabi_ui2d>
 800945c:	a30c      	add	r3, pc, #48	@ (adr r3, 8009490 <VL53L1X_SetInterMeasurementInMs+0x70>)
 800945e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009462:	f7f7 f8d9 	bl	8000618 <__aeabi_dmul>
 8009466:	4602      	mov	r2, r0
 8009468:	460b      	mov	r3, r1
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 800946a:	4610      	mov	r0, r2
 800946c:	4619      	mov	r1, r3
 800946e:	f7f7 fbab 	bl	8000bc8 <__aeabi_d2uiz>
 8009472:	4602      	mov	r2, r0
 8009474:	88fb      	ldrh	r3, [r7, #6]
 8009476:	216c      	movs	r1, #108	@ 0x6c
 8009478:	4618      	mov	r0, r3
 800947a:	f000 f8ff 	bl	800967c <VL53L1_WrDWord>
	return status;
 800947e:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8009482:	4618      	mov	r0, r3
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	f3af 8000 	nop.w
 8009490:	33333333 	.word	0x33333333
 8009494:	3ff13333 	.word	0x3ff13333

08009498 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	4603      	mov	r3, r0
 80094a0:	6039      	str	r1, [r7, #0]
 80094a2:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	73bb      	strb	r3, [r7, #14]

	status = VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 80094ac:	f107 020e 	add.w	r2, r7, #14
 80094b0:	88fb      	ldrh	r3, [r7, #6]
 80094b2:	21e5      	movs	r1, #229	@ 0xe5
 80094b4:	4618      	mov	r0, r3
 80094b6:	f000 f91d 	bl	80096f4 <VL53L1_RdByte>
 80094ba:	4603      	mov	r3, r0
 80094bc:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 80094be:	7bba      	ldrb	r2, [r7, #14]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	701a      	strb	r2, [r3, #0]
	return status;
 80094c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <VL53L1X_GetSensorId>:

VL53L1X_ERROR VL53L1X_GetSensorId(uint16_t dev, uint16_t *sensorId)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	4603      	mov	r3, r0
 80094d8:	6039      	str	r1, [r7, #0]
 80094da:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80094dc:	2300      	movs	r3, #0
 80094de:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp = 0;
 80094e0:	2300      	movs	r3, #0
 80094e2:	81bb      	strh	r3, [r7, #12]

	status = VL53L1_RdWord(dev, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
 80094e4:	f107 020c 	add.w	r2, r7, #12
 80094e8:	88fb      	ldrh	r3, [r7, #6]
 80094ea:	f240 110f 	movw	r1, #271	@ 0x10f
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 f938 	bl	8009764 <VL53L1_RdWord>
 80094f4:	4603      	mov	r3, r0
 80094f6:	73fb      	strb	r3, [r7, #15]
	*sensorId = tmp;
 80094f8:	89ba      	ldrh	r2, [r7, #12]
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	801a      	strh	r2, [r3, #0]
	return status;
 80094fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <VL53L1X_GetDistance>:

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b084      	sub	sp, #16
 800950e:	af00      	add	r7, sp, #0
 8009510:	4603      	mov	r3, r0
 8009512:	6039      	str	r1, [r7, #0]
 8009514:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status = (VL53L1_RdWord(dev,
 800951a:	f107 020c 	add.w	r2, r7, #12
 800951e:	88fb      	ldrh	r3, [r7, #6]
 8009520:	2196      	movs	r1, #150	@ 0x96
 8009522:	4618      	mov	r0, r3
 8009524:	f000 f91e 	bl	8009764 <VL53L1_RdWord>
 8009528:	4603      	mov	r3, r0
 800952a:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 800952c:	89ba      	ldrh	r2, [r7, #12]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	801a      	strh	r2, [r3, #0]
	return status;
 8009532:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
	...

08009540 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8009540:	b580      	push	{r7, lr}
 8009542:	b088      	sub	sp, #32
 8009544:	af02      	add	r7, sp, #8
 8009546:	4603      	mov	r3, r0
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	81fb      	strh	r3, [r7, #14]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	330a      	adds	r3, #10
 8009552:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, i2c_time_out);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	b29a      	uxth	r2, r3
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	89f9      	ldrh	r1, [r7, #14]
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	4613      	mov	r3, r2
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	4805      	ldr	r0, [pc, #20]	@ (8009578 <_I2CWrite+0x38>)
 8009564:	f7fa ff08 	bl	8004378 <HAL_I2C_Master_Transmit>
 8009568:	4603      	mov	r3, r0
 800956a:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800956c:	693b      	ldr	r3, [r7, #16]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3718      	adds	r7, #24
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	20000254 	.word	0x20000254

0800957c <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 800957c:	b580      	push	{r7, lr}
 800957e:	b088      	sub	sp, #32
 8009580:	af02      	add	r7, sp, #8
 8009582:	4603      	mov	r3, r0
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
 8009588:	81fb      	strh	r3, [r7, #14]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	330a      	adds	r3, #10
 800958e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, i2c_time_out);
 8009590:	89fb      	ldrh	r3, [r7, #14]
 8009592:	f043 0301 	orr.w	r3, r3, #1
 8009596:	b299      	uxth	r1, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	b29a      	uxth	r2, r3
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	4613      	mov	r3, r2
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	4804      	ldr	r0, [pc, #16]	@ (80095b8 <_I2CRead+0x3c>)
 80095a6:	f7fa ffff 	bl	80045a8 <HAL_I2C_Master_Receive>
 80095aa:	4603      	mov	r3, r0
 80095ac:	613b      	str	r3, [r7, #16]
    //status = HAL_I2C_Master_Receive(&hi2c1, Dev, pdata, count, HAL_MAX_DELAY);
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80095ae:	693b      	ldr	r3, [r7, #16]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3718      	adds	r7, #24
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	20000254 	.word	0x20000254

080095bc <VL53L1_WrByte>:
done:
    VL53L1_PutI2cBus();
    return Status;
}

int8_t VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	4603      	mov	r3, r0
 80095c4:	80fb      	strh	r3, [r7, #6]
 80095c6:	460b      	mov	r3, r1
 80095c8:	80bb      	strh	r3, [r7, #4]
 80095ca:	4613      	mov	r3, r2
 80095cc:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80095ce:	2300      	movs	r3, #0
 80095d0:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80095d2:	88bb      	ldrh	r3, [r7, #4]
 80095d4:	0a1b      	lsrs	r3, r3, #8
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	b2da      	uxtb	r2, r3
 80095da:	4b0d      	ldr	r3, [pc, #52]	@ (8009610 <VL53L1_WrByte+0x54>)
 80095dc:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80095de:	88bb      	ldrh	r3, [r7, #4]
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	4b0b      	ldr	r3, [pc, #44]	@ (8009610 <VL53L1_WrByte+0x54>)
 80095e4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 80095e6:	4a0a      	ldr	r2, [pc, #40]	@ (8009610 <VL53L1_WrByte+0x54>)
 80095e8:	78fb      	ldrb	r3, [r7, #3]
 80095ea:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80095ec:	88fb      	ldrh	r3, [r7, #6]
 80095ee:	2203      	movs	r2, #3
 80095f0:	4907      	ldr	r1, [pc, #28]	@ (8009610 <VL53L1_WrByte+0x54>)
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff ffa4 	bl	8009540 <_I2CWrite>
 80095f8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8009600:	23f3      	movs	r3, #243	@ 0xf3
 8009602:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8009604:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	2000059c 	.word	0x2000059c

08009614 <VL53L1_WrWord>:

int8_t VL53L1_WrWord(uint16_t Dev, uint16_t index, uint16_t data) {
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	4603      	mov	r3, r0
 800961c:	80fb      	strh	r3, [r7, #6]
 800961e:	460b      	mov	r3, r1
 8009620:	80bb      	strh	r3, [r7, #4]
 8009622:	4613      	mov	r3, r2
 8009624:	807b      	strh	r3, [r7, #2]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009626:	2300      	movs	r3, #0
 8009628:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800962a:	88bb      	ldrh	r3, [r7, #4]
 800962c:	0a1b      	lsrs	r3, r3, #8
 800962e:	b29b      	uxth	r3, r3
 8009630:	b2da      	uxtb	r2, r3
 8009632:	4b11      	ldr	r3, [pc, #68]	@ (8009678 <VL53L1_WrWord+0x64>)
 8009634:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8009636:	88bb      	ldrh	r3, [r7, #4]
 8009638:	b2da      	uxtb	r2, r3
 800963a:	4b0f      	ldr	r3, [pc, #60]	@ (8009678 <VL53L1_WrWord+0x64>)
 800963c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 800963e:	887b      	ldrh	r3, [r7, #2]
 8009640:	0a1b      	lsrs	r3, r3, #8
 8009642:	b29b      	uxth	r3, r3
 8009644:	b2da      	uxtb	r2, r3
 8009646:	4b0c      	ldr	r3, [pc, #48]	@ (8009678 <VL53L1_WrWord+0x64>)
 8009648:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 800964a:	887b      	ldrh	r3, [r7, #2]
 800964c:	b2da      	uxtb	r2, r3
 800964e:	4b0a      	ldr	r3, [pc, #40]	@ (8009678 <VL53L1_WrWord+0x64>)
 8009650:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8009652:	88fb      	ldrh	r3, [r7, #6]
 8009654:	2204      	movs	r2, #4
 8009656:	4908      	ldr	r1, [pc, #32]	@ (8009678 <VL53L1_WrWord+0x64>)
 8009658:	4618      	mov	r0, r3
 800965a:	f7ff ff71 	bl	8009540 <_I2CWrite>
 800965e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <VL53L1_WrWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8009666:	23f3      	movs	r3, #243	@ 0xf3
 8009668:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 800966a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	2000059c 	.word	0x2000059c

0800967c <VL53L1_WrDWord>:

int8_t VL53L1_WrDWord(uint16_t Dev, uint16_t index, uint32_t data) {
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	4603      	mov	r3, r0
 8009684:	603a      	str	r2, [r7, #0]
 8009686:	80fb      	strh	r3, [r7, #6]
 8009688:	460b      	mov	r3, r1
 800968a:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800968c:	2300      	movs	r3, #0
 800968e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
    _I2CBuffer[0] = index>>8;
 8009690:	88bb      	ldrh	r3, [r7, #4]
 8009692:	0a1b      	lsrs	r3, r3, #8
 8009694:	b29b      	uxth	r3, r3
 8009696:	b2da      	uxtb	r2, r3
 8009698:	4b15      	ldr	r3, [pc, #84]	@ (80096f0 <VL53L1_WrDWord+0x74>)
 800969a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800969c:	88bb      	ldrh	r3, [r7, #4]
 800969e:	b2da      	uxtb	r2, r3
 80096a0:	4b13      	ldr	r3, [pc, #76]	@ (80096f0 <VL53L1_WrDWord+0x74>)
 80096a2:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 24) & 0xFF;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	0e1b      	lsrs	r3, r3, #24
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	4b11      	ldr	r3, [pc, #68]	@ (80096f0 <VL53L1_WrDWord+0x74>)
 80096ac:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 16) & 0xFF;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	0c1b      	lsrs	r3, r3, #16
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	4b0e      	ldr	r3, [pc, #56]	@ (80096f0 <VL53L1_WrDWord+0x74>)
 80096b6:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 8)  & 0xFF;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	0a1b      	lsrs	r3, r3, #8
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	4b0c      	ldr	r3, [pc, #48]	@ (80096f0 <VL53L1_WrDWord+0x74>)
 80096c0:	711a      	strb	r2, [r3, #4]
    _I2CBuffer[5] = (data >> 0 ) & 0xFF;
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	4b0a      	ldr	r3, [pc, #40]	@ (80096f0 <VL53L1_WrDWord+0x74>)
 80096c8:	715a      	strb	r2, [r3, #5]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 6);
 80096ca:	88fb      	ldrh	r3, [r7, #6]
 80096cc:	2206      	movs	r2, #6
 80096ce:	4908      	ldr	r1, [pc, #32]	@ (80096f0 <VL53L1_WrDWord+0x74>)
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7ff ff35 	bl	8009540 <_I2CWrite>
 80096d6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d001      	beq.n	80096e2 <VL53L1_WrDWord+0x66>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80096de:	23f3      	movs	r3, #243	@ 0xf3
 80096e0:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 80096e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	2000059c 	.word	0x2000059c

080096f4 <VL53L1_RdByte>:

int8_t VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	4603      	mov	r3, r0
 80096fc:	603a      	str	r2, [r7, #0]
 80096fe:	80fb      	strh	r3, [r7, #6]
 8009700:	460b      	mov	r3, r1
 8009702:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009704:	2300      	movs	r3, #0
 8009706:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8009708:	88bb      	ldrh	r3, [r7, #4]
 800970a:	0a1b      	lsrs	r3, r3, #8
 800970c:	b29b      	uxth	r3, r3
 800970e:	b2da      	uxtb	r2, r3
 8009710:	4b13      	ldr	r3, [pc, #76]	@ (8009760 <VL53L1_RdByte+0x6c>)
 8009712:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8009714:	88bb      	ldrh	r3, [r7, #4]
 8009716:	b2da      	uxtb	r2, r3
 8009718:	4b11      	ldr	r3, [pc, #68]	@ (8009760 <VL53L1_RdByte+0x6c>)
 800971a:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800971c:	88fb      	ldrh	r3, [r7, #6]
 800971e:	2202      	movs	r2, #2
 8009720:	490f      	ldr	r1, [pc, #60]	@ (8009760 <VL53L1_RdByte+0x6c>)
 8009722:	4618      	mov	r0, r3
 8009724:	f7ff ff0c 	bl	8009540 <_I2CWrite>
 8009728:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d002      	beq.n	8009736 <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8009730:	23f3      	movs	r3, #243	@ 0xf3
 8009732:	73fb      	strb	r3, [r7, #15]
        goto done;
 8009734:	e00d      	b.n	8009752 <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(Dev, data, 1);
 8009736:	88fb      	ldrh	r3, [r7, #6]
 8009738:	2201      	movs	r2, #1
 800973a:	6839      	ldr	r1, [r7, #0]
 800973c:	4618      	mov	r0, r3
 800973e:	f7ff ff1d 	bl	800957c <_I2CRead>
 8009742:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d002      	beq.n	8009750 <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800974a:	23f3      	movs	r3, #243	@ 0xf3
 800974c:	73fb      	strb	r3, [r7, #15]
 800974e:	e000      	b.n	8009752 <VL53L1_RdByte+0x5e>
    }
done:
 8009750:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8009752:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	2000059c 	.word	0x2000059c

08009764 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data) {
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	4603      	mov	r3, r0
 800976c:	603a      	str	r2, [r7, #0]
 800976e:	80fb      	strh	r3, [r7, #6]
 8009770:	460b      	mov	r3, r1
 8009772:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009774:	2300      	movs	r3, #0
 8009776:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8009778:	88bb      	ldrh	r3, [r7, #4]
 800977a:	0a1b      	lsrs	r3, r3, #8
 800977c:	b29b      	uxth	r3, r3
 800977e:	b2da      	uxtb	r2, r3
 8009780:	4b17      	ldr	r3, [pc, #92]	@ (80097e0 <VL53L1_RdWord+0x7c>)
 8009782:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8009784:	88bb      	ldrh	r3, [r7, #4]
 8009786:	b2da      	uxtb	r2, r3
 8009788:	4b15      	ldr	r3, [pc, #84]	@ (80097e0 <VL53L1_RdWord+0x7c>)
 800978a:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800978c:	88fb      	ldrh	r3, [r7, #6]
 800978e:	2202      	movs	r2, #2
 8009790:	4913      	ldr	r1, [pc, #76]	@ (80097e0 <VL53L1_RdWord+0x7c>)
 8009792:	4618      	mov	r0, r3
 8009794:	f7ff fed4 	bl	8009540 <_I2CWrite>
 8009798:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d002      	beq.n	80097a6 <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80097a0:	23f3      	movs	r3, #243	@ 0xf3
 80097a2:	73fb      	strb	r3, [r7, #15]
        goto done;
 80097a4:	e016      	b.n	80097d4 <VL53L1_RdWord+0x70>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80097a6:	88fb      	ldrh	r3, [r7, #6]
 80097a8:	2202      	movs	r2, #2
 80097aa:	490d      	ldr	r1, [pc, #52]	@ (80097e0 <VL53L1_RdWord+0x7c>)
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7ff fee5 	bl	800957c <_I2CRead>
 80097b2:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d002      	beq.n	80097c0 <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80097ba:	23f3      	movs	r3, #243	@ 0xf3
 80097bc:	73fb      	strb	r3, [r7, #15]
        goto done;
 80097be:	e009      	b.n	80097d4 <VL53L1_RdWord+0x70>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80097c0:	4b07      	ldr	r3, [pc, #28]	@ (80097e0 <VL53L1_RdWord+0x7c>)
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	021b      	lsls	r3, r3, #8
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	4a05      	ldr	r2, [pc, #20]	@ (80097e0 <VL53L1_RdWord+0x7c>)
 80097ca:	7852      	ldrb	r2, [r2, #1]
 80097cc:	4413      	add	r3, r2
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 80097d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	2000059c 	.word	0x2000059c

080097e4 <sulp>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	4604      	mov	r4, r0
 80097e8:	460d      	mov	r5, r1
 80097ea:	ec45 4b10 	vmov	d0, r4, r5
 80097ee:	4616      	mov	r6, r2
 80097f0:	f003 fdbe 	bl	800d370 <__ulp>
 80097f4:	ec51 0b10 	vmov	r0, r1, d0
 80097f8:	b17e      	cbz	r6, 800981a <sulp+0x36>
 80097fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80097fe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009802:	2b00      	cmp	r3, #0
 8009804:	dd09      	ble.n	800981a <sulp+0x36>
 8009806:	051b      	lsls	r3, r3, #20
 8009808:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800980c:	2400      	movs	r4, #0
 800980e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009812:	4622      	mov	r2, r4
 8009814:	462b      	mov	r3, r5
 8009816:	f7f6 feff 	bl	8000618 <__aeabi_dmul>
 800981a:	ec41 0b10 	vmov	d0, r0, r1
 800981e:	bd70      	pop	{r4, r5, r6, pc}

08009820 <_strtod_l>:
 8009820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009824:	b09f      	sub	sp, #124	@ 0x7c
 8009826:	460c      	mov	r4, r1
 8009828:	9217      	str	r2, [sp, #92]	@ 0x5c
 800982a:	2200      	movs	r2, #0
 800982c:	921a      	str	r2, [sp, #104]	@ 0x68
 800982e:	9005      	str	r0, [sp, #20]
 8009830:	f04f 0a00 	mov.w	sl, #0
 8009834:	f04f 0b00 	mov.w	fp, #0
 8009838:	460a      	mov	r2, r1
 800983a:	9219      	str	r2, [sp, #100]	@ 0x64
 800983c:	7811      	ldrb	r1, [r2, #0]
 800983e:	292b      	cmp	r1, #43	@ 0x2b
 8009840:	d04a      	beq.n	80098d8 <_strtod_l+0xb8>
 8009842:	d838      	bhi.n	80098b6 <_strtod_l+0x96>
 8009844:	290d      	cmp	r1, #13
 8009846:	d832      	bhi.n	80098ae <_strtod_l+0x8e>
 8009848:	2908      	cmp	r1, #8
 800984a:	d832      	bhi.n	80098b2 <_strtod_l+0x92>
 800984c:	2900      	cmp	r1, #0
 800984e:	d03b      	beq.n	80098c8 <_strtod_l+0xa8>
 8009850:	2200      	movs	r2, #0
 8009852:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009854:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009856:	782a      	ldrb	r2, [r5, #0]
 8009858:	2a30      	cmp	r2, #48	@ 0x30
 800985a:	f040 80b3 	bne.w	80099c4 <_strtod_l+0x1a4>
 800985e:	786a      	ldrb	r2, [r5, #1]
 8009860:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009864:	2a58      	cmp	r2, #88	@ 0x58
 8009866:	d16e      	bne.n	8009946 <_strtod_l+0x126>
 8009868:	9302      	str	r3, [sp, #8]
 800986a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800986c:	9301      	str	r3, [sp, #4]
 800986e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	4a8e      	ldr	r2, [pc, #568]	@ (8009aac <_strtod_l+0x28c>)
 8009874:	9805      	ldr	r0, [sp, #20]
 8009876:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009878:	a919      	add	r1, sp, #100	@ 0x64
 800987a:	f002 fe6b 	bl	800c554 <__gethex>
 800987e:	f010 060f 	ands.w	r6, r0, #15
 8009882:	4604      	mov	r4, r0
 8009884:	d005      	beq.n	8009892 <_strtod_l+0x72>
 8009886:	2e06      	cmp	r6, #6
 8009888:	d128      	bne.n	80098dc <_strtod_l+0xbc>
 800988a:	3501      	adds	r5, #1
 800988c:	2300      	movs	r3, #0
 800988e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009890:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009892:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009894:	2b00      	cmp	r3, #0
 8009896:	f040 858e 	bne.w	800a3b6 <_strtod_l+0xb96>
 800989a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800989c:	b1cb      	cbz	r3, 80098d2 <_strtod_l+0xb2>
 800989e:	4652      	mov	r2, sl
 80098a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80098a4:	ec43 2b10 	vmov	d0, r2, r3
 80098a8:	b01f      	add	sp, #124	@ 0x7c
 80098aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ae:	2920      	cmp	r1, #32
 80098b0:	d1ce      	bne.n	8009850 <_strtod_l+0x30>
 80098b2:	3201      	adds	r2, #1
 80098b4:	e7c1      	b.n	800983a <_strtod_l+0x1a>
 80098b6:	292d      	cmp	r1, #45	@ 0x2d
 80098b8:	d1ca      	bne.n	8009850 <_strtod_l+0x30>
 80098ba:	2101      	movs	r1, #1
 80098bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80098be:	1c51      	adds	r1, r2, #1
 80098c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80098c2:	7852      	ldrb	r2, [r2, #1]
 80098c4:	2a00      	cmp	r2, #0
 80098c6:	d1c5      	bne.n	8009854 <_strtod_l+0x34>
 80098c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80098ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f040 8570 	bne.w	800a3b2 <_strtod_l+0xb92>
 80098d2:	4652      	mov	r2, sl
 80098d4:	465b      	mov	r3, fp
 80098d6:	e7e5      	b.n	80098a4 <_strtod_l+0x84>
 80098d8:	2100      	movs	r1, #0
 80098da:	e7ef      	b.n	80098bc <_strtod_l+0x9c>
 80098dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80098de:	b13a      	cbz	r2, 80098f0 <_strtod_l+0xd0>
 80098e0:	2135      	movs	r1, #53	@ 0x35
 80098e2:	a81c      	add	r0, sp, #112	@ 0x70
 80098e4:	f003 fe3e 	bl	800d564 <__copybits>
 80098e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098ea:	9805      	ldr	r0, [sp, #20]
 80098ec:	f003 fa0c 	bl	800cd08 <_Bfree>
 80098f0:	3e01      	subs	r6, #1
 80098f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80098f4:	2e04      	cmp	r6, #4
 80098f6:	d806      	bhi.n	8009906 <_strtod_l+0xe6>
 80098f8:	e8df f006 	tbb	[pc, r6]
 80098fc:	201d0314 	.word	0x201d0314
 8009900:	14          	.byte	0x14
 8009901:	00          	.byte	0x00
 8009902:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009906:	05e1      	lsls	r1, r4, #23
 8009908:	bf48      	it	mi
 800990a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800990e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009912:	0d1b      	lsrs	r3, r3, #20
 8009914:	051b      	lsls	r3, r3, #20
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1bb      	bne.n	8009892 <_strtod_l+0x72>
 800991a:	f001 fec9 	bl	800b6b0 <__errno>
 800991e:	2322      	movs	r3, #34	@ 0x22
 8009920:	6003      	str	r3, [r0, #0]
 8009922:	e7b6      	b.n	8009892 <_strtod_l+0x72>
 8009924:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009928:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800992c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009930:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009934:	e7e7      	b.n	8009906 <_strtod_l+0xe6>
 8009936:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009ab4 <_strtod_l+0x294>
 800993a:	e7e4      	b.n	8009906 <_strtod_l+0xe6>
 800993c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009940:	f04f 3aff 	mov.w	sl, #4294967295
 8009944:	e7df      	b.n	8009906 <_strtod_l+0xe6>
 8009946:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009948:	1c5a      	adds	r2, r3, #1
 800994a:	9219      	str	r2, [sp, #100]	@ 0x64
 800994c:	785b      	ldrb	r3, [r3, #1]
 800994e:	2b30      	cmp	r3, #48	@ 0x30
 8009950:	d0f9      	beq.n	8009946 <_strtod_l+0x126>
 8009952:	2b00      	cmp	r3, #0
 8009954:	d09d      	beq.n	8009892 <_strtod_l+0x72>
 8009956:	2301      	movs	r3, #1
 8009958:	9309      	str	r3, [sp, #36]	@ 0x24
 800995a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800995c:	930c      	str	r3, [sp, #48]	@ 0x30
 800995e:	2300      	movs	r3, #0
 8009960:	9308      	str	r3, [sp, #32]
 8009962:	930a      	str	r3, [sp, #40]	@ 0x28
 8009964:	461f      	mov	r7, r3
 8009966:	220a      	movs	r2, #10
 8009968:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800996a:	7805      	ldrb	r5, [r0, #0]
 800996c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009970:	b2d9      	uxtb	r1, r3
 8009972:	2909      	cmp	r1, #9
 8009974:	d928      	bls.n	80099c8 <_strtod_l+0x1a8>
 8009976:	494e      	ldr	r1, [pc, #312]	@ (8009ab0 <_strtod_l+0x290>)
 8009978:	2201      	movs	r2, #1
 800997a:	f001 fe3d 	bl	800b5f8 <strncmp>
 800997e:	2800      	cmp	r0, #0
 8009980:	d032      	beq.n	80099e8 <_strtod_l+0x1c8>
 8009982:	2000      	movs	r0, #0
 8009984:	462a      	mov	r2, r5
 8009986:	4681      	mov	r9, r0
 8009988:	463d      	mov	r5, r7
 800998a:	4603      	mov	r3, r0
 800998c:	2a65      	cmp	r2, #101	@ 0x65
 800998e:	d001      	beq.n	8009994 <_strtod_l+0x174>
 8009990:	2a45      	cmp	r2, #69	@ 0x45
 8009992:	d114      	bne.n	80099be <_strtod_l+0x19e>
 8009994:	b91d      	cbnz	r5, 800999e <_strtod_l+0x17e>
 8009996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009998:	4302      	orrs	r2, r0
 800999a:	d095      	beq.n	80098c8 <_strtod_l+0xa8>
 800999c:	2500      	movs	r5, #0
 800999e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80099a0:	1c62      	adds	r2, r4, #1
 80099a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80099a4:	7862      	ldrb	r2, [r4, #1]
 80099a6:	2a2b      	cmp	r2, #43	@ 0x2b
 80099a8:	d077      	beq.n	8009a9a <_strtod_l+0x27a>
 80099aa:	2a2d      	cmp	r2, #45	@ 0x2d
 80099ac:	d07b      	beq.n	8009aa6 <_strtod_l+0x286>
 80099ae:	f04f 0c00 	mov.w	ip, #0
 80099b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80099b6:	2909      	cmp	r1, #9
 80099b8:	f240 8082 	bls.w	8009ac0 <_strtod_l+0x2a0>
 80099bc:	9419      	str	r4, [sp, #100]	@ 0x64
 80099be:	f04f 0800 	mov.w	r8, #0
 80099c2:	e0a2      	b.n	8009b0a <_strtod_l+0x2ea>
 80099c4:	2300      	movs	r3, #0
 80099c6:	e7c7      	b.n	8009958 <_strtod_l+0x138>
 80099c8:	2f08      	cmp	r7, #8
 80099ca:	bfd5      	itete	le
 80099cc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80099ce:	9908      	ldrgt	r1, [sp, #32]
 80099d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80099d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80099d8:	f100 0001 	add.w	r0, r0, #1
 80099dc:	bfd4      	ite	le
 80099de:	930a      	strle	r3, [sp, #40]	@ 0x28
 80099e0:	9308      	strgt	r3, [sp, #32]
 80099e2:	3701      	adds	r7, #1
 80099e4:	9019      	str	r0, [sp, #100]	@ 0x64
 80099e6:	e7bf      	b.n	8009968 <_strtod_l+0x148>
 80099e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099ea:	1c5a      	adds	r2, r3, #1
 80099ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80099ee:	785a      	ldrb	r2, [r3, #1]
 80099f0:	b37f      	cbz	r7, 8009a52 <_strtod_l+0x232>
 80099f2:	4681      	mov	r9, r0
 80099f4:	463d      	mov	r5, r7
 80099f6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80099fa:	2b09      	cmp	r3, #9
 80099fc:	d912      	bls.n	8009a24 <_strtod_l+0x204>
 80099fe:	2301      	movs	r3, #1
 8009a00:	e7c4      	b.n	800998c <_strtod_l+0x16c>
 8009a02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a04:	1c5a      	adds	r2, r3, #1
 8009a06:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a08:	785a      	ldrb	r2, [r3, #1]
 8009a0a:	3001      	adds	r0, #1
 8009a0c:	2a30      	cmp	r2, #48	@ 0x30
 8009a0e:	d0f8      	beq.n	8009a02 <_strtod_l+0x1e2>
 8009a10:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009a14:	2b08      	cmp	r3, #8
 8009a16:	f200 84d3 	bhi.w	800a3c0 <_strtod_l+0xba0>
 8009a1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a1e:	4681      	mov	r9, r0
 8009a20:	2000      	movs	r0, #0
 8009a22:	4605      	mov	r5, r0
 8009a24:	3a30      	subs	r2, #48	@ 0x30
 8009a26:	f100 0301 	add.w	r3, r0, #1
 8009a2a:	d02a      	beq.n	8009a82 <_strtod_l+0x262>
 8009a2c:	4499      	add	r9, r3
 8009a2e:	eb00 0c05 	add.w	ip, r0, r5
 8009a32:	462b      	mov	r3, r5
 8009a34:	210a      	movs	r1, #10
 8009a36:	4563      	cmp	r3, ip
 8009a38:	d10d      	bne.n	8009a56 <_strtod_l+0x236>
 8009a3a:	1c69      	adds	r1, r5, #1
 8009a3c:	4401      	add	r1, r0
 8009a3e:	4428      	add	r0, r5
 8009a40:	2808      	cmp	r0, #8
 8009a42:	dc16      	bgt.n	8009a72 <_strtod_l+0x252>
 8009a44:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009a46:	230a      	movs	r3, #10
 8009a48:	fb03 2300 	mla	r3, r3, r0, r2
 8009a4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a4e:	2300      	movs	r3, #0
 8009a50:	e018      	b.n	8009a84 <_strtod_l+0x264>
 8009a52:	4638      	mov	r0, r7
 8009a54:	e7da      	b.n	8009a0c <_strtod_l+0x1ec>
 8009a56:	2b08      	cmp	r3, #8
 8009a58:	f103 0301 	add.w	r3, r3, #1
 8009a5c:	dc03      	bgt.n	8009a66 <_strtod_l+0x246>
 8009a5e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009a60:	434e      	muls	r6, r1
 8009a62:	960a      	str	r6, [sp, #40]	@ 0x28
 8009a64:	e7e7      	b.n	8009a36 <_strtod_l+0x216>
 8009a66:	2b10      	cmp	r3, #16
 8009a68:	bfde      	ittt	le
 8009a6a:	9e08      	ldrle	r6, [sp, #32]
 8009a6c:	434e      	mulle	r6, r1
 8009a6e:	9608      	strle	r6, [sp, #32]
 8009a70:	e7e1      	b.n	8009a36 <_strtod_l+0x216>
 8009a72:	280f      	cmp	r0, #15
 8009a74:	dceb      	bgt.n	8009a4e <_strtod_l+0x22e>
 8009a76:	9808      	ldr	r0, [sp, #32]
 8009a78:	230a      	movs	r3, #10
 8009a7a:	fb03 2300 	mla	r3, r3, r0, r2
 8009a7e:	9308      	str	r3, [sp, #32]
 8009a80:	e7e5      	b.n	8009a4e <_strtod_l+0x22e>
 8009a82:	4629      	mov	r1, r5
 8009a84:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009a86:	1c50      	adds	r0, r2, #1
 8009a88:	9019      	str	r0, [sp, #100]	@ 0x64
 8009a8a:	7852      	ldrb	r2, [r2, #1]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	460d      	mov	r5, r1
 8009a90:	e7b1      	b.n	80099f6 <_strtod_l+0x1d6>
 8009a92:	f04f 0900 	mov.w	r9, #0
 8009a96:	2301      	movs	r3, #1
 8009a98:	e77d      	b.n	8009996 <_strtod_l+0x176>
 8009a9a:	f04f 0c00 	mov.w	ip, #0
 8009a9e:	1ca2      	adds	r2, r4, #2
 8009aa0:	9219      	str	r2, [sp, #100]	@ 0x64
 8009aa2:	78a2      	ldrb	r2, [r4, #2]
 8009aa4:	e785      	b.n	80099b2 <_strtod_l+0x192>
 8009aa6:	f04f 0c01 	mov.w	ip, #1
 8009aaa:	e7f8      	b.n	8009a9e <_strtod_l+0x27e>
 8009aac:	0800e474 	.word	0x0800e474
 8009ab0:	0800e45b 	.word	0x0800e45b
 8009ab4:	7ff00000 	.word	0x7ff00000
 8009ab8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009aba:	1c51      	adds	r1, r2, #1
 8009abc:	9119      	str	r1, [sp, #100]	@ 0x64
 8009abe:	7852      	ldrb	r2, [r2, #1]
 8009ac0:	2a30      	cmp	r2, #48	@ 0x30
 8009ac2:	d0f9      	beq.n	8009ab8 <_strtod_l+0x298>
 8009ac4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009ac8:	2908      	cmp	r1, #8
 8009aca:	f63f af78 	bhi.w	80099be <_strtod_l+0x19e>
 8009ace:	3a30      	subs	r2, #48	@ 0x30
 8009ad0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ad2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009ad4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009ad6:	f04f 080a 	mov.w	r8, #10
 8009ada:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009adc:	1c56      	adds	r6, r2, #1
 8009ade:	9619      	str	r6, [sp, #100]	@ 0x64
 8009ae0:	7852      	ldrb	r2, [r2, #1]
 8009ae2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009ae6:	f1be 0f09 	cmp.w	lr, #9
 8009aea:	d939      	bls.n	8009b60 <_strtod_l+0x340>
 8009aec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009aee:	1a76      	subs	r6, r6, r1
 8009af0:	2e08      	cmp	r6, #8
 8009af2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009af6:	dc03      	bgt.n	8009b00 <_strtod_l+0x2e0>
 8009af8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009afa:	4588      	cmp	r8, r1
 8009afc:	bfa8      	it	ge
 8009afe:	4688      	movge	r8, r1
 8009b00:	f1bc 0f00 	cmp.w	ip, #0
 8009b04:	d001      	beq.n	8009b0a <_strtod_l+0x2ea>
 8009b06:	f1c8 0800 	rsb	r8, r8, #0
 8009b0a:	2d00      	cmp	r5, #0
 8009b0c:	d14e      	bne.n	8009bac <_strtod_l+0x38c>
 8009b0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b10:	4308      	orrs	r0, r1
 8009b12:	f47f aebe 	bne.w	8009892 <_strtod_l+0x72>
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f47f aed6 	bne.w	80098c8 <_strtod_l+0xa8>
 8009b1c:	2a69      	cmp	r2, #105	@ 0x69
 8009b1e:	d028      	beq.n	8009b72 <_strtod_l+0x352>
 8009b20:	dc25      	bgt.n	8009b6e <_strtod_l+0x34e>
 8009b22:	2a49      	cmp	r2, #73	@ 0x49
 8009b24:	d025      	beq.n	8009b72 <_strtod_l+0x352>
 8009b26:	2a4e      	cmp	r2, #78	@ 0x4e
 8009b28:	f47f aece 	bne.w	80098c8 <_strtod_l+0xa8>
 8009b2c:	499b      	ldr	r1, [pc, #620]	@ (8009d9c <_strtod_l+0x57c>)
 8009b2e:	a819      	add	r0, sp, #100	@ 0x64
 8009b30:	f002 ff32 	bl	800c998 <__match>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	f43f aec7 	beq.w	80098c8 <_strtod_l+0xa8>
 8009b3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	2b28      	cmp	r3, #40	@ 0x28
 8009b40:	d12e      	bne.n	8009ba0 <_strtod_l+0x380>
 8009b42:	4997      	ldr	r1, [pc, #604]	@ (8009da0 <_strtod_l+0x580>)
 8009b44:	aa1c      	add	r2, sp, #112	@ 0x70
 8009b46:	a819      	add	r0, sp, #100	@ 0x64
 8009b48:	f002 ff3a 	bl	800c9c0 <__hexnan>
 8009b4c:	2805      	cmp	r0, #5
 8009b4e:	d127      	bne.n	8009ba0 <_strtod_l+0x380>
 8009b50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009b52:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009b56:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009b5a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009b5e:	e698      	b.n	8009892 <_strtod_l+0x72>
 8009b60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009b62:	fb08 2101 	mla	r1, r8, r1, r2
 8009b66:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009b6a:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b6c:	e7b5      	b.n	8009ada <_strtod_l+0x2ba>
 8009b6e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009b70:	e7da      	b.n	8009b28 <_strtod_l+0x308>
 8009b72:	498c      	ldr	r1, [pc, #560]	@ (8009da4 <_strtod_l+0x584>)
 8009b74:	a819      	add	r0, sp, #100	@ 0x64
 8009b76:	f002 ff0f 	bl	800c998 <__match>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	f43f aea4 	beq.w	80098c8 <_strtod_l+0xa8>
 8009b80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b82:	4989      	ldr	r1, [pc, #548]	@ (8009da8 <_strtod_l+0x588>)
 8009b84:	3b01      	subs	r3, #1
 8009b86:	a819      	add	r0, sp, #100	@ 0x64
 8009b88:	9319      	str	r3, [sp, #100]	@ 0x64
 8009b8a:	f002 ff05 	bl	800c998 <__match>
 8009b8e:	b910      	cbnz	r0, 8009b96 <_strtod_l+0x376>
 8009b90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b92:	3301      	adds	r3, #1
 8009b94:	9319      	str	r3, [sp, #100]	@ 0x64
 8009b96:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009db8 <_strtod_l+0x598>
 8009b9a:	f04f 0a00 	mov.w	sl, #0
 8009b9e:	e678      	b.n	8009892 <_strtod_l+0x72>
 8009ba0:	4882      	ldr	r0, [pc, #520]	@ (8009dac <_strtod_l+0x58c>)
 8009ba2:	f001 fdc9 	bl	800b738 <nan>
 8009ba6:	ec5b ab10 	vmov	sl, fp, d0
 8009baa:	e672      	b.n	8009892 <_strtod_l+0x72>
 8009bac:	eba8 0309 	sub.w	r3, r8, r9
 8009bb0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009bb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bb4:	2f00      	cmp	r7, #0
 8009bb6:	bf08      	it	eq
 8009bb8:	462f      	moveq	r7, r5
 8009bba:	2d10      	cmp	r5, #16
 8009bbc:	462c      	mov	r4, r5
 8009bbe:	bfa8      	it	ge
 8009bc0:	2410      	movge	r4, #16
 8009bc2:	f7f6 fcaf 	bl	8000524 <__aeabi_ui2d>
 8009bc6:	2d09      	cmp	r5, #9
 8009bc8:	4682      	mov	sl, r0
 8009bca:	468b      	mov	fp, r1
 8009bcc:	dc13      	bgt.n	8009bf6 <_strtod_l+0x3d6>
 8009bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f43f ae5e 	beq.w	8009892 <_strtod_l+0x72>
 8009bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bd8:	dd78      	ble.n	8009ccc <_strtod_l+0x4ac>
 8009bda:	2b16      	cmp	r3, #22
 8009bdc:	dc5f      	bgt.n	8009c9e <_strtod_l+0x47e>
 8009bde:	4974      	ldr	r1, [pc, #464]	@ (8009db0 <_strtod_l+0x590>)
 8009be0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009be4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009be8:	4652      	mov	r2, sl
 8009bea:	465b      	mov	r3, fp
 8009bec:	f7f6 fd14 	bl	8000618 <__aeabi_dmul>
 8009bf0:	4682      	mov	sl, r0
 8009bf2:	468b      	mov	fp, r1
 8009bf4:	e64d      	b.n	8009892 <_strtod_l+0x72>
 8009bf6:	4b6e      	ldr	r3, [pc, #440]	@ (8009db0 <_strtod_l+0x590>)
 8009bf8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009bfc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009c00:	f7f6 fd0a 	bl	8000618 <__aeabi_dmul>
 8009c04:	4682      	mov	sl, r0
 8009c06:	9808      	ldr	r0, [sp, #32]
 8009c08:	468b      	mov	fp, r1
 8009c0a:	f7f6 fc8b 	bl	8000524 <__aeabi_ui2d>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	460b      	mov	r3, r1
 8009c12:	4650      	mov	r0, sl
 8009c14:	4659      	mov	r1, fp
 8009c16:	f7f6 fb49 	bl	80002ac <__adddf3>
 8009c1a:	2d0f      	cmp	r5, #15
 8009c1c:	4682      	mov	sl, r0
 8009c1e:	468b      	mov	fp, r1
 8009c20:	ddd5      	ble.n	8009bce <_strtod_l+0x3ae>
 8009c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c24:	1b2c      	subs	r4, r5, r4
 8009c26:	441c      	add	r4, r3
 8009c28:	2c00      	cmp	r4, #0
 8009c2a:	f340 8096 	ble.w	8009d5a <_strtod_l+0x53a>
 8009c2e:	f014 030f 	ands.w	r3, r4, #15
 8009c32:	d00a      	beq.n	8009c4a <_strtod_l+0x42a>
 8009c34:	495e      	ldr	r1, [pc, #376]	@ (8009db0 <_strtod_l+0x590>)
 8009c36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c3a:	4652      	mov	r2, sl
 8009c3c:	465b      	mov	r3, fp
 8009c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c42:	f7f6 fce9 	bl	8000618 <__aeabi_dmul>
 8009c46:	4682      	mov	sl, r0
 8009c48:	468b      	mov	fp, r1
 8009c4a:	f034 040f 	bics.w	r4, r4, #15
 8009c4e:	d073      	beq.n	8009d38 <_strtod_l+0x518>
 8009c50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009c54:	dd48      	ble.n	8009ce8 <_strtod_l+0x4c8>
 8009c56:	2400      	movs	r4, #0
 8009c58:	46a0      	mov	r8, r4
 8009c5a:	940a      	str	r4, [sp, #40]	@ 0x28
 8009c5c:	46a1      	mov	r9, r4
 8009c5e:	9a05      	ldr	r2, [sp, #20]
 8009c60:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009db8 <_strtod_l+0x598>
 8009c64:	2322      	movs	r3, #34	@ 0x22
 8009c66:	6013      	str	r3, [r2, #0]
 8009c68:	f04f 0a00 	mov.w	sl, #0
 8009c6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f43f ae0f 	beq.w	8009892 <_strtod_l+0x72>
 8009c74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c76:	9805      	ldr	r0, [sp, #20]
 8009c78:	f003 f846 	bl	800cd08 <_Bfree>
 8009c7c:	9805      	ldr	r0, [sp, #20]
 8009c7e:	4649      	mov	r1, r9
 8009c80:	f003 f842 	bl	800cd08 <_Bfree>
 8009c84:	9805      	ldr	r0, [sp, #20]
 8009c86:	4641      	mov	r1, r8
 8009c88:	f003 f83e 	bl	800cd08 <_Bfree>
 8009c8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c8e:	9805      	ldr	r0, [sp, #20]
 8009c90:	f003 f83a 	bl	800cd08 <_Bfree>
 8009c94:	9805      	ldr	r0, [sp, #20]
 8009c96:	4621      	mov	r1, r4
 8009c98:	f003 f836 	bl	800cd08 <_Bfree>
 8009c9c:	e5f9      	b.n	8009892 <_strtod_l+0x72>
 8009c9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ca0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	dbbc      	blt.n	8009c22 <_strtod_l+0x402>
 8009ca8:	4c41      	ldr	r4, [pc, #260]	@ (8009db0 <_strtod_l+0x590>)
 8009caa:	f1c5 050f 	rsb	r5, r5, #15
 8009cae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009cb2:	4652      	mov	r2, sl
 8009cb4:	465b      	mov	r3, fp
 8009cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cba:	f7f6 fcad 	bl	8000618 <__aeabi_dmul>
 8009cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cc0:	1b5d      	subs	r5, r3, r5
 8009cc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009cc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009cca:	e78f      	b.n	8009bec <_strtod_l+0x3cc>
 8009ccc:	3316      	adds	r3, #22
 8009cce:	dba8      	blt.n	8009c22 <_strtod_l+0x402>
 8009cd0:	4b37      	ldr	r3, [pc, #220]	@ (8009db0 <_strtod_l+0x590>)
 8009cd2:	eba9 0808 	sub.w	r8, r9, r8
 8009cd6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009cda:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009cde:	4650      	mov	r0, sl
 8009ce0:	4659      	mov	r1, fp
 8009ce2:	f7f6 fdc3 	bl	800086c <__aeabi_ddiv>
 8009ce6:	e783      	b.n	8009bf0 <_strtod_l+0x3d0>
 8009ce8:	4b32      	ldr	r3, [pc, #200]	@ (8009db4 <_strtod_l+0x594>)
 8009cea:	9308      	str	r3, [sp, #32]
 8009cec:	2300      	movs	r3, #0
 8009cee:	1124      	asrs	r4, r4, #4
 8009cf0:	4650      	mov	r0, sl
 8009cf2:	4659      	mov	r1, fp
 8009cf4:	461e      	mov	r6, r3
 8009cf6:	2c01      	cmp	r4, #1
 8009cf8:	dc21      	bgt.n	8009d3e <_strtod_l+0x51e>
 8009cfa:	b10b      	cbz	r3, 8009d00 <_strtod_l+0x4e0>
 8009cfc:	4682      	mov	sl, r0
 8009cfe:	468b      	mov	fp, r1
 8009d00:	492c      	ldr	r1, [pc, #176]	@ (8009db4 <_strtod_l+0x594>)
 8009d02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009d06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009d0a:	4652      	mov	r2, sl
 8009d0c:	465b      	mov	r3, fp
 8009d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d12:	f7f6 fc81 	bl	8000618 <__aeabi_dmul>
 8009d16:	4b28      	ldr	r3, [pc, #160]	@ (8009db8 <_strtod_l+0x598>)
 8009d18:	460a      	mov	r2, r1
 8009d1a:	400b      	ands	r3, r1
 8009d1c:	4927      	ldr	r1, [pc, #156]	@ (8009dbc <_strtod_l+0x59c>)
 8009d1e:	428b      	cmp	r3, r1
 8009d20:	4682      	mov	sl, r0
 8009d22:	d898      	bhi.n	8009c56 <_strtod_l+0x436>
 8009d24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009d28:	428b      	cmp	r3, r1
 8009d2a:	bf86      	itte	hi
 8009d2c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009dc0 <_strtod_l+0x5a0>
 8009d30:	f04f 3aff 	movhi.w	sl, #4294967295
 8009d34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009d38:	2300      	movs	r3, #0
 8009d3a:	9308      	str	r3, [sp, #32]
 8009d3c:	e07a      	b.n	8009e34 <_strtod_l+0x614>
 8009d3e:	07e2      	lsls	r2, r4, #31
 8009d40:	d505      	bpl.n	8009d4e <_strtod_l+0x52e>
 8009d42:	9b08      	ldr	r3, [sp, #32]
 8009d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d48:	f7f6 fc66 	bl	8000618 <__aeabi_dmul>
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	9a08      	ldr	r2, [sp, #32]
 8009d50:	3208      	adds	r2, #8
 8009d52:	3601      	adds	r6, #1
 8009d54:	1064      	asrs	r4, r4, #1
 8009d56:	9208      	str	r2, [sp, #32]
 8009d58:	e7cd      	b.n	8009cf6 <_strtod_l+0x4d6>
 8009d5a:	d0ed      	beq.n	8009d38 <_strtod_l+0x518>
 8009d5c:	4264      	negs	r4, r4
 8009d5e:	f014 020f 	ands.w	r2, r4, #15
 8009d62:	d00a      	beq.n	8009d7a <_strtod_l+0x55a>
 8009d64:	4b12      	ldr	r3, [pc, #72]	@ (8009db0 <_strtod_l+0x590>)
 8009d66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d6a:	4650      	mov	r0, sl
 8009d6c:	4659      	mov	r1, fp
 8009d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d72:	f7f6 fd7b 	bl	800086c <__aeabi_ddiv>
 8009d76:	4682      	mov	sl, r0
 8009d78:	468b      	mov	fp, r1
 8009d7a:	1124      	asrs	r4, r4, #4
 8009d7c:	d0dc      	beq.n	8009d38 <_strtod_l+0x518>
 8009d7e:	2c1f      	cmp	r4, #31
 8009d80:	dd20      	ble.n	8009dc4 <_strtod_l+0x5a4>
 8009d82:	2400      	movs	r4, #0
 8009d84:	46a0      	mov	r8, r4
 8009d86:	940a      	str	r4, [sp, #40]	@ 0x28
 8009d88:	46a1      	mov	r9, r4
 8009d8a:	9a05      	ldr	r2, [sp, #20]
 8009d8c:	2322      	movs	r3, #34	@ 0x22
 8009d8e:	f04f 0a00 	mov.w	sl, #0
 8009d92:	f04f 0b00 	mov.w	fp, #0
 8009d96:	6013      	str	r3, [r2, #0]
 8009d98:	e768      	b.n	8009c6c <_strtod_l+0x44c>
 8009d9a:	bf00      	nop
 8009d9c:	0800e4bd 	.word	0x0800e4bd
 8009da0:	0800e460 	.word	0x0800e460
 8009da4:	0800e4b5 	.word	0x0800e4b5
 8009da8:	0800e4f4 	.word	0x0800e4f4
 8009dac:	0800e885 	.word	0x0800e885
 8009db0:	0800e670 	.word	0x0800e670
 8009db4:	0800e648 	.word	0x0800e648
 8009db8:	7ff00000 	.word	0x7ff00000
 8009dbc:	7ca00000 	.word	0x7ca00000
 8009dc0:	7fefffff 	.word	0x7fefffff
 8009dc4:	f014 0310 	ands.w	r3, r4, #16
 8009dc8:	bf18      	it	ne
 8009dca:	236a      	movne	r3, #106	@ 0x6a
 8009dcc:	4ea9      	ldr	r6, [pc, #676]	@ (800a074 <_strtod_l+0x854>)
 8009dce:	9308      	str	r3, [sp, #32]
 8009dd0:	4650      	mov	r0, sl
 8009dd2:	4659      	mov	r1, fp
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	07e2      	lsls	r2, r4, #31
 8009dd8:	d504      	bpl.n	8009de4 <_strtod_l+0x5c4>
 8009dda:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009dde:	f7f6 fc1b 	bl	8000618 <__aeabi_dmul>
 8009de2:	2301      	movs	r3, #1
 8009de4:	1064      	asrs	r4, r4, #1
 8009de6:	f106 0608 	add.w	r6, r6, #8
 8009dea:	d1f4      	bne.n	8009dd6 <_strtod_l+0x5b6>
 8009dec:	b10b      	cbz	r3, 8009df2 <_strtod_l+0x5d2>
 8009dee:	4682      	mov	sl, r0
 8009df0:	468b      	mov	fp, r1
 8009df2:	9b08      	ldr	r3, [sp, #32]
 8009df4:	b1b3      	cbz	r3, 8009e24 <_strtod_l+0x604>
 8009df6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009dfa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	4659      	mov	r1, fp
 8009e02:	dd0f      	ble.n	8009e24 <_strtod_l+0x604>
 8009e04:	2b1f      	cmp	r3, #31
 8009e06:	dd55      	ble.n	8009eb4 <_strtod_l+0x694>
 8009e08:	2b34      	cmp	r3, #52	@ 0x34
 8009e0a:	bfde      	ittt	le
 8009e0c:	f04f 33ff 	movle.w	r3, #4294967295
 8009e10:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009e14:	4093      	lslle	r3, r2
 8009e16:	f04f 0a00 	mov.w	sl, #0
 8009e1a:	bfcc      	ite	gt
 8009e1c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009e20:	ea03 0b01 	andle.w	fp, r3, r1
 8009e24:	2200      	movs	r2, #0
 8009e26:	2300      	movs	r3, #0
 8009e28:	4650      	mov	r0, sl
 8009e2a:	4659      	mov	r1, fp
 8009e2c:	f7f6 fe5c 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e30:	2800      	cmp	r0, #0
 8009e32:	d1a6      	bne.n	8009d82 <_strtod_l+0x562>
 8009e34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009e3a:	9805      	ldr	r0, [sp, #20]
 8009e3c:	462b      	mov	r3, r5
 8009e3e:	463a      	mov	r2, r7
 8009e40:	f002 ffca 	bl	800cdd8 <__s2b>
 8009e44:	900a      	str	r0, [sp, #40]	@ 0x28
 8009e46:	2800      	cmp	r0, #0
 8009e48:	f43f af05 	beq.w	8009c56 <_strtod_l+0x436>
 8009e4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e4e:	2a00      	cmp	r2, #0
 8009e50:	eba9 0308 	sub.w	r3, r9, r8
 8009e54:	bfa8      	it	ge
 8009e56:	2300      	movge	r3, #0
 8009e58:	9312      	str	r3, [sp, #72]	@ 0x48
 8009e5a:	2400      	movs	r4, #0
 8009e5c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009e60:	9316      	str	r3, [sp, #88]	@ 0x58
 8009e62:	46a0      	mov	r8, r4
 8009e64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e66:	9805      	ldr	r0, [sp, #20]
 8009e68:	6859      	ldr	r1, [r3, #4]
 8009e6a:	f002 ff0d 	bl	800cc88 <_Balloc>
 8009e6e:	4681      	mov	r9, r0
 8009e70:	2800      	cmp	r0, #0
 8009e72:	f43f aef4 	beq.w	8009c5e <_strtod_l+0x43e>
 8009e76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e78:	691a      	ldr	r2, [r3, #16]
 8009e7a:	3202      	adds	r2, #2
 8009e7c:	f103 010c 	add.w	r1, r3, #12
 8009e80:	0092      	lsls	r2, r2, #2
 8009e82:	300c      	adds	r0, #12
 8009e84:	f001 fc49 	bl	800b71a <memcpy>
 8009e88:	ec4b ab10 	vmov	d0, sl, fp
 8009e8c:	9805      	ldr	r0, [sp, #20]
 8009e8e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009e90:	a91b      	add	r1, sp, #108	@ 0x6c
 8009e92:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009e96:	f003 fadb 	bl	800d450 <__d2b>
 8009e9a:	901a      	str	r0, [sp, #104]	@ 0x68
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	f43f aede 	beq.w	8009c5e <_strtod_l+0x43e>
 8009ea2:	9805      	ldr	r0, [sp, #20]
 8009ea4:	2101      	movs	r1, #1
 8009ea6:	f003 f82d 	bl	800cf04 <__i2b>
 8009eaa:	4680      	mov	r8, r0
 8009eac:	b948      	cbnz	r0, 8009ec2 <_strtod_l+0x6a2>
 8009eae:	f04f 0800 	mov.w	r8, #0
 8009eb2:	e6d4      	b.n	8009c5e <_strtod_l+0x43e>
 8009eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8009eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ebc:	ea03 0a0a 	and.w	sl, r3, sl
 8009ec0:	e7b0      	b.n	8009e24 <_strtod_l+0x604>
 8009ec2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009ec4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009ec6:	2d00      	cmp	r5, #0
 8009ec8:	bfab      	itete	ge
 8009eca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009ecc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009ece:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009ed0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009ed2:	bfac      	ite	ge
 8009ed4:	18ef      	addge	r7, r5, r3
 8009ed6:	1b5e      	sublt	r6, r3, r5
 8009ed8:	9b08      	ldr	r3, [sp, #32]
 8009eda:	1aed      	subs	r5, r5, r3
 8009edc:	4415      	add	r5, r2
 8009ede:	4b66      	ldr	r3, [pc, #408]	@ (800a078 <_strtod_l+0x858>)
 8009ee0:	3d01      	subs	r5, #1
 8009ee2:	429d      	cmp	r5, r3
 8009ee4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009ee8:	da50      	bge.n	8009f8c <_strtod_l+0x76c>
 8009eea:	1b5b      	subs	r3, r3, r5
 8009eec:	2b1f      	cmp	r3, #31
 8009eee:	eba2 0203 	sub.w	r2, r2, r3
 8009ef2:	f04f 0101 	mov.w	r1, #1
 8009ef6:	dc3d      	bgt.n	8009f74 <_strtod_l+0x754>
 8009ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8009efc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009efe:	2300      	movs	r3, #0
 8009f00:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f02:	18bd      	adds	r5, r7, r2
 8009f04:	9b08      	ldr	r3, [sp, #32]
 8009f06:	42af      	cmp	r7, r5
 8009f08:	4416      	add	r6, r2
 8009f0a:	441e      	add	r6, r3
 8009f0c:	463b      	mov	r3, r7
 8009f0e:	bfa8      	it	ge
 8009f10:	462b      	movge	r3, r5
 8009f12:	42b3      	cmp	r3, r6
 8009f14:	bfa8      	it	ge
 8009f16:	4633      	movge	r3, r6
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	bfc2      	ittt	gt
 8009f1c:	1aed      	subgt	r5, r5, r3
 8009f1e:	1af6      	subgt	r6, r6, r3
 8009f20:	1aff      	subgt	r7, r7, r3
 8009f22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	dd16      	ble.n	8009f56 <_strtod_l+0x736>
 8009f28:	4641      	mov	r1, r8
 8009f2a:	9805      	ldr	r0, [sp, #20]
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	f003 f8a9 	bl	800d084 <__pow5mult>
 8009f32:	4680      	mov	r8, r0
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d0ba      	beq.n	8009eae <_strtod_l+0x68e>
 8009f38:	4601      	mov	r1, r0
 8009f3a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009f3c:	9805      	ldr	r0, [sp, #20]
 8009f3e:	f002 fff7 	bl	800cf30 <__multiply>
 8009f42:	900e      	str	r0, [sp, #56]	@ 0x38
 8009f44:	2800      	cmp	r0, #0
 8009f46:	f43f ae8a 	beq.w	8009c5e <_strtod_l+0x43e>
 8009f4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f4c:	9805      	ldr	r0, [sp, #20]
 8009f4e:	f002 fedb 	bl	800cd08 <_Bfree>
 8009f52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f54:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f56:	2d00      	cmp	r5, #0
 8009f58:	dc1d      	bgt.n	8009f96 <_strtod_l+0x776>
 8009f5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	dd23      	ble.n	8009fa8 <_strtod_l+0x788>
 8009f60:	4649      	mov	r1, r9
 8009f62:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009f64:	9805      	ldr	r0, [sp, #20]
 8009f66:	f003 f88d 	bl	800d084 <__pow5mult>
 8009f6a:	4681      	mov	r9, r0
 8009f6c:	b9e0      	cbnz	r0, 8009fa8 <_strtod_l+0x788>
 8009f6e:	f04f 0900 	mov.w	r9, #0
 8009f72:	e674      	b.n	8009c5e <_strtod_l+0x43e>
 8009f74:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009f78:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009f7c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009f80:	35e2      	adds	r5, #226	@ 0xe2
 8009f82:	fa01 f305 	lsl.w	r3, r1, r5
 8009f86:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f88:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009f8a:	e7ba      	b.n	8009f02 <_strtod_l+0x6e2>
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f90:	2301      	movs	r3, #1
 8009f92:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009f94:	e7b5      	b.n	8009f02 <_strtod_l+0x6e2>
 8009f96:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f98:	9805      	ldr	r0, [sp, #20]
 8009f9a:	462a      	mov	r2, r5
 8009f9c:	f003 f8cc 	bl	800d138 <__lshift>
 8009fa0:	901a      	str	r0, [sp, #104]	@ 0x68
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	d1d9      	bne.n	8009f5a <_strtod_l+0x73a>
 8009fa6:	e65a      	b.n	8009c5e <_strtod_l+0x43e>
 8009fa8:	2e00      	cmp	r6, #0
 8009faa:	dd07      	ble.n	8009fbc <_strtod_l+0x79c>
 8009fac:	4649      	mov	r1, r9
 8009fae:	9805      	ldr	r0, [sp, #20]
 8009fb0:	4632      	mov	r2, r6
 8009fb2:	f003 f8c1 	bl	800d138 <__lshift>
 8009fb6:	4681      	mov	r9, r0
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d0d8      	beq.n	8009f6e <_strtod_l+0x74e>
 8009fbc:	2f00      	cmp	r7, #0
 8009fbe:	dd08      	ble.n	8009fd2 <_strtod_l+0x7b2>
 8009fc0:	4641      	mov	r1, r8
 8009fc2:	9805      	ldr	r0, [sp, #20]
 8009fc4:	463a      	mov	r2, r7
 8009fc6:	f003 f8b7 	bl	800d138 <__lshift>
 8009fca:	4680      	mov	r8, r0
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	f43f ae46 	beq.w	8009c5e <_strtod_l+0x43e>
 8009fd2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009fd4:	9805      	ldr	r0, [sp, #20]
 8009fd6:	464a      	mov	r2, r9
 8009fd8:	f003 f936 	bl	800d248 <__mdiff>
 8009fdc:	4604      	mov	r4, r0
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	f43f ae3d 	beq.w	8009c5e <_strtod_l+0x43e>
 8009fe4:	68c3      	ldr	r3, [r0, #12]
 8009fe6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009fe8:	2300      	movs	r3, #0
 8009fea:	60c3      	str	r3, [r0, #12]
 8009fec:	4641      	mov	r1, r8
 8009fee:	f003 f90f 	bl	800d210 <__mcmp>
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	da46      	bge.n	800a084 <_strtod_l+0x864>
 8009ff6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ff8:	ea53 030a 	orrs.w	r3, r3, sl
 8009ffc:	d16c      	bne.n	800a0d8 <_strtod_l+0x8b8>
 8009ffe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a002:	2b00      	cmp	r3, #0
 800a004:	d168      	bne.n	800a0d8 <_strtod_l+0x8b8>
 800a006:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a00a:	0d1b      	lsrs	r3, r3, #20
 800a00c:	051b      	lsls	r3, r3, #20
 800a00e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a012:	d961      	bls.n	800a0d8 <_strtod_l+0x8b8>
 800a014:	6963      	ldr	r3, [r4, #20]
 800a016:	b913      	cbnz	r3, 800a01e <_strtod_l+0x7fe>
 800a018:	6923      	ldr	r3, [r4, #16]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	dd5c      	ble.n	800a0d8 <_strtod_l+0x8b8>
 800a01e:	4621      	mov	r1, r4
 800a020:	2201      	movs	r2, #1
 800a022:	9805      	ldr	r0, [sp, #20]
 800a024:	f003 f888 	bl	800d138 <__lshift>
 800a028:	4641      	mov	r1, r8
 800a02a:	4604      	mov	r4, r0
 800a02c:	f003 f8f0 	bl	800d210 <__mcmp>
 800a030:	2800      	cmp	r0, #0
 800a032:	dd51      	ble.n	800a0d8 <_strtod_l+0x8b8>
 800a034:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a038:	9a08      	ldr	r2, [sp, #32]
 800a03a:	0d1b      	lsrs	r3, r3, #20
 800a03c:	051b      	lsls	r3, r3, #20
 800a03e:	2a00      	cmp	r2, #0
 800a040:	d06b      	beq.n	800a11a <_strtod_l+0x8fa>
 800a042:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a046:	d868      	bhi.n	800a11a <_strtod_l+0x8fa>
 800a048:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a04c:	f67f ae9d 	bls.w	8009d8a <_strtod_l+0x56a>
 800a050:	4b0a      	ldr	r3, [pc, #40]	@ (800a07c <_strtod_l+0x85c>)
 800a052:	4650      	mov	r0, sl
 800a054:	4659      	mov	r1, fp
 800a056:	2200      	movs	r2, #0
 800a058:	f7f6 fade 	bl	8000618 <__aeabi_dmul>
 800a05c:	4b08      	ldr	r3, [pc, #32]	@ (800a080 <_strtod_l+0x860>)
 800a05e:	400b      	ands	r3, r1
 800a060:	4682      	mov	sl, r0
 800a062:	468b      	mov	fp, r1
 800a064:	2b00      	cmp	r3, #0
 800a066:	f47f ae05 	bne.w	8009c74 <_strtod_l+0x454>
 800a06a:	9a05      	ldr	r2, [sp, #20]
 800a06c:	2322      	movs	r3, #34	@ 0x22
 800a06e:	6013      	str	r3, [r2, #0]
 800a070:	e600      	b.n	8009c74 <_strtod_l+0x454>
 800a072:	bf00      	nop
 800a074:	0800e488 	.word	0x0800e488
 800a078:	fffffc02 	.word	0xfffffc02
 800a07c:	39500000 	.word	0x39500000
 800a080:	7ff00000 	.word	0x7ff00000
 800a084:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a088:	d165      	bne.n	800a156 <_strtod_l+0x936>
 800a08a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a08c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a090:	b35a      	cbz	r2, 800a0ea <_strtod_l+0x8ca>
 800a092:	4a9f      	ldr	r2, [pc, #636]	@ (800a310 <_strtod_l+0xaf0>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d12b      	bne.n	800a0f0 <_strtod_l+0x8d0>
 800a098:	9b08      	ldr	r3, [sp, #32]
 800a09a:	4651      	mov	r1, sl
 800a09c:	b303      	cbz	r3, 800a0e0 <_strtod_l+0x8c0>
 800a09e:	4b9d      	ldr	r3, [pc, #628]	@ (800a314 <_strtod_l+0xaf4>)
 800a0a0:	465a      	mov	r2, fp
 800a0a2:	4013      	ands	r3, r2
 800a0a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ac:	d81b      	bhi.n	800a0e6 <_strtod_l+0x8c6>
 800a0ae:	0d1b      	lsrs	r3, r3, #20
 800a0b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a0b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b8:	4299      	cmp	r1, r3
 800a0ba:	d119      	bne.n	800a0f0 <_strtod_l+0x8d0>
 800a0bc:	4b96      	ldr	r3, [pc, #600]	@ (800a318 <_strtod_l+0xaf8>)
 800a0be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d102      	bne.n	800a0ca <_strtod_l+0x8aa>
 800a0c4:	3101      	adds	r1, #1
 800a0c6:	f43f adca 	beq.w	8009c5e <_strtod_l+0x43e>
 800a0ca:	4b92      	ldr	r3, [pc, #584]	@ (800a314 <_strtod_l+0xaf4>)
 800a0cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0ce:	401a      	ands	r2, r3
 800a0d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a0d4:	f04f 0a00 	mov.w	sl, #0
 800a0d8:	9b08      	ldr	r3, [sp, #32]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d1b8      	bne.n	800a050 <_strtod_l+0x830>
 800a0de:	e5c9      	b.n	8009c74 <_strtod_l+0x454>
 800a0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e4:	e7e8      	b.n	800a0b8 <_strtod_l+0x898>
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	e7e6      	b.n	800a0b8 <_strtod_l+0x898>
 800a0ea:	ea53 030a 	orrs.w	r3, r3, sl
 800a0ee:	d0a1      	beq.n	800a034 <_strtod_l+0x814>
 800a0f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a0f2:	b1db      	cbz	r3, 800a12c <_strtod_l+0x90c>
 800a0f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0f6:	4213      	tst	r3, r2
 800a0f8:	d0ee      	beq.n	800a0d8 <_strtod_l+0x8b8>
 800a0fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0fc:	9a08      	ldr	r2, [sp, #32]
 800a0fe:	4650      	mov	r0, sl
 800a100:	4659      	mov	r1, fp
 800a102:	b1bb      	cbz	r3, 800a134 <_strtod_l+0x914>
 800a104:	f7ff fb6e 	bl	80097e4 <sulp>
 800a108:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a10c:	ec53 2b10 	vmov	r2, r3, d0
 800a110:	f7f6 f8cc 	bl	80002ac <__adddf3>
 800a114:	4682      	mov	sl, r0
 800a116:	468b      	mov	fp, r1
 800a118:	e7de      	b.n	800a0d8 <_strtod_l+0x8b8>
 800a11a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a11e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a122:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a126:	f04f 3aff 	mov.w	sl, #4294967295
 800a12a:	e7d5      	b.n	800a0d8 <_strtod_l+0x8b8>
 800a12c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a12e:	ea13 0f0a 	tst.w	r3, sl
 800a132:	e7e1      	b.n	800a0f8 <_strtod_l+0x8d8>
 800a134:	f7ff fb56 	bl	80097e4 <sulp>
 800a138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a13c:	ec53 2b10 	vmov	r2, r3, d0
 800a140:	f7f6 f8b2 	bl	80002a8 <__aeabi_dsub>
 800a144:	2200      	movs	r2, #0
 800a146:	2300      	movs	r3, #0
 800a148:	4682      	mov	sl, r0
 800a14a:	468b      	mov	fp, r1
 800a14c:	f7f6 fccc 	bl	8000ae8 <__aeabi_dcmpeq>
 800a150:	2800      	cmp	r0, #0
 800a152:	d0c1      	beq.n	800a0d8 <_strtod_l+0x8b8>
 800a154:	e619      	b.n	8009d8a <_strtod_l+0x56a>
 800a156:	4641      	mov	r1, r8
 800a158:	4620      	mov	r0, r4
 800a15a:	f003 f9d1 	bl	800d500 <__ratio>
 800a15e:	ec57 6b10 	vmov	r6, r7, d0
 800a162:	2200      	movs	r2, #0
 800a164:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a168:	4630      	mov	r0, r6
 800a16a:	4639      	mov	r1, r7
 800a16c:	f7f6 fcd0 	bl	8000b10 <__aeabi_dcmple>
 800a170:	2800      	cmp	r0, #0
 800a172:	d06f      	beq.n	800a254 <_strtod_l+0xa34>
 800a174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a176:	2b00      	cmp	r3, #0
 800a178:	d17a      	bne.n	800a270 <_strtod_l+0xa50>
 800a17a:	f1ba 0f00 	cmp.w	sl, #0
 800a17e:	d158      	bne.n	800a232 <_strtod_l+0xa12>
 800a180:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a182:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a186:	2b00      	cmp	r3, #0
 800a188:	d15a      	bne.n	800a240 <_strtod_l+0xa20>
 800a18a:	4b64      	ldr	r3, [pc, #400]	@ (800a31c <_strtod_l+0xafc>)
 800a18c:	2200      	movs	r2, #0
 800a18e:	4630      	mov	r0, r6
 800a190:	4639      	mov	r1, r7
 800a192:	f7f6 fcb3 	bl	8000afc <__aeabi_dcmplt>
 800a196:	2800      	cmp	r0, #0
 800a198:	d159      	bne.n	800a24e <_strtod_l+0xa2e>
 800a19a:	4630      	mov	r0, r6
 800a19c:	4639      	mov	r1, r7
 800a19e:	4b60      	ldr	r3, [pc, #384]	@ (800a320 <_strtod_l+0xb00>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f7f6 fa39 	bl	8000618 <__aeabi_dmul>
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	460f      	mov	r7, r1
 800a1aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a1ae:	9606      	str	r6, [sp, #24]
 800a1b0:	9307      	str	r3, [sp, #28]
 800a1b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1b6:	4d57      	ldr	r5, [pc, #348]	@ (800a314 <_strtod_l+0xaf4>)
 800a1b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a1bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1be:	401d      	ands	r5, r3
 800a1c0:	4b58      	ldr	r3, [pc, #352]	@ (800a324 <_strtod_l+0xb04>)
 800a1c2:	429d      	cmp	r5, r3
 800a1c4:	f040 80b2 	bne.w	800a32c <_strtod_l+0xb0c>
 800a1c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a1ce:	ec4b ab10 	vmov	d0, sl, fp
 800a1d2:	f003 f8cd 	bl	800d370 <__ulp>
 800a1d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1da:	ec51 0b10 	vmov	r0, r1, d0
 800a1de:	f7f6 fa1b 	bl	8000618 <__aeabi_dmul>
 800a1e2:	4652      	mov	r2, sl
 800a1e4:	465b      	mov	r3, fp
 800a1e6:	f7f6 f861 	bl	80002ac <__adddf3>
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	4949      	ldr	r1, [pc, #292]	@ (800a314 <_strtod_l+0xaf4>)
 800a1ee:	4a4e      	ldr	r2, [pc, #312]	@ (800a328 <_strtod_l+0xb08>)
 800a1f0:	4019      	ands	r1, r3
 800a1f2:	4291      	cmp	r1, r2
 800a1f4:	4682      	mov	sl, r0
 800a1f6:	d942      	bls.n	800a27e <_strtod_l+0xa5e>
 800a1f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a1fa:	4b47      	ldr	r3, [pc, #284]	@ (800a318 <_strtod_l+0xaf8>)
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d103      	bne.n	800a208 <_strtod_l+0x9e8>
 800a200:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a202:	3301      	adds	r3, #1
 800a204:	f43f ad2b 	beq.w	8009c5e <_strtod_l+0x43e>
 800a208:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a318 <_strtod_l+0xaf8>
 800a20c:	f04f 3aff 	mov.w	sl, #4294967295
 800a210:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a212:	9805      	ldr	r0, [sp, #20]
 800a214:	f002 fd78 	bl	800cd08 <_Bfree>
 800a218:	9805      	ldr	r0, [sp, #20]
 800a21a:	4649      	mov	r1, r9
 800a21c:	f002 fd74 	bl	800cd08 <_Bfree>
 800a220:	9805      	ldr	r0, [sp, #20]
 800a222:	4641      	mov	r1, r8
 800a224:	f002 fd70 	bl	800cd08 <_Bfree>
 800a228:	9805      	ldr	r0, [sp, #20]
 800a22a:	4621      	mov	r1, r4
 800a22c:	f002 fd6c 	bl	800cd08 <_Bfree>
 800a230:	e618      	b.n	8009e64 <_strtod_l+0x644>
 800a232:	f1ba 0f01 	cmp.w	sl, #1
 800a236:	d103      	bne.n	800a240 <_strtod_l+0xa20>
 800a238:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f43f ada5 	beq.w	8009d8a <_strtod_l+0x56a>
 800a240:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a2f0 <_strtod_l+0xad0>
 800a244:	4f35      	ldr	r7, [pc, #212]	@ (800a31c <_strtod_l+0xafc>)
 800a246:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a24a:	2600      	movs	r6, #0
 800a24c:	e7b1      	b.n	800a1b2 <_strtod_l+0x992>
 800a24e:	4f34      	ldr	r7, [pc, #208]	@ (800a320 <_strtod_l+0xb00>)
 800a250:	2600      	movs	r6, #0
 800a252:	e7aa      	b.n	800a1aa <_strtod_l+0x98a>
 800a254:	4b32      	ldr	r3, [pc, #200]	@ (800a320 <_strtod_l+0xb00>)
 800a256:	4630      	mov	r0, r6
 800a258:	4639      	mov	r1, r7
 800a25a:	2200      	movs	r2, #0
 800a25c:	f7f6 f9dc 	bl	8000618 <__aeabi_dmul>
 800a260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a262:	4606      	mov	r6, r0
 800a264:	460f      	mov	r7, r1
 800a266:	2b00      	cmp	r3, #0
 800a268:	d09f      	beq.n	800a1aa <_strtod_l+0x98a>
 800a26a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a26e:	e7a0      	b.n	800a1b2 <_strtod_l+0x992>
 800a270:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a2f8 <_strtod_l+0xad8>
 800a274:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a278:	ec57 6b17 	vmov	r6, r7, d7
 800a27c:	e799      	b.n	800a1b2 <_strtod_l+0x992>
 800a27e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a282:	9b08      	ldr	r3, [sp, #32]
 800a284:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d1c1      	bne.n	800a210 <_strtod_l+0x9f0>
 800a28c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a290:	0d1b      	lsrs	r3, r3, #20
 800a292:	051b      	lsls	r3, r3, #20
 800a294:	429d      	cmp	r5, r3
 800a296:	d1bb      	bne.n	800a210 <_strtod_l+0x9f0>
 800a298:	4630      	mov	r0, r6
 800a29a:	4639      	mov	r1, r7
 800a29c:	f7f6 fd1c 	bl	8000cd8 <__aeabi_d2lz>
 800a2a0:	f7f6 f98c 	bl	80005bc <__aeabi_l2d>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	4639      	mov	r1, r7
 800a2ac:	f7f5 fffc 	bl	80002a8 <__aeabi_dsub>
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a2b8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a2bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2be:	ea46 060a 	orr.w	r6, r6, sl
 800a2c2:	431e      	orrs	r6, r3
 800a2c4:	d06f      	beq.n	800a3a6 <_strtod_l+0xb86>
 800a2c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a300 <_strtod_l+0xae0>)
 800a2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2cc:	f7f6 fc16 	bl	8000afc <__aeabi_dcmplt>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	f47f accf 	bne.w	8009c74 <_strtod_l+0x454>
 800a2d6:	a30c      	add	r3, pc, #48	@ (adr r3, 800a308 <_strtod_l+0xae8>)
 800a2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2e0:	f7f6 fc2a 	bl	8000b38 <__aeabi_dcmpgt>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	d093      	beq.n	800a210 <_strtod_l+0x9f0>
 800a2e8:	e4c4      	b.n	8009c74 <_strtod_l+0x454>
 800a2ea:	bf00      	nop
 800a2ec:	f3af 8000 	nop.w
 800a2f0:	00000000 	.word	0x00000000
 800a2f4:	bff00000 	.word	0xbff00000
 800a2f8:	00000000 	.word	0x00000000
 800a2fc:	3ff00000 	.word	0x3ff00000
 800a300:	94a03595 	.word	0x94a03595
 800a304:	3fdfffff 	.word	0x3fdfffff
 800a308:	35afe535 	.word	0x35afe535
 800a30c:	3fe00000 	.word	0x3fe00000
 800a310:	000fffff 	.word	0x000fffff
 800a314:	7ff00000 	.word	0x7ff00000
 800a318:	7fefffff 	.word	0x7fefffff
 800a31c:	3ff00000 	.word	0x3ff00000
 800a320:	3fe00000 	.word	0x3fe00000
 800a324:	7fe00000 	.word	0x7fe00000
 800a328:	7c9fffff 	.word	0x7c9fffff
 800a32c:	9b08      	ldr	r3, [sp, #32]
 800a32e:	b323      	cbz	r3, 800a37a <_strtod_l+0xb5a>
 800a330:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a334:	d821      	bhi.n	800a37a <_strtod_l+0xb5a>
 800a336:	a328      	add	r3, pc, #160	@ (adr r3, 800a3d8 <_strtod_l+0xbb8>)
 800a338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33c:	4630      	mov	r0, r6
 800a33e:	4639      	mov	r1, r7
 800a340:	f7f6 fbe6 	bl	8000b10 <__aeabi_dcmple>
 800a344:	b1a0      	cbz	r0, 800a370 <_strtod_l+0xb50>
 800a346:	4639      	mov	r1, r7
 800a348:	4630      	mov	r0, r6
 800a34a:	f7f6 fc3d 	bl	8000bc8 <__aeabi_d2uiz>
 800a34e:	2801      	cmp	r0, #1
 800a350:	bf38      	it	cc
 800a352:	2001      	movcc	r0, #1
 800a354:	f7f6 f8e6 	bl	8000524 <__aeabi_ui2d>
 800a358:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a35a:	4606      	mov	r6, r0
 800a35c:	460f      	mov	r7, r1
 800a35e:	b9fb      	cbnz	r3, 800a3a0 <_strtod_l+0xb80>
 800a360:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a364:	9014      	str	r0, [sp, #80]	@ 0x50
 800a366:	9315      	str	r3, [sp, #84]	@ 0x54
 800a368:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a36c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a370:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a372:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a376:	1b5b      	subs	r3, r3, r5
 800a378:	9311      	str	r3, [sp, #68]	@ 0x44
 800a37a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a37e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a382:	f002 fff5 	bl	800d370 <__ulp>
 800a386:	4650      	mov	r0, sl
 800a388:	ec53 2b10 	vmov	r2, r3, d0
 800a38c:	4659      	mov	r1, fp
 800a38e:	f7f6 f943 	bl	8000618 <__aeabi_dmul>
 800a392:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a396:	f7f5 ff89 	bl	80002ac <__adddf3>
 800a39a:	4682      	mov	sl, r0
 800a39c:	468b      	mov	fp, r1
 800a39e:	e770      	b.n	800a282 <_strtod_l+0xa62>
 800a3a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a3a4:	e7e0      	b.n	800a368 <_strtod_l+0xb48>
 800a3a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a3e0 <_strtod_l+0xbc0>)
 800a3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ac:	f7f6 fba6 	bl	8000afc <__aeabi_dcmplt>
 800a3b0:	e798      	b.n	800a2e4 <_strtod_l+0xac4>
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a3b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3ba:	6013      	str	r3, [r2, #0]
 800a3bc:	f7ff ba6d 	b.w	800989a <_strtod_l+0x7a>
 800a3c0:	2a65      	cmp	r2, #101	@ 0x65
 800a3c2:	f43f ab66 	beq.w	8009a92 <_strtod_l+0x272>
 800a3c6:	2a45      	cmp	r2, #69	@ 0x45
 800a3c8:	f43f ab63 	beq.w	8009a92 <_strtod_l+0x272>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	f7ff bb9e 	b.w	8009b0e <_strtod_l+0x2ee>
 800a3d2:	bf00      	nop
 800a3d4:	f3af 8000 	nop.w
 800a3d8:	ffc00000 	.word	0xffc00000
 800a3dc:	41dfffff 	.word	0x41dfffff
 800a3e0:	94a03595 	.word	0x94a03595
 800a3e4:	3fcfffff 	.word	0x3fcfffff

0800a3e8 <_strtod_r>:
 800a3e8:	4b01      	ldr	r3, [pc, #4]	@ (800a3f0 <_strtod_r+0x8>)
 800a3ea:	f7ff ba19 	b.w	8009820 <_strtod_l>
 800a3ee:	bf00      	nop
 800a3f0:	20000018 	.word	0x20000018

0800a3f4 <strtof>:
 800a3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f8:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800a4b8 <strtof+0xc4>
 800a3fc:	4b29      	ldr	r3, [pc, #164]	@ (800a4a4 <strtof+0xb0>)
 800a3fe:	460a      	mov	r2, r1
 800a400:	ed2d 8b02 	vpush	{d8}
 800a404:	4601      	mov	r1, r0
 800a406:	f8d8 0000 	ldr.w	r0, [r8]
 800a40a:	f7ff fa09 	bl	8009820 <_strtod_l>
 800a40e:	ec55 4b10 	vmov	r4, r5, d0
 800a412:	4622      	mov	r2, r4
 800a414:	462b      	mov	r3, r5
 800a416:	4620      	mov	r0, r4
 800a418:	4629      	mov	r1, r5
 800a41a:	f7f6 fb97 	bl	8000b4c <__aeabi_dcmpun>
 800a41e:	b190      	cbz	r0, 800a446 <strtof+0x52>
 800a420:	2d00      	cmp	r5, #0
 800a422:	4821      	ldr	r0, [pc, #132]	@ (800a4a8 <strtof+0xb4>)
 800a424:	da09      	bge.n	800a43a <strtof+0x46>
 800a426:	f001 f98f 	bl	800b748 <nanf>
 800a42a:	eeb1 8a40 	vneg.f32	s16, s0
 800a42e:	eeb0 0a48 	vmov.f32	s0, s16
 800a432:	ecbd 8b02 	vpop	{d8}
 800a436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a43a:	ecbd 8b02 	vpop	{d8}
 800a43e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a442:	f001 b981 	b.w	800b748 <nanf>
 800a446:	4620      	mov	r0, r4
 800a448:	4629      	mov	r1, r5
 800a44a:	f7f6 fbdd 	bl	8000c08 <__aeabi_d2f>
 800a44e:	ee08 0a10 	vmov	s16, r0
 800a452:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800a4ac <strtof+0xb8>
 800a456:	eeb0 7ac8 	vabs.f32	s14, s16
 800a45a:	eeb4 7a67 	vcmp.f32	s14, s15
 800a45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a462:	dd11      	ble.n	800a488 <strtof+0x94>
 800a464:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800a468:	4b11      	ldr	r3, [pc, #68]	@ (800a4b0 <strtof+0xbc>)
 800a46a:	f04f 32ff 	mov.w	r2, #4294967295
 800a46e:	4620      	mov	r0, r4
 800a470:	4639      	mov	r1, r7
 800a472:	f7f6 fb6b 	bl	8000b4c <__aeabi_dcmpun>
 800a476:	b980      	cbnz	r0, 800a49a <strtof+0xa6>
 800a478:	4b0d      	ldr	r3, [pc, #52]	@ (800a4b0 <strtof+0xbc>)
 800a47a:	f04f 32ff 	mov.w	r2, #4294967295
 800a47e:	4620      	mov	r0, r4
 800a480:	4639      	mov	r1, r7
 800a482:	f7f6 fb45 	bl	8000b10 <__aeabi_dcmple>
 800a486:	b940      	cbnz	r0, 800a49a <strtof+0xa6>
 800a488:	ee18 3a10 	vmov	r3, s16
 800a48c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a490:	d1cd      	bne.n	800a42e <strtof+0x3a>
 800a492:	4b08      	ldr	r3, [pc, #32]	@ (800a4b4 <strtof+0xc0>)
 800a494:	402b      	ands	r3, r5
 800a496:	2b00      	cmp	r3, #0
 800a498:	d0c9      	beq.n	800a42e <strtof+0x3a>
 800a49a:	f8d8 3000 	ldr.w	r3, [r8]
 800a49e:	2222      	movs	r2, #34	@ 0x22
 800a4a0:	601a      	str	r2, [r3, #0]
 800a4a2:	e7c4      	b.n	800a42e <strtof+0x3a>
 800a4a4:	20000018 	.word	0x20000018
 800a4a8:	0800e885 	.word	0x0800e885
 800a4ac:	7f7fffff 	.word	0x7f7fffff
 800a4b0:	7fefffff 	.word	0x7fefffff
 800a4b4:	7ff00000 	.word	0x7ff00000
 800a4b8:	20000184 	.word	0x20000184

0800a4bc <__cvt>:
 800a4bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c0:	ec57 6b10 	vmov	r6, r7, d0
 800a4c4:	2f00      	cmp	r7, #0
 800a4c6:	460c      	mov	r4, r1
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	463b      	mov	r3, r7
 800a4cc:	bfbb      	ittet	lt
 800a4ce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a4d2:	461f      	movlt	r7, r3
 800a4d4:	2300      	movge	r3, #0
 800a4d6:	232d      	movlt	r3, #45	@ 0x2d
 800a4d8:	700b      	strb	r3, [r1, #0]
 800a4da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a4dc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a4e0:	4691      	mov	r9, r2
 800a4e2:	f023 0820 	bic.w	r8, r3, #32
 800a4e6:	bfbc      	itt	lt
 800a4e8:	4632      	movlt	r2, r6
 800a4ea:	4616      	movlt	r6, r2
 800a4ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a4f0:	d005      	beq.n	800a4fe <__cvt+0x42>
 800a4f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a4f6:	d100      	bne.n	800a4fa <__cvt+0x3e>
 800a4f8:	3401      	adds	r4, #1
 800a4fa:	2102      	movs	r1, #2
 800a4fc:	e000      	b.n	800a500 <__cvt+0x44>
 800a4fe:	2103      	movs	r1, #3
 800a500:	ab03      	add	r3, sp, #12
 800a502:	9301      	str	r3, [sp, #4]
 800a504:	ab02      	add	r3, sp, #8
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	ec47 6b10 	vmov	d0, r6, r7
 800a50c:	4653      	mov	r3, sl
 800a50e:	4622      	mov	r2, r4
 800a510:	f001 f9aa 	bl	800b868 <_dtoa_r>
 800a514:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a518:	4605      	mov	r5, r0
 800a51a:	d119      	bne.n	800a550 <__cvt+0x94>
 800a51c:	f019 0f01 	tst.w	r9, #1
 800a520:	d00e      	beq.n	800a540 <__cvt+0x84>
 800a522:	eb00 0904 	add.w	r9, r0, r4
 800a526:	2200      	movs	r2, #0
 800a528:	2300      	movs	r3, #0
 800a52a:	4630      	mov	r0, r6
 800a52c:	4639      	mov	r1, r7
 800a52e:	f7f6 fadb 	bl	8000ae8 <__aeabi_dcmpeq>
 800a532:	b108      	cbz	r0, 800a538 <__cvt+0x7c>
 800a534:	f8cd 900c 	str.w	r9, [sp, #12]
 800a538:	2230      	movs	r2, #48	@ 0x30
 800a53a:	9b03      	ldr	r3, [sp, #12]
 800a53c:	454b      	cmp	r3, r9
 800a53e:	d31e      	bcc.n	800a57e <__cvt+0xc2>
 800a540:	9b03      	ldr	r3, [sp, #12]
 800a542:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a544:	1b5b      	subs	r3, r3, r5
 800a546:	4628      	mov	r0, r5
 800a548:	6013      	str	r3, [r2, #0]
 800a54a:	b004      	add	sp, #16
 800a54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a550:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a554:	eb00 0904 	add.w	r9, r0, r4
 800a558:	d1e5      	bne.n	800a526 <__cvt+0x6a>
 800a55a:	7803      	ldrb	r3, [r0, #0]
 800a55c:	2b30      	cmp	r3, #48	@ 0x30
 800a55e:	d10a      	bne.n	800a576 <__cvt+0xba>
 800a560:	2200      	movs	r2, #0
 800a562:	2300      	movs	r3, #0
 800a564:	4630      	mov	r0, r6
 800a566:	4639      	mov	r1, r7
 800a568:	f7f6 fabe 	bl	8000ae8 <__aeabi_dcmpeq>
 800a56c:	b918      	cbnz	r0, 800a576 <__cvt+0xba>
 800a56e:	f1c4 0401 	rsb	r4, r4, #1
 800a572:	f8ca 4000 	str.w	r4, [sl]
 800a576:	f8da 3000 	ldr.w	r3, [sl]
 800a57a:	4499      	add	r9, r3
 800a57c:	e7d3      	b.n	800a526 <__cvt+0x6a>
 800a57e:	1c59      	adds	r1, r3, #1
 800a580:	9103      	str	r1, [sp, #12]
 800a582:	701a      	strb	r2, [r3, #0]
 800a584:	e7d9      	b.n	800a53a <__cvt+0x7e>

0800a586 <__exponent>:
 800a586:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a588:	2900      	cmp	r1, #0
 800a58a:	bfba      	itte	lt
 800a58c:	4249      	neglt	r1, r1
 800a58e:	232d      	movlt	r3, #45	@ 0x2d
 800a590:	232b      	movge	r3, #43	@ 0x2b
 800a592:	2909      	cmp	r1, #9
 800a594:	7002      	strb	r2, [r0, #0]
 800a596:	7043      	strb	r3, [r0, #1]
 800a598:	dd29      	ble.n	800a5ee <__exponent+0x68>
 800a59a:	f10d 0307 	add.w	r3, sp, #7
 800a59e:	461d      	mov	r5, r3
 800a5a0:	270a      	movs	r7, #10
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	fbb1 f6f7 	udiv	r6, r1, r7
 800a5a8:	fb07 1416 	mls	r4, r7, r6, r1
 800a5ac:	3430      	adds	r4, #48	@ 0x30
 800a5ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a5b2:	460c      	mov	r4, r1
 800a5b4:	2c63      	cmp	r4, #99	@ 0x63
 800a5b6:	f103 33ff 	add.w	r3, r3, #4294967295
 800a5ba:	4631      	mov	r1, r6
 800a5bc:	dcf1      	bgt.n	800a5a2 <__exponent+0x1c>
 800a5be:	3130      	adds	r1, #48	@ 0x30
 800a5c0:	1e94      	subs	r4, r2, #2
 800a5c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a5c6:	1c41      	adds	r1, r0, #1
 800a5c8:	4623      	mov	r3, r4
 800a5ca:	42ab      	cmp	r3, r5
 800a5cc:	d30a      	bcc.n	800a5e4 <__exponent+0x5e>
 800a5ce:	f10d 0309 	add.w	r3, sp, #9
 800a5d2:	1a9b      	subs	r3, r3, r2
 800a5d4:	42ac      	cmp	r4, r5
 800a5d6:	bf88      	it	hi
 800a5d8:	2300      	movhi	r3, #0
 800a5da:	3302      	adds	r3, #2
 800a5dc:	4403      	add	r3, r0
 800a5de:	1a18      	subs	r0, r3, r0
 800a5e0:	b003      	add	sp, #12
 800a5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a5e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a5ec:	e7ed      	b.n	800a5ca <__exponent+0x44>
 800a5ee:	2330      	movs	r3, #48	@ 0x30
 800a5f0:	3130      	adds	r1, #48	@ 0x30
 800a5f2:	7083      	strb	r3, [r0, #2]
 800a5f4:	70c1      	strb	r1, [r0, #3]
 800a5f6:	1d03      	adds	r3, r0, #4
 800a5f8:	e7f1      	b.n	800a5de <__exponent+0x58>
	...

0800a5fc <_printf_float>:
 800a5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a600:	b08d      	sub	sp, #52	@ 0x34
 800a602:	460c      	mov	r4, r1
 800a604:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a608:	4616      	mov	r6, r2
 800a60a:	461f      	mov	r7, r3
 800a60c:	4605      	mov	r5, r0
 800a60e:	f001 f805 	bl	800b61c <_localeconv_r>
 800a612:	6803      	ldr	r3, [r0, #0]
 800a614:	9304      	str	r3, [sp, #16]
 800a616:	4618      	mov	r0, r3
 800a618:	f7f5 fe3a 	bl	8000290 <strlen>
 800a61c:	2300      	movs	r3, #0
 800a61e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a620:	f8d8 3000 	ldr.w	r3, [r8]
 800a624:	9005      	str	r0, [sp, #20]
 800a626:	3307      	adds	r3, #7
 800a628:	f023 0307 	bic.w	r3, r3, #7
 800a62c:	f103 0208 	add.w	r2, r3, #8
 800a630:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a634:	f8d4 b000 	ldr.w	fp, [r4]
 800a638:	f8c8 2000 	str.w	r2, [r8]
 800a63c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a640:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a644:	9307      	str	r3, [sp, #28]
 800a646:	f8cd 8018 	str.w	r8, [sp, #24]
 800a64a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a64e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a652:	4b9c      	ldr	r3, [pc, #624]	@ (800a8c4 <_printf_float+0x2c8>)
 800a654:	f04f 32ff 	mov.w	r2, #4294967295
 800a658:	f7f6 fa78 	bl	8000b4c <__aeabi_dcmpun>
 800a65c:	bb70      	cbnz	r0, 800a6bc <_printf_float+0xc0>
 800a65e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a662:	4b98      	ldr	r3, [pc, #608]	@ (800a8c4 <_printf_float+0x2c8>)
 800a664:	f04f 32ff 	mov.w	r2, #4294967295
 800a668:	f7f6 fa52 	bl	8000b10 <__aeabi_dcmple>
 800a66c:	bb30      	cbnz	r0, 800a6bc <_printf_float+0xc0>
 800a66e:	2200      	movs	r2, #0
 800a670:	2300      	movs	r3, #0
 800a672:	4640      	mov	r0, r8
 800a674:	4649      	mov	r1, r9
 800a676:	f7f6 fa41 	bl	8000afc <__aeabi_dcmplt>
 800a67a:	b110      	cbz	r0, 800a682 <_printf_float+0x86>
 800a67c:	232d      	movs	r3, #45	@ 0x2d
 800a67e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a682:	4a91      	ldr	r2, [pc, #580]	@ (800a8c8 <_printf_float+0x2cc>)
 800a684:	4b91      	ldr	r3, [pc, #580]	@ (800a8cc <_printf_float+0x2d0>)
 800a686:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a68a:	bf94      	ite	ls
 800a68c:	4690      	movls	r8, r2
 800a68e:	4698      	movhi	r8, r3
 800a690:	2303      	movs	r3, #3
 800a692:	6123      	str	r3, [r4, #16]
 800a694:	f02b 0304 	bic.w	r3, fp, #4
 800a698:	6023      	str	r3, [r4, #0]
 800a69a:	f04f 0900 	mov.w	r9, #0
 800a69e:	9700      	str	r7, [sp, #0]
 800a6a0:	4633      	mov	r3, r6
 800a6a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a6a4:	4621      	mov	r1, r4
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	f000 f9d2 	bl	800aa50 <_printf_common>
 800a6ac:	3001      	adds	r0, #1
 800a6ae:	f040 808d 	bne.w	800a7cc <_printf_float+0x1d0>
 800a6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b6:	b00d      	add	sp, #52	@ 0x34
 800a6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6bc:	4642      	mov	r2, r8
 800a6be:	464b      	mov	r3, r9
 800a6c0:	4640      	mov	r0, r8
 800a6c2:	4649      	mov	r1, r9
 800a6c4:	f7f6 fa42 	bl	8000b4c <__aeabi_dcmpun>
 800a6c8:	b140      	cbz	r0, 800a6dc <_printf_float+0xe0>
 800a6ca:	464b      	mov	r3, r9
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	bfbc      	itt	lt
 800a6d0:	232d      	movlt	r3, #45	@ 0x2d
 800a6d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a6d6:	4a7e      	ldr	r2, [pc, #504]	@ (800a8d0 <_printf_float+0x2d4>)
 800a6d8:	4b7e      	ldr	r3, [pc, #504]	@ (800a8d4 <_printf_float+0x2d8>)
 800a6da:	e7d4      	b.n	800a686 <_printf_float+0x8a>
 800a6dc:	6863      	ldr	r3, [r4, #4]
 800a6de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a6e2:	9206      	str	r2, [sp, #24]
 800a6e4:	1c5a      	adds	r2, r3, #1
 800a6e6:	d13b      	bne.n	800a760 <_printf_float+0x164>
 800a6e8:	2306      	movs	r3, #6
 800a6ea:	6063      	str	r3, [r4, #4]
 800a6ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	6022      	str	r2, [r4, #0]
 800a6f4:	9303      	str	r3, [sp, #12]
 800a6f6:	ab0a      	add	r3, sp, #40	@ 0x28
 800a6f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a6fc:	ab09      	add	r3, sp, #36	@ 0x24
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	6861      	ldr	r1, [r4, #4]
 800a702:	ec49 8b10 	vmov	d0, r8, r9
 800a706:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a70a:	4628      	mov	r0, r5
 800a70c:	f7ff fed6 	bl	800a4bc <__cvt>
 800a710:	9b06      	ldr	r3, [sp, #24]
 800a712:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a714:	2b47      	cmp	r3, #71	@ 0x47
 800a716:	4680      	mov	r8, r0
 800a718:	d129      	bne.n	800a76e <_printf_float+0x172>
 800a71a:	1cc8      	adds	r0, r1, #3
 800a71c:	db02      	blt.n	800a724 <_printf_float+0x128>
 800a71e:	6863      	ldr	r3, [r4, #4]
 800a720:	4299      	cmp	r1, r3
 800a722:	dd41      	ble.n	800a7a8 <_printf_float+0x1ac>
 800a724:	f1aa 0a02 	sub.w	sl, sl, #2
 800a728:	fa5f fa8a 	uxtb.w	sl, sl
 800a72c:	3901      	subs	r1, #1
 800a72e:	4652      	mov	r2, sl
 800a730:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a734:	9109      	str	r1, [sp, #36]	@ 0x24
 800a736:	f7ff ff26 	bl	800a586 <__exponent>
 800a73a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a73c:	1813      	adds	r3, r2, r0
 800a73e:	2a01      	cmp	r2, #1
 800a740:	4681      	mov	r9, r0
 800a742:	6123      	str	r3, [r4, #16]
 800a744:	dc02      	bgt.n	800a74c <_printf_float+0x150>
 800a746:	6822      	ldr	r2, [r4, #0]
 800a748:	07d2      	lsls	r2, r2, #31
 800a74a:	d501      	bpl.n	800a750 <_printf_float+0x154>
 800a74c:	3301      	adds	r3, #1
 800a74e:	6123      	str	r3, [r4, #16]
 800a750:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a754:	2b00      	cmp	r3, #0
 800a756:	d0a2      	beq.n	800a69e <_printf_float+0xa2>
 800a758:	232d      	movs	r3, #45	@ 0x2d
 800a75a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a75e:	e79e      	b.n	800a69e <_printf_float+0xa2>
 800a760:	9a06      	ldr	r2, [sp, #24]
 800a762:	2a47      	cmp	r2, #71	@ 0x47
 800a764:	d1c2      	bne.n	800a6ec <_printf_float+0xf0>
 800a766:	2b00      	cmp	r3, #0
 800a768:	d1c0      	bne.n	800a6ec <_printf_float+0xf0>
 800a76a:	2301      	movs	r3, #1
 800a76c:	e7bd      	b.n	800a6ea <_printf_float+0xee>
 800a76e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a772:	d9db      	bls.n	800a72c <_printf_float+0x130>
 800a774:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a778:	d118      	bne.n	800a7ac <_printf_float+0x1b0>
 800a77a:	2900      	cmp	r1, #0
 800a77c:	6863      	ldr	r3, [r4, #4]
 800a77e:	dd0b      	ble.n	800a798 <_printf_float+0x19c>
 800a780:	6121      	str	r1, [r4, #16]
 800a782:	b913      	cbnz	r3, 800a78a <_printf_float+0x18e>
 800a784:	6822      	ldr	r2, [r4, #0]
 800a786:	07d0      	lsls	r0, r2, #31
 800a788:	d502      	bpl.n	800a790 <_printf_float+0x194>
 800a78a:	3301      	adds	r3, #1
 800a78c:	440b      	add	r3, r1
 800a78e:	6123      	str	r3, [r4, #16]
 800a790:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a792:	f04f 0900 	mov.w	r9, #0
 800a796:	e7db      	b.n	800a750 <_printf_float+0x154>
 800a798:	b913      	cbnz	r3, 800a7a0 <_printf_float+0x1a4>
 800a79a:	6822      	ldr	r2, [r4, #0]
 800a79c:	07d2      	lsls	r2, r2, #31
 800a79e:	d501      	bpl.n	800a7a4 <_printf_float+0x1a8>
 800a7a0:	3302      	adds	r3, #2
 800a7a2:	e7f4      	b.n	800a78e <_printf_float+0x192>
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e7f2      	b.n	800a78e <_printf_float+0x192>
 800a7a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a7ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7ae:	4299      	cmp	r1, r3
 800a7b0:	db05      	blt.n	800a7be <_printf_float+0x1c2>
 800a7b2:	6823      	ldr	r3, [r4, #0]
 800a7b4:	6121      	str	r1, [r4, #16]
 800a7b6:	07d8      	lsls	r0, r3, #31
 800a7b8:	d5ea      	bpl.n	800a790 <_printf_float+0x194>
 800a7ba:	1c4b      	adds	r3, r1, #1
 800a7bc:	e7e7      	b.n	800a78e <_printf_float+0x192>
 800a7be:	2900      	cmp	r1, #0
 800a7c0:	bfd4      	ite	le
 800a7c2:	f1c1 0202 	rsble	r2, r1, #2
 800a7c6:	2201      	movgt	r2, #1
 800a7c8:	4413      	add	r3, r2
 800a7ca:	e7e0      	b.n	800a78e <_printf_float+0x192>
 800a7cc:	6823      	ldr	r3, [r4, #0]
 800a7ce:	055a      	lsls	r2, r3, #21
 800a7d0:	d407      	bmi.n	800a7e2 <_printf_float+0x1e6>
 800a7d2:	6923      	ldr	r3, [r4, #16]
 800a7d4:	4642      	mov	r2, r8
 800a7d6:	4631      	mov	r1, r6
 800a7d8:	4628      	mov	r0, r5
 800a7da:	47b8      	blx	r7
 800a7dc:	3001      	adds	r0, #1
 800a7de:	d12b      	bne.n	800a838 <_printf_float+0x23c>
 800a7e0:	e767      	b.n	800a6b2 <_printf_float+0xb6>
 800a7e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a7e6:	f240 80dd 	bls.w	800a9a4 <_printf_float+0x3a8>
 800a7ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	f7f6 f979 	bl	8000ae8 <__aeabi_dcmpeq>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d033      	beq.n	800a862 <_printf_float+0x266>
 800a7fa:	4a37      	ldr	r2, [pc, #220]	@ (800a8d8 <_printf_float+0x2dc>)
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	4631      	mov	r1, r6
 800a800:	4628      	mov	r0, r5
 800a802:	47b8      	blx	r7
 800a804:	3001      	adds	r0, #1
 800a806:	f43f af54 	beq.w	800a6b2 <_printf_float+0xb6>
 800a80a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a80e:	4543      	cmp	r3, r8
 800a810:	db02      	blt.n	800a818 <_printf_float+0x21c>
 800a812:	6823      	ldr	r3, [r4, #0]
 800a814:	07d8      	lsls	r0, r3, #31
 800a816:	d50f      	bpl.n	800a838 <_printf_float+0x23c>
 800a818:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a81c:	4631      	mov	r1, r6
 800a81e:	4628      	mov	r0, r5
 800a820:	47b8      	blx	r7
 800a822:	3001      	adds	r0, #1
 800a824:	f43f af45 	beq.w	800a6b2 <_printf_float+0xb6>
 800a828:	f04f 0900 	mov.w	r9, #0
 800a82c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a830:	f104 0a1a 	add.w	sl, r4, #26
 800a834:	45c8      	cmp	r8, r9
 800a836:	dc09      	bgt.n	800a84c <_printf_float+0x250>
 800a838:	6823      	ldr	r3, [r4, #0]
 800a83a:	079b      	lsls	r3, r3, #30
 800a83c:	f100 8103 	bmi.w	800aa46 <_printf_float+0x44a>
 800a840:	68e0      	ldr	r0, [r4, #12]
 800a842:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a844:	4298      	cmp	r0, r3
 800a846:	bfb8      	it	lt
 800a848:	4618      	movlt	r0, r3
 800a84a:	e734      	b.n	800a6b6 <_printf_float+0xba>
 800a84c:	2301      	movs	r3, #1
 800a84e:	4652      	mov	r2, sl
 800a850:	4631      	mov	r1, r6
 800a852:	4628      	mov	r0, r5
 800a854:	47b8      	blx	r7
 800a856:	3001      	adds	r0, #1
 800a858:	f43f af2b 	beq.w	800a6b2 <_printf_float+0xb6>
 800a85c:	f109 0901 	add.w	r9, r9, #1
 800a860:	e7e8      	b.n	800a834 <_printf_float+0x238>
 800a862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a864:	2b00      	cmp	r3, #0
 800a866:	dc39      	bgt.n	800a8dc <_printf_float+0x2e0>
 800a868:	4a1b      	ldr	r2, [pc, #108]	@ (800a8d8 <_printf_float+0x2dc>)
 800a86a:	2301      	movs	r3, #1
 800a86c:	4631      	mov	r1, r6
 800a86e:	4628      	mov	r0, r5
 800a870:	47b8      	blx	r7
 800a872:	3001      	adds	r0, #1
 800a874:	f43f af1d 	beq.w	800a6b2 <_printf_float+0xb6>
 800a878:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a87c:	ea59 0303 	orrs.w	r3, r9, r3
 800a880:	d102      	bne.n	800a888 <_printf_float+0x28c>
 800a882:	6823      	ldr	r3, [r4, #0]
 800a884:	07d9      	lsls	r1, r3, #31
 800a886:	d5d7      	bpl.n	800a838 <_printf_float+0x23c>
 800a888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a88c:	4631      	mov	r1, r6
 800a88e:	4628      	mov	r0, r5
 800a890:	47b8      	blx	r7
 800a892:	3001      	adds	r0, #1
 800a894:	f43f af0d 	beq.w	800a6b2 <_printf_float+0xb6>
 800a898:	f04f 0a00 	mov.w	sl, #0
 800a89c:	f104 0b1a 	add.w	fp, r4, #26
 800a8a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8a2:	425b      	negs	r3, r3
 800a8a4:	4553      	cmp	r3, sl
 800a8a6:	dc01      	bgt.n	800a8ac <_printf_float+0x2b0>
 800a8a8:	464b      	mov	r3, r9
 800a8aa:	e793      	b.n	800a7d4 <_printf_float+0x1d8>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	465a      	mov	r2, fp
 800a8b0:	4631      	mov	r1, r6
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	47b8      	blx	r7
 800a8b6:	3001      	adds	r0, #1
 800a8b8:	f43f aefb 	beq.w	800a6b2 <_printf_float+0xb6>
 800a8bc:	f10a 0a01 	add.w	sl, sl, #1
 800a8c0:	e7ee      	b.n	800a8a0 <_printf_float+0x2a4>
 800a8c2:	bf00      	nop
 800a8c4:	7fefffff 	.word	0x7fefffff
 800a8c8:	0800e4b0 	.word	0x0800e4b0
 800a8cc:	0800e4b4 	.word	0x0800e4b4
 800a8d0:	0800e4b8 	.word	0x0800e4b8
 800a8d4:	0800e4bc 	.word	0x0800e4bc
 800a8d8:	0800e4c0 	.word	0x0800e4c0
 800a8dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a8de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a8e2:	4553      	cmp	r3, sl
 800a8e4:	bfa8      	it	ge
 800a8e6:	4653      	movge	r3, sl
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	4699      	mov	r9, r3
 800a8ec:	dc36      	bgt.n	800a95c <_printf_float+0x360>
 800a8ee:	f04f 0b00 	mov.w	fp, #0
 800a8f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8f6:	f104 021a 	add.w	r2, r4, #26
 800a8fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a8fc:	9306      	str	r3, [sp, #24]
 800a8fe:	eba3 0309 	sub.w	r3, r3, r9
 800a902:	455b      	cmp	r3, fp
 800a904:	dc31      	bgt.n	800a96a <_printf_float+0x36e>
 800a906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a908:	459a      	cmp	sl, r3
 800a90a:	dc3a      	bgt.n	800a982 <_printf_float+0x386>
 800a90c:	6823      	ldr	r3, [r4, #0]
 800a90e:	07da      	lsls	r2, r3, #31
 800a910:	d437      	bmi.n	800a982 <_printf_float+0x386>
 800a912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a914:	ebaa 0903 	sub.w	r9, sl, r3
 800a918:	9b06      	ldr	r3, [sp, #24]
 800a91a:	ebaa 0303 	sub.w	r3, sl, r3
 800a91e:	4599      	cmp	r9, r3
 800a920:	bfa8      	it	ge
 800a922:	4699      	movge	r9, r3
 800a924:	f1b9 0f00 	cmp.w	r9, #0
 800a928:	dc33      	bgt.n	800a992 <_printf_float+0x396>
 800a92a:	f04f 0800 	mov.w	r8, #0
 800a92e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a932:	f104 0b1a 	add.w	fp, r4, #26
 800a936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a938:	ebaa 0303 	sub.w	r3, sl, r3
 800a93c:	eba3 0309 	sub.w	r3, r3, r9
 800a940:	4543      	cmp	r3, r8
 800a942:	f77f af79 	ble.w	800a838 <_printf_float+0x23c>
 800a946:	2301      	movs	r3, #1
 800a948:	465a      	mov	r2, fp
 800a94a:	4631      	mov	r1, r6
 800a94c:	4628      	mov	r0, r5
 800a94e:	47b8      	blx	r7
 800a950:	3001      	adds	r0, #1
 800a952:	f43f aeae 	beq.w	800a6b2 <_printf_float+0xb6>
 800a956:	f108 0801 	add.w	r8, r8, #1
 800a95a:	e7ec      	b.n	800a936 <_printf_float+0x33a>
 800a95c:	4642      	mov	r2, r8
 800a95e:	4631      	mov	r1, r6
 800a960:	4628      	mov	r0, r5
 800a962:	47b8      	blx	r7
 800a964:	3001      	adds	r0, #1
 800a966:	d1c2      	bne.n	800a8ee <_printf_float+0x2f2>
 800a968:	e6a3      	b.n	800a6b2 <_printf_float+0xb6>
 800a96a:	2301      	movs	r3, #1
 800a96c:	4631      	mov	r1, r6
 800a96e:	4628      	mov	r0, r5
 800a970:	9206      	str	r2, [sp, #24]
 800a972:	47b8      	blx	r7
 800a974:	3001      	adds	r0, #1
 800a976:	f43f ae9c 	beq.w	800a6b2 <_printf_float+0xb6>
 800a97a:	9a06      	ldr	r2, [sp, #24]
 800a97c:	f10b 0b01 	add.w	fp, fp, #1
 800a980:	e7bb      	b.n	800a8fa <_printf_float+0x2fe>
 800a982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a986:	4631      	mov	r1, r6
 800a988:	4628      	mov	r0, r5
 800a98a:	47b8      	blx	r7
 800a98c:	3001      	adds	r0, #1
 800a98e:	d1c0      	bne.n	800a912 <_printf_float+0x316>
 800a990:	e68f      	b.n	800a6b2 <_printf_float+0xb6>
 800a992:	9a06      	ldr	r2, [sp, #24]
 800a994:	464b      	mov	r3, r9
 800a996:	4442      	add	r2, r8
 800a998:	4631      	mov	r1, r6
 800a99a:	4628      	mov	r0, r5
 800a99c:	47b8      	blx	r7
 800a99e:	3001      	adds	r0, #1
 800a9a0:	d1c3      	bne.n	800a92a <_printf_float+0x32e>
 800a9a2:	e686      	b.n	800a6b2 <_printf_float+0xb6>
 800a9a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a9a8:	f1ba 0f01 	cmp.w	sl, #1
 800a9ac:	dc01      	bgt.n	800a9b2 <_printf_float+0x3b6>
 800a9ae:	07db      	lsls	r3, r3, #31
 800a9b0:	d536      	bpl.n	800aa20 <_printf_float+0x424>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	4642      	mov	r2, r8
 800a9b6:	4631      	mov	r1, r6
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	47b8      	blx	r7
 800a9bc:	3001      	adds	r0, #1
 800a9be:	f43f ae78 	beq.w	800a6b2 <_printf_float+0xb6>
 800a9c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9c6:	4631      	mov	r1, r6
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	47b8      	blx	r7
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	f43f ae70 	beq.w	800a6b2 <_printf_float+0xb6>
 800a9d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	2300      	movs	r3, #0
 800a9da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9de:	f7f6 f883 	bl	8000ae8 <__aeabi_dcmpeq>
 800a9e2:	b9c0      	cbnz	r0, 800aa16 <_printf_float+0x41a>
 800a9e4:	4653      	mov	r3, sl
 800a9e6:	f108 0201 	add.w	r2, r8, #1
 800a9ea:	4631      	mov	r1, r6
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	47b8      	blx	r7
 800a9f0:	3001      	adds	r0, #1
 800a9f2:	d10c      	bne.n	800aa0e <_printf_float+0x412>
 800a9f4:	e65d      	b.n	800a6b2 <_printf_float+0xb6>
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	465a      	mov	r2, fp
 800a9fa:	4631      	mov	r1, r6
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	47b8      	blx	r7
 800aa00:	3001      	adds	r0, #1
 800aa02:	f43f ae56 	beq.w	800a6b2 <_printf_float+0xb6>
 800aa06:	f108 0801 	add.w	r8, r8, #1
 800aa0a:	45d0      	cmp	r8, sl
 800aa0c:	dbf3      	blt.n	800a9f6 <_printf_float+0x3fa>
 800aa0e:	464b      	mov	r3, r9
 800aa10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aa14:	e6df      	b.n	800a7d6 <_printf_float+0x1da>
 800aa16:	f04f 0800 	mov.w	r8, #0
 800aa1a:	f104 0b1a 	add.w	fp, r4, #26
 800aa1e:	e7f4      	b.n	800aa0a <_printf_float+0x40e>
 800aa20:	2301      	movs	r3, #1
 800aa22:	4642      	mov	r2, r8
 800aa24:	e7e1      	b.n	800a9ea <_printf_float+0x3ee>
 800aa26:	2301      	movs	r3, #1
 800aa28:	464a      	mov	r2, r9
 800aa2a:	4631      	mov	r1, r6
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	47b8      	blx	r7
 800aa30:	3001      	adds	r0, #1
 800aa32:	f43f ae3e 	beq.w	800a6b2 <_printf_float+0xb6>
 800aa36:	f108 0801 	add.w	r8, r8, #1
 800aa3a:	68e3      	ldr	r3, [r4, #12]
 800aa3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa3e:	1a5b      	subs	r3, r3, r1
 800aa40:	4543      	cmp	r3, r8
 800aa42:	dcf0      	bgt.n	800aa26 <_printf_float+0x42a>
 800aa44:	e6fc      	b.n	800a840 <_printf_float+0x244>
 800aa46:	f04f 0800 	mov.w	r8, #0
 800aa4a:	f104 0919 	add.w	r9, r4, #25
 800aa4e:	e7f4      	b.n	800aa3a <_printf_float+0x43e>

0800aa50 <_printf_common>:
 800aa50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa54:	4616      	mov	r6, r2
 800aa56:	4698      	mov	r8, r3
 800aa58:	688a      	ldr	r2, [r1, #8]
 800aa5a:	690b      	ldr	r3, [r1, #16]
 800aa5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa60:	4293      	cmp	r3, r2
 800aa62:	bfb8      	it	lt
 800aa64:	4613      	movlt	r3, r2
 800aa66:	6033      	str	r3, [r6, #0]
 800aa68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa6c:	4607      	mov	r7, r0
 800aa6e:	460c      	mov	r4, r1
 800aa70:	b10a      	cbz	r2, 800aa76 <_printf_common+0x26>
 800aa72:	3301      	adds	r3, #1
 800aa74:	6033      	str	r3, [r6, #0]
 800aa76:	6823      	ldr	r3, [r4, #0]
 800aa78:	0699      	lsls	r1, r3, #26
 800aa7a:	bf42      	ittt	mi
 800aa7c:	6833      	ldrmi	r3, [r6, #0]
 800aa7e:	3302      	addmi	r3, #2
 800aa80:	6033      	strmi	r3, [r6, #0]
 800aa82:	6825      	ldr	r5, [r4, #0]
 800aa84:	f015 0506 	ands.w	r5, r5, #6
 800aa88:	d106      	bne.n	800aa98 <_printf_common+0x48>
 800aa8a:	f104 0a19 	add.w	sl, r4, #25
 800aa8e:	68e3      	ldr	r3, [r4, #12]
 800aa90:	6832      	ldr	r2, [r6, #0]
 800aa92:	1a9b      	subs	r3, r3, r2
 800aa94:	42ab      	cmp	r3, r5
 800aa96:	dc26      	bgt.n	800aae6 <_printf_common+0x96>
 800aa98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa9c:	6822      	ldr	r2, [r4, #0]
 800aa9e:	3b00      	subs	r3, #0
 800aaa0:	bf18      	it	ne
 800aaa2:	2301      	movne	r3, #1
 800aaa4:	0692      	lsls	r2, r2, #26
 800aaa6:	d42b      	bmi.n	800ab00 <_printf_common+0xb0>
 800aaa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aaac:	4641      	mov	r1, r8
 800aaae:	4638      	mov	r0, r7
 800aab0:	47c8      	blx	r9
 800aab2:	3001      	adds	r0, #1
 800aab4:	d01e      	beq.n	800aaf4 <_printf_common+0xa4>
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	6922      	ldr	r2, [r4, #16]
 800aaba:	f003 0306 	and.w	r3, r3, #6
 800aabe:	2b04      	cmp	r3, #4
 800aac0:	bf02      	ittt	eq
 800aac2:	68e5      	ldreq	r5, [r4, #12]
 800aac4:	6833      	ldreq	r3, [r6, #0]
 800aac6:	1aed      	subeq	r5, r5, r3
 800aac8:	68a3      	ldr	r3, [r4, #8]
 800aaca:	bf0c      	ite	eq
 800aacc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aad0:	2500      	movne	r5, #0
 800aad2:	4293      	cmp	r3, r2
 800aad4:	bfc4      	itt	gt
 800aad6:	1a9b      	subgt	r3, r3, r2
 800aad8:	18ed      	addgt	r5, r5, r3
 800aada:	2600      	movs	r6, #0
 800aadc:	341a      	adds	r4, #26
 800aade:	42b5      	cmp	r5, r6
 800aae0:	d11a      	bne.n	800ab18 <_printf_common+0xc8>
 800aae2:	2000      	movs	r0, #0
 800aae4:	e008      	b.n	800aaf8 <_printf_common+0xa8>
 800aae6:	2301      	movs	r3, #1
 800aae8:	4652      	mov	r2, sl
 800aaea:	4641      	mov	r1, r8
 800aaec:	4638      	mov	r0, r7
 800aaee:	47c8      	blx	r9
 800aaf0:	3001      	adds	r0, #1
 800aaf2:	d103      	bne.n	800aafc <_printf_common+0xac>
 800aaf4:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aafc:	3501      	adds	r5, #1
 800aafe:	e7c6      	b.n	800aa8e <_printf_common+0x3e>
 800ab00:	18e1      	adds	r1, r4, r3
 800ab02:	1c5a      	adds	r2, r3, #1
 800ab04:	2030      	movs	r0, #48	@ 0x30
 800ab06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ab0a:	4422      	add	r2, r4
 800ab0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ab10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ab14:	3302      	adds	r3, #2
 800ab16:	e7c7      	b.n	800aaa8 <_printf_common+0x58>
 800ab18:	2301      	movs	r3, #1
 800ab1a:	4622      	mov	r2, r4
 800ab1c:	4641      	mov	r1, r8
 800ab1e:	4638      	mov	r0, r7
 800ab20:	47c8      	blx	r9
 800ab22:	3001      	adds	r0, #1
 800ab24:	d0e6      	beq.n	800aaf4 <_printf_common+0xa4>
 800ab26:	3601      	adds	r6, #1
 800ab28:	e7d9      	b.n	800aade <_printf_common+0x8e>
	...

0800ab2c <_printf_i>:
 800ab2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab30:	7e0f      	ldrb	r7, [r1, #24]
 800ab32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab34:	2f78      	cmp	r7, #120	@ 0x78
 800ab36:	4691      	mov	r9, r2
 800ab38:	4680      	mov	r8, r0
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	469a      	mov	sl, r3
 800ab3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ab42:	d807      	bhi.n	800ab54 <_printf_i+0x28>
 800ab44:	2f62      	cmp	r7, #98	@ 0x62
 800ab46:	d80a      	bhi.n	800ab5e <_printf_i+0x32>
 800ab48:	2f00      	cmp	r7, #0
 800ab4a:	f000 80d2 	beq.w	800acf2 <_printf_i+0x1c6>
 800ab4e:	2f58      	cmp	r7, #88	@ 0x58
 800ab50:	f000 80b9 	beq.w	800acc6 <_printf_i+0x19a>
 800ab54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab5c:	e03a      	b.n	800abd4 <_printf_i+0xa8>
 800ab5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab62:	2b15      	cmp	r3, #21
 800ab64:	d8f6      	bhi.n	800ab54 <_printf_i+0x28>
 800ab66:	a101      	add	r1, pc, #4	@ (adr r1, 800ab6c <_printf_i+0x40>)
 800ab68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab6c:	0800abc5 	.word	0x0800abc5
 800ab70:	0800abd9 	.word	0x0800abd9
 800ab74:	0800ab55 	.word	0x0800ab55
 800ab78:	0800ab55 	.word	0x0800ab55
 800ab7c:	0800ab55 	.word	0x0800ab55
 800ab80:	0800ab55 	.word	0x0800ab55
 800ab84:	0800abd9 	.word	0x0800abd9
 800ab88:	0800ab55 	.word	0x0800ab55
 800ab8c:	0800ab55 	.word	0x0800ab55
 800ab90:	0800ab55 	.word	0x0800ab55
 800ab94:	0800ab55 	.word	0x0800ab55
 800ab98:	0800acd9 	.word	0x0800acd9
 800ab9c:	0800ac03 	.word	0x0800ac03
 800aba0:	0800ac93 	.word	0x0800ac93
 800aba4:	0800ab55 	.word	0x0800ab55
 800aba8:	0800ab55 	.word	0x0800ab55
 800abac:	0800acfb 	.word	0x0800acfb
 800abb0:	0800ab55 	.word	0x0800ab55
 800abb4:	0800ac03 	.word	0x0800ac03
 800abb8:	0800ab55 	.word	0x0800ab55
 800abbc:	0800ab55 	.word	0x0800ab55
 800abc0:	0800ac9b 	.word	0x0800ac9b
 800abc4:	6833      	ldr	r3, [r6, #0]
 800abc6:	1d1a      	adds	r2, r3, #4
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	6032      	str	r2, [r6, #0]
 800abcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800abd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800abd4:	2301      	movs	r3, #1
 800abd6:	e09d      	b.n	800ad14 <_printf_i+0x1e8>
 800abd8:	6833      	ldr	r3, [r6, #0]
 800abda:	6820      	ldr	r0, [r4, #0]
 800abdc:	1d19      	adds	r1, r3, #4
 800abde:	6031      	str	r1, [r6, #0]
 800abe0:	0606      	lsls	r6, r0, #24
 800abe2:	d501      	bpl.n	800abe8 <_printf_i+0xbc>
 800abe4:	681d      	ldr	r5, [r3, #0]
 800abe6:	e003      	b.n	800abf0 <_printf_i+0xc4>
 800abe8:	0645      	lsls	r5, r0, #25
 800abea:	d5fb      	bpl.n	800abe4 <_printf_i+0xb8>
 800abec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800abf0:	2d00      	cmp	r5, #0
 800abf2:	da03      	bge.n	800abfc <_printf_i+0xd0>
 800abf4:	232d      	movs	r3, #45	@ 0x2d
 800abf6:	426d      	negs	r5, r5
 800abf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abfc:	4859      	ldr	r0, [pc, #356]	@ (800ad64 <_printf_i+0x238>)
 800abfe:	230a      	movs	r3, #10
 800ac00:	e011      	b.n	800ac26 <_printf_i+0xfa>
 800ac02:	6821      	ldr	r1, [r4, #0]
 800ac04:	6833      	ldr	r3, [r6, #0]
 800ac06:	0608      	lsls	r0, r1, #24
 800ac08:	f853 5b04 	ldr.w	r5, [r3], #4
 800ac0c:	d402      	bmi.n	800ac14 <_printf_i+0xe8>
 800ac0e:	0649      	lsls	r1, r1, #25
 800ac10:	bf48      	it	mi
 800ac12:	b2ad      	uxthmi	r5, r5
 800ac14:	2f6f      	cmp	r7, #111	@ 0x6f
 800ac16:	4853      	ldr	r0, [pc, #332]	@ (800ad64 <_printf_i+0x238>)
 800ac18:	6033      	str	r3, [r6, #0]
 800ac1a:	bf14      	ite	ne
 800ac1c:	230a      	movne	r3, #10
 800ac1e:	2308      	moveq	r3, #8
 800ac20:	2100      	movs	r1, #0
 800ac22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ac26:	6866      	ldr	r6, [r4, #4]
 800ac28:	60a6      	str	r6, [r4, #8]
 800ac2a:	2e00      	cmp	r6, #0
 800ac2c:	bfa2      	ittt	ge
 800ac2e:	6821      	ldrge	r1, [r4, #0]
 800ac30:	f021 0104 	bicge.w	r1, r1, #4
 800ac34:	6021      	strge	r1, [r4, #0]
 800ac36:	b90d      	cbnz	r5, 800ac3c <_printf_i+0x110>
 800ac38:	2e00      	cmp	r6, #0
 800ac3a:	d04b      	beq.n	800acd4 <_printf_i+0x1a8>
 800ac3c:	4616      	mov	r6, r2
 800ac3e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac42:	fb03 5711 	mls	r7, r3, r1, r5
 800ac46:	5dc7      	ldrb	r7, [r0, r7]
 800ac48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac4c:	462f      	mov	r7, r5
 800ac4e:	42bb      	cmp	r3, r7
 800ac50:	460d      	mov	r5, r1
 800ac52:	d9f4      	bls.n	800ac3e <_printf_i+0x112>
 800ac54:	2b08      	cmp	r3, #8
 800ac56:	d10b      	bne.n	800ac70 <_printf_i+0x144>
 800ac58:	6823      	ldr	r3, [r4, #0]
 800ac5a:	07df      	lsls	r7, r3, #31
 800ac5c:	d508      	bpl.n	800ac70 <_printf_i+0x144>
 800ac5e:	6923      	ldr	r3, [r4, #16]
 800ac60:	6861      	ldr	r1, [r4, #4]
 800ac62:	4299      	cmp	r1, r3
 800ac64:	bfde      	ittt	le
 800ac66:	2330      	movle	r3, #48	@ 0x30
 800ac68:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac70:	1b92      	subs	r2, r2, r6
 800ac72:	6122      	str	r2, [r4, #16]
 800ac74:	f8cd a000 	str.w	sl, [sp]
 800ac78:	464b      	mov	r3, r9
 800ac7a:	aa03      	add	r2, sp, #12
 800ac7c:	4621      	mov	r1, r4
 800ac7e:	4640      	mov	r0, r8
 800ac80:	f7ff fee6 	bl	800aa50 <_printf_common>
 800ac84:	3001      	adds	r0, #1
 800ac86:	d14a      	bne.n	800ad1e <_printf_i+0x1f2>
 800ac88:	f04f 30ff 	mov.w	r0, #4294967295
 800ac8c:	b004      	add	sp, #16
 800ac8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac92:	6823      	ldr	r3, [r4, #0]
 800ac94:	f043 0320 	orr.w	r3, r3, #32
 800ac98:	6023      	str	r3, [r4, #0]
 800ac9a:	4833      	ldr	r0, [pc, #204]	@ (800ad68 <_printf_i+0x23c>)
 800ac9c:	2778      	movs	r7, #120	@ 0x78
 800ac9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aca2:	6823      	ldr	r3, [r4, #0]
 800aca4:	6831      	ldr	r1, [r6, #0]
 800aca6:	061f      	lsls	r7, r3, #24
 800aca8:	f851 5b04 	ldr.w	r5, [r1], #4
 800acac:	d402      	bmi.n	800acb4 <_printf_i+0x188>
 800acae:	065f      	lsls	r7, r3, #25
 800acb0:	bf48      	it	mi
 800acb2:	b2ad      	uxthmi	r5, r5
 800acb4:	6031      	str	r1, [r6, #0]
 800acb6:	07d9      	lsls	r1, r3, #31
 800acb8:	bf44      	itt	mi
 800acba:	f043 0320 	orrmi.w	r3, r3, #32
 800acbe:	6023      	strmi	r3, [r4, #0]
 800acc0:	b11d      	cbz	r5, 800acca <_printf_i+0x19e>
 800acc2:	2310      	movs	r3, #16
 800acc4:	e7ac      	b.n	800ac20 <_printf_i+0xf4>
 800acc6:	4827      	ldr	r0, [pc, #156]	@ (800ad64 <_printf_i+0x238>)
 800acc8:	e7e9      	b.n	800ac9e <_printf_i+0x172>
 800acca:	6823      	ldr	r3, [r4, #0]
 800accc:	f023 0320 	bic.w	r3, r3, #32
 800acd0:	6023      	str	r3, [r4, #0]
 800acd2:	e7f6      	b.n	800acc2 <_printf_i+0x196>
 800acd4:	4616      	mov	r6, r2
 800acd6:	e7bd      	b.n	800ac54 <_printf_i+0x128>
 800acd8:	6833      	ldr	r3, [r6, #0]
 800acda:	6825      	ldr	r5, [r4, #0]
 800acdc:	6961      	ldr	r1, [r4, #20]
 800acde:	1d18      	adds	r0, r3, #4
 800ace0:	6030      	str	r0, [r6, #0]
 800ace2:	062e      	lsls	r6, r5, #24
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	d501      	bpl.n	800acec <_printf_i+0x1c0>
 800ace8:	6019      	str	r1, [r3, #0]
 800acea:	e002      	b.n	800acf2 <_printf_i+0x1c6>
 800acec:	0668      	lsls	r0, r5, #25
 800acee:	d5fb      	bpl.n	800ace8 <_printf_i+0x1bc>
 800acf0:	8019      	strh	r1, [r3, #0]
 800acf2:	2300      	movs	r3, #0
 800acf4:	6123      	str	r3, [r4, #16]
 800acf6:	4616      	mov	r6, r2
 800acf8:	e7bc      	b.n	800ac74 <_printf_i+0x148>
 800acfa:	6833      	ldr	r3, [r6, #0]
 800acfc:	1d1a      	adds	r2, r3, #4
 800acfe:	6032      	str	r2, [r6, #0]
 800ad00:	681e      	ldr	r6, [r3, #0]
 800ad02:	6862      	ldr	r2, [r4, #4]
 800ad04:	2100      	movs	r1, #0
 800ad06:	4630      	mov	r0, r6
 800ad08:	f7f5 fa72 	bl	80001f0 <memchr>
 800ad0c:	b108      	cbz	r0, 800ad12 <_printf_i+0x1e6>
 800ad0e:	1b80      	subs	r0, r0, r6
 800ad10:	6060      	str	r0, [r4, #4]
 800ad12:	6863      	ldr	r3, [r4, #4]
 800ad14:	6123      	str	r3, [r4, #16]
 800ad16:	2300      	movs	r3, #0
 800ad18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad1c:	e7aa      	b.n	800ac74 <_printf_i+0x148>
 800ad1e:	6923      	ldr	r3, [r4, #16]
 800ad20:	4632      	mov	r2, r6
 800ad22:	4649      	mov	r1, r9
 800ad24:	4640      	mov	r0, r8
 800ad26:	47d0      	blx	sl
 800ad28:	3001      	adds	r0, #1
 800ad2a:	d0ad      	beq.n	800ac88 <_printf_i+0x15c>
 800ad2c:	6823      	ldr	r3, [r4, #0]
 800ad2e:	079b      	lsls	r3, r3, #30
 800ad30:	d413      	bmi.n	800ad5a <_printf_i+0x22e>
 800ad32:	68e0      	ldr	r0, [r4, #12]
 800ad34:	9b03      	ldr	r3, [sp, #12]
 800ad36:	4298      	cmp	r0, r3
 800ad38:	bfb8      	it	lt
 800ad3a:	4618      	movlt	r0, r3
 800ad3c:	e7a6      	b.n	800ac8c <_printf_i+0x160>
 800ad3e:	2301      	movs	r3, #1
 800ad40:	4632      	mov	r2, r6
 800ad42:	4649      	mov	r1, r9
 800ad44:	4640      	mov	r0, r8
 800ad46:	47d0      	blx	sl
 800ad48:	3001      	adds	r0, #1
 800ad4a:	d09d      	beq.n	800ac88 <_printf_i+0x15c>
 800ad4c:	3501      	adds	r5, #1
 800ad4e:	68e3      	ldr	r3, [r4, #12]
 800ad50:	9903      	ldr	r1, [sp, #12]
 800ad52:	1a5b      	subs	r3, r3, r1
 800ad54:	42ab      	cmp	r3, r5
 800ad56:	dcf2      	bgt.n	800ad3e <_printf_i+0x212>
 800ad58:	e7eb      	b.n	800ad32 <_printf_i+0x206>
 800ad5a:	2500      	movs	r5, #0
 800ad5c:	f104 0619 	add.w	r6, r4, #25
 800ad60:	e7f5      	b.n	800ad4e <_printf_i+0x222>
 800ad62:	bf00      	nop
 800ad64:	0800e4c2 	.word	0x0800e4c2
 800ad68:	0800e4d3 	.word	0x0800e4d3

0800ad6c <_scanf_float>:
 800ad6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad70:	b087      	sub	sp, #28
 800ad72:	4617      	mov	r7, r2
 800ad74:	9303      	str	r3, [sp, #12]
 800ad76:	688b      	ldr	r3, [r1, #8]
 800ad78:	1e5a      	subs	r2, r3, #1
 800ad7a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ad7e:	bf81      	itttt	hi
 800ad80:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ad84:	eb03 0b05 	addhi.w	fp, r3, r5
 800ad88:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ad8c:	608b      	strhi	r3, [r1, #8]
 800ad8e:	680b      	ldr	r3, [r1, #0]
 800ad90:	460a      	mov	r2, r1
 800ad92:	f04f 0500 	mov.w	r5, #0
 800ad96:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ad9a:	f842 3b1c 	str.w	r3, [r2], #28
 800ad9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ada2:	4680      	mov	r8, r0
 800ada4:	460c      	mov	r4, r1
 800ada6:	bf98      	it	ls
 800ada8:	f04f 0b00 	movls.w	fp, #0
 800adac:	9201      	str	r2, [sp, #4]
 800adae:	4616      	mov	r6, r2
 800adb0:	46aa      	mov	sl, r5
 800adb2:	46a9      	mov	r9, r5
 800adb4:	9502      	str	r5, [sp, #8]
 800adb6:	68a2      	ldr	r2, [r4, #8]
 800adb8:	b152      	cbz	r2, 800add0 <_scanf_float+0x64>
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	2b4e      	cmp	r3, #78	@ 0x4e
 800adc0:	d864      	bhi.n	800ae8c <_scanf_float+0x120>
 800adc2:	2b40      	cmp	r3, #64	@ 0x40
 800adc4:	d83c      	bhi.n	800ae40 <_scanf_float+0xd4>
 800adc6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800adca:	b2c8      	uxtb	r0, r1
 800adcc:	280e      	cmp	r0, #14
 800adce:	d93a      	bls.n	800ae46 <_scanf_float+0xda>
 800add0:	f1b9 0f00 	cmp.w	r9, #0
 800add4:	d003      	beq.n	800adde <_scanf_float+0x72>
 800add6:	6823      	ldr	r3, [r4, #0]
 800add8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800addc:	6023      	str	r3, [r4, #0]
 800adde:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ade2:	f1ba 0f01 	cmp.w	sl, #1
 800ade6:	f200 8117 	bhi.w	800b018 <_scanf_float+0x2ac>
 800adea:	9b01      	ldr	r3, [sp, #4]
 800adec:	429e      	cmp	r6, r3
 800adee:	f200 8108 	bhi.w	800b002 <_scanf_float+0x296>
 800adf2:	2001      	movs	r0, #1
 800adf4:	b007      	add	sp, #28
 800adf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adfa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800adfe:	2a0d      	cmp	r2, #13
 800ae00:	d8e6      	bhi.n	800add0 <_scanf_float+0x64>
 800ae02:	a101      	add	r1, pc, #4	@ (adr r1, 800ae08 <_scanf_float+0x9c>)
 800ae04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ae08:	0800af4f 	.word	0x0800af4f
 800ae0c:	0800add1 	.word	0x0800add1
 800ae10:	0800add1 	.word	0x0800add1
 800ae14:	0800add1 	.word	0x0800add1
 800ae18:	0800afaf 	.word	0x0800afaf
 800ae1c:	0800af87 	.word	0x0800af87
 800ae20:	0800add1 	.word	0x0800add1
 800ae24:	0800add1 	.word	0x0800add1
 800ae28:	0800af5d 	.word	0x0800af5d
 800ae2c:	0800add1 	.word	0x0800add1
 800ae30:	0800add1 	.word	0x0800add1
 800ae34:	0800add1 	.word	0x0800add1
 800ae38:	0800add1 	.word	0x0800add1
 800ae3c:	0800af15 	.word	0x0800af15
 800ae40:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ae44:	e7db      	b.n	800adfe <_scanf_float+0x92>
 800ae46:	290e      	cmp	r1, #14
 800ae48:	d8c2      	bhi.n	800add0 <_scanf_float+0x64>
 800ae4a:	a001      	add	r0, pc, #4	@ (adr r0, 800ae50 <_scanf_float+0xe4>)
 800ae4c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ae50:	0800af05 	.word	0x0800af05
 800ae54:	0800add1 	.word	0x0800add1
 800ae58:	0800af05 	.word	0x0800af05
 800ae5c:	0800af9b 	.word	0x0800af9b
 800ae60:	0800add1 	.word	0x0800add1
 800ae64:	0800aead 	.word	0x0800aead
 800ae68:	0800aeeb 	.word	0x0800aeeb
 800ae6c:	0800aeeb 	.word	0x0800aeeb
 800ae70:	0800aeeb 	.word	0x0800aeeb
 800ae74:	0800aeeb 	.word	0x0800aeeb
 800ae78:	0800aeeb 	.word	0x0800aeeb
 800ae7c:	0800aeeb 	.word	0x0800aeeb
 800ae80:	0800aeeb 	.word	0x0800aeeb
 800ae84:	0800aeeb 	.word	0x0800aeeb
 800ae88:	0800aeeb 	.word	0x0800aeeb
 800ae8c:	2b6e      	cmp	r3, #110	@ 0x6e
 800ae8e:	d809      	bhi.n	800aea4 <_scanf_float+0x138>
 800ae90:	2b60      	cmp	r3, #96	@ 0x60
 800ae92:	d8b2      	bhi.n	800adfa <_scanf_float+0x8e>
 800ae94:	2b54      	cmp	r3, #84	@ 0x54
 800ae96:	d07b      	beq.n	800af90 <_scanf_float+0x224>
 800ae98:	2b59      	cmp	r3, #89	@ 0x59
 800ae9a:	d199      	bne.n	800add0 <_scanf_float+0x64>
 800ae9c:	2d07      	cmp	r5, #7
 800ae9e:	d197      	bne.n	800add0 <_scanf_float+0x64>
 800aea0:	2508      	movs	r5, #8
 800aea2:	e02c      	b.n	800aefe <_scanf_float+0x192>
 800aea4:	2b74      	cmp	r3, #116	@ 0x74
 800aea6:	d073      	beq.n	800af90 <_scanf_float+0x224>
 800aea8:	2b79      	cmp	r3, #121	@ 0x79
 800aeaa:	e7f6      	b.n	800ae9a <_scanf_float+0x12e>
 800aeac:	6821      	ldr	r1, [r4, #0]
 800aeae:	05c8      	lsls	r0, r1, #23
 800aeb0:	d51b      	bpl.n	800aeea <_scanf_float+0x17e>
 800aeb2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800aeb6:	6021      	str	r1, [r4, #0]
 800aeb8:	f109 0901 	add.w	r9, r9, #1
 800aebc:	f1bb 0f00 	cmp.w	fp, #0
 800aec0:	d003      	beq.n	800aeca <_scanf_float+0x15e>
 800aec2:	3201      	adds	r2, #1
 800aec4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aec8:	60a2      	str	r2, [r4, #8]
 800aeca:	68a3      	ldr	r3, [r4, #8]
 800aecc:	3b01      	subs	r3, #1
 800aece:	60a3      	str	r3, [r4, #8]
 800aed0:	6923      	ldr	r3, [r4, #16]
 800aed2:	3301      	adds	r3, #1
 800aed4:	6123      	str	r3, [r4, #16]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	3b01      	subs	r3, #1
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	607b      	str	r3, [r7, #4]
 800aede:	f340 8087 	ble.w	800aff0 <_scanf_float+0x284>
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	3301      	adds	r3, #1
 800aee6:	603b      	str	r3, [r7, #0]
 800aee8:	e765      	b.n	800adb6 <_scanf_float+0x4a>
 800aeea:	eb1a 0105 	adds.w	r1, sl, r5
 800aeee:	f47f af6f 	bne.w	800add0 <_scanf_float+0x64>
 800aef2:	6822      	ldr	r2, [r4, #0]
 800aef4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800aef8:	6022      	str	r2, [r4, #0]
 800aefa:	460d      	mov	r5, r1
 800aefc:	468a      	mov	sl, r1
 800aefe:	f806 3b01 	strb.w	r3, [r6], #1
 800af02:	e7e2      	b.n	800aeca <_scanf_float+0x15e>
 800af04:	6822      	ldr	r2, [r4, #0]
 800af06:	0610      	lsls	r0, r2, #24
 800af08:	f57f af62 	bpl.w	800add0 <_scanf_float+0x64>
 800af0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800af10:	6022      	str	r2, [r4, #0]
 800af12:	e7f4      	b.n	800aefe <_scanf_float+0x192>
 800af14:	f1ba 0f00 	cmp.w	sl, #0
 800af18:	d10e      	bne.n	800af38 <_scanf_float+0x1cc>
 800af1a:	f1b9 0f00 	cmp.w	r9, #0
 800af1e:	d10e      	bne.n	800af3e <_scanf_float+0x1d2>
 800af20:	6822      	ldr	r2, [r4, #0]
 800af22:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800af26:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800af2a:	d108      	bne.n	800af3e <_scanf_float+0x1d2>
 800af2c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800af30:	6022      	str	r2, [r4, #0]
 800af32:	f04f 0a01 	mov.w	sl, #1
 800af36:	e7e2      	b.n	800aefe <_scanf_float+0x192>
 800af38:	f1ba 0f02 	cmp.w	sl, #2
 800af3c:	d055      	beq.n	800afea <_scanf_float+0x27e>
 800af3e:	2d01      	cmp	r5, #1
 800af40:	d002      	beq.n	800af48 <_scanf_float+0x1dc>
 800af42:	2d04      	cmp	r5, #4
 800af44:	f47f af44 	bne.w	800add0 <_scanf_float+0x64>
 800af48:	3501      	adds	r5, #1
 800af4a:	b2ed      	uxtb	r5, r5
 800af4c:	e7d7      	b.n	800aefe <_scanf_float+0x192>
 800af4e:	f1ba 0f01 	cmp.w	sl, #1
 800af52:	f47f af3d 	bne.w	800add0 <_scanf_float+0x64>
 800af56:	f04f 0a02 	mov.w	sl, #2
 800af5a:	e7d0      	b.n	800aefe <_scanf_float+0x192>
 800af5c:	b97d      	cbnz	r5, 800af7e <_scanf_float+0x212>
 800af5e:	f1b9 0f00 	cmp.w	r9, #0
 800af62:	f47f af38 	bne.w	800add6 <_scanf_float+0x6a>
 800af66:	6822      	ldr	r2, [r4, #0]
 800af68:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800af6c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800af70:	f040 8108 	bne.w	800b184 <_scanf_float+0x418>
 800af74:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800af78:	6022      	str	r2, [r4, #0]
 800af7a:	2501      	movs	r5, #1
 800af7c:	e7bf      	b.n	800aefe <_scanf_float+0x192>
 800af7e:	2d03      	cmp	r5, #3
 800af80:	d0e2      	beq.n	800af48 <_scanf_float+0x1dc>
 800af82:	2d05      	cmp	r5, #5
 800af84:	e7de      	b.n	800af44 <_scanf_float+0x1d8>
 800af86:	2d02      	cmp	r5, #2
 800af88:	f47f af22 	bne.w	800add0 <_scanf_float+0x64>
 800af8c:	2503      	movs	r5, #3
 800af8e:	e7b6      	b.n	800aefe <_scanf_float+0x192>
 800af90:	2d06      	cmp	r5, #6
 800af92:	f47f af1d 	bne.w	800add0 <_scanf_float+0x64>
 800af96:	2507      	movs	r5, #7
 800af98:	e7b1      	b.n	800aefe <_scanf_float+0x192>
 800af9a:	6822      	ldr	r2, [r4, #0]
 800af9c:	0591      	lsls	r1, r2, #22
 800af9e:	f57f af17 	bpl.w	800add0 <_scanf_float+0x64>
 800afa2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800afa6:	6022      	str	r2, [r4, #0]
 800afa8:	f8cd 9008 	str.w	r9, [sp, #8]
 800afac:	e7a7      	b.n	800aefe <_scanf_float+0x192>
 800afae:	6822      	ldr	r2, [r4, #0]
 800afb0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800afb4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800afb8:	d006      	beq.n	800afc8 <_scanf_float+0x25c>
 800afba:	0550      	lsls	r0, r2, #21
 800afbc:	f57f af08 	bpl.w	800add0 <_scanf_float+0x64>
 800afc0:	f1b9 0f00 	cmp.w	r9, #0
 800afc4:	f000 80de 	beq.w	800b184 <_scanf_float+0x418>
 800afc8:	0591      	lsls	r1, r2, #22
 800afca:	bf58      	it	pl
 800afcc:	9902      	ldrpl	r1, [sp, #8]
 800afce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800afd2:	bf58      	it	pl
 800afd4:	eba9 0101 	subpl.w	r1, r9, r1
 800afd8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800afdc:	bf58      	it	pl
 800afde:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800afe2:	6022      	str	r2, [r4, #0]
 800afe4:	f04f 0900 	mov.w	r9, #0
 800afe8:	e789      	b.n	800aefe <_scanf_float+0x192>
 800afea:	f04f 0a03 	mov.w	sl, #3
 800afee:	e786      	b.n	800aefe <_scanf_float+0x192>
 800aff0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800aff4:	4639      	mov	r1, r7
 800aff6:	4640      	mov	r0, r8
 800aff8:	4798      	blx	r3
 800affa:	2800      	cmp	r0, #0
 800affc:	f43f aedb 	beq.w	800adb6 <_scanf_float+0x4a>
 800b000:	e6e6      	b.n	800add0 <_scanf_float+0x64>
 800b002:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b006:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b00a:	463a      	mov	r2, r7
 800b00c:	4640      	mov	r0, r8
 800b00e:	4798      	blx	r3
 800b010:	6923      	ldr	r3, [r4, #16]
 800b012:	3b01      	subs	r3, #1
 800b014:	6123      	str	r3, [r4, #16]
 800b016:	e6e8      	b.n	800adea <_scanf_float+0x7e>
 800b018:	1e6b      	subs	r3, r5, #1
 800b01a:	2b06      	cmp	r3, #6
 800b01c:	d824      	bhi.n	800b068 <_scanf_float+0x2fc>
 800b01e:	2d02      	cmp	r5, #2
 800b020:	d836      	bhi.n	800b090 <_scanf_float+0x324>
 800b022:	9b01      	ldr	r3, [sp, #4]
 800b024:	429e      	cmp	r6, r3
 800b026:	f67f aee4 	bls.w	800adf2 <_scanf_float+0x86>
 800b02a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b02e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b032:	463a      	mov	r2, r7
 800b034:	4640      	mov	r0, r8
 800b036:	4798      	blx	r3
 800b038:	6923      	ldr	r3, [r4, #16]
 800b03a:	3b01      	subs	r3, #1
 800b03c:	6123      	str	r3, [r4, #16]
 800b03e:	e7f0      	b.n	800b022 <_scanf_float+0x2b6>
 800b040:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b044:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b048:	463a      	mov	r2, r7
 800b04a:	4640      	mov	r0, r8
 800b04c:	4798      	blx	r3
 800b04e:	6923      	ldr	r3, [r4, #16]
 800b050:	3b01      	subs	r3, #1
 800b052:	6123      	str	r3, [r4, #16]
 800b054:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b058:	fa5f fa8a 	uxtb.w	sl, sl
 800b05c:	f1ba 0f02 	cmp.w	sl, #2
 800b060:	d1ee      	bne.n	800b040 <_scanf_float+0x2d4>
 800b062:	3d03      	subs	r5, #3
 800b064:	b2ed      	uxtb	r5, r5
 800b066:	1b76      	subs	r6, r6, r5
 800b068:	6823      	ldr	r3, [r4, #0]
 800b06a:	05da      	lsls	r2, r3, #23
 800b06c:	d530      	bpl.n	800b0d0 <_scanf_float+0x364>
 800b06e:	055b      	lsls	r3, r3, #21
 800b070:	d511      	bpl.n	800b096 <_scanf_float+0x32a>
 800b072:	9b01      	ldr	r3, [sp, #4]
 800b074:	429e      	cmp	r6, r3
 800b076:	f67f aebc 	bls.w	800adf2 <_scanf_float+0x86>
 800b07a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b07e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b082:	463a      	mov	r2, r7
 800b084:	4640      	mov	r0, r8
 800b086:	4798      	blx	r3
 800b088:	6923      	ldr	r3, [r4, #16]
 800b08a:	3b01      	subs	r3, #1
 800b08c:	6123      	str	r3, [r4, #16]
 800b08e:	e7f0      	b.n	800b072 <_scanf_float+0x306>
 800b090:	46aa      	mov	sl, r5
 800b092:	46b3      	mov	fp, r6
 800b094:	e7de      	b.n	800b054 <_scanf_float+0x2e8>
 800b096:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b09a:	6923      	ldr	r3, [r4, #16]
 800b09c:	2965      	cmp	r1, #101	@ 0x65
 800b09e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b0a2:	f106 35ff 	add.w	r5, r6, #4294967295
 800b0a6:	6123      	str	r3, [r4, #16]
 800b0a8:	d00c      	beq.n	800b0c4 <_scanf_float+0x358>
 800b0aa:	2945      	cmp	r1, #69	@ 0x45
 800b0ac:	d00a      	beq.n	800b0c4 <_scanf_float+0x358>
 800b0ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b0b2:	463a      	mov	r2, r7
 800b0b4:	4640      	mov	r0, r8
 800b0b6:	4798      	blx	r3
 800b0b8:	6923      	ldr	r3, [r4, #16]
 800b0ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	1eb5      	subs	r5, r6, #2
 800b0c2:	6123      	str	r3, [r4, #16]
 800b0c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b0c8:	463a      	mov	r2, r7
 800b0ca:	4640      	mov	r0, r8
 800b0cc:	4798      	blx	r3
 800b0ce:	462e      	mov	r6, r5
 800b0d0:	6822      	ldr	r2, [r4, #0]
 800b0d2:	f012 0210 	ands.w	r2, r2, #16
 800b0d6:	d001      	beq.n	800b0dc <_scanf_float+0x370>
 800b0d8:	2000      	movs	r0, #0
 800b0da:	e68b      	b.n	800adf4 <_scanf_float+0x88>
 800b0dc:	7032      	strb	r2, [r6, #0]
 800b0de:	6823      	ldr	r3, [r4, #0]
 800b0e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b0e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0e8:	d11c      	bne.n	800b124 <_scanf_float+0x3b8>
 800b0ea:	9b02      	ldr	r3, [sp, #8]
 800b0ec:	454b      	cmp	r3, r9
 800b0ee:	eba3 0209 	sub.w	r2, r3, r9
 800b0f2:	d123      	bne.n	800b13c <_scanf_float+0x3d0>
 800b0f4:	9901      	ldr	r1, [sp, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	4640      	mov	r0, r8
 800b0fa:	f7ff f975 	bl	800a3e8 <_strtod_r>
 800b0fe:	9b03      	ldr	r3, [sp, #12]
 800b100:	6821      	ldr	r1, [r4, #0]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f011 0f02 	tst.w	r1, #2
 800b108:	ec57 6b10 	vmov	r6, r7, d0
 800b10c:	f103 0204 	add.w	r2, r3, #4
 800b110:	d01f      	beq.n	800b152 <_scanf_float+0x3e6>
 800b112:	9903      	ldr	r1, [sp, #12]
 800b114:	600a      	str	r2, [r1, #0]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	e9c3 6700 	strd	r6, r7, [r3]
 800b11c:	68e3      	ldr	r3, [r4, #12]
 800b11e:	3301      	adds	r3, #1
 800b120:	60e3      	str	r3, [r4, #12]
 800b122:	e7d9      	b.n	800b0d8 <_scanf_float+0x36c>
 800b124:	9b04      	ldr	r3, [sp, #16]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d0e4      	beq.n	800b0f4 <_scanf_float+0x388>
 800b12a:	9905      	ldr	r1, [sp, #20]
 800b12c:	230a      	movs	r3, #10
 800b12e:	3101      	adds	r1, #1
 800b130:	4640      	mov	r0, r8
 800b132:	f002 fad5 	bl	800d6e0 <_strtol_r>
 800b136:	9b04      	ldr	r3, [sp, #16]
 800b138:	9e05      	ldr	r6, [sp, #20]
 800b13a:	1ac2      	subs	r2, r0, r3
 800b13c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b140:	429e      	cmp	r6, r3
 800b142:	bf28      	it	cs
 800b144:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b148:	4910      	ldr	r1, [pc, #64]	@ (800b18c <_scanf_float+0x420>)
 800b14a:	4630      	mov	r0, r6
 800b14c:	f000 f954 	bl	800b3f8 <siprintf>
 800b150:	e7d0      	b.n	800b0f4 <_scanf_float+0x388>
 800b152:	f011 0f04 	tst.w	r1, #4
 800b156:	9903      	ldr	r1, [sp, #12]
 800b158:	600a      	str	r2, [r1, #0]
 800b15a:	d1dc      	bne.n	800b116 <_scanf_float+0x3aa>
 800b15c:	681d      	ldr	r5, [r3, #0]
 800b15e:	4632      	mov	r2, r6
 800b160:	463b      	mov	r3, r7
 800b162:	4630      	mov	r0, r6
 800b164:	4639      	mov	r1, r7
 800b166:	f7f5 fcf1 	bl	8000b4c <__aeabi_dcmpun>
 800b16a:	b128      	cbz	r0, 800b178 <_scanf_float+0x40c>
 800b16c:	4808      	ldr	r0, [pc, #32]	@ (800b190 <_scanf_float+0x424>)
 800b16e:	f000 faeb 	bl	800b748 <nanf>
 800b172:	ed85 0a00 	vstr	s0, [r5]
 800b176:	e7d1      	b.n	800b11c <_scanf_float+0x3b0>
 800b178:	4630      	mov	r0, r6
 800b17a:	4639      	mov	r1, r7
 800b17c:	f7f5 fd44 	bl	8000c08 <__aeabi_d2f>
 800b180:	6028      	str	r0, [r5, #0]
 800b182:	e7cb      	b.n	800b11c <_scanf_float+0x3b0>
 800b184:	f04f 0900 	mov.w	r9, #0
 800b188:	e629      	b.n	800adde <_scanf_float+0x72>
 800b18a:	bf00      	nop
 800b18c:	0800e4e4 	.word	0x0800e4e4
 800b190:	0800e885 	.word	0x0800e885

0800b194 <std>:
 800b194:	2300      	movs	r3, #0
 800b196:	b510      	push	{r4, lr}
 800b198:	4604      	mov	r4, r0
 800b19a:	e9c0 3300 	strd	r3, r3, [r0]
 800b19e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1a2:	6083      	str	r3, [r0, #8]
 800b1a4:	8181      	strh	r1, [r0, #12]
 800b1a6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b1a8:	81c2      	strh	r2, [r0, #14]
 800b1aa:	6183      	str	r3, [r0, #24]
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	2208      	movs	r2, #8
 800b1b0:	305c      	adds	r0, #92	@ 0x5c
 800b1b2:	f000 fa19 	bl	800b5e8 <memset>
 800b1b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b1ec <std+0x58>)
 800b1b8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b1ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f0 <std+0x5c>)
 800b1bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b1be:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f4 <std+0x60>)
 800b1c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b1c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f8 <std+0x64>)
 800b1c4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b1c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b1fc <std+0x68>)
 800b1c8:	6224      	str	r4, [r4, #32]
 800b1ca:	429c      	cmp	r4, r3
 800b1cc:	d006      	beq.n	800b1dc <std+0x48>
 800b1ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b1d2:	4294      	cmp	r4, r2
 800b1d4:	d002      	beq.n	800b1dc <std+0x48>
 800b1d6:	33d0      	adds	r3, #208	@ 0xd0
 800b1d8:	429c      	cmp	r4, r3
 800b1da:	d105      	bne.n	800b1e8 <std+0x54>
 800b1dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1e4:	f000 ba8e 	b.w	800b704 <__retarget_lock_init_recursive>
 800b1e8:	bd10      	pop	{r4, pc}
 800b1ea:	bf00      	nop
 800b1ec:	0800b439 	.word	0x0800b439
 800b1f0:	0800b45b 	.word	0x0800b45b
 800b1f4:	0800b493 	.word	0x0800b493
 800b1f8:	0800b4b7 	.word	0x0800b4b7
 800b1fc:	2000069c 	.word	0x2000069c

0800b200 <stdio_exit_handler>:
 800b200:	4a02      	ldr	r2, [pc, #8]	@ (800b20c <stdio_exit_handler+0xc>)
 800b202:	4903      	ldr	r1, [pc, #12]	@ (800b210 <stdio_exit_handler+0x10>)
 800b204:	4803      	ldr	r0, [pc, #12]	@ (800b214 <stdio_exit_handler+0x14>)
 800b206:	f000 b869 	b.w	800b2dc <_fwalk_sglue>
 800b20a:	bf00      	nop
 800b20c:	2000000c 	.word	0x2000000c
 800b210:	0800dd39 	.word	0x0800dd39
 800b214:	20000188 	.word	0x20000188

0800b218 <cleanup_stdio>:
 800b218:	6841      	ldr	r1, [r0, #4]
 800b21a:	4b0c      	ldr	r3, [pc, #48]	@ (800b24c <cleanup_stdio+0x34>)
 800b21c:	4299      	cmp	r1, r3
 800b21e:	b510      	push	{r4, lr}
 800b220:	4604      	mov	r4, r0
 800b222:	d001      	beq.n	800b228 <cleanup_stdio+0x10>
 800b224:	f002 fd88 	bl	800dd38 <_fflush_r>
 800b228:	68a1      	ldr	r1, [r4, #8]
 800b22a:	4b09      	ldr	r3, [pc, #36]	@ (800b250 <cleanup_stdio+0x38>)
 800b22c:	4299      	cmp	r1, r3
 800b22e:	d002      	beq.n	800b236 <cleanup_stdio+0x1e>
 800b230:	4620      	mov	r0, r4
 800b232:	f002 fd81 	bl	800dd38 <_fflush_r>
 800b236:	68e1      	ldr	r1, [r4, #12]
 800b238:	4b06      	ldr	r3, [pc, #24]	@ (800b254 <cleanup_stdio+0x3c>)
 800b23a:	4299      	cmp	r1, r3
 800b23c:	d004      	beq.n	800b248 <cleanup_stdio+0x30>
 800b23e:	4620      	mov	r0, r4
 800b240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b244:	f002 bd78 	b.w	800dd38 <_fflush_r>
 800b248:	bd10      	pop	{r4, pc}
 800b24a:	bf00      	nop
 800b24c:	2000069c 	.word	0x2000069c
 800b250:	20000704 	.word	0x20000704
 800b254:	2000076c 	.word	0x2000076c

0800b258 <global_stdio_init.part.0>:
 800b258:	b510      	push	{r4, lr}
 800b25a:	4b0b      	ldr	r3, [pc, #44]	@ (800b288 <global_stdio_init.part.0+0x30>)
 800b25c:	4c0b      	ldr	r4, [pc, #44]	@ (800b28c <global_stdio_init.part.0+0x34>)
 800b25e:	4a0c      	ldr	r2, [pc, #48]	@ (800b290 <global_stdio_init.part.0+0x38>)
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	4620      	mov	r0, r4
 800b264:	2200      	movs	r2, #0
 800b266:	2104      	movs	r1, #4
 800b268:	f7ff ff94 	bl	800b194 <std>
 800b26c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b270:	2201      	movs	r2, #1
 800b272:	2109      	movs	r1, #9
 800b274:	f7ff ff8e 	bl	800b194 <std>
 800b278:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b27c:	2202      	movs	r2, #2
 800b27e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b282:	2112      	movs	r1, #18
 800b284:	f7ff bf86 	b.w	800b194 <std>
 800b288:	200007d4 	.word	0x200007d4
 800b28c:	2000069c 	.word	0x2000069c
 800b290:	0800b201 	.word	0x0800b201

0800b294 <__sfp_lock_acquire>:
 800b294:	4801      	ldr	r0, [pc, #4]	@ (800b29c <__sfp_lock_acquire+0x8>)
 800b296:	f000 ba36 	b.w	800b706 <__retarget_lock_acquire_recursive>
 800b29a:	bf00      	nop
 800b29c:	200007dd 	.word	0x200007dd

0800b2a0 <__sfp_lock_release>:
 800b2a0:	4801      	ldr	r0, [pc, #4]	@ (800b2a8 <__sfp_lock_release+0x8>)
 800b2a2:	f000 ba31 	b.w	800b708 <__retarget_lock_release_recursive>
 800b2a6:	bf00      	nop
 800b2a8:	200007dd 	.word	0x200007dd

0800b2ac <__sinit>:
 800b2ac:	b510      	push	{r4, lr}
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	f7ff fff0 	bl	800b294 <__sfp_lock_acquire>
 800b2b4:	6a23      	ldr	r3, [r4, #32]
 800b2b6:	b11b      	cbz	r3, 800b2c0 <__sinit+0x14>
 800b2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2bc:	f7ff bff0 	b.w	800b2a0 <__sfp_lock_release>
 800b2c0:	4b04      	ldr	r3, [pc, #16]	@ (800b2d4 <__sinit+0x28>)
 800b2c2:	6223      	str	r3, [r4, #32]
 800b2c4:	4b04      	ldr	r3, [pc, #16]	@ (800b2d8 <__sinit+0x2c>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d1f5      	bne.n	800b2b8 <__sinit+0xc>
 800b2cc:	f7ff ffc4 	bl	800b258 <global_stdio_init.part.0>
 800b2d0:	e7f2      	b.n	800b2b8 <__sinit+0xc>
 800b2d2:	bf00      	nop
 800b2d4:	0800b219 	.word	0x0800b219
 800b2d8:	200007d4 	.word	0x200007d4

0800b2dc <_fwalk_sglue>:
 800b2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2e0:	4607      	mov	r7, r0
 800b2e2:	4688      	mov	r8, r1
 800b2e4:	4614      	mov	r4, r2
 800b2e6:	2600      	movs	r6, #0
 800b2e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2ec:	f1b9 0901 	subs.w	r9, r9, #1
 800b2f0:	d505      	bpl.n	800b2fe <_fwalk_sglue+0x22>
 800b2f2:	6824      	ldr	r4, [r4, #0]
 800b2f4:	2c00      	cmp	r4, #0
 800b2f6:	d1f7      	bne.n	800b2e8 <_fwalk_sglue+0xc>
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2fe:	89ab      	ldrh	r3, [r5, #12]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d907      	bls.n	800b314 <_fwalk_sglue+0x38>
 800b304:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b308:	3301      	adds	r3, #1
 800b30a:	d003      	beq.n	800b314 <_fwalk_sglue+0x38>
 800b30c:	4629      	mov	r1, r5
 800b30e:	4638      	mov	r0, r7
 800b310:	47c0      	blx	r8
 800b312:	4306      	orrs	r6, r0
 800b314:	3568      	adds	r5, #104	@ 0x68
 800b316:	e7e9      	b.n	800b2ec <_fwalk_sglue+0x10>

0800b318 <iprintf>:
 800b318:	b40f      	push	{r0, r1, r2, r3}
 800b31a:	b507      	push	{r0, r1, r2, lr}
 800b31c:	4906      	ldr	r1, [pc, #24]	@ (800b338 <iprintf+0x20>)
 800b31e:	ab04      	add	r3, sp, #16
 800b320:	6808      	ldr	r0, [r1, #0]
 800b322:	f853 2b04 	ldr.w	r2, [r3], #4
 800b326:	6881      	ldr	r1, [r0, #8]
 800b328:	9301      	str	r3, [sp, #4]
 800b32a:	f002 fb69 	bl	800da00 <_vfiprintf_r>
 800b32e:	b003      	add	sp, #12
 800b330:	f85d eb04 	ldr.w	lr, [sp], #4
 800b334:	b004      	add	sp, #16
 800b336:	4770      	bx	lr
 800b338:	20000184 	.word	0x20000184

0800b33c <_puts_r>:
 800b33c:	6a03      	ldr	r3, [r0, #32]
 800b33e:	b570      	push	{r4, r5, r6, lr}
 800b340:	6884      	ldr	r4, [r0, #8]
 800b342:	4605      	mov	r5, r0
 800b344:	460e      	mov	r6, r1
 800b346:	b90b      	cbnz	r3, 800b34c <_puts_r+0x10>
 800b348:	f7ff ffb0 	bl	800b2ac <__sinit>
 800b34c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b34e:	07db      	lsls	r3, r3, #31
 800b350:	d405      	bmi.n	800b35e <_puts_r+0x22>
 800b352:	89a3      	ldrh	r3, [r4, #12]
 800b354:	0598      	lsls	r0, r3, #22
 800b356:	d402      	bmi.n	800b35e <_puts_r+0x22>
 800b358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b35a:	f000 f9d4 	bl	800b706 <__retarget_lock_acquire_recursive>
 800b35e:	89a3      	ldrh	r3, [r4, #12]
 800b360:	0719      	lsls	r1, r3, #28
 800b362:	d502      	bpl.n	800b36a <_puts_r+0x2e>
 800b364:	6923      	ldr	r3, [r4, #16]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d135      	bne.n	800b3d6 <_puts_r+0x9a>
 800b36a:	4621      	mov	r1, r4
 800b36c:	4628      	mov	r0, r5
 800b36e:	f000 f8e5 	bl	800b53c <__swsetup_r>
 800b372:	b380      	cbz	r0, 800b3d6 <_puts_r+0x9a>
 800b374:	f04f 35ff 	mov.w	r5, #4294967295
 800b378:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b37a:	07da      	lsls	r2, r3, #31
 800b37c:	d405      	bmi.n	800b38a <_puts_r+0x4e>
 800b37e:	89a3      	ldrh	r3, [r4, #12]
 800b380:	059b      	lsls	r3, r3, #22
 800b382:	d402      	bmi.n	800b38a <_puts_r+0x4e>
 800b384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b386:	f000 f9bf 	bl	800b708 <__retarget_lock_release_recursive>
 800b38a:	4628      	mov	r0, r5
 800b38c:	bd70      	pop	{r4, r5, r6, pc}
 800b38e:	2b00      	cmp	r3, #0
 800b390:	da04      	bge.n	800b39c <_puts_r+0x60>
 800b392:	69a2      	ldr	r2, [r4, #24]
 800b394:	429a      	cmp	r2, r3
 800b396:	dc17      	bgt.n	800b3c8 <_puts_r+0x8c>
 800b398:	290a      	cmp	r1, #10
 800b39a:	d015      	beq.n	800b3c8 <_puts_r+0x8c>
 800b39c:	6823      	ldr	r3, [r4, #0]
 800b39e:	1c5a      	adds	r2, r3, #1
 800b3a0:	6022      	str	r2, [r4, #0]
 800b3a2:	7019      	strb	r1, [r3, #0]
 800b3a4:	68a3      	ldr	r3, [r4, #8]
 800b3a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	60a3      	str	r3, [r4, #8]
 800b3ae:	2900      	cmp	r1, #0
 800b3b0:	d1ed      	bne.n	800b38e <_puts_r+0x52>
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	da11      	bge.n	800b3da <_puts_r+0x9e>
 800b3b6:	4622      	mov	r2, r4
 800b3b8:	210a      	movs	r1, #10
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	f000 f87f 	bl	800b4be <__swbuf_r>
 800b3c0:	3001      	adds	r0, #1
 800b3c2:	d0d7      	beq.n	800b374 <_puts_r+0x38>
 800b3c4:	250a      	movs	r5, #10
 800b3c6:	e7d7      	b.n	800b378 <_puts_r+0x3c>
 800b3c8:	4622      	mov	r2, r4
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	f000 f877 	bl	800b4be <__swbuf_r>
 800b3d0:	3001      	adds	r0, #1
 800b3d2:	d1e7      	bne.n	800b3a4 <_puts_r+0x68>
 800b3d4:	e7ce      	b.n	800b374 <_puts_r+0x38>
 800b3d6:	3e01      	subs	r6, #1
 800b3d8:	e7e4      	b.n	800b3a4 <_puts_r+0x68>
 800b3da:	6823      	ldr	r3, [r4, #0]
 800b3dc:	1c5a      	adds	r2, r3, #1
 800b3de:	6022      	str	r2, [r4, #0]
 800b3e0:	220a      	movs	r2, #10
 800b3e2:	701a      	strb	r2, [r3, #0]
 800b3e4:	e7ee      	b.n	800b3c4 <_puts_r+0x88>
	...

0800b3e8 <puts>:
 800b3e8:	4b02      	ldr	r3, [pc, #8]	@ (800b3f4 <puts+0xc>)
 800b3ea:	4601      	mov	r1, r0
 800b3ec:	6818      	ldr	r0, [r3, #0]
 800b3ee:	f7ff bfa5 	b.w	800b33c <_puts_r>
 800b3f2:	bf00      	nop
 800b3f4:	20000184 	.word	0x20000184

0800b3f8 <siprintf>:
 800b3f8:	b40e      	push	{r1, r2, r3}
 800b3fa:	b500      	push	{lr}
 800b3fc:	b09c      	sub	sp, #112	@ 0x70
 800b3fe:	ab1d      	add	r3, sp, #116	@ 0x74
 800b400:	9002      	str	r0, [sp, #8]
 800b402:	9006      	str	r0, [sp, #24]
 800b404:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b408:	4809      	ldr	r0, [pc, #36]	@ (800b430 <siprintf+0x38>)
 800b40a:	9107      	str	r1, [sp, #28]
 800b40c:	9104      	str	r1, [sp, #16]
 800b40e:	4909      	ldr	r1, [pc, #36]	@ (800b434 <siprintf+0x3c>)
 800b410:	f853 2b04 	ldr.w	r2, [r3], #4
 800b414:	9105      	str	r1, [sp, #20]
 800b416:	6800      	ldr	r0, [r0, #0]
 800b418:	9301      	str	r3, [sp, #4]
 800b41a:	a902      	add	r1, sp, #8
 800b41c:	f002 f9ca 	bl	800d7b4 <_svfiprintf_r>
 800b420:	9b02      	ldr	r3, [sp, #8]
 800b422:	2200      	movs	r2, #0
 800b424:	701a      	strb	r2, [r3, #0]
 800b426:	b01c      	add	sp, #112	@ 0x70
 800b428:	f85d eb04 	ldr.w	lr, [sp], #4
 800b42c:	b003      	add	sp, #12
 800b42e:	4770      	bx	lr
 800b430:	20000184 	.word	0x20000184
 800b434:	ffff0208 	.word	0xffff0208

0800b438 <__sread>:
 800b438:	b510      	push	{r4, lr}
 800b43a:	460c      	mov	r4, r1
 800b43c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b440:	f000 f912 	bl	800b668 <_read_r>
 800b444:	2800      	cmp	r0, #0
 800b446:	bfab      	itete	ge
 800b448:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b44a:	89a3      	ldrhlt	r3, [r4, #12]
 800b44c:	181b      	addge	r3, r3, r0
 800b44e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b452:	bfac      	ite	ge
 800b454:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b456:	81a3      	strhlt	r3, [r4, #12]
 800b458:	bd10      	pop	{r4, pc}

0800b45a <__swrite>:
 800b45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b45e:	461f      	mov	r7, r3
 800b460:	898b      	ldrh	r3, [r1, #12]
 800b462:	05db      	lsls	r3, r3, #23
 800b464:	4605      	mov	r5, r0
 800b466:	460c      	mov	r4, r1
 800b468:	4616      	mov	r6, r2
 800b46a:	d505      	bpl.n	800b478 <__swrite+0x1e>
 800b46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b470:	2302      	movs	r3, #2
 800b472:	2200      	movs	r2, #0
 800b474:	f000 f8e6 	bl	800b644 <_lseek_r>
 800b478:	89a3      	ldrh	r3, [r4, #12]
 800b47a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b47e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b482:	81a3      	strh	r3, [r4, #12]
 800b484:	4632      	mov	r2, r6
 800b486:	463b      	mov	r3, r7
 800b488:	4628      	mov	r0, r5
 800b48a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b48e:	f000 b8fd 	b.w	800b68c <_write_r>

0800b492 <__sseek>:
 800b492:	b510      	push	{r4, lr}
 800b494:	460c      	mov	r4, r1
 800b496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b49a:	f000 f8d3 	bl	800b644 <_lseek_r>
 800b49e:	1c43      	adds	r3, r0, #1
 800b4a0:	89a3      	ldrh	r3, [r4, #12]
 800b4a2:	bf15      	itete	ne
 800b4a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b4a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b4aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b4ae:	81a3      	strheq	r3, [r4, #12]
 800b4b0:	bf18      	it	ne
 800b4b2:	81a3      	strhne	r3, [r4, #12]
 800b4b4:	bd10      	pop	{r4, pc}

0800b4b6 <__sclose>:
 800b4b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ba:	f000 b8b3 	b.w	800b624 <_close_r>

0800b4be <__swbuf_r>:
 800b4be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c0:	460e      	mov	r6, r1
 800b4c2:	4614      	mov	r4, r2
 800b4c4:	4605      	mov	r5, r0
 800b4c6:	b118      	cbz	r0, 800b4d0 <__swbuf_r+0x12>
 800b4c8:	6a03      	ldr	r3, [r0, #32]
 800b4ca:	b90b      	cbnz	r3, 800b4d0 <__swbuf_r+0x12>
 800b4cc:	f7ff feee 	bl	800b2ac <__sinit>
 800b4d0:	69a3      	ldr	r3, [r4, #24]
 800b4d2:	60a3      	str	r3, [r4, #8]
 800b4d4:	89a3      	ldrh	r3, [r4, #12]
 800b4d6:	071a      	lsls	r2, r3, #28
 800b4d8:	d501      	bpl.n	800b4de <__swbuf_r+0x20>
 800b4da:	6923      	ldr	r3, [r4, #16]
 800b4dc:	b943      	cbnz	r3, 800b4f0 <__swbuf_r+0x32>
 800b4de:	4621      	mov	r1, r4
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	f000 f82b 	bl	800b53c <__swsetup_r>
 800b4e6:	b118      	cbz	r0, 800b4f0 <__swbuf_r+0x32>
 800b4e8:	f04f 37ff 	mov.w	r7, #4294967295
 800b4ec:	4638      	mov	r0, r7
 800b4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4f0:	6823      	ldr	r3, [r4, #0]
 800b4f2:	6922      	ldr	r2, [r4, #16]
 800b4f4:	1a98      	subs	r0, r3, r2
 800b4f6:	6963      	ldr	r3, [r4, #20]
 800b4f8:	b2f6      	uxtb	r6, r6
 800b4fa:	4283      	cmp	r3, r0
 800b4fc:	4637      	mov	r7, r6
 800b4fe:	dc05      	bgt.n	800b50c <__swbuf_r+0x4e>
 800b500:	4621      	mov	r1, r4
 800b502:	4628      	mov	r0, r5
 800b504:	f002 fc18 	bl	800dd38 <_fflush_r>
 800b508:	2800      	cmp	r0, #0
 800b50a:	d1ed      	bne.n	800b4e8 <__swbuf_r+0x2a>
 800b50c:	68a3      	ldr	r3, [r4, #8]
 800b50e:	3b01      	subs	r3, #1
 800b510:	60a3      	str	r3, [r4, #8]
 800b512:	6823      	ldr	r3, [r4, #0]
 800b514:	1c5a      	adds	r2, r3, #1
 800b516:	6022      	str	r2, [r4, #0]
 800b518:	701e      	strb	r6, [r3, #0]
 800b51a:	6962      	ldr	r2, [r4, #20]
 800b51c:	1c43      	adds	r3, r0, #1
 800b51e:	429a      	cmp	r2, r3
 800b520:	d004      	beq.n	800b52c <__swbuf_r+0x6e>
 800b522:	89a3      	ldrh	r3, [r4, #12]
 800b524:	07db      	lsls	r3, r3, #31
 800b526:	d5e1      	bpl.n	800b4ec <__swbuf_r+0x2e>
 800b528:	2e0a      	cmp	r6, #10
 800b52a:	d1df      	bne.n	800b4ec <__swbuf_r+0x2e>
 800b52c:	4621      	mov	r1, r4
 800b52e:	4628      	mov	r0, r5
 800b530:	f002 fc02 	bl	800dd38 <_fflush_r>
 800b534:	2800      	cmp	r0, #0
 800b536:	d0d9      	beq.n	800b4ec <__swbuf_r+0x2e>
 800b538:	e7d6      	b.n	800b4e8 <__swbuf_r+0x2a>
	...

0800b53c <__swsetup_r>:
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	4b29      	ldr	r3, [pc, #164]	@ (800b5e4 <__swsetup_r+0xa8>)
 800b540:	4605      	mov	r5, r0
 800b542:	6818      	ldr	r0, [r3, #0]
 800b544:	460c      	mov	r4, r1
 800b546:	b118      	cbz	r0, 800b550 <__swsetup_r+0x14>
 800b548:	6a03      	ldr	r3, [r0, #32]
 800b54a:	b90b      	cbnz	r3, 800b550 <__swsetup_r+0x14>
 800b54c:	f7ff feae 	bl	800b2ac <__sinit>
 800b550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b554:	0719      	lsls	r1, r3, #28
 800b556:	d422      	bmi.n	800b59e <__swsetup_r+0x62>
 800b558:	06da      	lsls	r2, r3, #27
 800b55a:	d407      	bmi.n	800b56c <__swsetup_r+0x30>
 800b55c:	2209      	movs	r2, #9
 800b55e:	602a      	str	r2, [r5, #0]
 800b560:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b564:	81a3      	strh	r3, [r4, #12]
 800b566:	f04f 30ff 	mov.w	r0, #4294967295
 800b56a:	e033      	b.n	800b5d4 <__swsetup_r+0x98>
 800b56c:	0758      	lsls	r0, r3, #29
 800b56e:	d512      	bpl.n	800b596 <__swsetup_r+0x5a>
 800b570:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b572:	b141      	cbz	r1, 800b586 <__swsetup_r+0x4a>
 800b574:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b578:	4299      	cmp	r1, r3
 800b57a:	d002      	beq.n	800b582 <__swsetup_r+0x46>
 800b57c:	4628      	mov	r0, r5
 800b57e:	f000 ff37 	bl	800c3f0 <_free_r>
 800b582:	2300      	movs	r3, #0
 800b584:	6363      	str	r3, [r4, #52]	@ 0x34
 800b586:	89a3      	ldrh	r3, [r4, #12]
 800b588:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b58c:	81a3      	strh	r3, [r4, #12]
 800b58e:	2300      	movs	r3, #0
 800b590:	6063      	str	r3, [r4, #4]
 800b592:	6923      	ldr	r3, [r4, #16]
 800b594:	6023      	str	r3, [r4, #0]
 800b596:	89a3      	ldrh	r3, [r4, #12]
 800b598:	f043 0308 	orr.w	r3, r3, #8
 800b59c:	81a3      	strh	r3, [r4, #12]
 800b59e:	6923      	ldr	r3, [r4, #16]
 800b5a0:	b94b      	cbnz	r3, 800b5b6 <__swsetup_r+0x7a>
 800b5a2:	89a3      	ldrh	r3, [r4, #12]
 800b5a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b5a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5ac:	d003      	beq.n	800b5b6 <__swsetup_r+0x7a>
 800b5ae:	4621      	mov	r1, r4
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	f002 fc0f 	bl	800ddd4 <__smakebuf_r>
 800b5b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5ba:	f013 0201 	ands.w	r2, r3, #1
 800b5be:	d00a      	beq.n	800b5d6 <__swsetup_r+0x9a>
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	60a2      	str	r2, [r4, #8]
 800b5c4:	6962      	ldr	r2, [r4, #20]
 800b5c6:	4252      	negs	r2, r2
 800b5c8:	61a2      	str	r2, [r4, #24]
 800b5ca:	6922      	ldr	r2, [r4, #16]
 800b5cc:	b942      	cbnz	r2, 800b5e0 <__swsetup_r+0xa4>
 800b5ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b5d2:	d1c5      	bne.n	800b560 <__swsetup_r+0x24>
 800b5d4:	bd38      	pop	{r3, r4, r5, pc}
 800b5d6:	0799      	lsls	r1, r3, #30
 800b5d8:	bf58      	it	pl
 800b5da:	6962      	ldrpl	r2, [r4, #20]
 800b5dc:	60a2      	str	r2, [r4, #8]
 800b5de:	e7f4      	b.n	800b5ca <__swsetup_r+0x8e>
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	e7f7      	b.n	800b5d4 <__swsetup_r+0x98>
 800b5e4:	20000184 	.word	0x20000184

0800b5e8 <memset>:
 800b5e8:	4402      	add	r2, r0
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d100      	bne.n	800b5f2 <memset+0xa>
 800b5f0:	4770      	bx	lr
 800b5f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b5f6:	e7f9      	b.n	800b5ec <memset+0x4>

0800b5f8 <strncmp>:
 800b5f8:	b510      	push	{r4, lr}
 800b5fa:	b16a      	cbz	r2, 800b618 <strncmp+0x20>
 800b5fc:	3901      	subs	r1, #1
 800b5fe:	1884      	adds	r4, r0, r2
 800b600:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b604:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b608:	429a      	cmp	r2, r3
 800b60a:	d103      	bne.n	800b614 <strncmp+0x1c>
 800b60c:	42a0      	cmp	r0, r4
 800b60e:	d001      	beq.n	800b614 <strncmp+0x1c>
 800b610:	2a00      	cmp	r2, #0
 800b612:	d1f5      	bne.n	800b600 <strncmp+0x8>
 800b614:	1ad0      	subs	r0, r2, r3
 800b616:	bd10      	pop	{r4, pc}
 800b618:	4610      	mov	r0, r2
 800b61a:	e7fc      	b.n	800b616 <strncmp+0x1e>

0800b61c <_localeconv_r>:
 800b61c:	4800      	ldr	r0, [pc, #0]	@ (800b620 <_localeconv_r+0x4>)
 800b61e:	4770      	bx	lr
 800b620:	20000108 	.word	0x20000108

0800b624 <_close_r>:
 800b624:	b538      	push	{r3, r4, r5, lr}
 800b626:	4d06      	ldr	r5, [pc, #24]	@ (800b640 <_close_r+0x1c>)
 800b628:	2300      	movs	r3, #0
 800b62a:	4604      	mov	r4, r0
 800b62c:	4608      	mov	r0, r1
 800b62e:	602b      	str	r3, [r5, #0]
 800b630:	f7f6 ffc2 	bl	80025b8 <_close>
 800b634:	1c43      	adds	r3, r0, #1
 800b636:	d102      	bne.n	800b63e <_close_r+0x1a>
 800b638:	682b      	ldr	r3, [r5, #0]
 800b63a:	b103      	cbz	r3, 800b63e <_close_r+0x1a>
 800b63c:	6023      	str	r3, [r4, #0]
 800b63e:	bd38      	pop	{r3, r4, r5, pc}
 800b640:	200007d8 	.word	0x200007d8

0800b644 <_lseek_r>:
 800b644:	b538      	push	{r3, r4, r5, lr}
 800b646:	4d07      	ldr	r5, [pc, #28]	@ (800b664 <_lseek_r+0x20>)
 800b648:	4604      	mov	r4, r0
 800b64a:	4608      	mov	r0, r1
 800b64c:	4611      	mov	r1, r2
 800b64e:	2200      	movs	r2, #0
 800b650:	602a      	str	r2, [r5, #0]
 800b652:	461a      	mov	r2, r3
 800b654:	f7f6 ffd7 	bl	8002606 <_lseek>
 800b658:	1c43      	adds	r3, r0, #1
 800b65a:	d102      	bne.n	800b662 <_lseek_r+0x1e>
 800b65c:	682b      	ldr	r3, [r5, #0]
 800b65e:	b103      	cbz	r3, 800b662 <_lseek_r+0x1e>
 800b660:	6023      	str	r3, [r4, #0]
 800b662:	bd38      	pop	{r3, r4, r5, pc}
 800b664:	200007d8 	.word	0x200007d8

0800b668 <_read_r>:
 800b668:	b538      	push	{r3, r4, r5, lr}
 800b66a:	4d07      	ldr	r5, [pc, #28]	@ (800b688 <_read_r+0x20>)
 800b66c:	4604      	mov	r4, r0
 800b66e:	4608      	mov	r0, r1
 800b670:	4611      	mov	r1, r2
 800b672:	2200      	movs	r2, #0
 800b674:	602a      	str	r2, [r5, #0]
 800b676:	461a      	mov	r2, r3
 800b678:	f7f6 ff65 	bl	8002546 <_read>
 800b67c:	1c43      	adds	r3, r0, #1
 800b67e:	d102      	bne.n	800b686 <_read_r+0x1e>
 800b680:	682b      	ldr	r3, [r5, #0]
 800b682:	b103      	cbz	r3, 800b686 <_read_r+0x1e>
 800b684:	6023      	str	r3, [r4, #0]
 800b686:	bd38      	pop	{r3, r4, r5, pc}
 800b688:	200007d8 	.word	0x200007d8

0800b68c <_write_r>:
 800b68c:	b538      	push	{r3, r4, r5, lr}
 800b68e:	4d07      	ldr	r5, [pc, #28]	@ (800b6ac <_write_r+0x20>)
 800b690:	4604      	mov	r4, r0
 800b692:	4608      	mov	r0, r1
 800b694:	4611      	mov	r1, r2
 800b696:	2200      	movs	r2, #0
 800b698:	602a      	str	r2, [r5, #0]
 800b69a:	461a      	mov	r2, r3
 800b69c:	f7f6 ff70 	bl	8002580 <_write>
 800b6a0:	1c43      	adds	r3, r0, #1
 800b6a2:	d102      	bne.n	800b6aa <_write_r+0x1e>
 800b6a4:	682b      	ldr	r3, [r5, #0]
 800b6a6:	b103      	cbz	r3, 800b6aa <_write_r+0x1e>
 800b6a8:	6023      	str	r3, [r4, #0]
 800b6aa:	bd38      	pop	{r3, r4, r5, pc}
 800b6ac:	200007d8 	.word	0x200007d8

0800b6b0 <__errno>:
 800b6b0:	4b01      	ldr	r3, [pc, #4]	@ (800b6b8 <__errno+0x8>)
 800b6b2:	6818      	ldr	r0, [r3, #0]
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	20000184 	.word	0x20000184

0800b6bc <__libc_init_array>:
 800b6bc:	b570      	push	{r4, r5, r6, lr}
 800b6be:	4d0d      	ldr	r5, [pc, #52]	@ (800b6f4 <__libc_init_array+0x38>)
 800b6c0:	4c0d      	ldr	r4, [pc, #52]	@ (800b6f8 <__libc_init_array+0x3c>)
 800b6c2:	1b64      	subs	r4, r4, r5
 800b6c4:	10a4      	asrs	r4, r4, #2
 800b6c6:	2600      	movs	r6, #0
 800b6c8:	42a6      	cmp	r6, r4
 800b6ca:	d109      	bne.n	800b6e0 <__libc_init_array+0x24>
 800b6cc:	4d0b      	ldr	r5, [pc, #44]	@ (800b6fc <__libc_init_array+0x40>)
 800b6ce:	4c0c      	ldr	r4, [pc, #48]	@ (800b700 <__libc_init_array+0x44>)
 800b6d0:	f002 fcce 	bl	800e070 <_init>
 800b6d4:	1b64      	subs	r4, r4, r5
 800b6d6:	10a4      	asrs	r4, r4, #2
 800b6d8:	2600      	movs	r6, #0
 800b6da:	42a6      	cmp	r6, r4
 800b6dc:	d105      	bne.n	800b6ea <__libc_init_array+0x2e>
 800b6de:	bd70      	pop	{r4, r5, r6, pc}
 800b6e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6e4:	4798      	blx	r3
 800b6e6:	3601      	adds	r6, #1
 800b6e8:	e7ee      	b.n	800b6c8 <__libc_init_array+0xc>
 800b6ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6ee:	4798      	blx	r3
 800b6f0:	3601      	adds	r6, #1
 800b6f2:	e7f2      	b.n	800b6da <__libc_init_array+0x1e>
 800b6f4:	0800e890 	.word	0x0800e890
 800b6f8:	0800e890 	.word	0x0800e890
 800b6fc:	0800e890 	.word	0x0800e890
 800b700:	0800e894 	.word	0x0800e894

0800b704 <__retarget_lock_init_recursive>:
 800b704:	4770      	bx	lr

0800b706 <__retarget_lock_acquire_recursive>:
 800b706:	4770      	bx	lr

0800b708 <__retarget_lock_release_recursive>:
 800b708:	4770      	bx	lr

0800b70a <strcpy>:
 800b70a:	4603      	mov	r3, r0
 800b70c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b710:	f803 2b01 	strb.w	r2, [r3], #1
 800b714:	2a00      	cmp	r2, #0
 800b716:	d1f9      	bne.n	800b70c <strcpy+0x2>
 800b718:	4770      	bx	lr

0800b71a <memcpy>:
 800b71a:	440a      	add	r2, r1
 800b71c:	4291      	cmp	r1, r2
 800b71e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b722:	d100      	bne.n	800b726 <memcpy+0xc>
 800b724:	4770      	bx	lr
 800b726:	b510      	push	{r4, lr}
 800b728:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b72c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b730:	4291      	cmp	r1, r2
 800b732:	d1f9      	bne.n	800b728 <memcpy+0xe>
 800b734:	bd10      	pop	{r4, pc}
	...

0800b738 <nan>:
 800b738:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b740 <nan+0x8>
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	00000000 	.word	0x00000000
 800b744:	7ff80000 	.word	0x7ff80000

0800b748 <nanf>:
 800b748:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b750 <nanf+0x8>
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	7fc00000 	.word	0x7fc00000

0800b754 <quorem>:
 800b754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b758:	6903      	ldr	r3, [r0, #16]
 800b75a:	690c      	ldr	r4, [r1, #16]
 800b75c:	42a3      	cmp	r3, r4
 800b75e:	4607      	mov	r7, r0
 800b760:	db7e      	blt.n	800b860 <quorem+0x10c>
 800b762:	3c01      	subs	r4, #1
 800b764:	f101 0814 	add.w	r8, r1, #20
 800b768:	00a3      	lsls	r3, r4, #2
 800b76a:	f100 0514 	add.w	r5, r0, #20
 800b76e:	9300      	str	r3, [sp, #0]
 800b770:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b774:	9301      	str	r3, [sp, #4]
 800b776:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b77a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b77e:	3301      	adds	r3, #1
 800b780:	429a      	cmp	r2, r3
 800b782:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b786:	fbb2 f6f3 	udiv	r6, r2, r3
 800b78a:	d32e      	bcc.n	800b7ea <quorem+0x96>
 800b78c:	f04f 0a00 	mov.w	sl, #0
 800b790:	46c4      	mov	ip, r8
 800b792:	46ae      	mov	lr, r5
 800b794:	46d3      	mov	fp, sl
 800b796:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b79a:	b298      	uxth	r0, r3
 800b79c:	fb06 a000 	mla	r0, r6, r0, sl
 800b7a0:	0c02      	lsrs	r2, r0, #16
 800b7a2:	0c1b      	lsrs	r3, r3, #16
 800b7a4:	fb06 2303 	mla	r3, r6, r3, r2
 800b7a8:	f8de 2000 	ldr.w	r2, [lr]
 800b7ac:	b280      	uxth	r0, r0
 800b7ae:	b292      	uxth	r2, r2
 800b7b0:	1a12      	subs	r2, r2, r0
 800b7b2:	445a      	add	r2, fp
 800b7b4:	f8de 0000 	ldr.w	r0, [lr]
 800b7b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b7c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b7c6:	b292      	uxth	r2, r2
 800b7c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b7cc:	45e1      	cmp	r9, ip
 800b7ce:	f84e 2b04 	str.w	r2, [lr], #4
 800b7d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b7d6:	d2de      	bcs.n	800b796 <quorem+0x42>
 800b7d8:	9b00      	ldr	r3, [sp, #0]
 800b7da:	58eb      	ldr	r3, [r5, r3]
 800b7dc:	b92b      	cbnz	r3, 800b7ea <quorem+0x96>
 800b7de:	9b01      	ldr	r3, [sp, #4]
 800b7e0:	3b04      	subs	r3, #4
 800b7e2:	429d      	cmp	r5, r3
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	d32f      	bcc.n	800b848 <quorem+0xf4>
 800b7e8:	613c      	str	r4, [r7, #16]
 800b7ea:	4638      	mov	r0, r7
 800b7ec:	f001 fd10 	bl	800d210 <__mcmp>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	db25      	blt.n	800b840 <quorem+0xec>
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7fc:	f8d1 c000 	ldr.w	ip, [r1]
 800b800:	fa1f fe82 	uxth.w	lr, r2
 800b804:	fa1f f38c 	uxth.w	r3, ip
 800b808:	eba3 030e 	sub.w	r3, r3, lr
 800b80c:	4403      	add	r3, r0
 800b80e:	0c12      	lsrs	r2, r2, #16
 800b810:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b814:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b818:	b29b      	uxth	r3, r3
 800b81a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b81e:	45c1      	cmp	r9, r8
 800b820:	f841 3b04 	str.w	r3, [r1], #4
 800b824:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b828:	d2e6      	bcs.n	800b7f8 <quorem+0xa4>
 800b82a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b82e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b832:	b922      	cbnz	r2, 800b83e <quorem+0xea>
 800b834:	3b04      	subs	r3, #4
 800b836:	429d      	cmp	r5, r3
 800b838:	461a      	mov	r2, r3
 800b83a:	d30b      	bcc.n	800b854 <quorem+0x100>
 800b83c:	613c      	str	r4, [r7, #16]
 800b83e:	3601      	adds	r6, #1
 800b840:	4630      	mov	r0, r6
 800b842:	b003      	add	sp, #12
 800b844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b848:	6812      	ldr	r2, [r2, #0]
 800b84a:	3b04      	subs	r3, #4
 800b84c:	2a00      	cmp	r2, #0
 800b84e:	d1cb      	bne.n	800b7e8 <quorem+0x94>
 800b850:	3c01      	subs	r4, #1
 800b852:	e7c6      	b.n	800b7e2 <quorem+0x8e>
 800b854:	6812      	ldr	r2, [r2, #0]
 800b856:	3b04      	subs	r3, #4
 800b858:	2a00      	cmp	r2, #0
 800b85a:	d1ef      	bne.n	800b83c <quorem+0xe8>
 800b85c:	3c01      	subs	r4, #1
 800b85e:	e7ea      	b.n	800b836 <quorem+0xe2>
 800b860:	2000      	movs	r0, #0
 800b862:	e7ee      	b.n	800b842 <quorem+0xee>
 800b864:	0000      	movs	r0, r0
	...

0800b868 <_dtoa_r>:
 800b868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86c:	69c7      	ldr	r7, [r0, #28]
 800b86e:	b099      	sub	sp, #100	@ 0x64
 800b870:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b874:	ec55 4b10 	vmov	r4, r5, d0
 800b878:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b87a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b87c:	4683      	mov	fp, r0
 800b87e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b880:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b882:	b97f      	cbnz	r7, 800b8a4 <_dtoa_r+0x3c>
 800b884:	2010      	movs	r0, #16
 800b886:	f001 f937 	bl	800caf8 <malloc>
 800b88a:	4602      	mov	r2, r0
 800b88c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b890:	b920      	cbnz	r0, 800b89c <_dtoa_r+0x34>
 800b892:	4ba7      	ldr	r3, [pc, #668]	@ (800bb30 <_dtoa_r+0x2c8>)
 800b894:	21ef      	movs	r1, #239	@ 0xef
 800b896:	48a7      	ldr	r0, [pc, #668]	@ (800bb34 <_dtoa_r+0x2cc>)
 800b898:	f002 fb24 	bl	800dee4 <__assert_func>
 800b89c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b8a0:	6007      	str	r7, [r0, #0]
 800b8a2:	60c7      	str	r7, [r0, #12]
 800b8a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b8a8:	6819      	ldr	r1, [r3, #0]
 800b8aa:	b159      	cbz	r1, 800b8c4 <_dtoa_r+0x5c>
 800b8ac:	685a      	ldr	r2, [r3, #4]
 800b8ae:	604a      	str	r2, [r1, #4]
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	4093      	lsls	r3, r2
 800b8b4:	608b      	str	r3, [r1, #8]
 800b8b6:	4658      	mov	r0, fp
 800b8b8:	f001 fa26 	bl	800cd08 <_Bfree>
 800b8bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	601a      	str	r2, [r3, #0]
 800b8c4:	1e2b      	subs	r3, r5, #0
 800b8c6:	bfb9      	ittee	lt
 800b8c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b8cc:	9303      	strlt	r3, [sp, #12]
 800b8ce:	2300      	movge	r3, #0
 800b8d0:	6033      	strge	r3, [r6, #0]
 800b8d2:	9f03      	ldr	r7, [sp, #12]
 800b8d4:	4b98      	ldr	r3, [pc, #608]	@ (800bb38 <_dtoa_r+0x2d0>)
 800b8d6:	bfbc      	itt	lt
 800b8d8:	2201      	movlt	r2, #1
 800b8da:	6032      	strlt	r2, [r6, #0]
 800b8dc:	43bb      	bics	r3, r7
 800b8de:	d112      	bne.n	800b906 <_dtoa_r+0x9e>
 800b8e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b8e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b8e6:	6013      	str	r3, [r2, #0]
 800b8e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b8ec:	4323      	orrs	r3, r4
 800b8ee:	f000 854d 	beq.w	800c38c <_dtoa_r+0xb24>
 800b8f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bb4c <_dtoa_r+0x2e4>
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f000 854f 	beq.w	800c39c <_dtoa_r+0xb34>
 800b8fe:	f10a 0303 	add.w	r3, sl, #3
 800b902:	f000 bd49 	b.w	800c398 <_dtoa_r+0xb30>
 800b906:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b90a:	2200      	movs	r2, #0
 800b90c:	ec51 0b17 	vmov	r0, r1, d7
 800b910:	2300      	movs	r3, #0
 800b912:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b916:	f7f5 f8e7 	bl	8000ae8 <__aeabi_dcmpeq>
 800b91a:	4680      	mov	r8, r0
 800b91c:	b158      	cbz	r0, 800b936 <_dtoa_r+0xce>
 800b91e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b920:	2301      	movs	r3, #1
 800b922:	6013      	str	r3, [r2, #0]
 800b924:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b926:	b113      	cbz	r3, 800b92e <_dtoa_r+0xc6>
 800b928:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b92a:	4b84      	ldr	r3, [pc, #528]	@ (800bb3c <_dtoa_r+0x2d4>)
 800b92c:	6013      	str	r3, [r2, #0]
 800b92e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bb50 <_dtoa_r+0x2e8>
 800b932:	f000 bd33 	b.w	800c39c <_dtoa_r+0xb34>
 800b936:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b93a:	aa16      	add	r2, sp, #88	@ 0x58
 800b93c:	a917      	add	r1, sp, #92	@ 0x5c
 800b93e:	4658      	mov	r0, fp
 800b940:	f001 fd86 	bl	800d450 <__d2b>
 800b944:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b948:	4681      	mov	r9, r0
 800b94a:	2e00      	cmp	r6, #0
 800b94c:	d077      	beq.n	800ba3e <_dtoa_r+0x1d6>
 800b94e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b950:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b95c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b960:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b964:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b968:	4619      	mov	r1, r3
 800b96a:	2200      	movs	r2, #0
 800b96c:	4b74      	ldr	r3, [pc, #464]	@ (800bb40 <_dtoa_r+0x2d8>)
 800b96e:	f7f4 fc9b 	bl	80002a8 <__aeabi_dsub>
 800b972:	a369      	add	r3, pc, #420	@ (adr r3, 800bb18 <_dtoa_r+0x2b0>)
 800b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b978:	f7f4 fe4e 	bl	8000618 <__aeabi_dmul>
 800b97c:	a368      	add	r3, pc, #416	@ (adr r3, 800bb20 <_dtoa_r+0x2b8>)
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	f7f4 fc93 	bl	80002ac <__adddf3>
 800b986:	4604      	mov	r4, r0
 800b988:	4630      	mov	r0, r6
 800b98a:	460d      	mov	r5, r1
 800b98c:	f7f4 fdda 	bl	8000544 <__aeabi_i2d>
 800b990:	a365      	add	r3, pc, #404	@ (adr r3, 800bb28 <_dtoa_r+0x2c0>)
 800b992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b996:	f7f4 fe3f 	bl	8000618 <__aeabi_dmul>
 800b99a:	4602      	mov	r2, r0
 800b99c:	460b      	mov	r3, r1
 800b99e:	4620      	mov	r0, r4
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	f7f4 fc83 	bl	80002ac <__adddf3>
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	460d      	mov	r5, r1
 800b9aa:	f7f5 f8e5 	bl	8000b78 <__aeabi_d2iz>
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	4607      	mov	r7, r0
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	f7f5 f8a0 	bl	8000afc <__aeabi_dcmplt>
 800b9bc:	b140      	cbz	r0, 800b9d0 <_dtoa_r+0x168>
 800b9be:	4638      	mov	r0, r7
 800b9c0:	f7f4 fdc0 	bl	8000544 <__aeabi_i2d>
 800b9c4:	4622      	mov	r2, r4
 800b9c6:	462b      	mov	r3, r5
 800b9c8:	f7f5 f88e 	bl	8000ae8 <__aeabi_dcmpeq>
 800b9cc:	b900      	cbnz	r0, 800b9d0 <_dtoa_r+0x168>
 800b9ce:	3f01      	subs	r7, #1
 800b9d0:	2f16      	cmp	r7, #22
 800b9d2:	d851      	bhi.n	800ba78 <_dtoa_r+0x210>
 800b9d4:	4b5b      	ldr	r3, [pc, #364]	@ (800bb44 <_dtoa_r+0x2dc>)
 800b9d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9e2:	f7f5 f88b 	bl	8000afc <__aeabi_dcmplt>
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d048      	beq.n	800ba7c <_dtoa_r+0x214>
 800b9ea:	3f01      	subs	r7, #1
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	9312      	str	r3, [sp, #72]	@ 0x48
 800b9f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b9f2:	1b9b      	subs	r3, r3, r6
 800b9f4:	1e5a      	subs	r2, r3, #1
 800b9f6:	bf44      	itt	mi
 800b9f8:	f1c3 0801 	rsbmi	r8, r3, #1
 800b9fc:	2300      	movmi	r3, #0
 800b9fe:	9208      	str	r2, [sp, #32]
 800ba00:	bf54      	ite	pl
 800ba02:	f04f 0800 	movpl.w	r8, #0
 800ba06:	9308      	strmi	r3, [sp, #32]
 800ba08:	2f00      	cmp	r7, #0
 800ba0a:	db39      	blt.n	800ba80 <_dtoa_r+0x218>
 800ba0c:	9b08      	ldr	r3, [sp, #32]
 800ba0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ba10:	443b      	add	r3, r7
 800ba12:	9308      	str	r3, [sp, #32]
 800ba14:	2300      	movs	r3, #0
 800ba16:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba1a:	2b09      	cmp	r3, #9
 800ba1c:	d864      	bhi.n	800bae8 <_dtoa_r+0x280>
 800ba1e:	2b05      	cmp	r3, #5
 800ba20:	bfc4      	itt	gt
 800ba22:	3b04      	subgt	r3, #4
 800ba24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ba26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba28:	f1a3 0302 	sub.w	r3, r3, #2
 800ba2c:	bfcc      	ite	gt
 800ba2e:	2400      	movgt	r4, #0
 800ba30:	2401      	movle	r4, #1
 800ba32:	2b03      	cmp	r3, #3
 800ba34:	d863      	bhi.n	800bafe <_dtoa_r+0x296>
 800ba36:	e8df f003 	tbb	[pc, r3]
 800ba3a:	372a      	.short	0x372a
 800ba3c:	5535      	.short	0x5535
 800ba3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ba42:	441e      	add	r6, r3
 800ba44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ba48:	2b20      	cmp	r3, #32
 800ba4a:	bfc1      	itttt	gt
 800ba4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ba50:	409f      	lslgt	r7, r3
 800ba52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ba56:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ba5a:	bfd6      	itet	le
 800ba5c:	f1c3 0320 	rsble	r3, r3, #32
 800ba60:	ea47 0003 	orrgt.w	r0, r7, r3
 800ba64:	fa04 f003 	lslle.w	r0, r4, r3
 800ba68:	f7f4 fd5c 	bl	8000524 <__aeabi_ui2d>
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ba72:	3e01      	subs	r6, #1
 800ba74:	9214      	str	r2, [sp, #80]	@ 0x50
 800ba76:	e777      	b.n	800b968 <_dtoa_r+0x100>
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e7b8      	b.n	800b9ee <_dtoa_r+0x186>
 800ba7c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ba7e:	e7b7      	b.n	800b9f0 <_dtoa_r+0x188>
 800ba80:	427b      	negs	r3, r7
 800ba82:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba84:	2300      	movs	r3, #0
 800ba86:	eba8 0807 	sub.w	r8, r8, r7
 800ba8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba8c:	e7c4      	b.n	800ba18 <_dtoa_r+0x1b0>
 800ba8e:	2300      	movs	r3, #0
 800ba90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	dc35      	bgt.n	800bb04 <_dtoa_r+0x29c>
 800ba98:	2301      	movs	r3, #1
 800ba9a:	9300      	str	r3, [sp, #0]
 800ba9c:	9307      	str	r3, [sp, #28]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	920e      	str	r2, [sp, #56]	@ 0x38
 800baa2:	e00b      	b.n	800babc <_dtoa_r+0x254>
 800baa4:	2301      	movs	r3, #1
 800baa6:	e7f3      	b.n	800ba90 <_dtoa_r+0x228>
 800baa8:	2300      	movs	r3, #0
 800baaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800baae:	18fb      	adds	r3, r7, r3
 800bab0:	9300      	str	r3, [sp, #0]
 800bab2:	3301      	adds	r3, #1
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	9307      	str	r3, [sp, #28]
 800bab8:	bfb8      	it	lt
 800baba:	2301      	movlt	r3, #1
 800babc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bac0:	2100      	movs	r1, #0
 800bac2:	2204      	movs	r2, #4
 800bac4:	f102 0514 	add.w	r5, r2, #20
 800bac8:	429d      	cmp	r5, r3
 800baca:	d91f      	bls.n	800bb0c <_dtoa_r+0x2a4>
 800bacc:	6041      	str	r1, [r0, #4]
 800bace:	4658      	mov	r0, fp
 800bad0:	f001 f8da 	bl	800cc88 <_Balloc>
 800bad4:	4682      	mov	sl, r0
 800bad6:	2800      	cmp	r0, #0
 800bad8:	d13c      	bne.n	800bb54 <_dtoa_r+0x2ec>
 800bada:	4b1b      	ldr	r3, [pc, #108]	@ (800bb48 <_dtoa_r+0x2e0>)
 800badc:	4602      	mov	r2, r0
 800bade:	f240 11af 	movw	r1, #431	@ 0x1af
 800bae2:	e6d8      	b.n	800b896 <_dtoa_r+0x2e>
 800bae4:	2301      	movs	r3, #1
 800bae6:	e7e0      	b.n	800baaa <_dtoa_r+0x242>
 800bae8:	2401      	movs	r4, #1
 800baea:	2300      	movs	r3, #0
 800baec:	9309      	str	r3, [sp, #36]	@ 0x24
 800baee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800baf0:	f04f 33ff 	mov.w	r3, #4294967295
 800baf4:	9300      	str	r3, [sp, #0]
 800baf6:	9307      	str	r3, [sp, #28]
 800baf8:	2200      	movs	r2, #0
 800bafa:	2312      	movs	r3, #18
 800bafc:	e7d0      	b.n	800baa0 <_dtoa_r+0x238>
 800bafe:	2301      	movs	r3, #1
 800bb00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb02:	e7f5      	b.n	800baf0 <_dtoa_r+0x288>
 800bb04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb06:	9300      	str	r3, [sp, #0]
 800bb08:	9307      	str	r3, [sp, #28]
 800bb0a:	e7d7      	b.n	800babc <_dtoa_r+0x254>
 800bb0c:	3101      	adds	r1, #1
 800bb0e:	0052      	lsls	r2, r2, #1
 800bb10:	e7d8      	b.n	800bac4 <_dtoa_r+0x25c>
 800bb12:	bf00      	nop
 800bb14:	f3af 8000 	nop.w
 800bb18:	636f4361 	.word	0x636f4361
 800bb1c:	3fd287a7 	.word	0x3fd287a7
 800bb20:	8b60c8b3 	.word	0x8b60c8b3
 800bb24:	3fc68a28 	.word	0x3fc68a28
 800bb28:	509f79fb 	.word	0x509f79fb
 800bb2c:	3fd34413 	.word	0x3fd34413
 800bb30:	0800e4fe 	.word	0x0800e4fe
 800bb34:	0800e515 	.word	0x0800e515
 800bb38:	7ff00000 	.word	0x7ff00000
 800bb3c:	0800e4c1 	.word	0x0800e4c1
 800bb40:	3ff80000 	.word	0x3ff80000
 800bb44:	0800e670 	.word	0x0800e670
 800bb48:	0800e56d 	.word	0x0800e56d
 800bb4c:	0800e4fa 	.word	0x0800e4fa
 800bb50:	0800e4c0 	.word	0x0800e4c0
 800bb54:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb58:	6018      	str	r0, [r3, #0]
 800bb5a:	9b07      	ldr	r3, [sp, #28]
 800bb5c:	2b0e      	cmp	r3, #14
 800bb5e:	f200 80a4 	bhi.w	800bcaa <_dtoa_r+0x442>
 800bb62:	2c00      	cmp	r4, #0
 800bb64:	f000 80a1 	beq.w	800bcaa <_dtoa_r+0x442>
 800bb68:	2f00      	cmp	r7, #0
 800bb6a:	dd33      	ble.n	800bbd4 <_dtoa_r+0x36c>
 800bb6c:	4bad      	ldr	r3, [pc, #692]	@ (800be24 <_dtoa_r+0x5bc>)
 800bb6e:	f007 020f 	and.w	r2, r7, #15
 800bb72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb76:	ed93 7b00 	vldr	d7, [r3]
 800bb7a:	05f8      	lsls	r0, r7, #23
 800bb7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bb80:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bb84:	d516      	bpl.n	800bbb4 <_dtoa_r+0x34c>
 800bb86:	4ba8      	ldr	r3, [pc, #672]	@ (800be28 <_dtoa_r+0x5c0>)
 800bb88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb90:	f7f4 fe6c 	bl	800086c <__aeabi_ddiv>
 800bb94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb98:	f004 040f 	and.w	r4, r4, #15
 800bb9c:	2603      	movs	r6, #3
 800bb9e:	4da2      	ldr	r5, [pc, #648]	@ (800be28 <_dtoa_r+0x5c0>)
 800bba0:	b954      	cbnz	r4, 800bbb8 <_dtoa_r+0x350>
 800bba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbaa:	f7f4 fe5f 	bl	800086c <__aeabi_ddiv>
 800bbae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbb2:	e028      	b.n	800bc06 <_dtoa_r+0x39e>
 800bbb4:	2602      	movs	r6, #2
 800bbb6:	e7f2      	b.n	800bb9e <_dtoa_r+0x336>
 800bbb8:	07e1      	lsls	r1, r4, #31
 800bbba:	d508      	bpl.n	800bbce <_dtoa_r+0x366>
 800bbbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bbc4:	f7f4 fd28 	bl	8000618 <__aeabi_dmul>
 800bbc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbcc:	3601      	adds	r6, #1
 800bbce:	1064      	asrs	r4, r4, #1
 800bbd0:	3508      	adds	r5, #8
 800bbd2:	e7e5      	b.n	800bba0 <_dtoa_r+0x338>
 800bbd4:	f000 80d2 	beq.w	800bd7c <_dtoa_r+0x514>
 800bbd8:	427c      	negs	r4, r7
 800bbda:	4b92      	ldr	r3, [pc, #584]	@ (800be24 <_dtoa_r+0x5bc>)
 800bbdc:	4d92      	ldr	r5, [pc, #584]	@ (800be28 <_dtoa_r+0x5c0>)
 800bbde:	f004 020f 	and.w	r2, r4, #15
 800bbe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbee:	f7f4 fd13 	bl	8000618 <__aeabi_dmul>
 800bbf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbf6:	1124      	asrs	r4, r4, #4
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	2602      	movs	r6, #2
 800bbfc:	2c00      	cmp	r4, #0
 800bbfe:	f040 80b2 	bne.w	800bd66 <_dtoa_r+0x4fe>
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d1d3      	bne.n	800bbae <_dtoa_r+0x346>
 800bc06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f000 80b7 	beq.w	800bd80 <_dtoa_r+0x518>
 800bc12:	4b86      	ldr	r3, [pc, #536]	@ (800be2c <_dtoa_r+0x5c4>)
 800bc14:	2200      	movs	r2, #0
 800bc16:	4620      	mov	r0, r4
 800bc18:	4629      	mov	r1, r5
 800bc1a:	f7f4 ff6f 	bl	8000afc <__aeabi_dcmplt>
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	f000 80ae 	beq.w	800bd80 <_dtoa_r+0x518>
 800bc24:	9b07      	ldr	r3, [sp, #28]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	f000 80aa 	beq.w	800bd80 <_dtoa_r+0x518>
 800bc2c:	9b00      	ldr	r3, [sp, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	dd37      	ble.n	800bca2 <_dtoa_r+0x43a>
 800bc32:	1e7b      	subs	r3, r7, #1
 800bc34:	9304      	str	r3, [sp, #16]
 800bc36:	4620      	mov	r0, r4
 800bc38:	4b7d      	ldr	r3, [pc, #500]	@ (800be30 <_dtoa_r+0x5c8>)
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	4629      	mov	r1, r5
 800bc3e:	f7f4 fceb 	bl	8000618 <__aeabi_dmul>
 800bc42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc46:	9c00      	ldr	r4, [sp, #0]
 800bc48:	3601      	adds	r6, #1
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	f7f4 fc7a 	bl	8000544 <__aeabi_i2d>
 800bc50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc54:	f7f4 fce0 	bl	8000618 <__aeabi_dmul>
 800bc58:	4b76      	ldr	r3, [pc, #472]	@ (800be34 <_dtoa_r+0x5cc>)
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f7f4 fb26 	bl	80002ac <__adddf3>
 800bc60:	4605      	mov	r5, r0
 800bc62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bc66:	2c00      	cmp	r4, #0
 800bc68:	f040 808d 	bne.w	800bd86 <_dtoa_r+0x51e>
 800bc6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc70:	4b71      	ldr	r3, [pc, #452]	@ (800be38 <_dtoa_r+0x5d0>)
 800bc72:	2200      	movs	r2, #0
 800bc74:	f7f4 fb18 	bl	80002a8 <__aeabi_dsub>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc80:	462a      	mov	r2, r5
 800bc82:	4633      	mov	r3, r6
 800bc84:	f7f4 ff58 	bl	8000b38 <__aeabi_dcmpgt>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	f040 828b 	bne.w	800c1a4 <_dtoa_r+0x93c>
 800bc8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc92:	462a      	mov	r2, r5
 800bc94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bc98:	f7f4 ff30 	bl	8000afc <__aeabi_dcmplt>
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	f040 8128 	bne.w	800bef2 <_dtoa_r+0x68a>
 800bca2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bca6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bcaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f2c0 815a 	blt.w	800bf66 <_dtoa_r+0x6fe>
 800bcb2:	2f0e      	cmp	r7, #14
 800bcb4:	f300 8157 	bgt.w	800bf66 <_dtoa_r+0x6fe>
 800bcb8:	4b5a      	ldr	r3, [pc, #360]	@ (800be24 <_dtoa_r+0x5bc>)
 800bcba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bcbe:	ed93 7b00 	vldr	d7, [r3]
 800bcc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	ed8d 7b00 	vstr	d7, [sp]
 800bcca:	da03      	bge.n	800bcd4 <_dtoa_r+0x46c>
 800bccc:	9b07      	ldr	r3, [sp, #28]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	f340 8101 	ble.w	800bed6 <_dtoa_r+0x66e>
 800bcd4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bcd8:	4656      	mov	r6, sl
 800bcda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcde:	4620      	mov	r0, r4
 800bce0:	4629      	mov	r1, r5
 800bce2:	f7f4 fdc3 	bl	800086c <__aeabi_ddiv>
 800bce6:	f7f4 ff47 	bl	8000b78 <__aeabi_d2iz>
 800bcea:	4680      	mov	r8, r0
 800bcec:	f7f4 fc2a 	bl	8000544 <__aeabi_i2d>
 800bcf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcf4:	f7f4 fc90 	bl	8000618 <__aeabi_dmul>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	4629      	mov	r1, r5
 800bd00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bd04:	f7f4 fad0 	bl	80002a8 <__aeabi_dsub>
 800bd08:	f806 4b01 	strb.w	r4, [r6], #1
 800bd0c:	9d07      	ldr	r5, [sp, #28]
 800bd0e:	eba6 040a 	sub.w	r4, r6, sl
 800bd12:	42a5      	cmp	r5, r4
 800bd14:	4602      	mov	r2, r0
 800bd16:	460b      	mov	r3, r1
 800bd18:	f040 8117 	bne.w	800bf4a <_dtoa_r+0x6e2>
 800bd1c:	f7f4 fac6 	bl	80002ac <__adddf3>
 800bd20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd24:	4604      	mov	r4, r0
 800bd26:	460d      	mov	r5, r1
 800bd28:	f7f4 ff06 	bl	8000b38 <__aeabi_dcmpgt>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	f040 80f9 	bne.w	800bf24 <_dtoa_r+0x6bc>
 800bd32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd36:	4620      	mov	r0, r4
 800bd38:	4629      	mov	r1, r5
 800bd3a:	f7f4 fed5 	bl	8000ae8 <__aeabi_dcmpeq>
 800bd3e:	b118      	cbz	r0, 800bd48 <_dtoa_r+0x4e0>
 800bd40:	f018 0f01 	tst.w	r8, #1
 800bd44:	f040 80ee 	bne.w	800bf24 <_dtoa_r+0x6bc>
 800bd48:	4649      	mov	r1, r9
 800bd4a:	4658      	mov	r0, fp
 800bd4c:	f000 ffdc 	bl	800cd08 <_Bfree>
 800bd50:	2300      	movs	r3, #0
 800bd52:	7033      	strb	r3, [r6, #0]
 800bd54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd56:	3701      	adds	r7, #1
 800bd58:	601f      	str	r7, [r3, #0]
 800bd5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f000 831d 	beq.w	800c39c <_dtoa_r+0xb34>
 800bd62:	601e      	str	r6, [r3, #0]
 800bd64:	e31a      	b.n	800c39c <_dtoa_r+0xb34>
 800bd66:	07e2      	lsls	r2, r4, #31
 800bd68:	d505      	bpl.n	800bd76 <_dtoa_r+0x50e>
 800bd6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd6e:	f7f4 fc53 	bl	8000618 <__aeabi_dmul>
 800bd72:	3601      	adds	r6, #1
 800bd74:	2301      	movs	r3, #1
 800bd76:	1064      	asrs	r4, r4, #1
 800bd78:	3508      	adds	r5, #8
 800bd7a:	e73f      	b.n	800bbfc <_dtoa_r+0x394>
 800bd7c:	2602      	movs	r6, #2
 800bd7e:	e742      	b.n	800bc06 <_dtoa_r+0x39e>
 800bd80:	9c07      	ldr	r4, [sp, #28]
 800bd82:	9704      	str	r7, [sp, #16]
 800bd84:	e761      	b.n	800bc4a <_dtoa_r+0x3e2>
 800bd86:	4b27      	ldr	r3, [pc, #156]	@ (800be24 <_dtoa_r+0x5bc>)
 800bd88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd92:	4454      	add	r4, sl
 800bd94:	2900      	cmp	r1, #0
 800bd96:	d053      	beq.n	800be40 <_dtoa_r+0x5d8>
 800bd98:	4928      	ldr	r1, [pc, #160]	@ (800be3c <_dtoa_r+0x5d4>)
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	f7f4 fd66 	bl	800086c <__aeabi_ddiv>
 800bda0:	4633      	mov	r3, r6
 800bda2:	462a      	mov	r2, r5
 800bda4:	f7f4 fa80 	bl	80002a8 <__aeabi_dsub>
 800bda8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bdac:	4656      	mov	r6, sl
 800bdae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdb2:	f7f4 fee1 	bl	8000b78 <__aeabi_d2iz>
 800bdb6:	4605      	mov	r5, r0
 800bdb8:	f7f4 fbc4 	bl	8000544 <__aeabi_i2d>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdc4:	f7f4 fa70 	bl	80002a8 <__aeabi_dsub>
 800bdc8:	3530      	adds	r5, #48	@ 0x30
 800bdca:	4602      	mov	r2, r0
 800bdcc:	460b      	mov	r3, r1
 800bdce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bdd2:	f806 5b01 	strb.w	r5, [r6], #1
 800bdd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bdda:	f7f4 fe8f 	bl	8000afc <__aeabi_dcmplt>
 800bdde:	2800      	cmp	r0, #0
 800bde0:	d171      	bne.n	800bec6 <_dtoa_r+0x65e>
 800bde2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bde6:	4911      	ldr	r1, [pc, #68]	@ (800be2c <_dtoa_r+0x5c4>)
 800bde8:	2000      	movs	r0, #0
 800bdea:	f7f4 fa5d 	bl	80002a8 <__aeabi_dsub>
 800bdee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bdf2:	f7f4 fe83 	bl	8000afc <__aeabi_dcmplt>
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	f040 8095 	bne.w	800bf26 <_dtoa_r+0x6be>
 800bdfc:	42a6      	cmp	r6, r4
 800bdfe:	f43f af50 	beq.w	800bca2 <_dtoa_r+0x43a>
 800be02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be06:	4b0a      	ldr	r3, [pc, #40]	@ (800be30 <_dtoa_r+0x5c8>)
 800be08:	2200      	movs	r2, #0
 800be0a:	f7f4 fc05 	bl	8000618 <__aeabi_dmul>
 800be0e:	4b08      	ldr	r3, [pc, #32]	@ (800be30 <_dtoa_r+0x5c8>)
 800be10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be14:	2200      	movs	r2, #0
 800be16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be1a:	f7f4 fbfd 	bl	8000618 <__aeabi_dmul>
 800be1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be22:	e7c4      	b.n	800bdae <_dtoa_r+0x546>
 800be24:	0800e670 	.word	0x0800e670
 800be28:	0800e648 	.word	0x0800e648
 800be2c:	3ff00000 	.word	0x3ff00000
 800be30:	40240000 	.word	0x40240000
 800be34:	401c0000 	.word	0x401c0000
 800be38:	40140000 	.word	0x40140000
 800be3c:	3fe00000 	.word	0x3fe00000
 800be40:	4631      	mov	r1, r6
 800be42:	4628      	mov	r0, r5
 800be44:	f7f4 fbe8 	bl	8000618 <__aeabi_dmul>
 800be48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be4c:	9415      	str	r4, [sp, #84]	@ 0x54
 800be4e:	4656      	mov	r6, sl
 800be50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be54:	f7f4 fe90 	bl	8000b78 <__aeabi_d2iz>
 800be58:	4605      	mov	r5, r0
 800be5a:	f7f4 fb73 	bl	8000544 <__aeabi_i2d>
 800be5e:	4602      	mov	r2, r0
 800be60:	460b      	mov	r3, r1
 800be62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be66:	f7f4 fa1f 	bl	80002a8 <__aeabi_dsub>
 800be6a:	3530      	adds	r5, #48	@ 0x30
 800be6c:	f806 5b01 	strb.w	r5, [r6], #1
 800be70:	4602      	mov	r2, r0
 800be72:	460b      	mov	r3, r1
 800be74:	42a6      	cmp	r6, r4
 800be76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be7a:	f04f 0200 	mov.w	r2, #0
 800be7e:	d124      	bne.n	800beca <_dtoa_r+0x662>
 800be80:	4bac      	ldr	r3, [pc, #688]	@ (800c134 <_dtoa_r+0x8cc>)
 800be82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be86:	f7f4 fa11 	bl	80002ac <__adddf3>
 800be8a:	4602      	mov	r2, r0
 800be8c:	460b      	mov	r3, r1
 800be8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be92:	f7f4 fe51 	bl	8000b38 <__aeabi_dcmpgt>
 800be96:	2800      	cmp	r0, #0
 800be98:	d145      	bne.n	800bf26 <_dtoa_r+0x6be>
 800be9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be9e:	49a5      	ldr	r1, [pc, #660]	@ (800c134 <_dtoa_r+0x8cc>)
 800bea0:	2000      	movs	r0, #0
 800bea2:	f7f4 fa01 	bl	80002a8 <__aeabi_dsub>
 800bea6:	4602      	mov	r2, r0
 800bea8:	460b      	mov	r3, r1
 800beaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beae:	f7f4 fe25 	bl	8000afc <__aeabi_dcmplt>
 800beb2:	2800      	cmp	r0, #0
 800beb4:	f43f aef5 	beq.w	800bca2 <_dtoa_r+0x43a>
 800beb8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800beba:	1e73      	subs	r3, r6, #1
 800bebc:	9315      	str	r3, [sp, #84]	@ 0x54
 800bebe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bec2:	2b30      	cmp	r3, #48	@ 0x30
 800bec4:	d0f8      	beq.n	800beb8 <_dtoa_r+0x650>
 800bec6:	9f04      	ldr	r7, [sp, #16]
 800bec8:	e73e      	b.n	800bd48 <_dtoa_r+0x4e0>
 800beca:	4b9b      	ldr	r3, [pc, #620]	@ (800c138 <_dtoa_r+0x8d0>)
 800becc:	f7f4 fba4 	bl	8000618 <__aeabi_dmul>
 800bed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bed4:	e7bc      	b.n	800be50 <_dtoa_r+0x5e8>
 800bed6:	d10c      	bne.n	800bef2 <_dtoa_r+0x68a>
 800bed8:	4b98      	ldr	r3, [pc, #608]	@ (800c13c <_dtoa_r+0x8d4>)
 800beda:	2200      	movs	r2, #0
 800bedc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bee0:	f7f4 fb9a 	bl	8000618 <__aeabi_dmul>
 800bee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bee8:	f7f4 fe1c 	bl	8000b24 <__aeabi_dcmpge>
 800beec:	2800      	cmp	r0, #0
 800beee:	f000 8157 	beq.w	800c1a0 <_dtoa_r+0x938>
 800bef2:	2400      	movs	r4, #0
 800bef4:	4625      	mov	r5, r4
 800bef6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bef8:	43db      	mvns	r3, r3
 800befa:	9304      	str	r3, [sp, #16]
 800befc:	4656      	mov	r6, sl
 800befe:	2700      	movs	r7, #0
 800bf00:	4621      	mov	r1, r4
 800bf02:	4658      	mov	r0, fp
 800bf04:	f000 ff00 	bl	800cd08 <_Bfree>
 800bf08:	2d00      	cmp	r5, #0
 800bf0a:	d0dc      	beq.n	800bec6 <_dtoa_r+0x65e>
 800bf0c:	b12f      	cbz	r7, 800bf1a <_dtoa_r+0x6b2>
 800bf0e:	42af      	cmp	r7, r5
 800bf10:	d003      	beq.n	800bf1a <_dtoa_r+0x6b2>
 800bf12:	4639      	mov	r1, r7
 800bf14:	4658      	mov	r0, fp
 800bf16:	f000 fef7 	bl	800cd08 <_Bfree>
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	4658      	mov	r0, fp
 800bf1e:	f000 fef3 	bl	800cd08 <_Bfree>
 800bf22:	e7d0      	b.n	800bec6 <_dtoa_r+0x65e>
 800bf24:	9704      	str	r7, [sp, #16]
 800bf26:	4633      	mov	r3, r6
 800bf28:	461e      	mov	r6, r3
 800bf2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf2e:	2a39      	cmp	r2, #57	@ 0x39
 800bf30:	d107      	bne.n	800bf42 <_dtoa_r+0x6da>
 800bf32:	459a      	cmp	sl, r3
 800bf34:	d1f8      	bne.n	800bf28 <_dtoa_r+0x6c0>
 800bf36:	9a04      	ldr	r2, [sp, #16]
 800bf38:	3201      	adds	r2, #1
 800bf3a:	9204      	str	r2, [sp, #16]
 800bf3c:	2230      	movs	r2, #48	@ 0x30
 800bf3e:	f88a 2000 	strb.w	r2, [sl]
 800bf42:	781a      	ldrb	r2, [r3, #0]
 800bf44:	3201      	adds	r2, #1
 800bf46:	701a      	strb	r2, [r3, #0]
 800bf48:	e7bd      	b.n	800bec6 <_dtoa_r+0x65e>
 800bf4a:	4b7b      	ldr	r3, [pc, #492]	@ (800c138 <_dtoa_r+0x8d0>)
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f7f4 fb63 	bl	8000618 <__aeabi_dmul>
 800bf52:	2200      	movs	r2, #0
 800bf54:	2300      	movs	r3, #0
 800bf56:	4604      	mov	r4, r0
 800bf58:	460d      	mov	r5, r1
 800bf5a:	f7f4 fdc5 	bl	8000ae8 <__aeabi_dcmpeq>
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	f43f aebb 	beq.w	800bcda <_dtoa_r+0x472>
 800bf64:	e6f0      	b.n	800bd48 <_dtoa_r+0x4e0>
 800bf66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf68:	2a00      	cmp	r2, #0
 800bf6a:	f000 80db 	beq.w	800c124 <_dtoa_r+0x8bc>
 800bf6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf70:	2a01      	cmp	r2, #1
 800bf72:	f300 80bf 	bgt.w	800c0f4 <_dtoa_r+0x88c>
 800bf76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bf78:	2a00      	cmp	r2, #0
 800bf7a:	f000 80b7 	beq.w	800c0ec <_dtoa_r+0x884>
 800bf7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bf82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf84:	4646      	mov	r6, r8
 800bf86:	9a08      	ldr	r2, [sp, #32]
 800bf88:	2101      	movs	r1, #1
 800bf8a:	441a      	add	r2, r3
 800bf8c:	4658      	mov	r0, fp
 800bf8e:	4498      	add	r8, r3
 800bf90:	9208      	str	r2, [sp, #32]
 800bf92:	f000 ffb7 	bl	800cf04 <__i2b>
 800bf96:	4605      	mov	r5, r0
 800bf98:	b15e      	cbz	r6, 800bfb2 <_dtoa_r+0x74a>
 800bf9a:	9b08      	ldr	r3, [sp, #32]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	dd08      	ble.n	800bfb2 <_dtoa_r+0x74a>
 800bfa0:	42b3      	cmp	r3, r6
 800bfa2:	9a08      	ldr	r2, [sp, #32]
 800bfa4:	bfa8      	it	ge
 800bfa6:	4633      	movge	r3, r6
 800bfa8:	eba8 0803 	sub.w	r8, r8, r3
 800bfac:	1af6      	subs	r6, r6, r3
 800bfae:	1ad3      	subs	r3, r2, r3
 800bfb0:	9308      	str	r3, [sp, #32]
 800bfb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfb4:	b1f3      	cbz	r3, 800bff4 <_dtoa_r+0x78c>
 800bfb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f000 80b7 	beq.w	800c12c <_dtoa_r+0x8c4>
 800bfbe:	b18c      	cbz	r4, 800bfe4 <_dtoa_r+0x77c>
 800bfc0:	4629      	mov	r1, r5
 800bfc2:	4622      	mov	r2, r4
 800bfc4:	4658      	mov	r0, fp
 800bfc6:	f001 f85d 	bl	800d084 <__pow5mult>
 800bfca:	464a      	mov	r2, r9
 800bfcc:	4601      	mov	r1, r0
 800bfce:	4605      	mov	r5, r0
 800bfd0:	4658      	mov	r0, fp
 800bfd2:	f000 ffad 	bl	800cf30 <__multiply>
 800bfd6:	4649      	mov	r1, r9
 800bfd8:	9004      	str	r0, [sp, #16]
 800bfda:	4658      	mov	r0, fp
 800bfdc:	f000 fe94 	bl	800cd08 <_Bfree>
 800bfe0:	9b04      	ldr	r3, [sp, #16]
 800bfe2:	4699      	mov	r9, r3
 800bfe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfe6:	1b1a      	subs	r2, r3, r4
 800bfe8:	d004      	beq.n	800bff4 <_dtoa_r+0x78c>
 800bfea:	4649      	mov	r1, r9
 800bfec:	4658      	mov	r0, fp
 800bfee:	f001 f849 	bl	800d084 <__pow5mult>
 800bff2:	4681      	mov	r9, r0
 800bff4:	2101      	movs	r1, #1
 800bff6:	4658      	mov	r0, fp
 800bff8:	f000 ff84 	bl	800cf04 <__i2b>
 800bffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bffe:	4604      	mov	r4, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	f000 81cf 	beq.w	800c3a4 <_dtoa_r+0xb3c>
 800c006:	461a      	mov	r2, r3
 800c008:	4601      	mov	r1, r0
 800c00a:	4658      	mov	r0, fp
 800c00c:	f001 f83a 	bl	800d084 <__pow5mult>
 800c010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c012:	2b01      	cmp	r3, #1
 800c014:	4604      	mov	r4, r0
 800c016:	f300 8095 	bgt.w	800c144 <_dtoa_r+0x8dc>
 800c01a:	9b02      	ldr	r3, [sp, #8]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f040 8087 	bne.w	800c130 <_dtoa_r+0x8c8>
 800c022:	9b03      	ldr	r3, [sp, #12]
 800c024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c028:	2b00      	cmp	r3, #0
 800c02a:	f040 8089 	bne.w	800c140 <_dtoa_r+0x8d8>
 800c02e:	9b03      	ldr	r3, [sp, #12]
 800c030:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c034:	0d1b      	lsrs	r3, r3, #20
 800c036:	051b      	lsls	r3, r3, #20
 800c038:	b12b      	cbz	r3, 800c046 <_dtoa_r+0x7de>
 800c03a:	9b08      	ldr	r3, [sp, #32]
 800c03c:	3301      	adds	r3, #1
 800c03e:	9308      	str	r3, [sp, #32]
 800c040:	f108 0801 	add.w	r8, r8, #1
 800c044:	2301      	movs	r3, #1
 800c046:	930a      	str	r3, [sp, #40]	@ 0x28
 800c048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	f000 81b0 	beq.w	800c3b0 <_dtoa_r+0xb48>
 800c050:	6923      	ldr	r3, [r4, #16]
 800c052:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c056:	6918      	ldr	r0, [r3, #16]
 800c058:	f000 ff08 	bl	800ce6c <__hi0bits>
 800c05c:	f1c0 0020 	rsb	r0, r0, #32
 800c060:	9b08      	ldr	r3, [sp, #32]
 800c062:	4418      	add	r0, r3
 800c064:	f010 001f 	ands.w	r0, r0, #31
 800c068:	d077      	beq.n	800c15a <_dtoa_r+0x8f2>
 800c06a:	f1c0 0320 	rsb	r3, r0, #32
 800c06e:	2b04      	cmp	r3, #4
 800c070:	dd6b      	ble.n	800c14a <_dtoa_r+0x8e2>
 800c072:	9b08      	ldr	r3, [sp, #32]
 800c074:	f1c0 001c 	rsb	r0, r0, #28
 800c078:	4403      	add	r3, r0
 800c07a:	4480      	add	r8, r0
 800c07c:	4406      	add	r6, r0
 800c07e:	9308      	str	r3, [sp, #32]
 800c080:	f1b8 0f00 	cmp.w	r8, #0
 800c084:	dd05      	ble.n	800c092 <_dtoa_r+0x82a>
 800c086:	4649      	mov	r1, r9
 800c088:	4642      	mov	r2, r8
 800c08a:	4658      	mov	r0, fp
 800c08c:	f001 f854 	bl	800d138 <__lshift>
 800c090:	4681      	mov	r9, r0
 800c092:	9b08      	ldr	r3, [sp, #32]
 800c094:	2b00      	cmp	r3, #0
 800c096:	dd05      	ble.n	800c0a4 <_dtoa_r+0x83c>
 800c098:	4621      	mov	r1, r4
 800c09a:	461a      	mov	r2, r3
 800c09c:	4658      	mov	r0, fp
 800c09e:	f001 f84b 	bl	800d138 <__lshift>
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d059      	beq.n	800c15e <_dtoa_r+0x8f6>
 800c0aa:	4621      	mov	r1, r4
 800c0ac:	4648      	mov	r0, r9
 800c0ae:	f001 f8af 	bl	800d210 <__mcmp>
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	da53      	bge.n	800c15e <_dtoa_r+0x8f6>
 800c0b6:	1e7b      	subs	r3, r7, #1
 800c0b8:	9304      	str	r3, [sp, #16]
 800c0ba:	4649      	mov	r1, r9
 800c0bc:	2300      	movs	r3, #0
 800c0be:	220a      	movs	r2, #10
 800c0c0:	4658      	mov	r0, fp
 800c0c2:	f000 fe43 	bl	800cd4c <__multadd>
 800c0c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0c8:	4681      	mov	r9, r0
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	f000 8172 	beq.w	800c3b4 <_dtoa_r+0xb4c>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	4629      	mov	r1, r5
 800c0d4:	220a      	movs	r2, #10
 800c0d6:	4658      	mov	r0, fp
 800c0d8:	f000 fe38 	bl	800cd4c <__multadd>
 800c0dc:	9b00      	ldr	r3, [sp, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	4605      	mov	r5, r0
 800c0e2:	dc67      	bgt.n	800c1b4 <_dtoa_r+0x94c>
 800c0e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0e6:	2b02      	cmp	r3, #2
 800c0e8:	dc41      	bgt.n	800c16e <_dtoa_r+0x906>
 800c0ea:	e063      	b.n	800c1b4 <_dtoa_r+0x94c>
 800c0ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c0ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c0f2:	e746      	b.n	800bf82 <_dtoa_r+0x71a>
 800c0f4:	9b07      	ldr	r3, [sp, #28]
 800c0f6:	1e5c      	subs	r4, r3, #1
 800c0f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0fa:	42a3      	cmp	r3, r4
 800c0fc:	bfbf      	itttt	lt
 800c0fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c100:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c102:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c104:	1ae3      	sublt	r3, r4, r3
 800c106:	bfb4      	ite	lt
 800c108:	18d2      	addlt	r2, r2, r3
 800c10a:	1b1c      	subge	r4, r3, r4
 800c10c:	9b07      	ldr	r3, [sp, #28]
 800c10e:	bfbc      	itt	lt
 800c110:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c112:	2400      	movlt	r4, #0
 800c114:	2b00      	cmp	r3, #0
 800c116:	bfb5      	itete	lt
 800c118:	eba8 0603 	sublt.w	r6, r8, r3
 800c11c:	9b07      	ldrge	r3, [sp, #28]
 800c11e:	2300      	movlt	r3, #0
 800c120:	4646      	movge	r6, r8
 800c122:	e730      	b.n	800bf86 <_dtoa_r+0x71e>
 800c124:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c126:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c128:	4646      	mov	r6, r8
 800c12a:	e735      	b.n	800bf98 <_dtoa_r+0x730>
 800c12c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c12e:	e75c      	b.n	800bfea <_dtoa_r+0x782>
 800c130:	2300      	movs	r3, #0
 800c132:	e788      	b.n	800c046 <_dtoa_r+0x7de>
 800c134:	3fe00000 	.word	0x3fe00000
 800c138:	40240000 	.word	0x40240000
 800c13c:	40140000 	.word	0x40140000
 800c140:	9b02      	ldr	r3, [sp, #8]
 800c142:	e780      	b.n	800c046 <_dtoa_r+0x7de>
 800c144:	2300      	movs	r3, #0
 800c146:	930a      	str	r3, [sp, #40]	@ 0x28
 800c148:	e782      	b.n	800c050 <_dtoa_r+0x7e8>
 800c14a:	d099      	beq.n	800c080 <_dtoa_r+0x818>
 800c14c:	9a08      	ldr	r2, [sp, #32]
 800c14e:	331c      	adds	r3, #28
 800c150:	441a      	add	r2, r3
 800c152:	4498      	add	r8, r3
 800c154:	441e      	add	r6, r3
 800c156:	9208      	str	r2, [sp, #32]
 800c158:	e792      	b.n	800c080 <_dtoa_r+0x818>
 800c15a:	4603      	mov	r3, r0
 800c15c:	e7f6      	b.n	800c14c <_dtoa_r+0x8e4>
 800c15e:	9b07      	ldr	r3, [sp, #28]
 800c160:	9704      	str	r7, [sp, #16]
 800c162:	2b00      	cmp	r3, #0
 800c164:	dc20      	bgt.n	800c1a8 <_dtoa_r+0x940>
 800c166:	9300      	str	r3, [sp, #0]
 800c168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	dd1e      	ble.n	800c1ac <_dtoa_r+0x944>
 800c16e:	9b00      	ldr	r3, [sp, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	f47f aec0 	bne.w	800bef6 <_dtoa_r+0x68e>
 800c176:	4621      	mov	r1, r4
 800c178:	2205      	movs	r2, #5
 800c17a:	4658      	mov	r0, fp
 800c17c:	f000 fde6 	bl	800cd4c <__multadd>
 800c180:	4601      	mov	r1, r0
 800c182:	4604      	mov	r4, r0
 800c184:	4648      	mov	r0, r9
 800c186:	f001 f843 	bl	800d210 <__mcmp>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	f77f aeb3 	ble.w	800bef6 <_dtoa_r+0x68e>
 800c190:	4656      	mov	r6, sl
 800c192:	2331      	movs	r3, #49	@ 0x31
 800c194:	f806 3b01 	strb.w	r3, [r6], #1
 800c198:	9b04      	ldr	r3, [sp, #16]
 800c19a:	3301      	adds	r3, #1
 800c19c:	9304      	str	r3, [sp, #16]
 800c19e:	e6ae      	b.n	800befe <_dtoa_r+0x696>
 800c1a0:	9c07      	ldr	r4, [sp, #28]
 800c1a2:	9704      	str	r7, [sp, #16]
 800c1a4:	4625      	mov	r5, r4
 800c1a6:	e7f3      	b.n	800c190 <_dtoa_r+0x928>
 800c1a8:	9b07      	ldr	r3, [sp, #28]
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	f000 8104 	beq.w	800c3bc <_dtoa_r+0xb54>
 800c1b4:	2e00      	cmp	r6, #0
 800c1b6:	dd05      	ble.n	800c1c4 <_dtoa_r+0x95c>
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	4632      	mov	r2, r6
 800c1bc:	4658      	mov	r0, fp
 800c1be:	f000 ffbb 	bl	800d138 <__lshift>
 800c1c2:	4605      	mov	r5, r0
 800c1c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d05a      	beq.n	800c280 <_dtoa_r+0xa18>
 800c1ca:	6869      	ldr	r1, [r5, #4]
 800c1cc:	4658      	mov	r0, fp
 800c1ce:	f000 fd5b 	bl	800cc88 <_Balloc>
 800c1d2:	4606      	mov	r6, r0
 800c1d4:	b928      	cbnz	r0, 800c1e2 <_dtoa_r+0x97a>
 800c1d6:	4b84      	ldr	r3, [pc, #528]	@ (800c3e8 <_dtoa_r+0xb80>)
 800c1d8:	4602      	mov	r2, r0
 800c1da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c1de:	f7ff bb5a 	b.w	800b896 <_dtoa_r+0x2e>
 800c1e2:	692a      	ldr	r2, [r5, #16]
 800c1e4:	3202      	adds	r2, #2
 800c1e6:	0092      	lsls	r2, r2, #2
 800c1e8:	f105 010c 	add.w	r1, r5, #12
 800c1ec:	300c      	adds	r0, #12
 800c1ee:	f7ff fa94 	bl	800b71a <memcpy>
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	4631      	mov	r1, r6
 800c1f6:	4658      	mov	r0, fp
 800c1f8:	f000 ff9e 	bl	800d138 <__lshift>
 800c1fc:	f10a 0301 	add.w	r3, sl, #1
 800c200:	9307      	str	r3, [sp, #28]
 800c202:	9b00      	ldr	r3, [sp, #0]
 800c204:	4453      	add	r3, sl
 800c206:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c208:	9b02      	ldr	r3, [sp, #8]
 800c20a:	f003 0301 	and.w	r3, r3, #1
 800c20e:	462f      	mov	r7, r5
 800c210:	930a      	str	r3, [sp, #40]	@ 0x28
 800c212:	4605      	mov	r5, r0
 800c214:	9b07      	ldr	r3, [sp, #28]
 800c216:	4621      	mov	r1, r4
 800c218:	3b01      	subs	r3, #1
 800c21a:	4648      	mov	r0, r9
 800c21c:	9300      	str	r3, [sp, #0]
 800c21e:	f7ff fa99 	bl	800b754 <quorem>
 800c222:	4639      	mov	r1, r7
 800c224:	9002      	str	r0, [sp, #8]
 800c226:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c22a:	4648      	mov	r0, r9
 800c22c:	f000 fff0 	bl	800d210 <__mcmp>
 800c230:	462a      	mov	r2, r5
 800c232:	9008      	str	r0, [sp, #32]
 800c234:	4621      	mov	r1, r4
 800c236:	4658      	mov	r0, fp
 800c238:	f001 f806 	bl	800d248 <__mdiff>
 800c23c:	68c2      	ldr	r2, [r0, #12]
 800c23e:	4606      	mov	r6, r0
 800c240:	bb02      	cbnz	r2, 800c284 <_dtoa_r+0xa1c>
 800c242:	4601      	mov	r1, r0
 800c244:	4648      	mov	r0, r9
 800c246:	f000 ffe3 	bl	800d210 <__mcmp>
 800c24a:	4602      	mov	r2, r0
 800c24c:	4631      	mov	r1, r6
 800c24e:	4658      	mov	r0, fp
 800c250:	920e      	str	r2, [sp, #56]	@ 0x38
 800c252:	f000 fd59 	bl	800cd08 <_Bfree>
 800c256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c258:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c25a:	9e07      	ldr	r6, [sp, #28]
 800c25c:	ea43 0102 	orr.w	r1, r3, r2
 800c260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c262:	4319      	orrs	r1, r3
 800c264:	d110      	bne.n	800c288 <_dtoa_r+0xa20>
 800c266:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c26a:	d029      	beq.n	800c2c0 <_dtoa_r+0xa58>
 800c26c:	9b08      	ldr	r3, [sp, #32]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	dd02      	ble.n	800c278 <_dtoa_r+0xa10>
 800c272:	9b02      	ldr	r3, [sp, #8]
 800c274:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c278:	9b00      	ldr	r3, [sp, #0]
 800c27a:	f883 8000 	strb.w	r8, [r3]
 800c27e:	e63f      	b.n	800bf00 <_dtoa_r+0x698>
 800c280:	4628      	mov	r0, r5
 800c282:	e7bb      	b.n	800c1fc <_dtoa_r+0x994>
 800c284:	2201      	movs	r2, #1
 800c286:	e7e1      	b.n	800c24c <_dtoa_r+0x9e4>
 800c288:	9b08      	ldr	r3, [sp, #32]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	db04      	blt.n	800c298 <_dtoa_r+0xa30>
 800c28e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c290:	430b      	orrs	r3, r1
 800c292:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c294:	430b      	orrs	r3, r1
 800c296:	d120      	bne.n	800c2da <_dtoa_r+0xa72>
 800c298:	2a00      	cmp	r2, #0
 800c29a:	dded      	ble.n	800c278 <_dtoa_r+0xa10>
 800c29c:	4649      	mov	r1, r9
 800c29e:	2201      	movs	r2, #1
 800c2a0:	4658      	mov	r0, fp
 800c2a2:	f000 ff49 	bl	800d138 <__lshift>
 800c2a6:	4621      	mov	r1, r4
 800c2a8:	4681      	mov	r9, r0
 800c2aa:	f000 ffb1 	bl	800d210 <__mcmp>
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	dc03      	bgt.n	800c2ba <_dtoa_r+0xa52>
 800c2b2:	d1e1      	bne.n	800c278 <_dtoa_r+0xa10>
 800c2b4:	f018 0f01 	tst.w	r8, #1
 800c2b8:	d0de      	beq.n	800c278 <_dtoa_r+0xa10>
 800c2ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c2be:	d1d8      	bne.n	800c272 <_dtoa_r+0xa0a>
 800c2c0:	9a00      	ldr	r2, [sp, #0]
 800c2c2:	2339      	movs	r3, #57	@ 0x39
 800c2c4:	7013      	strb	r3, [r2, #0]
 800c2c6:	4633      	mov	r3, r6
 800c2c8:	461e      	mov	r6, r3
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c2d0:	2a39      	cmp	r2, #57	@ 0x39
 800c2d2:	d052      	beq.n	800c37a <_dtoa_r+0xb12>
 800c2d4:	3201      	adds	r2, #1
 800c2d6:	701a      	strb	r2, [r3, #0]
 800c2d8:	e612      	b.n	800bf00 <_dtoa_r+0x698>
 800c2da:	2a00      	cmp	r2, #0
 800c2dc:	dd07      	ble.n	800c2ee <_dtoa_r+0xa86>
 800c2de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c2e2:	d0ed      	beq.n	800c2c0 <_dtoa_r+0xa58>
 800c2e4:	9a00      	ldr	r2, [sp, #0]
 800c2e6:	f108 0301 	add.w	r3, r8, #1
 800c2ea:	7013      	strb	r3, [r2, #0]
 800c2ec:	e608      	b.n	800bf00 <_dtoa_r+0x698>
 800c2ee:	9b07      	ldr	r3, [sp, #28]
 800c2f0:	9a07      	ldr	r2, [sp, #28]
 800c2f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c2f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d028      	beq.n	800c34e <_dtoa_r+0xae6>
 800c2fc:	4649      	mov	r1, r9
 800c2fe:	2300      	movs	r3, #0
 800c300:	220a      	movs	r2, #10
 800c302:	4658      	mov	r0, fp
 800c304:	f000 fd22 	bl	800cd4c <__multadd>
 800c308:	42af      	cmp	r7, r5
 800c30a:	4681      	mov	r9, r0
 800c30c:	f04f 0300 	mov.w	r3, #0
 800c310:	f04f 020a 	mov.w	r2, #10
 800c314:	4639      	mov	r1, r7
 800c316:	4658      	mov	r0, fp
 800c318:	d107      	bne.n	800c32a <_dtoa_r+0xac2>
 800c31a:	f000 fd17 	bl	800cd4c <__multadd>
 800c31e:	4607      	mov	r7, r0
 800c320:	4605      	mov	r5, r0
 800c322:	9b07      	ldr	r3, [sp, #28]
 800c324:	3301      	adds	r3, #1
 800c326:	9307      	str	r3, [sp, #28]
 800c328:	e774      	b.n	800c214 <_dtoa_r+0x9ac>
 800c32a:	f000 fd0f 	bl	800cd4c <__multadd>
 800c32e:	4629      	mov	r1, r5
 800c330:	4607      	mov	r7, r0
 800c332:	2300      	movs	r3, #0
 800c334:	220a      	movs	r2, #10
 800c336:	4658      	mov	r0, fp
 800c338:	f000 fd08 	bl	800cd4c <__multadd>
 800c33c:	4605      	mov	r5, r0
 800c33e:	e7f0      	b.n	800c322 <_dtoa_r+0xaba>
 800c340:	9b00      	ldr	r3, [sp, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	bfcc      	ite	gt
 800c346:	461e      	movgt	r6, r3
 800c348:	2601      	movle	r6, #1
 800c34a:	4456      	add	r6, sl
 800c34c:	2700      	movs	r7, #0
 800c34e:	4649      	mov	r1, r9
 800c350:	2201      	movs	r2, #1
 800c352:	4658      	mov	r0, fp
 800c354:	f000 fef0 	bl	800d138 <__lshift>
 800c358:	4621      	mov	r1, r4
 800c35a:	4681      	mov	r9, r0
 800c35c:	f000 ff58 	bl	800d210 <__mcmp>
 800c360:	2800      	cmp	r0, #0
 800c362:	dcb0      	bgt.n	800c2c6 <_dtoa_r+0xa5e>
 800c364:	d102      	bne.n	800c36c <_dtoa_r+0xb04>
 800c366:	f018 0f01 	tst.w	r8, #1
 800c36a:	d1ac      	bne.n	800c2c6 <_dtoa_r+0xa5e>
 800c36c:	4633      	mov	r3, r6
 800c36e:	461e      	mov	r6, r3
 800c370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c374:	2a30      	cmp	r2, #48	@ 0x30
 800c376:	d0fa      	beq.n	800c36e <_dtoa_r+0xb06>
 800c378:	e5c2      	b.n	800bf00 <_dtoa_r+0x698>
 800c37a:	459a      	cmp	sl, r3
 800c37c:	d1a4      	bne.n	800c2c8 <_dtoa_r+0xa60>
 800c37e:	9b04      	ldr	r3, [sp, #16]
 800c380:	3301      	adds	r3, #1
 800c382:	9304      	str	r3, [sp, #16]
 800c384:	2331      	movs	r3, #49	@ 0x31
 800c386:	f88a 3000 	strb.w	r3, [sl]
 800c38a:	e5b9      	b.n	800bf00 <_dtoa_r+0x698>
 800c38c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c38e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c3ec <_dtoa_r+0xb84>
 800c392:	b11b      	cbz	r3, 800c39c <_dtoa_r+0xb34>
 800c394:	f10a 0308 	add.w	r3, sl, #8
 800c398:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c39a:	6013      	str	r3, [r2, #0]
 800c39c:	4650      	mov	r0, sl
 800c39e:	b019      	add	sp, #100	@ 0x64
 800c3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	f77f ae37 	ble.w	800c01a <_dtoa_r+0x7b2>
 800c3ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3b0:	2001      	movs	r0, #1
 800c3b2:	e655      	b.n	800c060 <_dtoa_r+0x7f8>
 800c3b4:	9b00      	ldr	r3, [sp, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f77f aed6 	ble.w	800c168 <_dtoa_r+0x900>
 800c3bc:	4656      	mov	r6, sl
 800c3be:	4621      	mov	r1, r4
 800c3c0:	4648      	mov	r0, r9
 800c3c2:	f7ff f9c7 	bl	800b754 <quorem>
 800c3c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c3ca:	f806 8b01 	strb.w	r8, [r6], #1
 800c3ce:	9b00      	ldr	r3, [sp, #0]
 800c3d0:	eba6 020a 	sub.w	r2, r6, sl
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	ddb3      	ble.n	800c340 <_dtoa_r+0xad8>
 800c3d8:	4649      	mov	r1, r9
 800c3da:	2300      	movs	r3, #0
 800c3dc:	220a      	movs	r2, #10
 800c3de:	4658      	mov	r0, fp
 800c3e0:	f000 fcb4 	bl	800cd4c <__multadd>
 800c3e4:	4681      	mov	r9, r0
 800c3e6:	e7ea      	b.n	800c3be <_dtoa_r+0xb56>
 800c3e8:	0800e56d 	.word	0x0800e56d
 800c3ec:	0800e4f1 	.word	0x0800e4f1

0800c3f0 <_free_r>:
 800c3f0:	b538      	push	{r3, r4, r5, lr}
 800c3f2:	4605      	mov	r5, r0
 800c3f4:	2900      	cmp	r1, #0
 800c3f6:	d041      	beq.n	800c47c <_free_r+0x8c>
 800c3f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3fc:	1f0c      	subs	r4, r1, #4
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	bfb8      	it	lt
 800c402:	18e4      	addlt	r4, r4, r3
 800c404:	f000 fc34 	bl	800cc70 <__malloc_lock>
 800c408:	4a1d      	ldr	r2, [pc, #116]	@ (800c480 <_free_r+0x90>)
 800c40a:	6813      	ldr	r3, [r2, #0]
 800c40c:	b933      	cbnz	r3, 800c41c <_free_r+0x2c>
 800c40e:	6063      	str	r3, [r4, #4]
 800c410:	6014      	str	r4, [r2, #0]
 800c412:	4628      	mov	r0, r5
 800c414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c418:	f000 bc30 	b.w	800cc7c <__malloc_unlock>
 800c41c:	42a3      	cmp	r3, r4
 800c41e:	d908      	bls.n	800c432 <_free_r+0x42>
 800c420:	6820      	ldr	r0, [r4, #0]
 800c422:	1821      	adds	r1, r4, r0
 800c424:	428b      	cmp	r3, r1
 800c426:	bf01      	itttt	eq
 800c428:	6819      	ldreq	r1, [r3, #0]
 800c42a:	685b      	ldreq	r3, [r3, #4]
 800c42c:	1809      	addeq	r1, r1, r0
 800c42e:	6021      	streq	r1, [r4, #0]
 800c430:	e7ed      	b.n	800c40e <_free_r+0x1e>
 800c432:	461a      	mov	r2, r3
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	b10b      	cbz	r3, 800c43c <_free_r+0x4c>
 800c438:	42a3      	cmp	r3, r4
 800c43a:	d9fa      	bls.n	800c432 <_free_r+0x42>
 800c43c:	6811      	ldr	r1, [r2, #0]
 800c43e:	1850      	adds	r0, r2, r1
 800c440:	42a0      	cmp	r0, r4
 800c442:	d10b      	bne.n	800c45c <_free_r+0x6c>
 800c444:	6820      	ldr	r0, [r4, #0]
 800c446:	4401      	add	r1, r0
 800c448:	1850      	adds	r0, r2, r1
 800c44a:	4283      	cmp	r3, r0
 800c44c:	6011      	str	r1, [r2, #0]
 800c44e:	d1e0      	bne.n	800c412 <_free_r+0x22>
 800c450:	6818      	ldr	r0, [r3, #0]
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	6053      	str	r3, [r2, #4]
 800c456:	4408      	add	r0, r1
 800c458:	6010      	str	r0, [r2, #0]
 800c45a:	e7da      	b.n	800c412 <_free_r+0x22>
 800c45c:	d902      	bls.n	800c464 <_free_r+0x74>
 800c45e:	230c      	movs	r3, #12
 800c460:	602b      	str	r3, [r5, #0]
 800c462:	e7d6      	b.n	800c412 <_free_r+0x22>
 800c464:	6820      	ldr	r0, [r4, #0]
 800c466:	1821      	adds	r1, r4, r0
 800c468:	428b      	cmp	r3, r1
 800c46a:	bf04      	itt	eq
 800c46c:	6819      	ldreq	r1, [r3, #0]
 800c46e:	685b      	ldreq	r3, [r3, #4]
 800c470:	6063      	str	r3, [r4, #4]
 800c472:	bf04      	itt	eq
 800c474:	1809      	addeq	r1, r1, r0
 800c476:	6021      	streq	r1, [r4, #0]
 800c478:	6054      	str	r4, [r2, #4]
 800c47a:	e7ca      	b.n	800c412 <_free_r+0x22>
 800c47c:	bd38      	pop	{r3, r4, r5, pc}
 800c47e:	bf00      	nop
 800c480:	200007e4 	.word	0x200007e4

0800c484 <rshift>:
 800c484:	6903      	ldr	r3, [r0, #16]
 800c486:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c48a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c48e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c492:	f100 0414 	add.w	r4, r0, #20
 800c496:	dd45      	ble.n	800c524 <rshift+0xa0>
 800c498:	f011 011f 	ands.w	r1, r1, #31
 800c49c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c4a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c4a4:	d10c      	bne.n	800c4c0 <rshift+0x3c>
 800c4a6:	f100 0710 	add.w	r7, r0, #16
 800c4aa:	4629      	mov	r1, r5
 800c4ac:	42b1      	cmp	r1, r6
 800c4ae:	d334      	bcc.n	800c51a <rshift+0x96>
 800c4b0:	1a9b      	subs	r3, r3, r2
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	1eea      	subs	r2, r5, #3
 800c4b6:	4296      	cmp	r6, r2
 800c4b8:	bf38      	it	cc
 800c4ba:	2300      	movcc	r3, #0
 800c4bc:	4423      	add	r3, r4
 800c4be:	e015      	b.n	800c4ec <rshift+0x68>
 800c4c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c4c4:	f1c1 0820 	rsb	r8, r1, #32
 800c4c8:	40cf      	lsrs	r7, r1
 800c4ca:	f105 0e04 	add.w	lr, r5, #4
 800c4ce:	46a1      	mov	r9, r4
 800c4d0:	4576      	cmp	r6, lr
 800c4d2:	46f4      	mov	ip, lr
 800c4d4:	d815      	bhi.n	800c502 <rshift+0x7e>
 800c4d6:	1a9a      	subs	r2, r3, r2
 800c4d8:	0092      	lsls	r2, r2, #2
 800c4da:	3a04      	subs	r2, #4
 800c4dc:	3501      	adds	r5, #1
 800c4de:	42ae      	cmp	r6, r5
 800c4e0:	bf38      	it	cc
 800c4e2:	2200      	movcc	r2, #0
 800c4e4:	18a3      	adds	r3, r4, r2
 800c4e6:	50a7      	str	r7, [r4, r2]
 800c4e8:	b107      	cbz	r7, 800c4ec <rshift+0x68>
 800c4ea:	3304      	adds	r3, #4
 800c4ec:	1b1a      	subs	r2, r3, r4
 800c4ee:	42a3      	cmp	r3, r4
 800c4f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c4f4:	bf08      	it	eq
 800c4f6:	2300      	moveq	r3, #0
 800c4f8:	6102      	str	r2, [r0, #16]
 800c4fa:	bf08      	it	eq
 800c4fc:	6143      	streq	r3, [r0, #20]
 800c4fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c502:	f8dc c000 	ldr.w	ip, [ip]
 800c506:	fa0c fc08 	lsl.w	ip, ip, r8
 800c50a:	ea4c 0707 	orr.w	r7, ip, r7
 800c50e:	f849 7b04 	str.w	r7, [r9], #4
 800c512:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c516:	40cf      	lsrs	r7, r1
 800c518:	e7da      	b.n	800c4d0 <rshift+0x4c>
 800c51a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c51e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c522:	e7c3      	b.n	800c4ac <rshift+0x28>
 800c524:	4623      	mov	r3, r4
 800c526:	e7e1      	b.n	800c4ec <rshift+0x68>

0800c528 <__hexdig_fun>:
 800c528:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c52c:	2b09      	cmp	r3, #9
 800c52e:	d802      	bhi.n	800c536 <__hexdig_fun+0xe>
 800c530:	3820      	subs	r0, #32
 800c532:	b2c0      	uxtb	r0, r0
 800c534:	4770      	bx	lr
 800c536:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c53a:	2b05      	cmp	r3, #5
 800c53c:	d801      	bhi.n	800c542 <__hexdig_fun+0x1a>
 800c53e:	3847      	subs	r0, #71	@ 0x47
 800c540:	e7f7      	b.n	800c532 <__hexdig_fun+0xa>
 800c542:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c546:	2b05      	cmp	r3, #5
 800c548:	d801      	bhi.n	800c54e <__hexdig_fun+0x26>
 800c54a:	3827      	subs	r0, #39	@ 0x27
 800c54c:	e7f1      	b.n	800c532 <__hexdig_fun+0xa>
 800c54e:	2000      	movs	r0, #0
 800c550:	4770      	bx	lr
	...

0800c554 <__gethex>:
 800c554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c558:	b085      	sub	sp, #20
 800c55a:	468a      	mov	sl, r1
 800c55c:	9302      	str	r3, [sp, #8]
 800c55e:	680b      	ldr	r3, [r1, #0]
 800c560:	9001      	str	r0, [sp, #4]
 800c562:	4690      	mov	r8, r2
 800c564:	1c9c      	adds	r4, r3, #2
 800c566:	46a1      	mov	r9, r4
 800c568:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c56c:	2830      	cmp	r0, #48	@ 0x30
 800c56e:	d0fa      	beq.n	800c566 <__gethex+0x12>
 800c570:	eba9 0303 	sub.w	r3, r9, r3
 800c574:	f1a3 0b02 	sub.w	fp, r3, #2
 800c578:	f7ff ffd6 	bl	800c528 <__hexdig_fun>
 800c57c:	4605      	mov	r5, r0
 800c57e:	2800      	cmp	r0, #0
 800c580:	d168      	bne.n	800c654 <__gethex+0x100>
 800c582:	49a0      	ldr	r1, [pc, #640]	@ (800c804 <__gethex+0x2b0>)
 800c584:	2201      	movs	r2, #1
 800c586:	4648      	mov	r0, r9
 800c588:	f7ff f836 	bl	800b5f8 <strncmp>
 800c58c:	4607      	mov	r7, r0
 800c58e:	2800      	cmp	r0, #0
 800c590:	d167      	bne.n	800c662 <__gethex+0x10e>
 800c592:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c596:	4626      	mov	r6, r4
 800c598:	f7ff ffc6 	bl	800c528 <__hexdig_fun>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	d062      	beq.n	800c666 <__gethex+0x112>
 800c5a0:	4623      	mov	r3, r4
 800c5a2:	7818      	ldrb	r0, [r3, #0]
 800c5a4:	2830      	cmp	r0, #48	@ 0x30
 800c5a6:	4699      	mov	r9, r3
 800c5a8:	f103 0301 	add.w	r3, r3, #1
 800c5ac:	d0f9      	beq.n	800c5a2 <__gethex+0x4e>
 800c5ae:	f7ff ffbb 	bl	800c528 <__hexdig_fun>
 800c5b2:	fab0 f580 	clz	r5, r0
 800c5b6:	096d      	lsrs	r5, r5, #5
 800c5b8:	f04f 0b01 	mov.w	fp, #1
 800c5bc:	464a      	mov	r2, r9
 800c5be:	4616      	mov	r6, r2
 800c5c0:	3201      	adds	r2, #1
 800c5c2:	7830      	ldrb	r0, [r6, #0]
 800c5c4:	f7ff ffb0 	bl	800c528 <__hexdig_fun>
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	d1f8      	bne.n	800c5be <__gethex+0x6a>
 800c5cc:	498d      	ldr	r1, [pc, #564]	@ (800c804 <__gethex+0x2b0>)
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	f7ff f811 	bl	800b5f8 <strncmp>
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	d13f      	bne.n	800c65a <__gethex+0x106>
 800c5da:	b944      	cbnz	r4, 800c5ee <__gethex+0x9a>
 800c5dc:	1c74      	adds	r4, r6, #1
 800c5de:	4622      	mov	r2, r4
 800c5e0:	4616      	mov	r6, r2
 800c5e2:	3201      	adds	r2, #1
 800c5e4:	7830      	ldrb	r0, [r6, #0]
 800c5e6:	f7ff ff9f 	bl	800c528 <__hexdig_fun>
 800c5ea:	2800      	cmp	r0, #0
 800c5ec:	d1f8      	bne.n	800c5e0 <__gethex+0x8c>
 800c5ee:	1ba4      	subs	r4, r4, r6
 800c5f0:	00a7      	lsls	r7, r4, #2
 800c5f2:	7833      	ldrb	r3, [r6, #0]
 800c5f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c5f8:	2b50      	cmp	r3, #80	@ 0x50
 800c5fa:	d13e      	bne.n	800c67a <__gethex+0x126>
 800c5fc:	7873      	ldrb	r3, [r6, #1]
 800c5fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800c600:	d033      	beq.n	800c66a <__gethex+0x116>
 800c602:	2b2d      	cmp	r3, #45	@ 0x2d
 800c604:	d034      	beq.n	800c670 <__gethex+0x11c>
 800c606:	1c71      	adds	r1, r6, #1
 800c608:	2400      	movs	r4, #0
 800c60a:	7808      	ldrb	r0, [r1, #0]
 800c60c:	f7ff ff8c 	bl	800c528 <__hexdig_fun>
 800c610:	1e43      	subs	r3, r0, #1
 800c612:	b2db      	uxtb	r3, r3
 800c614:	2b18      	cmp	r3, #24
 800c616:	d830      	bhi.n	800c67a <__gethex+0x126>
 800c618:	f1a0 0210 	sub.w	r2, r0, #16
 800c61c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c620:	f7ff ff82 	bl	800c528 <__hexdig_fun>
 800c624:	f100 3cff 	add.w	ip, r0, #4294967295
 800c628:	fa5f fc8c 	uxtb.w	ip, ip
 800c62c:	f1bc 0f18 	cmp.w	ip, #24
 800c630:	f04f 030a 	mov.w	r3, #10
 800c634:	d91e      	bls.n	800c674 <__gethex+0x120>
 800c636:	b104      	cbz	r4, 800c63a <__gethex+0xe6>
 800c638:	4252      	negs	r2, r2
 800c63a:	4417      	add	r7, r2
 800c63c:	f8ca 1000 	str.w	r1, [sl]
 800c640:	b1ed      	cbz	r5, 800c67e <__gethex+0x12a>
 800c642:	f1bb 0f00 	cmp.w	fp, #0
 800c646:	bf0c      	ite	eq
 800c648:	2506      	moveq	r5, #6
 800c64a:	2500      	movne	r5, #0
 800c64c:	4628      	mov	r0, r5
 800c64e:	b005      	add	sp, #20
 800c650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c654:	2500      	movs	r5, #0
 800c656:	462c      	mov	r4, r5
 800c658:	e7b0      	b.n	800c5bc <__gethex+0x68>
 800c65a:	2c00      	cmp	r4, #0
 800c65c:	d1c7      	bne.n	800c5ee <__gethex+0x9a>
 800c65e:	4627      	mov	r7, r4
 800c660:	e7c7      	b.n	800c5f2 <__gethex+0x9e>
 800c662:	464e      	mov	r6, r9
 800c664:	462f      	mov	r7, r5
 800c666:	2501      	movs	r5, #1
 800c668:	e7c3      	b.n	800c5f2 <__gethex+0x9e>
 800c66a:	2400      	movs	r4, #0
 800c66c:	1cb1      	adds	r1, r6, #2
 800c66e:	e7cc      	b.n	800c60a <__gethex+0xb6>
 800c670:	2401      	movs	r4, #1
 800c672:	e7fb      	b.n	800c66c <__gethex+0x118>
 800c674:	fb03 0002 	mla	r0, r3, r2, r0
 800c678:	e7ce      	b.n	800c618 <__gethex+0xc4>
 800c67a:	4631      	mov	r1, r6
 800c67c:	e7de      	b.n	800c63c <__gethex+0xe8>
 800c67e:	eba6 0309 	sub.w	r3, r6, r9
 800c682:	3b01      	subs	r3, #1
 800c684:	4629      	mov	r1, r5
 800c686:	2b07      	cmp	r3, #7
 800c688:	dc0a      	bgt.n	800c6a0 <__gethex+0x14c>
 800c68a:	9801      	ldr	r0, [sp, #4]
 800c68c:	f000 fafc 	bl	800cc88 <_Balloc>
 800c690:	4604      	mov	r4, r0
 800c692:	b940      	cbnz	r0, 800c6a6 <__gethex+0x152>
 800c694:	4b5c      	ldr	r3, [pc, #368]	@ (800c808 <__gethex+0x2b4>)
 800c696:	4602      	mov	r2, r0
 800c698:	21e4      	movs	r1, #228	@ 0xe4
 800c69a:	485c      	ldr	r0, [pc, #368]	@ (800c80c <__gethex+0x2b8>)
 800c69c:	f001 fc22 	bl	800dee4 <__assert_func>
 800c6a0:	3101      	adds	r1, #1
 800c6a2:	105b      	asrs	r3, r3, #1
 800c6a4:	e7ef      	b.n	800c686 <__gethex+0x132>
 800c6a6:	f100 0a14 	add.w	sl, r0, #20
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	4655      	mov	r5, sl
 800c6ae:	469b      	mov	fp, r3
 800c6b0:	45b1      	cmp	r9, r6
 800c6b2:	d337      	bcc.n	800c724 <__gethex+0x1d0>
 800c6b4:	f845 bb04 	str.w	fp, [r5], #4
 800c6b8:	eba5 050a 	sub.w	r5, r5, sl
 800c6bc:	10ad      	asrs	r5, r5, #2
 800c6be:	6125      	str	r5, [r4, #16]
 800c6c0:	4658      	mov	r0, fp
 800c6c2:	f000 fbd3 	bl	800ce6c <__hi0bits>
 800c6c6:	016d      	lsls	r5, r5, #5
 800c6c8:	f8d8 6000 	ldr.w	r6, [r8]
 800c6cc:	1a2d      	subs	r5, r5, r0
 800c6ce:	42b5      	cmp	r5, r6
 800c6d0:	dd54      	ble.n	800c77c <__gethex+0x228>
 800c6d2:	1bad      	subs	r5, r5, r6
 800c6d4:	4629      	mov	r1, r5
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	f000 ff67 	bl	800d5aa <__any_on>
 800c6dc:	4681      	mov	r9, r0
 800c6de:	b178      	cbz	r0, 800c700 <__gethex+0x1ac>
 800c6e0:	1e6b      	subs	r3, r5, #1
 800c6e2:	1159      	asrs	r1, r3, #5
 800c6e4:	f003 021f 	and.w	r2, r3, #31
 800c6e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c6ec:	f04f 0901 	mov.w	r9, #1
 800c6f0:	fa09 f202 	lsl.w	r2, r9, r2
 800c6f4:	420a      	tst	r2, r1
 800c6f6:	d003      	beq.n	800c700 <__gethex+0x1ac>
 800c6f8:	454b      	cmp	r3, r9
 800c6fa:	dc36      	bgt.n	800c76a <__gethex+0x216>
 800c6fc:	f04f 0902 	mov.w	r9, #2
 800c700:	4629      	mov	r1, r5
 800c702:	4620      	mov	r0, r4
 800c704:	f7ff febe 	bl	800c484 <rshift>
 800c708:	442f      	add	r7, r5
 800c70a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c70e:	42bb      	cmp	r3, r7
 800c710:	da42      	bge.n	800c798 <__gethex+0x244>
 800c712:	9801      	ldr	r0, [sp, #4]
 800c714:	4621      	mov	r1, r4
 800c716:	f000 faf7 	bl	800cd08 <_Bfree>
 800c71a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c71c:	2300      	movs	r3, #0
 800c71e:	6013      	str	r3, [r2, #0]
 800c720:	25a3      	movs	r5, #163	@ 0xa3
 800c722:	e793      	b.n	800c64c <__gethex+0xf8>
 800c724:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c728:	2a2e      	cmp	r2, #46	@ 0x2e
 800c72a:	d012      	beq.n	800c752 <__gethex+0x1fe>
 800c72c:	2b20      	cmp	r3, #32
 800c72e:	d104      	bne.n	800c73a <__gethex+0x1e6>
 800c730:	f845 bb04 	str.w	fp, [r5], #4
 800c734:	f04f 0b00 	mov.w	fp, #0
 800c738:	465b      	mov	r3, fp
 800c73a:	7830      	ldrb	r0, [r6, #0]
 800c73c:	9303      	str	r3, [sp, #12]
 800c73e:	f7ff fef3 	bl	800c528 <__hexdig_fun>
 800c742:	9b03      	ldr	r3, [sp, #12]
 800c744:	f000 000f 	and.w	r0, r0, #15
 800c748:	4098      	lsls	r0, r3
 800c74a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c74e:	3304      	adds	r3, #4
 800c750:	e7ae      	b.n	800c6b0 <__gethex+0x15c>
 800c752:	45b1      	cmp	r9, r6
 800c754:	d8ea      	bhi.n	800c72c <__gethex+0x1d8>
 800c756:	492b      	ldr	r1, [pc, #172]	@ (800c804 <__gethex+0x2b0>)
 800c758:	9303      	str	r3, [sp, #12]
 800c75a:	2201      	movs	r2, #1
 800c75c:	4630      	mov	r0, r6
 800c75e:	f7fe ff4b 	bl	800b5f8 <strncmp>
 800c762:	9b03      	ldr	r3, [sp, #12]
 800c764:	2800      	cmp	r0, #0
 800c766:	d1e1      	bne.n	800c72c <__gethex+0x1d8>
 800c768:	e7a2      	b.n	800c6b0 <__gethex+0x15c>
 800c76a:	1ea9      	subs	r1, r5, #2
 800c76c:	4620      	mov	r0, r4
 800c76e:	f000 ff1c 	bl	800d5aa <__any_on>
 800c772:	2800      	cmp	r0, #0
 800c774:	d0c2      	beq.n	800c6fc <__gethex+0x1a8>
 800c776:	f04f 0903 	mov.w	r9, #3
 800c77a:	e7c1      	b.n	800c700 <__gethex+0x1ac>
 800c77c:	da09      	bge.n	800c792 <__gethex+0x23e>
 800c77e:	1b75      	subs	r5, r6, r5
 800c780:	4621      	mov	r1, r4
 800c782:	9801      	ldr	r0, [sp, #4]
 800c784:	462a      	mov	r2, r5
 800c786:	f000 fcd7 	bl	800d138 <__lshift>
 800c78a:	1b7f      	subs	r7, r7, r5
 800c78c:	4604      	mov	r4, r0
 800c78e:	f100 0a14 	add.w	sl, r0, #20
 800c792:	f04f 0900 	mov.w	r9, #0
 800c796:	e7b8      	b.n	800c70a <__gethex+0x1b6>
 800c798:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c79c:	42bd      	cmp	r5, r7
 800c79e:	dd6f      	ble.n	800c880 <__gethex+0x32c>
 800c7a0:	1bed      	subs	r5, r5, r7
 800c7a2:	42ae      	cmp	r6, r5
 800c7a4:	dc34      	bgt.n	800c810 <__gethex+0x2bc>
 800c7a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c7aa:	2b02      	cmp	r3, #2
 800c7ac:	d022      	beq.n	800c7f4 <__gethex+0x2a0>
 800c7ae:	2b03      	cmp	r3, #3
 800c7b0:	d024      	beq.n	800c7fc <__gethex+0x2a8>
 800c7b2:	2b01      	cmp	r3, #1
 800c7b4:	d115      	bne.n	800c7e2 <__gethex+0x28e>
 800c7b6:	42ae      	cmp	r6, r5
 800c7b8:	d113      	bne.n	800c7e2 <__gethex+0x28e>
 800c7ba:	2e01      	cmp	r6, #1
 800c7bc:	d10b      	bne.n	800c7d6 <__gethex+0x282>
 800c7be:	9a02      	ldr	r2, [sp, #8]
 800c7c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7c4:	6013      	str	r3, [r2, #0]
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	6123      	str	r3, [r4, #16]
 800c7ca:	f8ca 3000 	str.w	r3, [sl]
 800c7ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7d0:	2562      	movs	r5, #98	@ 0x62
 800c7d2:	601c      	str	r4, [r3, #0]
 800c7d4:	e73a      	b.n	800c64c <__gethex+0xf8>
 800c7d6:	1e71      	subs	r1, r6, #1
 800c7d8:	4620      	mov	r0, r4
 800c7da:	f000 fee6 	bl	800d5aa <__any_on>
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	d1ed      	bne.n	800c7be <__gethex+0x26a>
 800c7e2:	9801      	ldr	r0, [sp, #4]
 800c7e4:	4621      	mov	r1, r4
 800c7e6:	f000 fa8f 	bl	800cd08 <_Bfree>
 800c7ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	6013      	str	r3, [r2, #0]
 800c7f0:	2550      	movs	r5, #80	@ 0x50
 800c7f2:	e72b      	b.n	800c64c <__gethex+0xf8>
 800c7f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d1f3      	bne.n	800c7e2 <__gethex+0x28e>
 800c7fa:	e7e0      	b.n	800c7be <__gethex+0x26a>
 800c7fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d1dd      	bne.n	800c7be <__gethex+0x26a>
 800c802:	e7ee      	b.n	800c7e2 <__gethex+0x28e>
 800c804:	0800e45b 	.word	0x0800e45b
 800c808:	0800e56d 	.word	0x0800e56d
 800c80c:	0800e57e 	.word	0x0800e57e
 800c810:	1e6f      	subs	r7, r5, #1
 800c812:	f1b9 0f00 	cmp.w	r9, #0
 800c816:	d130      	bne.n	800c87a <__gethex+0x326>
 800c818:	b127      	cbz	r7, 800c824 <__gethex+0x2d0>
 800c81a:	4639      	mov	r1, r7
 800c81c:	4620      	mov	r0, r4
 800c81e:	f000 fec4 	bl	800d5aa <__any_on>
 800c822:	4681      	mov	r9, r0
 800c824:	117a      	asrs	r2, r7, #5
 800c826:	2301      	movs	r3, #1
 800c828:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c82c:	f007 071f 	and.w	r7, r7, #31
 800c830:	40bb      	lsls	r3, r7
 800c832:	4213      	tst	r3, r2
 800c834:	4629      	mov	r1, r5
 800c836:	4620      	mov	r0, r4
 800c838:	bf18      	it	ne
 800c83a:	f049 0902 	orrne.w	r9, r9, #2
 800c83e:	f7ff fe21 	bl	800c484 <rshift>
 800c842:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c846:	1b76      	subs	r6, r6, r5
 800c848:	2502      	movs	r5, #2
 800c84a:	f1b9 0f00 	cmp.w	r9, #0
 800c84e:	d047      	beq.n	800c8e0 <__gethex+0x38c>
 800c850:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c854:	2b02      	cmp	r3, #2
 800c856:	d015      	beq.n	800c884 <__gethex+0x330>
 800c858:	2b03      	cmp	r3, #3
 800c85a:	d017      	beq.n	800c88c <__gethex+0x338>
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d109      	bne.n	800c874 <__gethex+0x320>
 800c860:	f019 0f02 	tst.w	r9, #2
 800c864:	d006      	beq.n	800c874 <__gethex+0x320>
 800c866:	f8da 3000 	ldr.w	r3, [sl]
 800c86a:	ea49 0903 	orr.w	r9, r9, r3
 800c86e:	f019 0f01 	tst.w	r9, #1
 800c872:	d10e      	bne.n	800c892 <__gethex+0x33e>
 800c874:	f045 0510 	orr.w	r5, r5, #16
 800c878:	e032      	b.n	800c8e0 <__gethex+0x38c>
 800c87a:	f04f 0901 	mov.w	r9, #1
 800c87e:	e7d1      	b.n	800c824 <__gethex+0x2d0>
 800c880:	2501      	movs	r5, #1
 800c882:	e7e2      	b.n	800c84a <__gethex+0x2f6>
 800c884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c886:	f1c3 0301 	rsb	r3, r3, #1
 800c88a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c88c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d0f0      	beq.n	800c874 <__gethex+0x320>
 800c892:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c896:	f104 0314 	add.w	r3, r4, #20
 800c89a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c89e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c8a2:	f04f 0c00 	mov.w	ip, #0
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c8b0:	d01b      	beq.n	800c8ea <__gethex+0x396>
 800c8b2:	3201      	adds	r2, #1
 800c8b4:	6002      	str	r2, [r0, #0]
 800c8b6:	2d02      	cmp	r5, #2
 800c8b8:	f104 0314 	add.w	r3, r4, #20
 800c8bc:	d13c      	bne.n	800c938 <__gethex+0x3e4>
 800c8be:	f8d8 2000 	ldr.w	r2, [r8]
 800c8c2:	3a01      	subs	r2, #1
 800c8c4:	42b2      	cmp	r2, r6
 800c8c6:	d109      	bne.n	800c8dc <__gethex+0x388>
 800c8c8:	1171      	asrs	r1, r6, #5
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c8d0:	f006 061f 	and.w	r6, r6, #31
 800c8d4:	fa02 f606 	lsl.w	r6, r2, r6
 800c8d8:	421e      	tst	r6, r3
 800c8da:	d13a      	bne.n	800c952 <__gethex+0x3fe>
 800c8dc:	f045 0520 	orr.w	r5, r5, #32
 800c8e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8e2:	601c      	str	r4, [r3, #0]
 800c8e4:	9b02      	ldr	r3, [sp, #8]
 800c8e6:	601f      	str	r7, [r3, #0]
 800c8e8:	e6b0      	b.n	800c64c <__gethex+0xf8>
 800c8ea:	4299      	cmp	r1, r3
 800c8ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800c8f0:	d8d9      	bhi.n	800c8a6 <__gethex+0x352>
 800c8f2:	68a3      	ldr	r3, [r4, #8]
 800c8f4:	459b      	cmp	fp, r3
 800c8f6:	db17      	blt.n	800c928 <__gethex+0x3d4>
 800c8f8:	6861      	ldr	r1, [r4, #4]
 800c8fa:	9801      	ldr	r0, [sp, #4]
 800c8fc:	3101      	adds	r1, #1
 800c8fe:	f000 f9c3 	bl	800cc88 <_Balloc>
 800c902:	4681      	mov	r9, r0
 800c904:	b918      	cbnz	r0, 800c90e <__gethex+0x3ba>
 800c906:	4b1a      	ldr	r3, [pc, #104]	@ (800c970 <__gethex+0x41c>)
 800c908:	4602      	mov	r2, r0
 800c90a:	2184      	movs	r1, #132	@ 0x84
 800c90c:	e6c5      	b.n	800c69a <__gethex+0x146>
 800c90e:	6922      	ldr	r2, [r4, #16]
 800c910:	3202      	adds	r2, #2
 800c912:	f104 010c 	add.w	r1, r4, #12
 800c916:	0092      	lsls	r2, r2, #2
 800c918:	300c      	adds	r0, #12
 800c91a:	f7fe fefe 	bl	800b71a <memcpy>
 800c91e:	4621      	mov	r1, r4
 800c920:	9801      	ldr	r0, [sp, #4]
 800c922:	f000 f9f1 	bl	800cd08 <_Bfree>
 800c926:	464c      	mov	r4, r9
 800c928:	6923      	ldr	r3, [r4, #16]
 800c92a:	1c5a      	adds	r2, r3, #1
 800c92c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c930:	6122      	str	r2, [r4, #16]
 800c932:	2201      	movs	r2, #1
 800c934:	615a      	str	r2, [r3, #20]
 800c936:	e7be      	b.n	800c8b6 <__gethex+0x362>
 800c938:	6922      	ldr	r2, [r4, #16]
 800c93a:	455a      	cmp	r2, fp
 800c93c:	dd0b      	ble.n	800c956 <__gethex+0x402>
 800c93e:	2101      	movs	r1, #1
 800c940:	4620      	mov	r0, r4
 800c942:	f7ff fd9f 	bl	800c484 <rshift>
 800c946:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c94a:	3701      	adds	r7, #1
 800c94c:	42bb      	cmp	r3, r7
 800c94e:	f6ff aee0 	blt.w	800c712 <__gethex+0x1be>
 800c952:	2501      	movs	r5, #1
 800c954:	e7c2      	b.n	800c8dc <__gethex+0x388>
 800c956:	f016 061f 	ands.w	r6, r6, #31
 800c95a:	d0fa      	beq.n	800c952 <__gethex+0x3fe>
 800c95c:	4453      	add	r3, sl
 800c95e:	f1c6 0620 	rsb	r6, r6, #32
 800c962:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c966:	f000 fa81 	bl	800ce6c <__hi0bits>
 800c96a:	42b0      	cmp	r0, r6
 800c96c:	dbe7      	blt.n	800c93e <__gethex+0x3ea>
 800c96e:	e7f0      	b.n	800c952 <__gethex+0x3fe>
 800c970:	0800e56d 	.word	0x0800e56d

0800c974 <L_shift>:
 800c974:	f1c2 0208 	rsb	r2, r2, #8
 800c978:	0092      	lsls	r2, r2, #2
 800c97a:	b570      	push	{r4, r5, r6, lr}
 800c97c:	f1c2 0620 	rsb	r6, r2, #32
 800c980:	6843      	ldr	r3, [r0, #4]
 800c982:	6804      	ldr	r4, [r0, #0]
 800c984:	fa03 f506 	lsl.w	r5, r3, r6
 800c988:	432c      	orrs	r4, r5
 800c98a:	40d3      	lsrs	r3, r2
 800c98c:	6004      	str	r4, [r0, #0]
 800c98e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c992:	4288      	cmp	r0, r1
 800c994:	d3f4      	bcc.n	800c980 <L_shift+0xc>
 800c996:	bd70      	pop	{r4, r5, r6, pc}

0800c998 <__match>:
 800c998:	b530      	push	{r4, r5, lr}
 800c99a:	6803      	ldr	r3, [r0, #0]
 800c99c:	3301      	adds	r3, #1
 800c99e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9a2:	b914      	cbnz	r4, 800c9aa <__match+0x12>
 800c9a4:	6003      	str	r3, [r0, #0]
 800c9a6:	2001      	movs	r0, #1
 800c9a8:	bd30      	pop	{r4, r5, pc}
 800c9aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c9b2:	2d19      	cmp	r5, #25
 800c9b4:	bf98      	it	ls
 800c9b6:	3220      	addls	r2, #32
 800c9b8:	42a2      	cmp	r2, r4
 800c9ba:	d0f0      	beq.n	800c99e <__match+0x6>
 800c9bc:	2000      	movs	r0, #0
 800c9be:	e7f3      	b.n	800c9a8 <__match+0x10>

0800c9c0 <__hexnan>:
 800c9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c4:	680b      	ldr	r3, [r1, #0]
 800c9c6:	6801      	ldr	r1, [r0, #0]
 800c9c8:	115e      	asrs	r6, r3, #5
 800c9ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c9ce:	f013 031f 	ands.w	r3, r3, #31
 800c9d2:	b087      	sub	sp, #28
 800c9d4:	bf18      	it	ne
 800c9d6:	3604      	addne	r6, #4
 800c9d8:	2500      	movs	r5, #0
 800c9da:	1f37      	subs	r7, r6, #4
 800c9dc:	4682      	mov	sl, r0
 800c9de:	4690      	mov	r8, r2
 800c9e0:	9301      	str	r3, [sp, #4]
 800c9e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c9e6:	46b9      	mov	r9, r7
 800c9e8:	463c      	mov	r4, r7
 800c9ea:	9502      	str	r5, [sp, #8]
 800c9ec:	46ab      	mov	fp, r5
 800c9ee:	784a      	ldrb	r2, [r1, #1]
 800c9f0:	1c4b      	adds	r3, r1, #1
 800c9f2:	9303      	str	r3, [sp, #12]
 800c9f4:	b342      	cbz	r2, 800ca48 <__hexnan+0x88>
 800c9f6:	4610      	mov	r0, r2
 800c9f8:	9105      	str	r1, [sp, #20]
 800c9fa:	9204      	str	r2, [sp, #16]
 800c9fc:	f7ff fd94 	bl	800c528 <__hexdig_fun>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	d151      	bne.n	800caa8 <__hexnan+0xe8>
 800ca04:	9a04      	ldr	r2, [sp, #16]
 800ca06:	9905      	ldr	r1, [sp, #20]
 800ca08:	2a20      	cmp	r2, #32
 800ca0a:	d818      	bhi.n	800ca3e <__hexnan+0x7e>
 800ca0c:	9b02      	ldr	r3, [sp, #8]
 800ca0e:	459b      	cmp	fp, r3
 800ca10:	dd13      	ble.n	800ca3a <__hexnan+0x7a>
 800ca12:	454c      	cmp	r4, r9
 800ca14:	d206      	bcs.n	800ca24 <__hexnan+0x64>
 800ca16:	2d07      	cmp	r5, #7
 800ca18:	dc04      	bgt.n	800ca24 <__hexnan+0x64>
 800ca1a:	462a      	mov	r2, r5
 800ca1c:	4649      	mov	r1, r9
 800ca1e:	4620      	mov	r0, r4
 800ca20:	f7ff ffa8 	bl	800c974 <L_shift>
 800ca24:	4544      	cmp	r4, r8
 800ca26:	d952      	bls.n	800cace <__hexnan+0x10e>
 800ca28:	2300      	movs	r3, #0
 800ca2a:	f1a4 0904 	sub.w	r9, r4, #4
 800ca2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca32:	f8cd b008 	str.w	fp, [sp, #8]
 800ca36:	464c      	mov	r4, r9
 800ca38:	461d      	mov	r5, r3
 800ca3a:	9903      	ldr	r1, [sp, #12]
 800ca3c:	e7d7      	b.n	800c9ee <__hexnan+0x2e>
 800ca3e:	2a29      	cmp	r2, #41	@ 0x29
 800ca40:	d157      	bne.n	800caf2 <__hexnan+0x132>
 800ca42:	3102      	adds	r1, #2
 800ca44:	f8ca 1000 	str.w	r1, [sl]
 800ca48:	f1bb 0f00 	cmp.w	fp, #0
 800ca4c:	d051      	beq.n	800caf2 <__hexnan+0x132>
 800ca4e:	454c      	cmp	r4, r9
 800ca50:	d206      	bcs.n	800ca60 <__hexnan+0xa0>
 800ca52:	2d07      	cmp	r5, #7
 800ca54:	dc04      	bgt.n	800ca60 <__hexnan+0xa0>
 800ca56:	462a      	mov	r2, r5
 800ca58:	4649      	mov	r1, r9
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	f7ff ff8a 	bl	800c974 <L_shift>
 800ca60:	4544      	cmp	r4, r8
 800ca62:	d936      	bls.n	800cad2 <__hexnan+0x112>
 800ca64:	f1a8 0204 	sub.w	r2, r8, #4
 800ca68:	4623      	mov	r3, r4
 800ca6a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ca6e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ca72:	429f      	cmp	r7, r3
 800ca74:	d2f9      	bcs.n	800ca6a <__hexnan+0xaa>
 800ca76:	1b3b      	subs	r3, r7, r4
 800ca78:	f023 0303 	bic.w	r3, r3, #3
 800ca7c:	3304      	adds	r3, #4
 800ca7e:	3401      	adds	r4, #1
 800ca80:	3e03      	subs	r6, #3
 800ca82:	42b4      	cmp	r4, r6
 800ca84:	bf88      	it	hi
 800ca86:	2304      	movhi	r3, #4
 800ca88:	4443      	add	r3, r8
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f843 2b04 	str.w	r2, [r3], #4
 800ca90:	429f      	cmp	r7, r3
 800ca92:	d2fb      	bcs.n	800ca8c <__hexnan+0xcc>
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	b91b      	cbnz	r3, 800caa0 <__hexnan+0xe0>
 800ca98:	4547      	cmp	r7, r8
 800ca9a:	d128      	bne.n	800caee <__hexnan+0x12e>
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	603b      	str	r3, [r7, #0]
 800caa0:	2005      	movs	r0, #5
 800caa2:	b007      	add	sp, #28
 800caa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa8:	3501      	adds	r5, #1
 800caaa:	2d08      	cmp	r5, #8
 800caac:	f10b 0b01 	add.w	fp, fp, #1
 800cab0:	dd06      	ble.n	800cac0 <__hexnan+0x100>
 800cab2:	4544      	cmp	r4, r8
 800cab4:	d9c1      	bls.n	800ca3a <__hexnan+0x7a>
 800cab6:	2300      	movs	r3, #0
 800cab8:	f844 3c04 	str.w	r3, [r4, #-4]
 800cabc:	2501      	movs	r5, #1
 800cabe:	3c04      	subs	r4, #4
 800cac0:	6822      	ldr	r2, [r4, #0]
 800cac2:	f000 000f 	and.w	r0, r0, #15
 800cac6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800caca:	6020      	str	r0, [r4, #0]
 800cacc:	e7b5      	b.n	800ca3a <__hexnan+0x7a>
 800cace:	2508      	movs	r5, #8
 800cad0:	e7b3      	b.n	800ca3a <__hexnan+0x7a>
 800cad2:	9b01      	ldr	r3, [sp, #4]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d0dd      	beq.n	800ca94 <__hexnan+0xd4>
 800cad8:	f1c3 0320 	rsb	r3, r3, #32
 800cadc:	f04f 32ff 	mov.w	r2, #4294967295
 800cae0:	40da      	lsrs	r2, r3
 800cae2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cae6:	4013      	ands	r3, r2
 800cae8:	f846 3c04 	str.w	r3, [r6, #-4]
 800caec:	e7d2      	b.n	800ca94 <__hexnan+0xd4>
 800caee:	3f04      	subs	r7, #4
 800caf0:	e7d0      	b.n	800ca94 <__hexnan+0xd4>
 800caf2:	2004      	movs	r0, #4
 800caf4:	e7d5      	b.n	800caa2 <__hexnan+0xe2>
	...

0800caf8 <malloc>:
 800caf8:	4b02      	ldr	r3, [pc, #8]	@ (800cb04 <malloc+0xc>)
 800cafa:	4601      	mov	r1, r0
 800cafc:	6818      	ldr	r0, [r3, #0]
 800cafe:	f000 b825 	b.w	800cb4c <_malloc_r>
 800cb02:	bf00      	nop
 800cb04:	20000184 	.word	0x20000184

0800cb08 <sbrk_aligned>:
 800cb08:	b570      	push	{r4, r5, r6, lr}
 800cb0a:	4e0f      	ldr	r6, [pc, #60]	@ (800cb48 <sbrk_aligned+0x40>)
 800cb0c:	460c      	mov	r4, r1
 800cb0e:	6831      	ldr	r1, [r6, #0]
 800cb10:	4605      	mov	r5, r0
 800cb12:	b911      	cbnz	r1, 800cb1a <sbrk_aligned+0x12>
 800cb14:	f001 f9d6 	bl	800dec4 <_sbrk_r>
 800cb18:	6030      	str	r0, [r6, #0]
 800cb1a:	4621      	mov	r1, r4
 800cb1c:	4628      	mov	r0, r5
 800cb1e:	f001 f9d1 	bl	800dec4 <_sbrk_r>
 800cb22:	1c43      	adds	r3, r0, #1
 800cb24:	d103      	bne.n	800cb2e <sbrk_aligned+0x26>
 800cb26:	f04f 34ff 	mov.w	r4, #4294967295
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	bd70      	pop	{r4, r5, r6, pc}
 800cb2e:	1cc4      	adds	r4, r0, #3
 800cb30:	f024 0403 	bic.w	r4, r4, #3
 800cb34:	42a0      	cmp	r0, r4
 800cb36:	d0f8      	beq.n	800cb2a <sbrk_aligned+0x22>
 800cb38:	1a21      	subs	r1, r4, r0
 800cb3a:	4628      	mov	r0, r5
 800cb3c:	f001 f9c2 	bl	800dec4 <_sbrk_r>
 800cb40:	3001      	adds	r0, #1
 800cb42:	d1f2      	bne.n	800cb2a <sbrk_aligned+0x22>
 800cb44:	e7ef      	b.n	800cb26 <sbrk_aligned+0x1e>
 800cb46:	bf00      	nop
 800cb48:	200007e0 	.word	0x200007e0

0800cb4c <_malloc_r>:
 800cb4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb50:	1ccd      	adds	r5, r1, #3
 800cb52:	f025 0503 	bic.w	r5, r5, #3
 800cb56:	3508      	adds	r5, #8
 800cb58:	2d0c      	cmp	r5, #12
 800cb5a:	bf38      	it	cc
 800cb5c:	250c      	movcc	r5, #12
 800cb5e:	2d00      	cmp	r5, #0
 800cb60:	4606      	mov	r6, r0
 800cb62:	db01      	blt.n	800cb68 <_malloc_r+0x1c>
 800cb64:	42a9      	cmp	r1, r5
 800cb66:	d904      	bls.n	800cb72 <_malloc_r+0x26>
 800cb68:	230c      	movs	r3, #12
 800cb6a:	6033      	str	r3, [r6, #0]
 800cb6c:	2000      	movs	r0, #0
 800cb6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc48 <_malloc_r+0xfc>
 800cb76:	f000 f87b 	bl	800cc70 <__malloc_lock>
 800cb7a:	f8d8 3000 	ldr.w	r3, [r8]
 800cb7e:	461c      	mov	r4, r3
 800cb80:	bb44      	cbnz	r4, 800cbd4 <_malloc_r+0x88>
 800cb82:	4629      	mov	r1, r5
 800cb84:	4630      	mov	r0, r6
 800cb86:	f7ff ffbf 	bl	800cb08 <sbrk_aligned>
 800cb8a:	1c43      	adds	r3, r0, #1
 800cb8c:	4604      	mov	r4, r0
 800cb8e:	d158      	bne.n	800cc42 <_malloc_r+0xf6>
 800cb90:	f8d8 4000 	ldr.w	r4, [r8]
 800cb94:	4627      	mov	r7, r4
 800cb96:	2f00      	cmp	r7, #0
 800cb98:	d143      	bne.n	800cc22 <_malloc_r+0xd6>
 800cb9a:	2c00      	cmp	r4, #0
 800cb9c:	d04b      	beq.n	800cc36 <_malloc_r+0xea>
 800cb9e:	6823      	ldr	r3, [r4, #0]
 800cba0:	4639      	mov	r1, r7
 800cba2:	4630      	mov	r0, r6
 800cba4:	eb04 0903 	add.w	r9, r4, r3
 800cba8:	f001 f98c 	bl	800dec4 <_sbrk_r>
 800cbac:	4581      	cmp	r9, r0
 800cbae:	d142      	bne.n	800cc36 <_malloc_r+0xea>
 800cbb0:	6821      	ldr	r1, [r4, #0]
 800cbb2:	1a6d      	subs	r5, r5, r1
 800cbb4:	4629      	mov	r1, r5
 800cbb6:	4630      	mov	r0, r6
 800cbb8:	f7ff ffa6 	bl	800cb08 <sbrk_aligned>
 800cbbc:	3001      	adds	r0, #1
 800cbbe:	d03a      	beq.n	800cc36 <_malloc_r+0xea>
 800cbc0:	6823      	ldr	r3, [r4, #0]
 800cbc2:	442b      	add	r3, r5
 800cbc4:	6023      	str	r3, [r4, #0]
 800cbc6:	f8d8 3000 	ldr.w	r3, [r8]
 800cbca:	685a      	ldr	r2, [r3, #4]
 800cbcc:	bb62      	cbnz	r2, 800cc28 <_malloc_r+0xdc>
 800cbce:	f8c8 7000 	str.w	r7, [r8]
 800cbd2:	e00f      	b.n	800cbf4 <_malloc_r+0xa8>
 800cbd4:	6822      	ldr	r2, [r4, #0]
 800cbd6:	1b52      	subs	r2, r2, r5
 800cbd8:	d420      	bmi.n	800cc1c <_malloc_r+0xd0>
 800cbda:	2a0b      	cmp	r2, #11
 800cbdc:	d917      	bls.n	800cc0e <_malloc_r+0xc2>
 800cbde:	1961      	adds	r1, r4, r5
 800cbe0:	42a3      	cmp	r3, r4
 800cbe2:	6025      	str	r5, [r4, #0]
 800cbe4:	bf18      	it	ne
 800cbe6:	6059      	strne	r1, [r3, #4]
 800cbe8:	6863      	ldr	r3, [r4, #4]
 800cbea:	bf08      	it	eq
 800cbec:	f8c8 1000 	streq.w	r1, [r8]
 800cbf0:	5162      	str	r2, [r4, r5]
 800cbf2:	604b      	str	r3, [r1, #4]
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	f000 f841 	bl	800cc7c <__malloc_unlock>
 800cbfa:	f104 000b 	add.w	r0, r4, #11
 800cbfe:	1d23      	adds	r3, r4, #4
 800cc00:	f020 0007 	bic.w	r0, r0, #7
 800cc04:	1ac2      	subs	r2, r0, r3
 800cc06:	bf1c      	itt	ne
 800cc08:	1a1b      	subne	r3, r3, r0
 800cc0a:	50a3      	strne	r3, [r4, r2]
 800cc0c:	e7af      	b.n	800cb6e <_malloc_r+0x22>
 800cc0e:	6862      	ldr	r2, [r4, #4]
 800cc10:	42a3      	cmp	r3, r4
 800cc12:	bf0c      	ite	eq
 800cc14:	f8c8 2000 	streq.w	r2, [r8]
 800cc18:	605a      	strne	r2, [r3, #4]
 800cc1a:	e7eb      	b.n	800cbf4 <_malloc_r+0xa8>
 800cc1c:	4623      	mov	r3, r4
 800cc1e:	6864      	ldr	r4, [r4, #4]
 800cc20:	e7ae      	b.n	800cb80 <_malloc_r+0x34>
 800cc22:	463c      	mov	r4, r7
 800cc24:	687f      	ldr	r7, [r7, #4]
 800cc26:	e7b6      	b.n	800cb96 <_malloc_r+0x4a>
 800cc28:	461a      	mov	r2, r3
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	42a3      	cmp	r3, r4
 800cc2e:	d1fb      	bne.n	800cc28 <_malloc_r+0xdc>
 800cc30:	2300      	movs	r3, #0
 800cc32:	6053      	str	r3, [r2, #4]
 800cc34:	e7de      	b.n	800cbf4 <_malloc_r+0xa8>
 800cc36:	230c      	movs	r3, #12
 800cc38:	6033      	str	r3, [r6, #0]
 800cc3a:	4630      	mov	r0, r6
 800cc3c:	f000 f81e 	bl	800cc7c <__malloc_unlock>
 800cc40:	e794      	b.n	800cb6c <_malloc_r+0x20>
 800cc42:	6005      	str	r5, [r0, #0]
 800cc44:	e7d6      	b.n	800cbf4 <_malloc_r+0xa8>
 800cc46:	bf00      	nop
 800cc48:	200007e4 	.word	0x200007e4

0800cc4c <__ascii_mbtowc>:
 800cc4c:	b082      	sub	sp, #8
 800cc4e:	b901      	cbnz	r1, 800cc52 <__ascii_mbtowc+0x6>
 800cc50:	a901      	add	r1, sp, #4
 800cc52:	b142      	cbz	r2, 800cc66 <__ascii_mbtowc+0x1a>
 800cc54:	b14b      	cbz	r3, 800cc6a <__ascii_mbtowc+0x1e>
 800cc56:	7813      	ldrb	r3, [r2, #0]
 800cc58:	600b      	str	r3, [r1, #0]
 800cc5a:	7812      	ldrb	r2, [r2, #0]
 800cc5c:	1e10      	subs	r0, r2, #0
 800cc5e:	bf18      	it	ne
 800cc60:	2001      	movne	r0, #1
 800cc62:	b002      	add	sp, #8
 800cc64:	4770      	bx	lr
 800cc66:	4610      	mov	r0, r2
 800cc68:	e7fb      	b.n	800cc62 <__ascii_mbtowc+0x16>
 800cc6a:	f06f 0001 	mvn.w	r0, #1
 800cc6e:	e7f8      	b.n	800cc62 <__ascii_mbtowc+0x16>

0800cc70 <__malloc_lock>:
 800cc70:	4801      	ldr	r0, [pc, #4]	@ (800cc78 <__malloc_lock+0x8>)
 800cc72:	f7fe bd48 	b.w	800b706 <__retarget_lock_acquire_recursive>
 800cc76:	bf00      	nop
 800cc78:	200007dc 	.word	0x200007dc

0800cc7c <__malloc_unlock>:
 800cc7c:	4801      	ldr	r0, [pc, #4]	@ (800cc84 <__malloc_unlock+0x8>)
 800cc7e:	f7fe bd43 	b.w	800b708 <__retarget_lock_release_recursive>
 800cc82:	bf00      	nop
 800cc84:	200007dc 	.word	0x200007dc

0800cc88 <_Balloc>:
 800cc88:	b570      	push	{r4, r5, r6, lr}
 800cc8a:	69c6      	ldr	r6, [r0, #28]
 800cc8c:	4604      	mov	r4, r0
 800cc8e:	460d      	mov	r5, r1
 800cc90:	b976      	cbnz	r6, 800ccb0 <_Balloc+0x28>
 800cc92:	2010      	movs	r0, #16
 800cc94:	f7ff ff30 	bl	800caf8 <malloc>
 800cc98:	4602      	mov	r2, r0
 800cc9a:	61e0      	str	r0, [r4, #28]
 800cc9c:	b920      	cbnz	r0, 800cca8 <_Balloc+0x20>
 800cc9e:	4b18      	ldr	r3, [pc, #96]	@ (800cd00 <_Balloc+0x78>)
 800cca0:	4818      	ldr	r0, [pc, #96]	@ (800cd04 <_Balloc+0x7c>)
 800cca2:	216b      	movs	r1, #107	@ 0x6b
 800cca4:	f001 f91e 	bl	800dee4 <__assert_func>
 800cca8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccac:	6006      	str	r6, [r0, #0]
 800ccae:	60c6      	str	r6, [r0, #12]
 800ccb0:	69e6      	ldr	r6, [r4, #28]
 800ccb2:	68f3      	ldr	r3, [r6, #12]
 800ccb4:	b183      	cbz	r3, 800ccd8 <_Balloc+0x50>
 800ccb6:	69e3      	ldr	r3, [r4, #28]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ccbe:	b9b8      	cbnz	r0, 800ccf0 <_Balloc+0x68>
 800ccc0:	2101      	movs	r1, #1
 800ccc2:	fa01 f605 	lsl.w	r6, r1, r5
 800ccc6:	1d72      	adds	r2, r6, #5
 800ccc8:	0092      	lsls	r2, r2, #2
 800ccca:	4620      	mov	r0, r4
 800cccc:	f001 f928 	bl	800df20 <_calloc_r>
 800ccd0:	b160      	cbz	r0, 800ccec <_Balloc+0x64>
 800ccd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ccd6:	e00e      	b.n	800ccf6 <_Balloc+0x6e>
 800ccd8:	2221      	movs	r2, #33	@ 0x21
 800ccda:	2104      	movs	r1, #4
 800ccdc:	4620      	mov	r0, r4
 800ccde:	f001 f91f 	bl	800df20 <_calloc_r>
 800cce2:	69e3      	ldr	r3, [r4, #28]
 800cce4:	60f0      	str	r0, [r6, #12]
 800cce6:	68db      	ldr	r3, [r3, #12]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d1e4      	bne.n	800ccb6 <_Balloc+0x2e>
 800ccec:	2000      	movs	r0, #0
 800ccee:	bd70      	pop	{r4, r5, r6, pc}
 800ccf0:	6802      	ldr	r2, [r0, #0]
 800ccf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ccfc:	e7f7      	b.n	800ccee <_Balloc+0x66>
 800ccfe:	bf00      	nop
 800cd00:	0800e4fe 	.word	0x0800e4fe
 800cd04:	0800e5de 	.word	0x0800e5de

0800cd08 <_Bfree>:
 800cd08:	b570      	push	{r4, r5, r6, lr}
 800cd0a:	69c6      	ldr	r6, [r0, #28]
 800cd0c:	4605      	mov	r5, r0
 800cd0e:	460c      	mov	r4, r1
 800cd10:	b976      	cbnz	r6, 800cd30 <_Bfree+0x28>
 800cd12:	2010      	movs	r0, #16
 800cd14:	f7ff fef0 	bl	800caf8 <malloc>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	61e8      	str	r0, [r5, #28]
 800cd1c:	b920      	cbnz	r0, 800cd28 <_Bfree+0x20>
 800cd1e:	4b09      	ldr	r3, [pc, #36]	@ (800cd44 <_Bfree+0x3c>)
 800cd20:	4809      	ldr	r0, [pc, #36]	@ (800cd48 <_Bfree+0x40>)
 800cd22:	218f      	movs	r1, #143	@ 0x8f
 800cd24:	f001 f8de 	bl	800dee4 <__assert_func>
 800cd28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd2c:	6006      	str	r6, [r0, #0]
 800cd2e:	60c6      	str	r6, [r0, #12]
 800cd30:	b13c      	cbz	r4, 800cd42 <_Bfree+0x3a>
 800cd32:	69eb      	ldr	r3, [r5, #28]
 800cd34:	6862      	ldr	r2, [r4, #4]
 800cd36:	68db      	ldr	r3, [r3, #12]
 800cd38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd3c:	6021      	str	r1, [r4, #0]
 800cd3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd42:	bd70      	pop	{r4, r5, r6, pc}
 800cd44:	0800e4fe 	.word	0x0800e4fe
 800cd48:	0800e5de 	.word	0x0800e5de

0800cd4c <__multadd>:
 800cd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd50:	690d      	ldr	r5, [r1, #16]
 800cd52:	4607      	mov	r7, r0
 800cd54:	460c      	mov	r4, r1
 800cd56:	461e      	mov	r6, r3
 800cd58:	f101 0c14 	add.w	ip, r1, #20
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	f8dc 3000 	ldr.w	r3, [ip]
 800cd62:	b299      	uxth	r1, r3
 800cd64:	fb02 6101 	mla	r1, r2, r1, r6
 800cd68:	0c1e      	lsrs	r6, r3, #16
 800cd6a:	0c0b      	lsrs	r3, r1, #16
 800cd6c:	fb02 3306 	mla	r3, r2, r6, r3
 800cd70:	b289      	uxth	r1, r1
 800cd72:	3001      	adds	r0, #1
 800cd74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd78:	4285      	cmp	r5, r0
 800cd7a:	f84c 1b04 	str.w	r1, [ip], #4
 800cd7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd82:	dcec      	bgt.n	800cd5e <__multadd+0x12>
 800cd84:	b30e      	cbz	r6, 800cdca <__multadd+0x7e>
 800cd86:	68a3      	ldr	r3, [r4, #8]
 800cd88:	42ab      	cmp	r3, r5
 800cd8a:	dc19      	bgt.n	800cdc0 <__multadd+0x74>
 800cd8c:	6861      	ldr	r1, [r4, #4]
 800cd8e:	4638      	mov	r0, r7
 800cd90:	3101      	adds	r1, #1
 800cd92:	f7ff ff79 	bl	800cc88 <_Balloc>
 800cd96:	4680      	mov	r8, r0
 800cd98:	b928      	cbnz	r0, 800cda6 <__multadd+0x5a>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	4b0c      	ldr	r3, [pc, #48]	@ (800cdd0 <__multadd+0x84>)
 800cd9e:	480d      	ldr	r0, [pc, #52]	@ (800cdd4 <__multadd+0x88>)
 800cda0:	21ba      	movs	r1, #186	@ 0xba
 800cda2:	f001 f89f 	bl	800dee4 <__assert_func>
 800cda6:	6922      	ldr	r2, [r4, #16]
 800cda8:	3202      	adds	r2, #2
 800cdaa:	f104 010c 	add.w	r1, r4, #12
 800cdae:	0092      	lsls	r2, r2, #2
 800cdb0:	300c      	adds	r0, #12
 800cdb2:	f7fe fcb2 	bl	800b71a <memcpy>
 800cdb6:	4621      	mov	r1, r4
 800cdb8:	4638      	mov	r0, r7
 800cdba:	f7ff ffa5 	bl	800cd08 <_Bfree>
 800cdbe:	4644      	mov	r4, r8
 800cdc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cdc4:	3501      	adds	r5, #1
 800cdc6:	615e      	str	r6, [r3, #20]
 800cdc8:	6125      	str	r5, [r4, #16]
 800cdca:	4620      	mov	r0, r4
 800cdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdd0:	0800e56d 	.word	0x0800e56d
 800cdd4:	0800e5de 	.word	0x0800e5de

0800cdd8 <__s2b>:
 800cdd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cddc:	460c      	mov	r4, r1
 800cdde:	4615      	mov	r5, r2
 800cde0:	461f      	mov	r7, r3
 800cde2:	2209      	movs	r2, #9
 800cde4:	3308      	adds	r3, #8
 800cde6:	4606      	mov	r6, r0
 800cde8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdec:	2100      	movs	r1, #0
 800cdee:	2201      	movs	r2, #1
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	db09      	blt.n	800ce08 <__s2b+0x30>
 800cdf4:	4630      	mov	r0, r6
 800cdf6:	f7ff ff47 	bl	800cc88 <_Balloc>
 800cdfa:	b940      	cbnz	r0, 800ce0e <__s2b+0x36>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	4b19      	ldr	r3, [pc, #100]	@ (800ce64 <__s2b+0x8c>)
 800ce00:	4819      	ldr	r0, [pc, #100]	@ (800ce68 <__s2b+0x90>)
 800ce02:	21d3      	movs	r1, #211	@ 0xd3
 800ce04:	f001 f86e 	bl	800dee4 <__assert_func>
 800ce08:	0052      	lsls	r2, r2, #1
 800ce0a:	3101      	adds	r1, #1
 800ce0c:	e7f0      	b.n	800cdf0 <__s2b+0x18>
 800ce0e:	9b08      	ldr	r3, [sp, #32]
 800ce10:	6143      	str	r3, [r0, #20]
 800ce12:	2d09      	cmp	r5, #9
 800ce14:	f04f 0301 	mov.w	r3, #1
 800ce18:	6103      	str	r3, [r0, #16]
 800ce1a:	dd16      	ble.n	800ce4a <__s2b+0x72>
 800ce1c:	f104 0909 	add.w	r9, r4, #9
 800ce20:	46c8      	mov	r8, r9
 800ce22:	442c      	add	r4, r5
 800ce24:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ce28:	4601      	mov	r1, r0
 800ce2a:	3b30      	subs	r3, #48	@ 0x30
 800ce2c:	220a      	movs	r2, #10
 800ce2e:	4630      	mov	r0, r6
 800ce30:	f7ff ff8c 	bl	800cd4c <__multadd>
 800ce34:	45a0      	cmp	r8, r4
 800ce36:	d1f5      	bne.n	800ce24 <__s2b+0x4c>
 800ce38:	f1a5 0408 	sub.w	r4, r5, #8
 800ce3c:	444c      	add	r4, r9
 800ce3e:	1b2d      	subs	r5, r5, r4
 800ce40:	1963      	adds	r3, r4, r5
 800ce42:	42bb      	cmp	r3, r7
 800ce44:	db04      	blt.n	800ce50 <__s2b+0x78>
 800ce46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce4a:	340a      	adds	r4, #10
 800ce4c:	2509      	movs	r5, #9
 800ce4e:	e7f6      	b.n	800ce3e <__s2b+0x66>
 800ce50:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce54:	4601      	mov	r1, r0
 800ce56:	3b30      	subs	r3, #48	@ 0x30
 800ce58:	220a      	movs	r2, #10
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	f7ff ff76 	bl	800cd4c <__multadd>
 800ce60:	e7ee      	b.n	800ce40 <__s2b+0x68>
 800ce62:	bf00      	nop
 800ce64:	0800e56d 	.word	0x0800e56d
 800ce68:	0800e5de 	.word	0x0800e5de

0800ce6c <__hi0bits>:
 800ce6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ce70:	4603      	mov	r3, r0
 800ce72:	bf36      	itet	cc
 800ce74:	0403      	lslcc	r3, r0, #16
 800ce76:	2000      	movcs	r0, #0
 800ce78:	2010      	movcc	r0, #16
 800ce7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ce7e:	bf3c      	itt	cc
 800ce80:	021b      	lslcc	r3, r3, #8
 800ce82:	3008      	addcc	r0, #8
 800ce84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce88:	bf3c      	itt	cc
 800ce8a:	011b      	lslcc	r3, r3, #4
 800ce8c:	3004      	addcc	r0, #4
 800ce8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce92:	bf3c      	itt	cc
 800ce94:	009b      	lslcc	r3, r3, #2
 800ce96:	3002      	addcc	r0, #2
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	db05      	blt.n	800cea8 <__hi0bits+0x3c>
 800ce9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cea0:	f100 0001 	add.w	r0, r0, #1
 800cea4:	bf08      	it	eq
 800cea6:	2020      	moveq	r0, #32
 800cea8:	4770      	bx	lr

0800ceaa <__lo0bits>:
 800ceaa:	6803      	ldr	r3, [r0, #0]
 800ceac:	4602      	mov	r2, r0
 800ceae:	f013 0007 	ands.w	r0, r3, #7
 800ceb2:	d00b      	beq.n	800cecc <__lo0bits+0x22>
 800ceb4:	07d9      	lsls	r1, r3, #31
 800ceb6:	d421      	bmi.n	800cefc <__lo0bits+0x52>
 800ceb8:	0798      	lsls	r0, r3, #30
 800ceba:	bf49      	itett	mi
 800cebc:	085b      	lsrmi	r3, r3, #1
 800cebe:	089b      	lsrpl	r3, r3, #2
 800cec0:	2001      	movmi	r0, #1
 800cec2:	6013      	strmi	r3, [r2, #0]
 800cec4:	bf5c      	itt	pl
 800cec6:	6013      	strpl	r3, [r2, #0]
 800cec8:	2002      	movpl	r0, #2
 800ceca:	4770      	bx	lr
 800cecc:	b299      	uxth	r1, r3
 800cece:	b909      	cbnz	r1, 800ced4 <__lo0bits+0x2a>
 800ced0:	0c1b      	lsrs	r3, r3, #16
 800ced2:	2010      	movs	r0, #16
 800ced4:	b2d9      	uxtb	r1, r3
 800ced6:	b909      	cbnz	r1, 800cedc <__lo0bits+0x32>
 800ced8:	3008      	adds	r0, #8
 800ceda:	0a1b      	lsrs	r3, r3, #8
 800cedc:	0719      	lsls	r1, r3, #28
 800cede:	bf04      	itt	eq
 800cee0:	091b      	lsreq	r3, r3, #4
 800cee2:	3004      	addeq	r0, #4
 800cee4:	0799      	lsls	r1, r3, #30
 800cee6:	bf04      	itt	eq
 800cee8:	089b      	lsreq	r3, r3, #2
 800ceea:	3002      	addeq	r0, #2
 800ceec:	07d9      	lsls	r1, r3, #31
 800ceee:	d403      	bmi.n	800cef8 <__lo0bits+0x4e>
 800cef0:	085b      	lsrs	r3, r3, #1
 800cef2:	f100 0001 	add.w	r0, r0, #1
 800cef6:	d003      	beq.n	800cf00 <__lo0bits+0x56>
 800cef8:	6013      	str	r3, [r2, #0]
 800cefa:	4770      	bx	lr
 800cefc:	2000      	movs	r0, #0
 800cefe:	4770      	bx	lr
 800cf00:	2020      	movs	r0, #32
 800cf02:	4770      	bx	lr

0800cf04 <__i2b>:
 800cf04:	b510      	push	{r4, lr}
 800cf06:	460c      	mov	r4, r1
 800cf08:	2101      	movs	r1, #1
 800cf0a:	f7ff febd 	bl	800cc88 <_Balloc>
 800cf0e:	4602      	mov	r2, r0
 800cf10:	b928      	cbnz	r0, 800cf1e <__i2b+0x1a>
 800cf12:	4b05      	ldr	r3, [pc, #20]	@ (800cf28 <__i2b+0x24>)
 800cf14:	4805      	ldr	r0, [pc, #20]	@ (800cf2c <__i2b+0x28>)
 800cf16:	f240 1145 	movw	r1, #325	@ 0x145
 800cf1a:	f000 ffe3 	bl	800dee4 <__assert_func>
 800cf1e:	2301      	movs	r3, #1
 800cf20:	6144      	str	r4, [r0, #20]
 800cf22:	6103      	str	r3, [r0, #16]
 800cf24:	bd10      	pop	{r4, pc}
 800cf26:	bf00      	nop
 800cf28:	0800e56d 	.word	0x0800e56d
 800cf2c:	0800e5de 	.word	0x0800e5de

0800cf30 <__multiply>:
 800cf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf34:	4614      	mov	r4, r2
 800cf36:	690a      	ldr	r2, [r1, #16]
 800cf38:	6923      	ldr	r3, [r4, #16]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	bfa8      	it	ge
 800cf3e:	4623      	movge	r3, r4
 800cf40:	460f      	mov	r7, r1
 800cf42:	bfa4      	itt	ge
 800cf44:	460c      	movge	r4, r1
 800cf46:	461f      	movge	r7, r3
 800cf48:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cf4c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cf50:	68a3      	ldr	r3, [r4, #8]
 800cf52:	6861      	ldr	r1, [r4, #4]
 800cf54:	eb0a 0609 	add.w	r6, sl, r9
 800cf58:	42b3      	cmp	r3, r6
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	bfb8      	it	lt
 800cf5e:	3101      	addlt	r1, #1
 800cf60:	f7ff fe92 	bl	800cc88 <_Balloc>
 800cf64:	b930      	cbnz	r0, 800cf74 <__multiply+0x44>
 800cf66:	4602      	mov	r2, r0
 800cf68:	4b44      	ldr	r3, [pc, #272]	@ (800d07c <__multiply+0x14c>)
 800cf6a:	4845      	ldr	r0, [pc, #276]	@ (800d080 <__multiply+0x150>)
 800cf6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cf70:	f000 ffb8 	bl	800dee4 <__assert_func>
 800cf74:	f100 0514 	add.w	r5, r0, #20
 800cf78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cf7c:	462b      	mov	r3, r5
 800cf7e:	2200      	movs	r2, #0
 800cf80:	4543      	cmp	r3, r8
 800cf82:	d321      	bcc.n	800cfc8 <__multiply+0x98>
 800cf84:	f107 0114 	add.w	r1, r7, #20
 800cf88:	f104 0214 	add.w	r2, r4, #20
 800cf8c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cf90:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cf94:	9302      	str	r3, [sp, #8]
 800cf96:	1b13      	subs	r3, r2, r4
 800cf98:	3b15      	subs	r3, #21
 800cf9a:	f023 0303 	bic.w	r3, r3, #3
 800cf9e:	3304      	adds	r3, #4
 800cfa0:	f104 0715 	add.w	r7, r4, #21
 800cfa4:	42ba      	cmp	r2, r7
 800cfa6:	bf38      	it	cc
 800cfa8:	2304      	movcc	r3, #4
 800cfaa:	9301      	str	r3, [sp, #4]
 800cfac:	9b02      	ldr	r3, [sp, #8]
 800cfae:	9103      	str	r1, [sp, #12]
 800cfb0:	428b      	cmp	r3, r1
 800cfb2:	d80c      	bhi.n	800cfce <__multiply+0x9e>
 800cfb4:	2e00      	cmp	r6, #0
 800cfb6:	dd03      	ble.n	800cfc0 <__multiply+0x90>
 800cfb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d05b      	beq.n	800d078 <__multiply+0x148>
 800cfc0:	6106      	str	r6, [r0, #16]
 800cfc2:	b005      	add	sp, #20
 800cfc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfc8:	f843 2b04 	str.w	r2, [r3], #4
 800cfcc:	e7d8      	b.n	800cf80 <__multiply+0x50>
 800cfce:	f8b1 a000 	ldrh.w	sl, [r1]
 800cfd2:	f1ba 0f00 	cmp.w	sl, #0
 800cfd6:	d024      	beq.n	800d022 <__multiply+0xf2>
 800cfd8:	f104 0e14 	add.w	lr, r4, #20
 800cfdc:	46a9      	mov	r9, r5
 800cfde:	f04f 0c00 	mov.w	ip, #0
 800cfe2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cfe6:	f8d9 3000 	ldr.w	r3, [r9]
 800cfea:	fa1f fb87 	uxth.w	fp, r7
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	fb0a 330b 	mla	r3, sl, fp, r3
 800cff4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cff8:	f8d9 7000 	ldr.w	r7, [r9]
 800cffc:	4463      	add	r3, ip
 800cffe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d002:	fb0a c70b 	mla	r7, sl, fp, ip
 800d006:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d010:	4572      	cmp	r2, lr
 800d012:	f849 3b04 	str.w	r3, [r9], #4
 800d016:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d01a:	d8e2      	bhi.n	800cfe2 <__multiply+0xb2>
 800d01c:	9b01      	ldr	r3, [sp, #4]
 800d01e:	f845 c003 	str.w	ip, [r5, r3]
 800d022:	9b03      	ldr	r3, [sp, #12]
 800d024:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d028:	3104      	adds	r1, #4
 800d02a:	f1b9 0f00 	cmp.w	r9, #0
 800d02e:	d021      	beq.n	800d074 <__multiply+0x144>
 800d030:	682b      	ldr	r3, [r5, #0]
 800d032:	f104 0c14 	add.w	ip, r4, #20
 800d036:	46ae      	mov	lr, r5
 800d038:	f04f 0a00 	mov.w	sl, #0
 800d03c:	f8bc b000 	ldrh.w	fp, [ip]
 800d040:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d044:	fb09 770b 	mla	r7, r9, fp, r7
 800d048:	4457      	add	r7, sl
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d050:	f84e 3b04 	str.w	r3, [lr], #4
 800d054:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d058:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d05c:	f8be 3000 	ldrh.w	r3, [lr]
 800d060:	fb09 330a 	mla	r3, r9, sl, r3
 800d064:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d068:	4562      	cmp	r2, ip
 800d06a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d06e:	d8e5      	bhi.n	800d03c <__multiply+0x10c>
 800d070:	9f01      	ldr	r7, [sp, #4]
 800d072:	51eb      	str	r3, [r5, r7]
 800d074:	3504      	adds	r5, #4
 800d076:	e799      	b.n	800cfac <__multiply+0x7c>
 800d078:	3e01      	subs	r6, #1
 800d07a:	e79b      	b.n	800cfb4 <__multiply+0x84>
 800d07c:	0800e56d 	.word	0x0800e56d
 800d080:	0800e5de 	.word	0x0800e5de

0800d084 <__pow5mult>:
 800d084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d088:	4615      	mov	r5, r2
 800d08a:	f012 0203 	ands.w	r2, r2, #3
 800d08e:	4607      	mov	r7, r0
 800d090:	460e      	mov	r6, r1
 800d092:	d007      	beq.n	800d0a4 <__pow5mult+0x20>
 800d094:	4c25      	ldr	r4, [pc, #148]	@ (800d12c <__pow5mult+0xa8>)
 800d096:	3a01      	subs	r2, #1
 800d098:	2300      	movs	r3, #0
 800d09a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d09e:	f7ff fe55 	bl	800cd4c <__multadd>
 800d0a2:	4606      	mov	r6, r0
 800d0a4:	10ad      	asrs	r5, r5, #2
 800d0a6:	d03d      	beq.n	800d124 <__pow5mult+0xa0>
 800d0a8:	69fc      	ldr	r4, [r7, #28]
 800d0aa:	b97c      	cbnz	r4, 800d0cc <__pow5mult+0x48>
 800d0ac:	2010      	movs	r0, #16
 800d0ae:	f7ff fd23 	bl	800caf8 <malloc>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	61f8      	str	r0, [r7, #28]
 800d0b6:	b928      	cbnz	r0, 800d0c4 <__pow5mult+0x40>
 800d0b8:	4b1d      	ldr	r3, [pc, #116]	@ (800d130 <__pow5mult+0xac>)
 800d0ba:	481e      	ldr	r0, [pc, #120]	@ (800d134 <__pow5mult+0xb0>)
 800d0bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d0c0:	f000 ff10 	bl	800dee4 <__assert_func>
 800d0c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0c8:	6004      	str	r4, [r0, #0]
 800d0ca:	60c4      	str	r4, [r0, #12]
 800d0cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d0d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0d4:	b94c      	cbnz	r4, 800d0ea <__pow5mult+0x66>
 800d0d6:	f240 2171 	movw	r1, #625	@ 0x271
 800d0da:	4638      	mov	r0, r7
 800d0dc:	f7ff ff12 	bl	800cf04 <__i2b>
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d0e6:	4604      	mov	r4, r0
 800d0e8:	6003      	str	r3, [r0, #0]
 800d0ea:	f04f 0900 	mov.w	r9, #0
 800d0ee:	07eb      	lsls	r3, r5, #31
 800d0f0:	d50a      	bpl.n	800d108 <__pow5mult+0x84>
 800d0f2:	4631      	mov	r1, r6
 800d0f4:	4622      	mov	r2, r4
 800d0f6:	4638      	mov	r0, r7
 800d0f8:	f7ff ff1a 	bl	800cf30 <__multiply>
 800d0fc:	4631      	mov	r1, r6
 800d0fe:	4680      	mov	r8, r0
 800d100:	4638      	mov	r0, r7
 800d102:	f7ff fe01 	bl	800cd08 <_Bfree>
 800d106:	4646      	mov	r6, r8
 800d108:	106d      	asrs	r5, r5, #1
 800d10a:	d00b      	beq.n	800d124 <__pow5mult+0xa0>
 800d10c:	6820      	ldr	r0, [r4, #0]
 800d10e:	b938      	cbnz	r0, 800d120 <__pow5mult+0x9c>
 800d110:	4622      	mov	r2, r4
 800d112:	4621      	mov	r1, r4
 800d114:	4638      	mov	r0, r7
 800d116:	f7ff ff0b 	bl	800cf30 <__multiply>
 800d11a:	6020      	str	r0, [r4, #0]
 800d11c:	f8c0 9000 	str.w	r9, [r0]
 800d120:	4604      	mov	r4, r0
 800d122:	e7e4      	b.n	800d0ee <__pow5mult+0x6a>
 800d124:	4630      	mov	r0, r6
 800d126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d12a:	bf00      	nop
 800d12c:	0800e638 	.word	0x0800e638
 800d130:	0800e4fe 	.word	0x0800e4fe
 800d134:	0800e5de 	.word	0x0800e5de

0800d138 <__lshift>:
 800d138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d13c:	460c      	mov	r4, r1
 800d13e:	6849      	ldr	r1, [r1, #4]
 800d140:	6923      	ldr	r3, [r4, #16]
 800d142:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d146:	68a3      	ldr	r3, [r4, #8]
 800d148:	4607      	mov	r7, r0
 800d14a:	4691      	mov	r9, r2
 800d14c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d150:	f108 0601 	add.w	r6, r8, #1
 800d154:	42b3      	cmp	r3, r6
 800d156:	db0b      	blt.n	800d170 <__lshift+0x38>
 800d158:	4638      	mov	r0, r7
 800d15a:	f7ff fd95 	bl	800cc88 <_Balloc>
 800d15e:	4605      	mov	r5, r0
 800d160:	b948      	cbnz	r0, 800d176 <__lshift+0x3e>
 800d162:	4602      	mov	r2, r0
 800d164:	4b28      	ldr	r3, [pc, #160]	@ (800d208 <__lshift+0xd0>)
 800d166:	4829      	ldr	r0, [pc, #164]	@ (800d20c <__lshift+0xd4>)
 800d168:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d16c:	f000 feba 	bl	800dee4 <__assert_func>
 800d170:	3101      	adds	r1, #1
 800d172:	005b      	lsls	r3, r3, #1
 800d174:	e7ee      	b.n	800d154 <__lshift+0x1c>
 800d176:	2300      	movs	r3, #0
 800d178:	f100 0114 	add.w	r1, r0, #20
 800d17c:	f100 0210 	add.w	r2, r0, #16
 800d180:	4618      	mov	r0, r3
 800d182:	4553      	cmp	r3, sl
 800d184:	db33      	blt.n	800d1ee <__lshift+0xb6>
 800d186:	6920      	ldr	r0, [r4, #16]
 800d188:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d18c:	f104 0314 	add.w	r3, r4, #20
 800d190:	f019 091f 	ands.w	r9, r9, #31
 800d194:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d198:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d19c:	d02b      	beq.n	800d1f6 <__lshift+0xbe>
 800d19e:	f1c9 0e20 	rsb	lr, r9, #32
 800d1a2:	468a      	mov	sl, r1
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	6818      	ldr	r0, [r3, #0]
 800d1a8:	fa00 f009 	lsl.w	r0, r0, r9
 800d1ac:	4310      	orrs	r0, r2
 800d1ae:	f84a 0b04 	str.w	r0, [sl], #4
 800d1b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1b6:	459c      	cmp	ip, r3
 800d1b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d1bc:	d8f3      	bhi.n	800d1a6 <__lshift+0x6e>
 800d1be:	ebac 0304 	sub.w	r3, ip, r4
 800d1c2:	3b15      	subs	r3, #21
 800d1c4:	f023 0303 	bic.w	r3, r3, #3
 800d1c8:	3304      	adds	r3, #4
 800d1ca:	f104 0015 	add.w	r0, r4, #21
 800d1ce:	4584      	cmp	ip, r0
 800d1d0:	bf38      	it	cc
 800d1d2:	2304      	movcc	r3, #4
 800d1d4:	50ca      	str	r2, [r1, r3]
 800d1d6:	b10a      	cbz	r2, 800d1dc <__lshift+0xa4>
 800d1d8:	f108 0602 	add.w	r6, r8, #2
 800d1dc:	3e01      	subs	r6, #1
 800d1de:	4638      	mov	r0, r7
 800d1e0:	612e      	str	r6, [r5, #16]
 800d1e2:	4621      	mov	r1, r4
 800d1e4:	f7ff fd90 	bl	800cd08 <_Bfree>
 800d1e8:	4628      	mov	r0, r5
 800d1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	e7c5      	b.n	800d182 <__lshift+0x4a>
 800d1f6:	3904      	subs	r1, #4
 800d1f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800d200:	459c      	cmp	ip, r3
 800d202:	d8f9      	bhi.n	800d1f8 <__lshift+0xc0>
 800d204:	e7ea      	b.n	800d1dc <__lshift+0xa4>
 800d206:	bf00      	nop
 800d208:	0800e56d 	.word	0x0800e56d
 800d20c:	0800e5de 	.word	0x0800e5de

0800d210 <__mcmp>:
 800d210:	690a      	ldr	r2, [r1, #16]
 800d212:	4603      	mov	r3, r0
 800d214:	6900      	ldr	r0, [r0, #16]
 800d216:	1a80      	subs	r0, r0, r2
 800d218:	b530      	push	{r4, r5, lr}
 800d21a:	d10e      	bne.n	800d23a <__mcmp+0x2a>
 800d21c:	3314      	adds	r3, #20
 800d21e:	3114      	adds	r1, #20
 800d220:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d224:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d228:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d22c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d230:	4295      	cmp	r5, r2
 800d232:	d003      	beq.n	800d23c <__mcmp+0x2c>
 800d234:	d205      	bcs.n	800d242 <__mcmp+0x32>
 800d236:	f04f 30ff 	mov.w	r0, #4294967295
 800d23a:	bd30      	pop	{r4, r5, pc}
 800d23c:	42a3      	cmp	r3, r4
 800d23e:	d3f3      	bcc.n	800d228 <__mcmp+0x18>
 800d240:	e7fb      	b.n	800d23a <__mcmp+0x2a>
 800d242:	2001      	movs	r0, #1
 800d244:	e7f9      	b.n	800d23a <__mcmp+0x2a>
	...

0800d248 <__mdiff>:
 800d248:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d24c:	4689      	mov	r9, r1
 800d24e:	4606      	mov	r6, r0
 800d250:	4611      	mov	r1, r2
 800d252:	4648      	mov	r0, r9
 800d254:	4614      	mov	r4, r2
 800d256:	f7ff ffdb 	bl	800d210 <__mcmp>
 800d25a:	1e05      	subs	r5, r0, #0
 800d25c:	d112      	bne.n	800d284 <__mdiff+0x3c>
 800d25e:	4629      	mov	r1, r5
 800d260:	4630      	mov	r0, r6
 800d262:	f7ff fd11 	bl	800cc88 <_Balloc>
 800d266:	4602      	mov	r2, r0
 800d268:	b928      	cbnz	r0, 800d276 <__mdiff+0x2e>
 800d26a:	4b3f      	ldr	r3, [pc, #252]	@ (800d368 <__mdiff+0x120>)
 800d26c:	f240 2137 	movw	r1, #567	@ 0x237
 800d270:	483e      	ldr	r0, [pc, #248]	@ (800d36c <__mdiff+0x124>)
 800d272:	f000 fe37 	bl	800dee4 <__assert_func>
 800d276:	2301      	movs	r3, #1
 800d278:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d27c:	4610      	mov	r0, r2
 800d27e:	b003      	add	sp, #12
 800d280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d284:	bfbc      	itt	lt
 800d286:	464b      	movlt	r3, r9
 800d288:	46a1      	movlt	r9, r4
 800d28a:	4630      	mov	r0, r6
 800d28c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d290:	bfba      	itte	lt
 800d292:	461c      	movlt	r4, r3
 800d294:	2501      	movlt	r5, #1
 800d296:	2500      	movge	r5, #0
 800d298:	f7ff fcf6 	bl	800cc88 <_Balloc>
 800d29c:	4602      	mov	r2, r0
 800d29e:	b918      	cbnz	r0, 800d2a8 <__mdiff+0x60>
 800d2a0:	4b31      	ldr	r3, [pc, #196]	@ (800d368 <__mdiff+0x120>)
 800d2a2:	f240 2145 	movw	r1, #581	@ 0x245
 800d2a6:	e7e3      	b.n	800d270 <__mdiff+0x28>
 800d2a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d2ac:	6926      	ldr	r6, [r4, #16]
 800d2ae:	60c5      	str	r5, [r0, #12]
 800d2b0:	f109 0310 	add.w	r3, r9, #16
 800d2b4:	f109 0514 	add.w	r5, r9, #20
 800d2b8:	f104 0e14 	add.w	lr, r4, #20
 800d2bc:	f100 0b14 	add.w	fp, r0, #20
 800d2c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d2c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d2c8:	9301      	str	r3, [sp, #4]
 800d2ca:	46d9      	mov	r9, fp
 800d2cc:	f04f 0c00 	mov.w	ip, #0
 800d2d0:	9b01      	ldr	r3, [sp, #4]
 800d2d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d2d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d2da:	9301      	str	r3, [sp, #4]
 800d2dc:	fa1f f38a 	uxth.w	r3, sl
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	b283      	uxth	r3, r0
 800d2e4:	1acb      	subs	r3, r1, r3
 800d2e6:	0c00      	lsrs	r0, r0, #16
 800d2e8:	4463      	add	r3, ip
 800d2ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d2ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d2f8:	4576      	cmp	r6, lr
 800d2fa:	f849 3b04 	str.w	r3, [r9], #4
 800d2fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d302:	d8e5      	bhi.n	800d2d0 <__mdiff+0x88>
 800d304:	1b33      	subs	r3, r6, r4
 800d306:	3b15      	subs	r3, #21
 800d308:	f023 0303 	bic.w	r3, r3, #3
 800d30c:	3415      	adds	r4, #21
 800d30e:	3304      	adds	r3, #4
 800d310:	42a6      	cmp	r6, r4
 800d312:	bf38      	it	cc
 800d314:	2304      	movcc	r3, #4
 800d316:	441d      	add	r5, r3
 800d318:	445b      	add	r3, fp
 800d31a:	461e      	mov	r6, r3
 800d31c:	462c      	mov	r4, r5
 800d31e:	4544      	cmp	r4, r8
 800d320:	d30e      	bcc.n	800d340 <__mdiff+0xf8>
 800d322:	f108 0103 	add.w	r1, r8, #3
 800d326:	1b49      	subs	r1, r1, r5
 800d328:	f021 0103 	bic.w	r1, r1, #3
 800d32c:	3d03      	subs	r5, #3
 800d32e:	45a8      	cmp	r8, r5
 800d330:	bf38      	it	cc
 800d332:	2100      	movcc	r1, #0
 800d334:	440b      	add	r3, r1
 800d336:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d33a:	b191      	cbz	r1, 800d362 <__mdiff+0x11a>
 800d33c:	6117      	str	r7, [r2, #16]
 800d33e:	e79d      	b.n	800d27c <__mdiff+0x34>
 800d340:	f854 1b04 	ldr.w	r1, [r4], #4
 800d344:	46e6      	mov	lr, ip
 800d346:	0c08      	lsrs	r0, r1, #16
 800d348:	fa1c fc81 	uxtah	ip, ip, r1
 800d34c:	4471      	add	r1, lr
 800d34e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d352:	b289      	uxth	r1, r1
 800d354:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d358:	f846 1b04 	str.w	r1, [r6], #4
 800d35c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d360:	e7dd      	b.n	800d31e <__mdiff+0xd6>
 800d362:	3f01      	subs	r7, #1
 800d364:	e7e7      	b.n	800d336 <__mdiff+0xee>
 800d366:	bf00      	nop
 800d368:	0800e56d 	.word	0x0800e56d
 800d36c:	0800e5de 	.word	0x0800e5de

0800d370 <__ulp>:
 800d370:	b082      	sub	sp, #8
 800d372:	ed8d 0b00 	vstr	d0, [sp]
 800d376:	9a01      	ldr	r2, [sp, #4]
 800d378:	4b0f      	ldr	r3, [pc, #60]	@ (800d3b8 <__ulp+0x48>)
 800d37a:	4013      	ands	r3, r2
 800d37c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d380:	2b00      	cmp	r3, #0
 800d382:	dc08      	bgt.n	800d396 <__ulp+0x26>
 800d384:	425b      	negs	r3, r3
 800d386:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d38a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d38e:	da04      	bge.n	800d39a <__ulp+0x2a>
 800d390:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d394:	4113      	asrs	r3, r2
 800d396:	2200      	movs	r2, #0
 800d398:	e008      	b.n	800d3ac <__ulp+0x3c>
 800d39a:	f1a2 0314 	sub.w	r3, r2, #20
 800d39e:	2b1e      	cmp	r3, #30
 800d3a0:	bfda      	itte	le
 800d3a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d3a6:	40da      	lsrle	r2, r3
 800d3a8:	2201      	movgt	r2, #1
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	4610      	mov	r0, r2
 800d3b0:	ec41 0b10 	vmov	d0, r0, r1
 800d3b4:	b002      	add	sp, #8
 800d3b6:	4770      	bx	lr
 800d3b8:	7ff00000 	.word	0x7ff00000

0800d3bc <__b2d>:
 800d3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3c0:	6906      	ldr	r6, [r0, #16]
 800d3c2:	f100 0814 	add.w	r8, r0, #20
 800d3c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d3ca:	1f37      	subs	r7, r6, #4
 800d3cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d3d0:	4610      	mov	r0, r2
 800d3d2:	f7ff fd4b 	bl	800ce6c <__hi0bits>
 800d3d6:	f1c0 0320 	rsb	r3, r0, #32
 800d3da:	280a      	cmp	r0, #10
 800d3dc:	600b      	str	r3, [r1, #0]
 800d3de:	491b      	ldr	r1, [pc, #108]	@ (800d44c <__b2d+0x90>)
 800d3e0:	dc15      	bgt.n	800d40e <__b2d+0x52>
 800d3e2:	f1c0 0c0b 	rsb	ip, r0, #11
 800d3e6:	fa22 f30c 	lsr.w	r3, r2, ip
 800d3ea:	45b8      	cmp	r8, r7
 800d3ec:	ea43 0501 	orr.w	r5, r3, r1
 800d3f0:	bf34      	ite	cc
 800d3f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d3f6:	2300      	movcs	r3, #0
 800d3f8:	3015      	adds	r0, #21
 800d3fa:	fa02 f000 	lsl.w	r0, r2, r0
 800d3fe:	fa23 f30c 	lsr.w	r3, r3, ip
 800d402:	4303      	orrs	r3, r0
 800d404:	461c      	mov	r4, r3
 800d406:	ec45 4b10 	vmov	d0, r4, r5
 800d40a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d40e:	45b8      	cmp	r8, r7
 800d410:	bf3a      	itte	cc
 800d412:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d416:	f1a6 0708 	subcc.w	r7, r6, #8
 800d41a:	2300      	movcs	r3, #0
 800d41c:	380b      	subs	r0, #11
 800d41e:	d012      	beq.n	800d446 <__b2d+0x8a>
 800d420:	f1c0 0120 	rsb	r1, r0, #32
 800d424:	fa23 f401 	lsr.w	r4, r3, r1
 800d428:	4082      	lsls	r2, r0
 800d42a:	4322      	orrs	r2, r4
 800d42c:	4547      	cmp	r7, r8
 800d42e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d432:	bf8c      	ite	hi
 800d434:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d438:	2200      	movls	r2, #0
 800d43a:	4083      	lsls	r3, r0
 800d43c:	40ca      	lsrs	r2, r1
 800d43e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d442:	4313      	orrs	r3, r2
 800d444:	e7de      	b.n	800d404 <__b2d+0x48>
 800d446:	ea42 0501 	orr.w	r5, r2, r1
 800d44a:	e7db      	b.n	800d404 <__b2d+0x48>
 800d44c:	3ff00000 	.word	0x3ff00000

0800d450 <__d2b>:
 800d450:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d454:	460f      	mov	r7, r1
 800d456:	2101      	movs	r1, #1
 800d458:	ec59 8b10 	vmov	r8, r9, d0
 800d45c:	4616      	mov	r6, r2
 800d45e:	f7ff fc13 	bl	800cc88 <_Balloc>
 800d462:	4604      	mov	r4, r0
 800d464:	b930      	cbnz	r0, 800d474 <__d2b+0x24>
 800d466:	4602      	mov	r2, r0
 800d468:	4b23      	ldr	r3, [pc, #140]	@ (800d4f8 <__d2b+0xa8>)
 800d46a:	4824      	ldr	r0, [pc, #144]	@ (800d4fc <__d2b+0xac>)
 800d46c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d470:	f000 fd38 	bl	800dee4 <__assert_func>
 800d474:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d478:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d47c:	b10d      	cbz	r5, 800d482 <__d2b+0x32>
 800d47e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d482:	9301      	str	r3, [sp, #4]
 800d484:	f1b8 0300 	subs.w	r3, r8, #0
 800d488:	d023      	beq.n	800d4d2 <__d2b+0x82>
 800d48a:	4668      	mov	r0, sp
 800d48c:	9300      	str	r3, [sp, #0]
 800d48e:	f7ff fd0c 	bl	800ceaa <__lo0bits>
 800d492:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d496:	b1d0      	cbz	r0, 800d4ce <__d2b+0x7e>
 800d498:	f1c0 0320 	rsb	r3, r0, #32
 800d49c:	fa02 f303 	lsl.w	r3, r2, r3
 800d4a0:	430b      	orrs	r3, r1
 800d4a2:	40c2      	lsrs	r2, r0
 800d4a4:	6163      	str	r3, [r4, #20]
 800d4a6:	9201      	str	r2, [sp, #4]
 800d4a8:	9b01      	ldr	r3, [sp, #4]
 800d4aa:	61a3      	str	r3, [r4, #24]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	bf0c      	ite	eq
 800d4b0:	2201      	moveq	r2, #1
 800d4b2:	2202      	movne	r2, #2
 800d4b4:	6122      	str	r2, [r4, #16]
 800d4b6:	b1a5      	cbz	r5, 800d4e2 <__d2b+0x92>
 800d4b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d4bc:	4405      	add	r5, r0
 800d4be:	603d      	str	r5, [r7, #0]
 800d4c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d4c4:	6030      	str	r0, [r6, #0]
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	b003      	add	sp, #12
 800d4ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4ce:	6161      	str	r1, [r4, #20]
 800d4d0:	e7ea      	b.n	800d4a8 <__d2b+0x58>
 800d4d2:	a801      	add	r0, sp, #4
 800d4d4:	f7ff fce9 	bl	800ceaa <__lo0bits>
 800d4d8:	9b01      	ldr	r3, [sp, #4]
 800d4da:	6163      	str	r3, [r4, #20]
 800d4dc:	3020      	adds	r0, #32
 800d4de:	2201      	movs	r2, #1
 800d4e0:	e7e8      	b.n	800d4b4 <__d2b+0x64>
 800d4e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d4ea:	6038      	str	r0, [r7, #0]
 800d4ec:	6918      	ldr	r0, [r3, #16]
 800d4ee:	f7ff fcbd 	bl	800ce6c <__hi0bits>
 800d4f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4f6:	e7e5      	b.n	800d4c4 <__d2b+0x74>
 800d4f8:	0800e56d 	.word	0x0800e56d
 800d4fc:	0800e5de 	.word	0x0800e5de

0800d500 <__ratio>:
 800d500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d504:	b085      	sub	sp, #20
 800d506:	e9cd 1000 	strd	r1, r0, [sp]
 800d50a:	a902      	add	r1, sp, #8
 800d50c:	f7ff ff56 	bl	800d3bc <__b2d>
 800d510:	9800      	ldr	r0, [sp, #0]
 800d512:	a903      	add	r1, sp, #12
 800d514:	ec55 4b10 	vmov	r4, r5, d0
 800d518:	f7ff ff50 	bl	800d3bc <__b2d>
 800d51c:	9b01      	ldr	r3, [sp, #4]
 800d51e:	6919      	ldr	r1, [r3, #16]
 800d520:	9b00      	ldr	r3, [sp, #0]
 800d522:	691b      	ldr	r3, [r3, #16]
 800d524:	1ac9      	subs	r1, r1, r3
 800d526:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d52a:	1a9b      	subs	r3, r3, r2
 800d52c:	ec5b ab10 	vmov	sl, fp, d0
 800d530:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d534:	2b00      	cmp	r3, #0
 800d536:	bfce      	itee	gt
 800d538:	462a      	movgt	r2, r5
 800d53a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d53e:	465a      	movle	r2, fp
 800d540:	462f      	mov	r7, r5
 800d542:	46d9      	mov	r9, fp
 800d544:	bfcc      	ite	gt
 800d546:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d54a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d54e:	464b      	mov	r3, r9
 800d550:	4652      	mov	r2, sl
 800d552:	4620      	mov	r0, r4
 800d554:	4639      	mov	r1, r7
 800d556:	f7f3 f989 	bl	800086c <__aeabi_ddiv>
 800d55a:	ec41 0b10 	vmov	d0, r0, r1
 800d55e:	b005      	add	sp, #20
 800d560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d564 <__copybits>:
 800d564:	3901      	subs	r1, #1
 800d566:	b570      	push	{r4, r5, r6, lr}
 800d568:	1149      	asrs	r1, r1, #5
 800d56a:	6914      	ldr	r4, [r2, #16]
 800d56c:	3101      	adds	r1, #1
 800d56e:	f102 0314 	add.w	r3, r2, #20
 800d572:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d576:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d57a:	1f05      	subs	r5, r0, #4
 800d57c:	42a3      	cmp	r3, r4
 800d57e:	d30c      	bcc.n	800d59a <__copybits+0x36>
 800d580:	1aa3      	subs	r3, r4, r2
 800d582:	3b11      	subs	r3, #17
 800d584:	f023 0303 	bic.w	r3, r3, #3
 800d588:	3211      	adds	r2, #17
 800d58a:	42a2      	cmp	r2, r4
 800d58c:	bf88      	it	hi
 800d58e:	2300      	movhi	r3, #0
 800d590:	4418      	add	r0, r3
 800d592:	2300      	movs	r3, #0
 800d594:	4288      	cmp	r0, r1
 800d596:	d305      	bcc.n	800d5a4 <__copybits+0x40>
 800d598:	bd70      	pop	{r4, r5, r6, pc}
 800d59a:	f853 6b04 	ldr.w	r6, [r3], #4
 800d59e:	f845 6f04 	str.w	r6, [r5, #4]!
 800d5a2:	e7eb      	b.n	800d57c <__copybits+0x18>
 800d5a4:	f840 3b04 	str.w	r3, [r0], #4
 800d5a8:	e7f4      	b.n	800d594 <__copybits+0x30>

0800d5aa <__any_on>:
 800d5aa:	f100 0214 	add.w	r2, r0, #20
 800d5ae:	6900      	ldr	r0, [r0, #16]
 800d5b0:	114b      	asrs	r3, r1, #5
 800d5b2:	4298      	cmp	r0, r3
 800d5b4:	b510      	push	{r4, lr}
 800d5b6:	db11      	blt.n	800d5dc <__any_on+0x32>
 800d5b8:	dd0a      	ble.n	800d5d0 <__any_on+0x26>
 800d5ba:	f011 011f 	ands.w	r1, r1, #31
 800d5be:	d007      	beq.n	800d5d0 <__any_on+0x26>
 800d5c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d5c4:	fa24 f001 	lsr.w	r0, r4, r1
 800d5c8:	fa00 f101 	lsl.w	r1, r0, r1
 800d5cc:	428c      	cmp	r4, r1
 800d5ce:	d10b      	bne.n	800d5e8 <__any_on+0x3e>
 800d5d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d803      	bhi.n	800d5e0 <__any_on+0x36>
 800d5d8:	2000      	movs	r0, #0
 800d5da:	bd10      	pop	{r4, pc}
 800d5dc:	4603      	mov	r3, r0
 800d5de:	e7f7      	b.n	800d5d0 <__any_on+0x26>
 800d5e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d5e4:	2900      	cmp	r1, #0
 800d5e6:	d0f5      	beq.n	800d5d4 <__any_on+0x2a>
 800d5e8:	2001      	movs	r0, #1
 800d5ea:	e7f6      	b.n	800d5da <__any_on+0x30>

0800d5ec <_strtol_l.constprop.0>:
 800d5ec:	2b24      	cmp	r3, #36	@ 0x24
 800d5ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5f2:	4686      	mov	lr, r0
 800d5f4:	4690      	mov	r8, r2
 800d5f6:	d801      	bhi.n	800d5fc <_strtol_l.constprop.0+0x10>
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	d106      	bne.n	800d60a <_strtol_l.constprop.0+0x1e>
 800d5fc:	f7fe f858 	bl	800b6b0 <__errno>
 800d600:	2316      	movs	r3, #22
 800d602:	6003      	str	r3, [r0, #0]
 800d604:	2000      	movs	r0, #0
 800d606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d60a:	4834      	ldr	r0, [pc, #208]	@ (800d6dc <_strtol_l.constprop.0+0xf0>)
 800d60c:	460d      	mov	r5, r1
 800d60e:	462a      	mov	r2, r5
 800d610:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d614:	5d06      	ldrb	r6, [r0, r4]
 800d616:	f016 0608 	ands.w	r6, r6, #8
 800d61a:	d1f8      	bne.n	800d60e <_strtol_l.constprop.0+0x22>
 800d61c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d61e:	d12d      	bne.n	800d67c <_strtol_l.constprop.0+0x90>
 800d620:	782c      	ldrb	r4, [r5, #0]
 800d622:	2601      	movs	r6, #1
 800d624:	1c95      	adds	r5, r2, #2
 800d626:	f033 0210 	bics.w	r2, r3, #16
 800d62a:	d109      	bne.n	800d640 <_strtol_l.constprop.0+0x54>
 800d62c:	2c30      	cmp	r4, #48	@ 0x30
 800d62e:	d12a      	bne.n	800d686 <_strtol_l.constprop.0+0x9a>
 800d630:	782a      	ldrb	r2, [r5, #0]
 800d632:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d636:	2a58      	cmp	r2, #88	@ 0x58
 800d638:	d125      	bne.n	800d686 <_strtol_l.constprop.0+0x9a>
 800d63a:	786c      	ldrb	r4, [r5, #1]
 800d63c:	2310      	movs	r3, #16
 800d63e:	3502      	adds	r5, #2
 800d640:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d644:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d648:	2200      	movs	r2, #0
 800d64a:	fbbc f9f3 	udiv	r9, ip, r3
 800d64e:	4610      	mov	r0, r2
 800d650:	fb03 ca19 	mls	sl, r3, r9, ip
 800d654:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d658:	2f09      	cmp	r7, #9
 800d65a:	d81b      	bhi.n	800d694 <_strtol_l.constprop.0+0xa8>
 800d65c:	463c      	mov	r4, r7
 800d65e:	42a3      	cmp	r3, r4
 800d660:	dd27      	ble.n	800d6b2 <_strtol_l.constprop.0+0xc6>
 800d662:	1c57      	adds	r7, r2, #1
 800d664:	d007      	beq.n	800d676 <_strtol_l.constprop.0+0x8a>
 800d666:	4581      	cmp	r9, r0
 800d668:	d320      	bcc.n	800d6ac <_strtol_l.constprop.0+0xc0>
 800d66a:	d101      	bne.n	800d670 <_strtol_l.constprop.0+0x84>
 800d66c:	45a2      	cmp	sl, r4
 800d66e:	db1d      	blt.n	800d6ac <_strtol_l.constprop.0+0xc0>
 800d670:	fb00 4003 	mla	r0, r0, r3, r4
 800d674:	2201      	movs	r2, #1
 800d676:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d67a:	e7eb      	b.n	800d654 <_strtol_l.constprop.0+0x68>
 800d67c:	2c2b      	cmp	r4, #43	@ 0x2b
 800d67e:	bf04      	itt	eq
 800d680:	782c      	ldrbeq	r4, [r5, #0]
 800d682:	1c95      	addeq	r5, r2, #2
 800d684:	e7cf      	b.n	800d626 <_strtol_l.constprop.0+0x3a>
 800d686:	2b00      	cmp	r3, #0
 800d688:	d1da      	bne.n	800d640 <_strtol_l.constprop.0+0x54>
 800d68a:	2c30      	cmp	r4, #48	@ 0x30
 800d68c:	bf0c      	ite	eq
 800d68e:	2308      	moveq	r3, #8
 800d690:	230a      	movne	r3, #10
 800d692:	e7d5      	b.n	800d640 <_strtol_l.constprop.0+0x54>
 800d694:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d698:	2f19      	cmp	r7, #25
 800d69a:	d801      	bhi.n	800d6a0 <_strtol_l.constprop.0+0xb4>
 800d69c:	3c37      	subs	r4, #55	@ 0x37
 800d69e:	e7de      	b.n	800d65e <_strtol_l.constprop.0+0x72>
 800d6a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d6a4:	2f19      	cmp	r7, #25
 800d6a6:	d804      	bhi.n	800d6b2 <_strtol_l.constprop.0+0xc6>
 800d6a8:	3c57      	subs	r4, #87	@ 0x57
 800d6aa:	e7d8      	b.n	800d65e <_strtol_l.constprop.0+0x72>
 800d6ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d6b0:	e7e1      	b.n	800d676 <_strtol_l.constprop.0+0x8a>
 800d6b2:	1c53      	adds	r3, r2, #1
 800d6b4:	d108      	bne.n	800d6c8 <_strtol_l.constprop.0+0xdc>
 800d6b6:	2322      	movs	r3, #34	@ 0x22
 800d6b8:	f8ce 3000 	str.w	r3, [lr]
 800d6bc:	4660      	mov	r0, ip
 800d6be:	f1b8 0f00 	cmp.w	r8, #0
 800d6c2:	d0a0      	beq.n	800d606 <_strtol_l.constprop.0+0x1a>
 800d6c4:	1e69      	subs	r1, r5, #1
 800d6c6:	e006      	b.n	800d6d6 <_strtol_l.constprop.0+0xea>
 800d6c8:	b106      	cbz	r6, 800d6cc <_strtol_l.constprop.0+0xe0>
 800d6ca:	4240      	negs	r0, r0
 800d6cc:	f1b8 0f00 	cmp.w	r8, #0
 800d6d0:	d099      	beq.n	800d606 <_strtol_l.constprop.0+0x1a>
 800d6d2:	2a00      	cmp	r2, #0
 800d6d4:	d1f6      	bne.n	800d6c4 <_strtol_l.constprop.0+0xd8>
 800d6d6:	f8c8 1000 	str.w	r1, [r8]
 800d6da:	e794      	b.n	800d606 <_strtol_l.constprop.0+0x1a>
 800d6dc:	0800e739 	.word	0x0800e739

0800d6e0 <_strtol_r>:
 800d6e0:	f7ff bf84 	b.w	800d5ec <_strtol_l.constprop.0>

0800d6e4 <__ascii_wctomb>:
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	4608      	mov	r0, r1
 800d6e8:	b141      	cbz	r1, 800d6fc <__ascii_wctomb+0x18>
 800d6ea:	2aff      	cmp	r2, #255	@ 0xff
 800d6ec:	d904      	bls.n	800d6f8 <__ascii_wctomb+0x14>
 800d6ee:	228a      	movs	r2, #138	@ 0x8a
 800d6f0:	601a      	str	r2, [r3, #0]
 800d6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f6:	4770      	bx	lr
 800d6f8:	700a      	strb	r2, [r1, #0]
 800d6fa:	2001      	movs	r0, #1
 800d6fc:	4770      	bx	lr

0800d6fe <__ssputs_r>:
 800d6fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d702:	688e      	ldr	r6, [r1, #8]
 800d704:	461f      	mov	r7, r3
 800d706:	42be      	cmp	r6, r7
 800d708:	680b      	ldr	r3, [r1, #0]
 800d70a:	4682      	mov	sl, r0
 800d70c:	460c      	mov	r4, r1
 800d70e:	4690      	mov	r8, r2
 800d710:	d82d      	bhi.n	800d76e <__ssputs_r+0x70>
 800d712:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d716:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d71a:	d026      	beq.n	800d76a <__ssputs_r+0x6c>
 800d71c:	6965      	ldr	r5, [r4, #20]
 800d71e:	6909      	ldr	r1, [r1, #16]
 800d720:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d724:	eba3 0901 	sub.w	r9, r3, r1
 800d728:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d72c:	1c7b      	adds	r3, r7, #1
 800d72e:	444b      	add	r3, r9
 800d730:	106d      	asrs	r5, r5, #1
 800d732:	429d      	cmp	r5, r3
 800d734:	bf38      	it	cc
 800d736:	461d      	movcc	r5, r3
 800d738:	0553      	lsls	r3, r2, #21
 800d73a:	d527      	bpl.n	800d78c <__ssputs_r+0x8e>
 800d73c:	4629      	mov	r1, r5
 800d73e:	f7ff fa05 	bl	800cb4c <_malloc_r>
 800d742:	4606      	mov	r6, r0
 800d744:	b360      	cbz	r0, 800d7a0 <__ssputs_r+0xa2>
 800d746:	6921      	ldr	r1, [r4, #16]
 800d748:	464a      	mov	r2, r9
 800d74a:	f7fd ffe6 	bl	800b71a <memcpy>
 800d74e:	89a3      	ldrh	r3, [r4, #12]
 800d750:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d758:	81a3      	strh	r3, [r4, #12]
 800d75a:	6126      	str	r6, [r4, #16]
 800d75c:	6165      	str	r5, [r4, #20]
 800d75e:	444e      	add	r6, r9
 800d760:	eba5 0509 	sub.w	r5, r5, r9
 800d764:	6026      	str	r6, [r4, #0]
 800d766:	60a5      	str	r5, [r4, #8]
 800d768:	463e      	mov	r6, r7
 800d76a:	42be      	cmp	r6, r7
 800d76c:	d900      	bls.n	800d770 <__ssputs_r+0x72>
 800d76e:	463e      	mov	r6, r7
 800d770:	6820      	ldr	r0, [r4, #0]
 800d772:	4632      	mov	r2, r6
 800d774:	4641      	mov	r1, r8
 800d776:	f000 fb69 	bl	800de4c <memmove>
 800d77a:	68a3      	ldr	r3, [r4, #8]
 800d77c:	1b9b      	subs	r3, r3, r6
 800d77e:	60a3      	str	r3, [r4, #8]
 800d780:	6823      	ldr	r3, [r4, #0]
 800d782:	4433      	add	r3, r6
 800d784:	6023      	str	r3, [r4, #0]
 800d786:	2000      	movs	r0, #0
 800d788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d78c:	462a      	mov	r2, r5
 800d78e:	f000 fbdb 	bl	800df48 <_realloc_r>
 800d792:	4606      	mov	r6, r0
 800d794:	2800      	cmp	r0, #0
 800d796:	d1e0      	bne.n	800d75a <__ssputs_r+0x5c>
 800d798:	6921      	ldr	r1, [r4, #16]
 800d79a:	4650      	mov	r0, sl
 800d79c:	f7fe fe28 	bl	800c3f0 <_free_r>
 800d7a0:	230c      	movs	r3, #12
 800d7a2:	f8ca 3000 	str.w	r3, [sl]
 800d7a6:	89a3      	ldrh	r3, [r4, #12]
 800d7a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7ac:	81a3      	strh	r3, [r4, #12]
 800d7ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d7b2:	e7e9      	b.n	800d788 <__ssputs_r+0x8a>

0800d7b4 <_svfiprintf_r>:
 800d7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b8:	4698      	mov	r8, r3
 800d7ba:	898b      	ldrh	r3, [r1, #12]
 800d7bc:	061b      	lsls	r3, r3, #24
 800d7be:	b09d      	sub	sp, #116	@ 0x74
 800d7c0:	4607      	mov	r7, r0
 800d7c2:	460d      	mov	r5, r1
 800d7c4:	4614      	mov	r4, r2
 800d7c6:	d510      	bpl.n	800d7ea <_svfiprintf_r+0x36>
 800d7c8:	690b      	ldr	r3, [r1, #16]
 800d7ca:	b973      	cbnz	r3, 800d7ea <_svfiprintf_r+0x36>
 800d7cc:	2140      	movs	r1, #64	@ 0x40
 800d7ce:	f7ff f9bd 	bl	800cb4c <_malloc_r>
 800d7d2:	6028      	str	r0, [r5, #0]
 800d7d4:	6128      	str	r0, [r5, #16]
 800d7d6:	b930      	cbnz	r0, 800d7e6 <_svfiprintf_r+0x32>
 800d7d8:	230c      	movs	r3, #12
 800d7da:	603b      	str	r3, [r7, #0]
 800d7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e0:	b01d      	add	sp, #116	@ 0x74
 800d7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e6:	2340      	movs	r3, #64	@ 0x40
 800d7e8:	616b      	str	r3, [r5, #20]
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7ee:	2320      	movs	r3, #32
 800d7f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d7f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7f8:	2330      	movs	r3, #48	@ 0x30
 800d7fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d998 <_svfiprintf_r+0x1e4>
 800d7fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d802:	f04f 0901 	mov.w	r9, #1
 800d806:	4623      	mov	r3, r4
 800d808:	469a      	mov	sl, r3
 800d80a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d80e:	b10a      	cbz	r2, 800d814 <_svfiprintf_r+0x60>
 800d810:	2a25      	cmp	r2, #37	@ 0x25
 800d812:	d1f9      	bne.n	800d808 <_svfiprintf_r+0x54>
 800d814:	ebba 0b04 	subs.w	fp, sl, r4
 800d818:	d00b      	beq.n	800d832 <_svfiprintf_r+0x7e>
 800d81a:	465b      	mov	r3, fp
 800d81c:	4622      	mov	r2, r4
 800d81e:	4629      	mov	r1, r5
 800d820:	4638      	mov	r0, r7
 800d822:	f7ff ff6c 	bl	800d6fe <__ssputs_r>
 800d826:	3001      	adds	r0, #1
 800d828:	f000 80a7 	beq.w	800d97a <_svfiprintf_r+0x1c6>
 800d82c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d82e:	445a      	add	r2, fp
 800d830:	9209      	str	r2, [sp, #36]	@ 0x24
 800d832:	f89a 3000 	ldrb.w	r3, [sl]
 800d836:	2b00      	cmp	r3, #0
 800d838:	f000 809f 	beq.w	800d97a <_svfiprintf_r+0x1c6>
 800d83c:	2300      	movs	r3, #0
 800d83e:	f04f 32ff 	mov.w	r2, #4294967295
 800d842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d846:	f10a 0a01 	add.w	sl, sl, #1
 800d84a:	9304      	str	r3, [sp, #16]
 800d84c:	9307      	str	r3, [sp, #28]
 800d84e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d852:	931a      	str	r3, [sp, #104]	@ 0x68
 800d854:	4654      	mov	r4, sl
 800d856:	2205      	movs	r2, #5
 800d858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d85c:	484e      	ldr	r0, [pc, #312]	@ (800d998 <_svfiprintf_r+0x1e4>)
 800d85e:	f7f2 fcc7 	bl	80001f0 <memchr>
 800d862:	9a04      	ldr	r2, [sp, #16]
 800d864:	b9d8      	cbnz	r0, 800d89e <_svfiprintf_r+0xea>
 800d866:	06d0      	lsls	r0, r2, #27
 800d868:	bf44      	itt	mi
 800d86a:	2320      	movmi	r3, #32
 800d86c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d870:	0711      	lsls	r1, r2, #28
 800d872:	bf44      	itt	mi
 800d874:	232b      	movmi	r3, #43	@ 0x2b
 800d876:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d87a:	f89a 3000 	ldrb.w	r3, [sl]
 800d87e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d880:	d015      	beq.n	800d8ae <_svfiprintf_r+0xfa>
 800d882:	9a07      	ldr	r2, [sp, #28]
 800d884:	4654      	mov	r4, sl
 800d886:	2000      	movs	r0, #0
 800d888:	f04f 0c0a 	mov.w	ip, #10
 800d88c:	4621      	mov	r1, r4
 800d88e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d892:	3b30      	subs	r3, #48	@ 0x30
 800d894:	2b09      	cmp	r3, #9
 800d896:	d94b      	bls.n	800d930 <_svfiprintf_r+0x17c>
 800d898:	b1b0      	cbz	r0, 800d8c8 <_svfiprintf_r+0x114>
 800d89a:	9207      	str	r2, [sp, #28]
 800d89c:	e014      	b.n	800d8c8 <_svfiprintf_r+0x114>
 800d89e:	eba0 0308 	sub.w	r3, r0, r8
 800d8a2:	fa09 f303 	lsl.w	r3, r9, r3
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	9304      	str	r3, [sp, #16]
 800d8aa:	46a2      	mov	sl, r4
 800d8ac:	e7d2      	b.n	800d854 <_svfiprintf_r+0xa0>
 800d8ae:	9b03      	ldr	r3, [sp, #12]
 800d8b0:	1d19      	adds	r1, r3, #4
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	9103      	str	r1, [sp, #12]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	bfbb      	ittet	lt
 800d8ba:	425b      	neglt	r3, r3
 800d8bc:	f042 0202 	orrlt.w	r2, r2, #2
 800d8c0:	9307      	strge	r3, [sp, #28]
 800d8c2:	9307      	strlt	r3, [sp, #28]
 800d8c4:	bfb8      	it	lt
 800d8c6:	9204      	strlt	r2, [sp, #16]
 800d8c8:	7823      	ldrb	r3, [r4, #0]
 800d8ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8cc:	d10a      	bne.n	800d8e4 <_svfiprintf_r+0x130>
 800d8ce:	7863      	ldrb	r3, [r4, #1]
 800d8d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8d2:	d132      	bne.n	800d93a <_svfiprintf_r+0x186>
 800d8d4:	9b03      	ldr	r3, [sp, #12]
 800d8d6:	1d1a      	adds	r2, r3, #4
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	9203      	str	r2, [sp, #12]
 800d8dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d8e0:	3402      	adds	r4, #2
 800d8e2:	9305      	str	r3, [sp, #20]
 800d8e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d9a8 <_svfiprintf_r+0x1f4>
 800d8e8:	7821      	ldrb	r1, [r4, #0]
 800d8ea:	2203      	movs	r2, #3
 800d8ec:	4650      	mov	r0, sl
 800d8ee:	f7f2 fc7f 	bl	80001f0 <memchr>
 800d8f2:	b138      	cbz	r0, 800d904 <_svfiprintf_r+0x150>
 800d8f4:	9b04      	ldr	r3, [sp, #16]
 800d8f6:	eba0 000a 	sub.w	r0, r0, sl
 800d8fa:	2240      	movs	r2, #64	@ 0x40
 800d8fc:	4082      	lsls	r2, r0
 800d8fe:	4313      	orrs	r3, r2
 800d900:	3401      	adds	r4, #1
 800d902:	9304      	str	r3, [sp, #16]
 800d904:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d908:	4824      	ldr	r0, [pc, #144]	@ (800d99c <_svfiprintf_r+0x1e8>)
 800d90a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d90e:	2206      	movs	r2, #6
 800d910:	f7f2 fc6e 	bl	80001f0 <memchr>
 800d914:	2800      	cmp	r0, #0
 800d916:	d036      	beq.n	800d986 <_svfiprintf_r+0x1d2>
 800d918:	4b21      	ldr	r3, [pc, #132]	@ (800d9a0 <_svfiprintf_r+0x1ec>)
 800d91a:	bb1b      	cbnz	r3, 800d964 <_svfiprintf_r+0x1b0>
 800d91c:	9b03      	ldr	r3, [sp, #12]
 800d91e:	3307      	adds	r3, #7
 800d920:	f023 0307 	bic.w	r3, r3, #7
 800d924:	3308      	adds	r3, #8
 800d926:	9303      	str	r3, [sp, #12]
 800d928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d92a:	4433      	add	r3, r6
 800d92c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d92e:	e76a      	b.n	800d806 <_svfiprintf_r+0x52>
 800d930:	fb0c 3202 	mla	r2, ip, r2, r3
 800d934:	460c      	mov	r4, r1
 800d936:	2001      	movs	r0, #1
 800d938:	e7a8      	b.n	800d88c <_svfiprintf_r+0xd8>
 800d93a:	2300      	movs	r3, #0
 800d93c:	3401      	adds	r4, #1
 800d93e:	9305      	str	r3, [sp, #20]
 800d940:	4619      	mov	r1, r3
 800d942:	f04f 0c0a 	mov.w	ip, #10
 800d946:	4620      	mov	r0, r4
 800d948:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d94c:	3a30      	subs	r2, #48	@ 0x30
 800d94e:	2a09      	cmp	r2, #9
 800d950:	d903      	bls.n	800d95a <_svfiprintf_r+0x1a6>
 800d952:	2b00      	cmp	r3, #0
 800d954:	d0c6      	beq.n	800d8e4 <_svfiprintf_r+0x130>
 800d956:	9105      	str	r1, [sp, #20]
 800d958:	e7c4      	b.n	800d8e4 <_svfiprintf_r+0x130>
 800d95a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d95e:	4604      	mov	r4, r0
 800d960:	2301      	movs	r3, #1
 800d962:	e7f0      	b.n	800d946 <_svfiprintf_r+0x192>
 800d964:	ab03      	add	r3, sp, #12
 800d966:	9300      	str	r3, [sp, #0]
 800d968:	462a      	mov	r2, r5
 800d96a:	4b0e      	ldr	r3, [pc, #56]	@ (800d9a4 <_svfiprintf_r+0x1f0>)
 800d96c:	a904      	add	r1, sp, #16
 800d96e:	4638      	mov	r0, r7
 800d970:	f7fc fe44 	bl	800a5fc <_printf_float>
 800d974:	1c42      	adds	r2, r0, #1
 800d976:	4606      	mov	r6, r0
 800d978:	d1d6      	bne.n	800d928 <_svfiprintf_r+0x174>
 800d97a:	89ab      	ldrh	r3, [r5, #12]
 800d97c:	065b      	lsls	r3, r3, #25
 800d97e:	f53f af2d 	bmi.w	800d7dc <_svfiprintf_r+0x28>
 800d982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d984:	e72c      	b.n	800d7e0 <_svfiprintf_r+0x2c>
 800d986:	ab03      	add	r3, sp, #12
 800d988:	9300      	str	r3, [sp, #0]
 800d98a:	462a      	mov	r2, r5
 800d98c:	4b05      	ldr	r3, [pc, #20]	@ (800d9a4 <_svfiprintf_r+0x1f0>)
 800d98e:	a904      	add	r1, sp, #16
 800d990:	4638      	mov	r0, r7
 800d992:	f7fd f8cb 	bl	800ab2c <_printf_i>
 800d996:	e7ed      	b.n	800d974 <_svfiprintf_r+0x1c0>
 800d998:	0800e839 	.word	0x0800e839
 800d99c:	0800e843 	.word	0x0800e843
 800d9a0:	0800a5fd 	.word	0x0800a5fd
 800d9a4:	0800d6ff 	.word	0x0800d6ff
 800d9a8:	0800e83f 	.word	0x0800e83f

0800d9ac <__sfputc_r>:
 800d9ac:	6893      	ldr	r3, [r2, #8]
 800d9ae:	3b01      	subs	r3, #1
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	b410      	push	{r4}
 800d9b4:	6093      	str	r3, [r2, #8]
 800d9b6:	da08      	bge.n	800d9ca <__sfputc_r+0x1e>
 800d9b8:	6994      	ldr	r4, [r2, #24]
 800d9ba:	42a3      	cmp	r3, r4
 800d9bc:	db01      	blt.n	800d9c2 <__sfputc_r+0x16>
 800d9be:	290a      	cmp	r1, #10
 800d9c0:	d103      	bne.n	800d9ca <__sfputc_r+0x1e>
 800d9c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9c6:	f7fd bd7a 	b.w	800b4be <__swbuf_r>
 800d9ca:	6813      	ldr	r3, [r2, #0]
 800d9cc:	1c58      	adds	r0, r3, #1
 800d9ce:	6010      	str	r0, [r2, #0]
 800d9d0:	7019      	strb	r1, [r3, #0]
 800d9d2:	4608      	mov	r0, r1
 800d9d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9d8:	4770      	bx	lr

0800d9da <__sfputs_r>:
 800d9da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9dc:	4606      	mov	r6, r0
 800d9de:	460f      	mov	r7, r1
 800d9e0:	4614      	mov	r4, r2
 800d9e2:	18d5      	adds	r5, r2, r3
 800d9e4:	42ac      	cmp	r4, r5
 800d9e6:	d101      	bne.n	800d9ec <__sfputs_r+0x12>
 800d9e8:	2000      	movs	r0, #0
 800d9ea:	e007      	b.n	800d9fc <__sfputs_r+0x22>
 800d9ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9f0:	463a      	mov	r2, r7
 800d9f2:	4630      	mov	r0, r6
 800d9f4:	f7ff ffda 	bl	800d9ac <__sfputc_r>
 800d9f8:	1c43      	adds	r3, r0, #1
 800d9fa:	d1f3      	bne.n	800d9e4 <__sfputs_r+0xa>
 800d9fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da00 <_vfiprintf_r>:
 800da00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da04:	460d      	mov	r5, r1
 800da06:	b09d      	sub	sp, #116	@ 0x74
 800da08:	4614      	mov	r4, r2
 800da0a:	4698      	mov	r8, r3
 800da0c:	4606      	mov	r6, r0
 800da0e:	b118      	cbz	r0, 800da18 <_vfiprintf_r+0x18>
 800da10:	6a03      	ldr	r3, [r0, #32]
 800da12:	b90b      	cbnz	r3, 800da18 <_vfiprintf_r+0x18>
 800da14:	f7fd fc4a 	bl	800b2ac <__sinit>
 800da18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da1a:	07d9      	lsls	r1, r3, #31
 800da1c:	d405      	bmi.n	800da2a <_vfiprintf_r+0x2a>
 800da1e:	89ab      	ldrh	r3, [r5, #12]
 800da20:	059a      	lsls	r2, r3, #22
 800da22:	d402      	bmi.n	800da2a <_vfiprintf_r+0x2a>
 800da24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da26:	f7fd fe6e 	bl	800b706 <__retarget_lock_acquire_recursive>
 800da2a:	89ab      	ldrh	r3, [r5, #12]
 800da2c:	071b      	lsls	r3, r3, #28
 800da2e:	d501      	bpl.n	800da34 <_vfiprintf_r+0x34>
 800da30:	692b      	ldr	r3, [r5, #16]
 800da32:	b99b      	cbnz	r3, 800da5c <_vfiprintf_r+0x5c>
 800da34:	4629      	mov	r1, r5
 800da36:	4630      	mov	r0, r6
 800da38:	f7fd fd80 	bl	800b53c <__swsetup_r>
 800da3c:	b170      	cbz	r0, 800da5c <_vfiprintf_r+0x5c>
 800da3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da40:	07dc      	lsls	r4, r3, #31
 800da42:	d504      	bpl.n	800da4e <_vfiprintf_r+0x4e>
 800da44:	f04f 30ff 	mov.w	r0, #4294967295
 800da48:	b01d      	add	sp, #116	@ 0x74
 800da4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da4e:	89ab      	ldrh	r3, [r5, #12]
 800da50:	0598      	lsls	r0, r3, #22
 800da52:	d4f7      	bmi.n	800da44 <_vfiprintf_r+0x44>
 800da54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da56:	f7fd fe57 	bl	800b708 <__retarget_lock_release_recursive>
 800da5a:	e7f3      	b.n	800da44 <_vfiprintf_r+0x44>
 800da5c:	2300      	movs	r3, #0
 800da5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800da60:	2320      	movs	r3, #32
 800da62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da66:	f8cd 800c 	str.w	r8, [sp, #12]
 800da6a:	2330      	movs	r3, #48	@ 0x30
 800da6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dc1c <_vfiprintf_r+0x21c>
 800da70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da74:	f04f 0901 	mov.w	r9, #1
 800da78:	4623      	mov	r3, r4
 800da7a:	469a      	mov	sl, r3
 800da7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da80:	b10a      	cbz	r2, 800da86 <_vfiprintf_r+0x86>
 800da82:	2a25      	cmp	r2, #37	@ 0x25
 800da84:	d1f9      	bne.n	800da7a <_vfiprintf_r+0x7a>
 800da86:	ebba 0b04 	subs.w	fp, sl, r4
 800da8a:	d00b      	beq.n	800daa4 <_vfiprintf_r+0xa4>
 800da8c:	465b      	mov	r3, fp
 800da8e:	4622      	mov	r2, r4
 800da90:	4629      	mov	r1, r5
 800da92:	4630      	mov	r0, r6
 800da94:	f7ff ffa1 	bl	800d9da <__sfputs_r>
 800da98:	3001      	adds	r0, #1
 800da9a:	f000 80a7 	beq.w	800dbec <_vfiprintf_r+0x1ec>
 800da9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800daa0:	445a      	add	r2, fp
 800daa2:	9209      	str	r2, [sp, #36]	@ 0x24
 800daa4:	f89a 3000 	ldrb.w	r3, [sl]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	f000 809f 	beq.w	800dbec <_vfiprintf_r+0x1ec>
 800daae:	2300      	movs	r3, #0
 800dab0:	f04f 32ff 	mov.w	r2, #4294967295
 800dab4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dab8:	f10a 0a01 	add.w	sl, sl, #1
 800dabc:	9304      	str	r3, [sp, #16]
 800dabe:	9307      	str	r3, [sp, #28]
 800dac0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dac4:	931a      	str	r3, [sp, #104]	@ 0x68
 800dac6:	4654      	mov	r4, sl
 800dac8:	2205      	movs	r2, #5
 800daca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dace:	4853      	ldr	r0, [pc, #332]	@ (800dc1c <_vfiprintf_r+0x21c>)
 800dad0:	f7f2 fb8e 	bl	80001f0 <memchr>
 800dad4:	9a04      	ldr	r2, [sp, #16]
 800dad6:	b9d8      	cbnz	r0, 800db10 <_vfiprintf_r+0x110>
 800dad8:	06d1      	lsls	r1, r2, #27
 800dada:	bf44      	itt	mi
 800dadc:	2320      	movmi	r3, #32
 800dade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dae2:	0713      	lsls	r3, r2, #28
 800dae4:	bf44      	itt	mi
 800dae6:	232b      	movmi	r3, #43	@ 0x2b
 800dae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800daec:	f89a 3000 	ldrb.w	r3, [sl]
 800daf0:	2b2a      	cmp	r3, #42	@ 0x2a
 800daf2:	d015      	beq.n	800db20 <_vfiprintf_r+0x120>
 800daf4:	9a07      	ldr	r2, [sp, #28]
 800daf6:	4654      	mov	r4, sl
 800daf8:	2000      	movs	r0, #0
 800dafa:	f04f 0c0a 	mov.w	ip, #10
 800dafe:	4621      	mov	r1, r4
 800db00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db04:	3b30      	subs	r3, #48	@ 0x30
 800db06:	2b09      	cmp	r3, #9
 800db08:	d94b      	bls.n	800dba2 <_vfiprintf_r+0x1a2>
 800db0a:	b1b0      	cbz	r0, 800db3a <_vfiprintf_r+0x13a>
 800db0c:	9207      	str	r2, [sp, #28]
 800db0e:	e014      	b.n	800db3a <_vfiprintf_r+0x13a>
 800db10:	eba0 0308 	sub.w	r3, r0, r8
 800db14:	fa09 f303 	lsl.w	r3, r9, r3
 800db18:	4313      	orrs	r3, r2
 800db1a:	9304      	str	r3, [sp, #16]
 800db1c:	46a2      	mov	sl, r4
 800db1e:	e7d2      	b.n	800dac6 <_vfiprintf_r+0xc6>
 800db20:	9b03      	ldr	r3, [sp, #12]
 800db22:	1d19      	adds	r1, r3, #4
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	9103      	str	r1, [sp, #12]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	bfbb      	ittet	lt
 800db2c:	425b      	neglt	r3, r3
 800db2e:	f042 0202 	orrlt.w	r2, r2, #2
 800db32:	9307      	strge	r3, [sp, #28]
 800db34:	9307      	strlt	r3, [sp, #28]
 800db36:	bfb8      	it	lt
 800db38:	9204      	strlt	r2, [sp, #16]
 800db3a:	7823      	ldrb	r3, [r4, #0]
 800db3c:	2b2e      	cmp	r3, #46	@ 0x2e
 800db3e:	d10a      	bne.n	800db56 <_vfiprintf_r+0x156>
 800db40:	7863      	ldrb	r3, [r4, #1]
 800db42:	2b2a      	cmp	r3, #42	@ 0x2a
 800db44:	d132      	bne.n	800dbac <_vfiprintf_r+0x1ac>
 800db46:	9b03      	ldr	r3, [sp, #12]
 800db48:	1d1a      	adds	r2, r3, #4
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	9203      	str	r2, [sp, #12]
 800db4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db52:	3402      	adds	r4, #2
 800db54:	9305      	str	r3, [sp, #20]
 800db56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dc2c <_vfiprintf_r+0x22c>
 800db5a:	7821      	ldrb	r1, [r4, #0]
 800db5c:	2203      	movs	r2, #3
 800db5e:	4650      	mov	r0, sl
 800db60:	f7f2 fb46 	bl	80001f0 <memchr>
 800db64:	b138      	cbz	r0, 800db76 <_vfiprintf_r+0x176>
 800db66:	9b04      	ldr	r3, [sp, #16]
 800db68:	eba0 000a 	sub.w	r0, r0, sl
 800db6c:	2240      	movs	r2, #64	@ 0x40
 800db6e:	4082      	lsls	r2, r0
 800db70:	4313      	orrs	r3, r2
 800db72:	3401      	adds	r4, #1
 800db74:	9304      	str	r3, [sp, #16]
 800db76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db7a:	4829      	ldr	r0, [pc, #164]	@ (800dc20 <_vfiprintf_r+0x220>)
 800db7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db80:	2206      	movs	r2, #6
 800db82:	f7f2 fb35 	bl	80001f0 <memchr>
 800db86:	2800      	cmp	r0, #0
 800db88:	d03f      	beq.n	800dc0a <_vfiprintf_r+0x20a>
 800db8a:	4b26      	ldr	r3, [pc, #152]	@ (800dc24 <_vfiprintf_r+0x224>)
 800db8c:	bb1b      	cbnz	r3, 800dbd6 <_vfiprintf_r+0x1d6>
 800db8e:	9b03      	ldr	r3, [sp, #12]
 800db90:	3307      	adds	r3, #7
 800db92:	f023 0307 	bic.w	r3, r3, #7
 800db96:	3308      	adds	r3, #8
 800db98:	9303      	str	r3, [sp, #12]
 800db9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db9c:	443b      	add	r3, r7
 800db9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800dba0:	e76a      	b.n	800da78 <_vfiprintf_r+0x78>
 800dba2:	fb0c 3202 	mla	r2, ip, r2, r3
 800dba6:	460c      	mov	r4, r1
 800dba8:	2001      	movs	r0, #1
 800dbaa:	e7a8      	b.n	800dafe <_vfiprintf_r+0xfe>
 800dbac:	2300      	movs	r3, #0
 800dbae:	3401      	adds	r4, #1
 800dbb0:	9305      	str	r3, [sp, #20]
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	f04f 0c0a 	mov.w	ip, #10
 800dbb8:	4620      	mov	r0, r4
 800dbba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbbe:	3a30      	subs	r2, #48	@ 0x30
 800dbc0:	2a09      	cmp	r2, #9
 800dbc2:	d903      	bls.n	800dbcc <_vfiprintf_r+0x1cc>
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d0c6      	beq.n	800db56 <_vfiprintf_r+0x156>
 800dbc8:	9105      	str	r1, [sp, #20]
 800dbca:	e7c4      	b.n	800db56 <_vfiprintf_r+0x156>
 800dbcc:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e7f0      	b.n	800dbb8 <_vfiprintf_r+0x1b8>
 800dbd6:	ab03      	add	r3, sp, #12
 800dbd8:	9300      	str	r3, [sp, #0]
 800dbda:	462a      	mov	r2, r5
 800dbdc:	4b12      	ldr	r3, [pc, #72]	@ (800dc28 <_vfiprintf_r+0x228>)
 800dbde:	a904      	add	r1, sp, #16
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	f7fc fd0b 	bl	800a5fc <_printf_float>
 800dbe6:	4607      	mov	r7, r0
 800dbe8:	1c78      	adds	r0, r7, #1
 800dbea:	d1d6      	bne.n	800db9a <_vfiprintf_r+0x19a>
 800dbec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbee:	07d9      	lsls	r1, r3, #31
 800dbf0:	d405      	bmi.n	800dbfe <_vfiprintf_r+0x1fe>
 800dbf2:	89ab      	ldrh	r3, [r5, #12]
 800dbf4:	059a      	lsls	r2, r3, #22
 800dbf6:	d402      	bmi.n	800dbfe <_vfiprintf_r+0x1fe>
 800dbf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbfa:	f7fd fd85 	bl	800b708 <__retarget_lock_release_recursive>
 800dbfe:	89ab      	ldrh	r3, [r5, #12]
 800dc00:	065b      	lsls	r3, r3, #25
 800dc02:	f53f af1f 	bmi.w	800da44 <_vfiprintf_r+0x44>
 800dc06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc08:	e71e      	b.n	800da48 <_vfiprintf_r+0x48>
 800dc0a:	ab03      	add	r3, sp, #12
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	462a      	mov	r2, r5
 800dc10:	4b05      	ldr	r3, [pc, #20]	@ (800dc28 <_vfiprintf_r+0x228>)
 800dc12:	a904      	add	r1, sp, #16
 800dc14:	4630      	mov	r0, r6
 800dc16:	f7fc ff89 	bl	800ab2c <_printf_i>
 800dc1a:	e7e4      	b.n	800dbe6 <_vfiprintf_r+0x1e6>
 800dc1c:	0800e839 	.word	0x0800e839
 800dc20:	0800e843 	.word	0x0800e843
 800dc24:	0800a5fd 	.word	0x0800a5fd
 800dc28:	0800d9db 	.word	0x0800d9db
 800dc2c:	0800e83f 	.word	0x0800e83f

0800dc30 <__sflush_r>:
 800dc30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc38:	0716      	lsls	r6, r2, #28
 800dc3a:	4605      	mov	r5, r0
 800dc3c:	460c      	mov	r4, r1
 800dc3e:	d454      	bmi.n	800dcea <__sflush_r+0xba>
 800dc40:	684b      	ldr	r3, [r1, #4]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	dc02      	bgt.n	800dc4c <__sflush_r+0x1c>
 800dc46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	dd48      	ble.n	800dcde <__sflush_r+0xae>
 800dc4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc4e:	2e00      	cmp	r6, #0
 800dc50:	d045      	beq.n	800dcde <__sflush_r+0xae>
 800dc52:	2300      	movs	r3, #0
 800dc54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dc58:	682f      	ldr	r7, [r5, #0]
 800dc5a:	6a21      	ldr	r1, [r4, #32]
 800dc5c:	602b      	str	r3, [r5, #0]
 800dc5e:	d030      	beq.n	800dcc2 <__sflush_r+0x92>
 800dc60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dc62:	89a3      	ldrh	r3, [r4, #12]
 800dc64:	0759      	lsls	r1, r3, #29
 800dc66:	d505      	bpl.n	800dc74 <__sflush_r+0x44>
 800dc68:	6863      	ldr	r3, [r4, #4]
 800dc6a:	1ad2      	subs	r2, r2, r3
 800dc6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dc6e:	b10b      	cbz	r3, 800dc74 <__sflush_r+0x44>
 800dc70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dc72:	1ad2      	subs	r2, r2, r3
 800dc74:	2300      	movs	r3, #0
 800dc76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc78:	6a21      	ldr	r1, [r4, #32]
 800dc7a:	4628      	mov	r0, r5
 800dc7c:	47b0      	blx	r6
 800dc7e:	1c43      	adds	r3, r0, #1
 800dc80:	89a3      	ldrh	r3, [r4, #12]
 800dc82:	d106      	bne.n	800dc92 <__sflush_r+0x62>
 800dc84:	6829      	ldr	r1, [r5, #0]
 800dc86:	291d      	cmp	r1, #29
 800dc88:	d82b      	bhi.n	800dce2 <__sflush_r+0xb2>
 800dc8a:	4a2a      	ldr	r2, [pc, #168]	@ (800dd34 <__sflush_r+0x104>)
 800dc8c:	410a      	asrs	r2, r1
 800dc8e:	07d6      	lsls	r6, r2, #31
 800dc90:	d427      	bmi.n	800dce2 <__sflush_r+0xb2>
 800dc92:	2200      	movs	r2, #0
 800dc94:	6062      	str	r2, [r4, #4]
 800dc96:	04d9      	lsls	r1, r3, #19
 800dc98:	6922      	ldr	r2, [r4, #16]
 800dc9a:	6022      	str	r2, [r4, #0]
 800dc9c:	d504      	bpl.n	800dca8 <__sflush_r+0x78>
 800dc9e:	1c42      	adds	r2, r0, #1
 800dca0:	d101      	bne.n	800dca6 <__sflush_r+0x76>
 800dca2:	682b      	ldr	r3, [r5, #0]
 800dca4:	b903      	cbnz	r3, 800dca8 <__sflush_r+0x78>
 800dca6:	6560      	str	r0, [r4, #84]	@ 0x54
 800dca8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dcaa:	602f      	str	r7, [r5, #0]
 800dcac:	b1b9      	cbz	r1, 800dcde <__sflush_r+0xae>
 800dcae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dcb2:	4299      	cmp	r1, r3
 800dcb4:	d002      	beq.n	800dcbc <__sflush_r+0x8c>
 800dcb6:	4628      	mov	r0, r5
 800dcb8:	f7fe fb9a 	bl	800c3f0 <_free_r>
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	6363      	str	r3, [r4, #52]	@ 0x34
 800dcc0:	e00d      	b.n	800dcde <__sflush_r+0xae>
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	4628      	mov	r0, r5
 800dcc6:	47b0      	blx	r6
 800dcc8:	4602      	mov	r2, r0
 800dcca:	1c50      	adds	r0, r2, #1
 800dccc:	d1c9      	bne.n	800dc62 <__sflush_r+0x32>
 800dcce:	682b      	ldr	r3, [r5, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d0c6      	beq.n	800dc62 <__sflush_r+0x32>
 800dcd4:	2b1d      	cmp	r3, #29
 800dcd6:	d001      	beq.n	800dcdc <__sflush_r+0xac>
 800dcd8:	2b16      	cmp	r3, #22
 800dcda:	d11e      	bne.n	800dd1a <__sflush_r+0xea>
 800dcdc:	602f      	str	r7, [r5, #0]
 800dcde:	2000      	movs	r0, #0
 800dce0:	e022      	b.n	800dd28 <__sflush_r+0xf8>
 800dce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dce6:	b21b      	sxth	r3, r3
 800dce8:	e01b      	b.n	800dd22 <__sflush_r+0xf2>
 800dcea:	690f      	ldr	r7, [r1, #16]
 800dcec:	2f00      	cmp	r7, #0
 800dcee:	d0f6      	beq.n	800dcde <__sflush_r+0xae>
 800dcf0:	0793      	lsls	r3, r2, #30
 800dcf2:	680e      	ldr	r6, [r1, #0]
 800dcf4:	bf08      	it	eq
 800dcf6:	694b      	ldreq	r3, [r1, #20]
 800dcf8:	600f      	str	r7, [r1, #0]
 800dcfa:	bf18      	it	ne
 800dcfc:	2300      	movne	r3, #0
 800dcfe:	eba6 0807 	sub.w	r8, r6, r7
 800dd02:	608b      	str	r3, [r1, #8]
 800dd04:	f1b8 0f00 	cmp.w	r8, #0
 800dd08:	dde9      	ble.n	800dcde <__sflush_r+0xae>
 800dd0a:	6a21      	ldr	r1, [r4, #32]
 800dd0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dd0e:	4643      	mov	r3, r8
 800dd10:	463a      	mov	r2, r7
 800dd12:	4628      	mov	r0, r5
 800dd14:	47b0      	blx	r6
 800dd16:	2800      	cmp	r0, #0
 800dd18:	dc08      	bgt.n	800dd2c <__sflush_r+0xfc>
 800dd1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd22:	81a3      	strh	r3, [r4, #12]
 800dd24:	f04f 30ff 	mov.w	r0, #4294967295
 800dd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd2c:	4407      	add	r7, r0
 800dd2e:	eba8 0800 	sub.w	r8, r8, r0
 800dd32:	e7e7      	b.n	800dd04 <__sflush_r+0xd4>
 800dd34:	dfbffffe 	.word	0xdfbffffe

0800dd38 <_fflush_r>:
 800dd38:	b538      	push	{r3, r4, r5, lr}
 800dd3a:	690b      	ldr	r3, [r1, #16]
 800dd3c:	4605      	mov	r5, r0
 800dd3e:	460c      	mov	r4, r1
 800dd40:	b913      	cbnz	r3, 800dd48 <_fflush_r+0x10>
 800dd42:	2500      	movs	r5, #0
 800dd44:	4628      	mov	r0, r5
 800dd46:	bd38      	pop	{r3, r4, r5, pc}
 800dd48:	b118      	cbz	r0, 800dd52 <_fflush_r+0x1a>
 800dd4a:	6a03      	ldr	r3, [r0, #32]
 800dd4c:	b90b      	cbnz	r3, 800dd52 <_fflush_r+0x1a>
 800dd4e:	f7fd faad 	bl	800b2ac <__sinit>
 800dd52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d0f3      	beq.n	800dd42 <_fflush_r+0xa>
 800dd5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dd5c:	07d0      	lsls	r0, r2, #31
 800dd5e:	d404      	bmi.n	800dd6a <_fflush_r+0x32>
 800dd60:	0599      	lsls	r1, r3, #22
 800dd62:	d402      	bmi.n	800dd6a <_fflush_r+0x32>
 800dd64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd66:	f7fd fcce 	bl	800b706 <__retarget_lock_acquire_recursive>
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	4621      	mov	r1, r4
 800dd6e:	f7ff ff5f 	bl	800dc30 <__sflush_r>
 800dd72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd74:	07da      	lsls	r2, r3, #31
 800dd76:	4605      	mov	r5, r0
 800dd78:	d4e4      	bmi.n	800dd44 <_fflush_r+0xc>
 800dd7a:	89a3      	ldrh	r3, [r4, #12]
 800dd7c:	059b      	lsls	r3, r3, #22
 800dd7e:	d4e1      	bmi.n	800dd44 <_fflush_r+0xc>
 800dd80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd82:	f7fd fcc1 	bl	800b708 <__retarget_lock_release_recursive>
 800dd86:	e7dd      	b.n	800dd44 <_fflush_r+0xc>

0800dd88 <__swhatbuf_r>:
 800dd88:	b570      	push	{r4, r5, r6, lr}
 800dd8a:	460c      	mov	r4, r1
 800dd8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd90:	2900      	cmp	r1, #0
 800dd92:	b096      	sub	sp, #88	@ 0x58
 800dd94:	4615      	mov	r5, r2
 800dd96:	461e      	mov	r6, r3
 800dd98:	da0d      	bge.n	800ddb6 <__swhatbuf_r+0x2e>
 800dd9a:	89a3      	ldrh	r3, [r4, #12]
 800dd9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dda0:	f04f 0100 	mov.w	r1, #0
 800dda4:	bf14      	ite	ne
 800dda6:	2340      	movne	r3, #64	@ 0x40
 800dda8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ddac:	2000      	movs	r0, #0
 800ddae:	6031      	str	r1, [r6, #0]
 800ddb0:	602b      	str	r3, [r5, #0]
 800ddb2:	b016      	add	sp, #88	@ 0x58
 800ddb4:	bd70      	pop	{r4, r5, r6, pc}
 800ddb6:	466a      	mov	r2, sp
 800ddb8:	f000 f862 	bl	800de80 <_fstat_r>
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	dbec      	blt.n	800dd9a <__swhatbuf_r+0x12>
 800ddc0:	9901      	ldr	r1, [sp, #4]
 800ddc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ddc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ddca:	4259      	negs	r1, r3
 800ddcc:	4159      	adcs	r1, r3
 800ddce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ddd2:	e7eb      	b.n	800ddac <__swhatbuf_r+0x24>

0800ddd4 <__smakebuf_r>:
 800ddd4:	898b      	ldrh	r3, [r1, #12]
 800ddd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddd8:	079d      	lsls	r5, r3, #30
 800ddda:	4606      	mov	r6, r0
 800dddc:	460c      	mov	r4, r1
 800ddde:	d507      	bpl.n	800ddf0 <__smakebuf_r+0x1c>
 800dde0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dde4:	6023      	str	r3, [r4, #0]
 800dde6:	6123      	str	r3, [r4, #16]
 800dde8:	2301      	movs	r3, #1
 800ddea:	6163      	str	r3, [r4, #20]
 800ddec:	b003      	add	sp, #12
 800ddee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddf0:	ab01      	add	r3, sp, #4
 800ddf2:	466a      	mov	r2, sp
 800ddf4:	f7ff ffc8 	bl	800dd88 <__swhatbuf_r>
 800ddf8:	9f00      	ldr	r7, [sp, #0]
 800ddfa:	4605      	mov	r5, r0
 800ddfc:	4639      	mov	r1, r7
 800ddfe:	4630      	mov	r0, r6
 800de00:	f7fe fea4 	bl	800cb4c <_malloc_r>
 800de04:	b948      	cbnz	r0, 800de1a <__smakebuf_r+0x46>
 800de06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de0a:	059a      	lsls	r2, r3, #22
 800de0c:	d4ee      	bmi.n	800ddec <__smakebuf_r+0x18>
 800de0e:	f023 0303 	bic.w	r3, r3, #3
 800de12:	f043 0302 	orr.w	r3, r3, #2
 800de16:	81a3      	strh	r3, [r4, #12]
 800de18:	e7e2      	b.n	800dde0 <__smakebuf_r+0xc>
 800de1a:	89a3      	ldrh	r3, [r4, #12]
 800de1c:	6020      	str	r0, [r4, #0]
 800de1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de22:	81a3      	strh	r3, [r4, #12]
 800de24:	9b01      	ldr	r3, [sp, #4]
 800de26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800de2a:	b15b      	cbz	r3, 800de44 <__smakebuf_r+0x70>
 800de2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de30:	4630      	mov	r0, r6
 800de32:	f000 f837 	bl	800dea4 <_isatty_r>
 800de36:	b128      	cbz	r0, 800de44 <__smakebuf_r+0x70>
 800de38:	89a3      	ldrh	r3, [r4, #12]
 800de3a:	f023 0303 	bic.w	r3, r3, #3
 800de3e:	f043 0301 	orr.w	r3, r3, #1
 800de42:	81a3      	strh	r3, [r4, #12]
 800de44:	89a3      	ldrh	r3, [r4, #12]
 800de46:	431d      	orrs	r5, r3
 800de48:	81a5      	strh	r5, [r4, #12]
 800de4a:	e7cf      	b.n	800ddec <__smakebuf_r+0x18>

0800de4c <memmove>:
 800de4c:	4288      	cmp	r0, r1
 800de4e:	b510      	push	{r4, lr}
 800de50:	eb01 0402 	add.w	r4, r1, r2
 800de54:	d902      	bls.n	800de5c <memmove+0x10>
 800de56:	4284      	cmp	r4, r0
 800de58:	4623      	mov	r3, r4
 800de5a:	d807      	bhi.n	800de6c <memmove+0x20>
 800de5c:	1e43      	subs	r3, r0, #1
 800de5e:	42a1      	cmp	r1, r4
 800de60:	d008      	beq.n	800de74 <memmove+0x28>
 800de62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de6a:	e7f8      	b.n	800de5e <memmove+0x12>
 800de6c:	4402      	add	r2, r0
 800de6e:	4601      	mov	r1, r0
 800de70:	428a      	cmp	r2, r1
 800de72:	d100      	bne.n	800de76 <memmove+0x2a>
 800de74:	bd10      	pop	{r4, pc}
 800de76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de7e:	e7f7      	b.n	800de70 <memmove+0x24>

0800de80 <_fstat_r>:
 800de80:	b538      	push	{r3, r4, r5, lr}
 800de82:	4d07      	ldr	r5, [pc, #28]	@ (800dea0 <_fstat_r+0x20>)
 800de84:	2300      	movs	r3, #0
 800de86:	4604      	mov	r4, r0
 800de88:	4608      	mov	r0, r1
 800de8a:	4611      	mov	r1, r2
 800de8c:	602b      	str	r3, [r5, #0]
 800de8e:	f7f4 fb9f 	bl	80025d0 <_fstat>
 800de92:	1c43      	adds	r3, r0, #1
 800de94:	d102      	bne.n	800de9c <_fstat_r+0x1c>
 800de96:	682b      	ldr	r3, [r5, #0]
 800de98:	b103      	cbz	r3, 800de9c <_fstat_r+0x1c>
 800de9a:	6023      	str	r3, [r4, #0]
 800de9c:	bd38      	pop	{r3, r4, r5, pc}
 800de9e:	bf00      	nop
 800dea0:	200007d8 	.word	0x200007d8

0800dea4 <_isatty_r>:
 800dea4:	b538      	push	{r3, r4, r5, lr}
 800dea6:	4d06      	ldr	r5, [pc, #24]	@ (800dec0 <_isatty_r+0x1c>)
 800dea8:	2300      	movs	r3, #0
 800deaa:	4604      	mov	r4, r0
 800deac:	4608      	mov	r0, r1
 800deae:	602b      	str	r3, [r5, #0]
 800deb0:	f7f4 fb9e 	bl	80025f0 <_isatty>
 800deb4:	1c43      	adds	r3, r0, #1
 800deb6:	d102      	bne.n	800debe <_isatty_r+0x1a>
 800deb8:	682b      	ldr	r3, [r5, #0]
 800deba:	b103      	cbz	r3, 800debe <_isatty_r+0x1a>
 800debc:	6023      	str	r3, [r4, #0]
 800debe:	bd38      	pop	{r3, r4, r5, pc}
 800dec0:	200007d8 	.word	0x200007d8

0800dec4 <_sbrk_r>:
 800dec4:	b538      	push	{r3, r4, r5, lr}
 800dec6:	4d06      	ldr	r5, [pc, #24]	@ (800dee0 <_sbrk_r+0x1c>)
 800dec8:	2300      	movs	r3, #0
 800deca:	4604      	mov	r4, r0
 800decc:	4608      	mov	r0, r1
 800dece:	602b      	str	r3, [r5, #0]
 800ded0:	f7f4 fba6 	bl	8002620 <_sbrk>
 800ded4:	1c43      	adds	r3, r0, #1
 800ded6:	d102      	bne.n	800dede <_sbrk_r+0x1a>
 800ded8:	682b      	ldr	r3, [r5, #0]
 800deda:	b103      	cbz	r3, 800dede <_sbrk_r+0x1a>
 800dedc:	6023      	str	r3, [r4, #0]
 800dede:	bd38      	pop	{r3, r4, r5, pc}
 800dee0:	200007d8 	.word	0x200007d8

0800dee4 <__assert_func>:
 800dee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dee6:	4614      	mov	r4, r2
 800dee8:	461a      	mov	r2, r3
 800deea:	4b09      	ldr	r3, [pc, #36]	@ (800df10 <__assert_func+0x2c>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	4605      	mov	r5, r0
 800def0:	68d8      	ldr	r0, [r3, #12]
 800def2:	b954      	cbnz	r4, 800df0a <__assert_func+0x26>
 800def4:	4b07      	ldr	r3, [pc, #28]	@ (800df14 <__assert_func+0x30>)
 800def6:	461c      	mov	r4, r3
 800def8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800defc:	9100      	str	r1, [sp, #0]
 800defe:	462b      	mov	r3, r5
 800df00:	4905      	ldr	r1, [pc, #20]	@ (800df18 <__assert_func+0x34>)
 800df02:	f000 f84f 	bl	800dfa4 <fiprintf>
 800df06:	f000 f85f 	bl	800dfc8 <abort>
 800df0a:	4b04      	ldr	r3, [pc, #16]	@ (800df1c <__assert_func+0x38>)
 800df0c:	e7f4      	b.n	800def8 <__assert_func+0x14>
 800df0e:	bf00      	nop
 800df10:	20000184 	.word	0x20000184
 800df14:	0800e885 	.word	0x0800e885
 800df18:	0800e857 	.word	0x0800e857
 800df1c:	0800e84a 	.word	0x0800e84a

0800df20 <_calloc_r>:
 800df20:	b570      	push	{r4, r5, r6, lr}
 800df22:	fba1 5402 	umull	r5, r4, r1, r2
 800df26:	b93c      	cbnz	r4, 800df38 <_calloc_r+0x18>
 800df28:	4629      	mov	r1, r5
 800df2a:	f7fe fe0f 	bl	800cb4c <_malloc_r>
 800df2e:	4606      	mov	r6, r0
 800df30:	b928      	cbnz	r0, 800df3e <_calloc_r+0x1e>
 800df32:	2600      	movs	r6, #0
 800df34:	4630      	mov	r0, r6
 800df36:	bd70      	pop	{r4, r5, r6, pc}
 800df38:	220c      	movs	r2, #12
 800df3a:	6002      	str	r2, [r0, #0]
 800df3c:	e7f9      	b.n	800df32 <_calloc_r+0x12>
 800df3e:	462a      	mov	r2, r5
 800df40:	4621      	mov	r1, r4
 800df42:	f7fd fb51 	bl	800b5e8 <memset>
 800df46:	e7f5      	b.n	800df34 <_calloc_r+0x14>

0800df48 <_realloc_r>:
 800df48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df4c:	4680      	mov	r8, r0
 800df4e:	4615      	mov	r5, r2
 800df50:	460c      	mov	r4, r1
 800df52:	b921      	cbnz	r1, 800df5e <_realloc_r+0x16>
 800df54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df58:	4611      	mov	r1, r2
 800df5a:	f7fe bdf7 	b.w	800cb4c <_malloc_r>
 800df5e:	b92a      	cbnz	r2, 800df6c <_realloc_r+0x24>
 800df60:	f7fe fa46 	bl	800c3f0 <_free_r>
 800df64:	2400      	movs	r4, #0
 800df66:	4620      	mov	r0, r4
 800df68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df6c:	f000 f833 	bl	800dfd6 <_malloc_usable_size_r>
 800df70:	4285      	cmp	r5, r0
 800df72:	4606      	mov	r6, r0
 800df74:	d802      	bhi.n	800df7c <_realloc_r+0x34>
 800df76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800df7a:	d8f4      	bhi.n	800df66 <_realloc_r+0x1e>
 800df7c:	4629      	mov	r1, r5
 800df7e:	4640      	mov	r0, r8
 800df80:	f7fe fde4 	bl	800cb4c <_malloc_r>
 800df84:	4607      	mov	r7, r0
 800df86:	2800      	cmp	r0, #0
 800df88:	d0ec      	beq.n	800df64 <_realloc_r+0x1c>
 800df8a:	42b5      	cmp	r5, r6
 800df8c:	462a      	mov	r2, r5
 800df8e:	4621      	mov	r1, r4
 800df90:	bf28      	it	cs
 800df92:	4632      	movcs	r2, r6
 800df94:	f7fd fbc1 	bl	800b71a <memcpy>
 800df98:	4621      	mov	r1, r4
 800df9a:	4640      	mov	r0, r8
 800df9c:	f7fe fa28 	bl	800c3f0 <_free_r>
 800dfa0:	463c      	mov	r4, r7
 800dfa2:	e7e0      	b.n	800df66 <_realloc_r+0x1e>

0800dfa4 <fiprintf>:
 800dfa4:	b40e      	push	{r1, r2, r3}
 800dfa6:	b503      	push	{r0, r1, lr}
 800dfa8:	4601      	mov	r1, r0
 800dfaa:	ab03      	add	r3, sp, #12
 800dfac:	4805      	ldr	r0, [pc, #20]	@ (800dfc4 <fiprintf+0x20>)
 800dfae:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfb2:	6800      	ldr	r0, [r0, #0]
 800dfb4:	9301      	str	r3, [sp, #4]
 800dfb6:	f7ff fd23 	bl	800da00 <_vfiprintf_r>
 800dfba:	b002      	add	sp, #8
 800dfbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfc0:	b003      	add	sp, #12
 800dfc2:	4770      	bx	lr
 800dfc4:	20000184 	.word	0x20000184

0800dfc8 <abort>:
 800dfc8:	b508      	push	{r3, lr}
 800dfca:	2006      	movs	r0, #6
 800dfcc:	f000 f834 	bl	800e038 <raise>
 800dfd0:	2001      	movs	r0, #1
 800dfd2:	f7f4 faad 	bl	8002530 <_exit>

0800dfd6 <_malloc_usable_size_r>:
 800dfd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfda:	1f18      	subs	r0, r3, #4
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	bfbc      	itt	lt
 800dfe0:	580b      	ldrlt	r3, [r1, r0]
 800dfe2:	18c0      	addlt	r0, r0, r3
 800dfe4:	4770      	bx	lr

0800dfe6 <_raise_r>:
 800dfe6:	291f      	cmp	r1, #31
 800dfe8:	b538      	push	{r3, r4, r5, lr}
 800dfea:	4605      	mov	r5, r0
 800dfec:	460c      	mov	r4, r1
 800dfee:	d904      	bls.n	800dffa <_raise_r+0x14>
 800dff0:	2316      	movs	r3, #22
 800dff2:	6003      	str	r3, [r0, #0]
 800dff4:	f04f 30ff 	mov.w	r0, #4294967295
 800dff8:	bd38      	pop	{r3, r4, r5, pc}
 800dffa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dffc:	b112      	cbz	r2, 800e004 <_raise_r+0x1e>
 800dffe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e002:	b94b      	cbnz	r3, 800e018 <_raise_r+0x32>
 800e004:	4628      	mov	r0, r5
 800e006:	f000 f831 	bl	800e06c <_getpid_r>
 800e00a:	4622      	mov	r2, r4
 800e00c:	4601      	mov	r1, r0
 800e00e:	4628      	mov	r0, r5
 800e010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e014:	f000 b818 	b.w	800e048 <_kill_r>
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d00a      	beq.n	800e032 <_raise_r+0x4c>
 800e01c:	1c59      	adds	r1, r3, #1
 800e01e:	d103      	bne.n	800e028 <_raise_r+0x42>
 800e020:	2316      	movs	r3, #22
 800e022:	6003      	str	r3, [r0, #0]
 800e024:	2001      	movs	r0, #1
 800e026:	e7e7      	b.n	800dff8 <_raise_r+0x12>
 800e028:	2100      	movs	r1, #0
 800e02a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e02e:	4620      	mov	r0, r4
 800e030:	4798      	blx	r3
 800e032:	2000      	movs	r0, #0
 800e034:	e7e0      	b.n	800dff8 <_raise_r+0x12>
	...

0800e038 <raise>:
 800e038:	4b02      	ldr	r3, [pc, #8]	@ (800e044 <raise+0xc>)
 800e03a:	4601      	mov	r1, r0
 800e03c:	6818      	ldr	r0, [r3, #0]
 800e03e:	f7ff bfd2 	b.w	800dfe6 <_raise_r>
 800e042:	bf00      	nop
 800e044:	20000184 	.word	0x20000184

0800e048 <_kill_r>:
 800e048:	b538      	push	{r3, r4, r5, lr}
 800e04a:	4d07      	ldr	r5, [pc, #28]	@ (800e068 <_kill_r+0x20>)
 800e04c:	2300      	movs	r3, #0
 800e04e:	4604      	mov	r4, r0
 800e050:	4608      	mov	r0, r1
 800e052:	4611      	mov	r1, r2
 800e054:	602b      	str	r3, [r5, #0]
 800e056:	f7f4 fa5b 	bl	8002510 <_kill>
 800e05a:	1c43      	adds	r3, r0, #1
 800e05c:	d102      	bne.n	800e064 <_kill_r+0x1c>
 800e05e:	682b      	ldr	r3, [r5, #0]
 800e060:	b103      	cbz	r3, 800e064 <_kill_r+0x1c>
 800e062:	6023      	str	r3, [r4, #0]
 800e064:	bd38      	pop	{r3, r4, r5, pc}
 800e066:	bf00      	nop
 800e068:	200007d8 	.word	0x200007d8

0800e06c <_getpid_r>:
 800e06c:	f7f4 ba48 	b.w	8002500 <_getpid>

0800e070 <_init>:
 800e070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e072:	bf00      	nop
 800e074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e076:	bc08      	pop	{r3}
 800e078:	469e      	mov	lr, r3
 800e07a:	4770      	bx	lr

0800e07c <_fini>:
 800e07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e07e:	bf00      	nop
 800e080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e082:	bc08      	pop	{r3}
 800e084:	469e      	mov	lr, r3
 800e086:	4770      	bx	lr
