
mini_ingenuity_2A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e38  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08007fc8  08007fc8  00008fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008178  08008178  0000a068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008178  08008178  00009178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008180  08008180  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008180  08008180  00009180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008184  08008184  00009184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008188  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000068  080081f0  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  080081f0  0000a558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af41  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003959  00000000  00000000  00024fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a28  00000000  00000000  00028938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001453  00000000  00000000  0002a360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f884  00000000  00000000  0002b7b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ed61  00000000  00000000  0004b037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c49c2  00000000  00000000  00069d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e75a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007834  00000000  00000000  0012e7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00135fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007fb0 	.word	0x08007fb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08007fb0 	.word	0x08007fb0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a60:	f000 b988 	b.w	8000d74 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	468e      	mov	lr, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	4688      	mov	r8, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4617      	mov	r7, r2
 8000a90:	d962      	bls.n	8000b58 <__udivmoddi4+0xdc>
 8000a92:	fab2 f682 	clz	r6, r2
 8000a96:	b14e      	cbz	r6, 8000aac <__udivmoddi4+0x30>
 8000a98:	f1c6 0320 	rsb	r3, r6, #32
 8000a9c:	fa01 f806 	lsl.w	r8, r1, r6
 8000aa0:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa4:	40b7      	lsls	r7, r6
 8000aa6:	ea43 0808 	orr.w	r8, r3, r8
 8000aaa:	40b4      	lsls	r4, r6
 8000aac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab0:	fa1f fc87 	uxth.w	ip, r7
 8000ab4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ab8:	0c23      	lsrs	r3, r4, #16
 8000aba:	fb0e 8811 	mls	r8, lr, r1, r8
 8000abe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d909      	bls.n	8000ade <__udivmoddi4+0x62>
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000ad0:	f080 80ea 	bcs.w	8000ca8 <__udivmoddi4+0x22c>
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	f240 80e7 	bls.w	8000ca8 <__udivmoddi4+0x22c>
 8000ada:	3902      	subs	r1, #2
 8000adc:	443b      	add	r3, r7
 8000ade:	1a9a      	subs	r2, r3, r2
 8000ae0:	b2a3      	uxth	r3, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aee:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af2:	459c      	cmp	ip, r3
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0x8e>
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000afc:	f080 80d6 	bcs.w	8000cac <__udivmoddi4+0x230>
 8000b00:	459c      	cmp	ip, r3
 8000b02:	f240 80d3 	bls.w	8000cac <__udivmoddi4+0x230>
 8000b06:	443b      	add	r3, r7
 8000b08:	3802      	subs	r0, #2
 8000b0a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b0e:	eba3 030c 	sub.w	r3, r3, ip
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11d      	cbz	r5, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40f3      	lsrs	r3, r6
 8000b18:	2200      	movs	r2, #0
 8000b1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d905      	bls.n	8000b32 <__udivmoddi4+0xb6>
 8000b26:	b10d      	cbz	r5, 8000b2c <__udivmoddi4+0xb0>
 8000b28:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4608      	mov	r0, r1
 8000b30:	e7f5      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b32:	fab3 f183 	clz	r1, r3
 8000b36:	2900      	cmp	r1, #0
 8000b38:	d146      	bne.n	8000bc8 <__udivmoddi4+0x14c>
 8000b3a:	4573      	cmp	r3, lr
 8000b3c:	d302      	bcc.n	8000b44 <__udivmoddi4+0xc8>
 8000b3e:	4282      	cmp	r2, r0
 8000b40:	f200 8105 	bhi.w	8000d4e <__udivmoddi4+0x2d2>
 8000b44:	1a84      	subs	r4, r0, r2
 8000b46:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	4690      	mov	r8, r2
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d0e5      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b52:	e9c5 4800 	strd	r4, r8, [r5]
 8000b56:	e7e2      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	f000 8090 	beq.w	8000c7e <__udivmoddi4+0x202>
 8000b5e:	fab2 f682 	clz	r6, r2
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	f040 80a4 	bne.w	8000cb0 <__udivmoddi4+0x234>
 8000b68:	1a8a      	subs	r2, r1, r2
 8000b6a:	0c03      	lsrs	r3, r0, #16
 8000b6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b70:	b280      	uxth	r0, r0
 8000b72:	b2bc      	uxth	r4, r7
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b7a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b82:	fb04 f20c 	mul.w	r2, r4, ip
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d907      	bls.n	8000b9a <__udivmoddi4+0x11e>
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x11c>
 8000b92:	429a      	cmp	r2, r3
 8000b94:	f200 80e0 	bhi.w	8000d58 <__udivmoddi4+0x2dc>
 8000b98:	46c4      	mov	ip, r8
 8000b9a:	1a9b      	subs	r3, r3, r2
 8000b9c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ba0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ba4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ba8:	fb02 f404 	mul.w	r4, r2, r4
 8000bac:	429c      	cmp	r4, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x144>
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x142>
 8000bb8:	429c      	cmp	r4, r3
 8000bba:	f200 80ca 	bhi.w	8000d52 <__udivmoddi4+0x2d6>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	1b1b      	subs	r3, r3, r4
 8000bc2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bc6:	e7a5      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bc8:	f1c1 0620 	rsb	r6, r1, #32
 8000bcc:	408b      	lsls	r3, r1
 8000bce:	fa22 f706 	lsr.w	r7, r2, r6
 8000bd2:	431f      	orrs	r7, r3
 8000bd4:	fa0e f401 	lsl.w	r4, lr, r1
 8000bd8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bdc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000be0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000be4:	4323      	orrs	r3, r4
 8000be6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bea:	fa1f fc87 	uxth.w	ip, r7
 8000bee:	fbbe f0f9 	udiv	r0, lr, r9
 8000bf2:	0c1c      	lsrs	r4, r3, #16
 8000bf4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bf8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bfc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	fa02 f201 	lsl.w	r2, r2, r1
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x1a0>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000c0e:	f080 809c 	bcs.w	8000d4a <__udivmoddi4+0x2ce>
 8000c12:	45a6      	cmp	lr, r4
 8000c14:	f240 8099 	bls.w	8000d4a <__udivmoddi4+0x2ce>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	eba4 040e 	sub.w	r4, r4, lr
 8000c20:	fa1f fe83 	uxth.w	lr, r3
 8000c24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c28:	fb09 4413 	mls	r4, r9, r3, r4
 8000c2c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c30:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c34:	45a4      	cmp	ip, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x1ce>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000c3e:	f080 8082 	bcs.w	8000d46 <__udivmoddi4+0x2ca>
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d97f      	bls.n	8000d46 <__udivmoddi4+0x2ca>
 8000c46:	3b02      	subs	r3, #2
 8000c48:	443c      	add	r4, r7
 8000c4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c4e:	eba4 040c 	sub.w	r4, r4, ip
 8000c52:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c56:	4564      	cmp	r4, ip
 8000c58:	4673      	mov	r3, lr
 8000c5a:	46e1      	mov	r9, ip
 8000c5c:	d362      	bcc.n	8000d24 <__udivmoddi4+0x2a8>
 8000c5e:	d05f      	beq.n	8000d20 <__udivmoddi4+0x2a4>
 8000c60:	b15d      	cbz	r5, 8000c7a <__udivmoddi4+0x1fe>
 8000c62:	ebb8 0203 	subs.w	r2, r8, r3
 8000c66:	eb64 0409 	sbc.w	r4, r4, r9
 8000c6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c6e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c72:	431e      	orrs	r6, r3
 8000c74:	40cc      	lsrs	r4, r1
 8000c76:	e9c5 6400 	strd	r6, r4, [r5]
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	e74f      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000c7e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c82:	0c01      	lsrs	r1, r0, #16
 8000c84:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c88:	b280      	uxth	r0, r0
 8000c8a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4638      	mov	r0, r7
 8000c92:	463c      	mov	r4, r7
 8000c94:	46b8      	mov	r8, r7
 8000c96:	46be      	mov	lr, r7
 8000c98:	2620      	movs	r6, #32
 8000c9a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c9e:	eba2 0208 	sub.w	r2, r2, r8
 8000ca2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ca6:	e766      	b.n	8000b76 <__udivmoddi4+0xfa>
 8000ca8:	4601      	mov	r1, r0
 8000caa:	e718      	b.n	8000ade <__udivmoddi4+0x62>
 8000cac:	4610      	mov	r0, r2
 8000cae:	e72c      	b.n	8000b0a <__udivmoddi4+0x8e>
 8000cb0:	f1c6 0220 	rsb	r2, r6, #32
 8000cb4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cb8:	40b7      	lsls	r7, r6
 8000cba:	40b1      	lsls	r1, r6
 8000cbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cca:	b2bc      	uxth	r4, r7
 8000ccc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb08 f904 	mul.w	r9, r8, r4
 8000cda:	40b0      	lsls	r0, r6
 8000cdc:	4589      	cmp	r9, r1
 8000cde:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ce2:	b280      	uxth	r0, r0
 8000ce4:	d93e      	bls.n	8000d64 <__udivmoddi4+0x2e8>
 8000ce6:	1879      	adds	r1, r7, r1
 8000ce8:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000cec:	d201      	bcs.n	8000cf2 <__udivmoddi4+0x276>
 8000cee:	4589      	cmp	r9, r1
 8000cf0:	d81f      	bhi.n	8000d32 <__udivmoddi4+0x2b6>
 8000cf2:	eba1 0109 	sub.w	r1, r1, r9
 8000cf6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cfa:	fb09 f804 	mul.w	r8, r9, r4
 8000cfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d02:	b292      	uxth	r2, r2
 8000d04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d08:	4542      	cmp	r2, r8
 8000d0a:	d229      	bcs.n	8000d60 <__udivmoddi4+0x2e4>
 8000d0c:	18ba      	adds	r2, r7, r2
 8000d0e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000d12:	d2c4      	bcs.n	8000c9e <__udivmoddi4+0x222>
 8000d14:	4542      	cmp	r2, r8
 8000d16:	d2c2      	bcs.n	8000c9e <__udivmoddi4+0x222>
 8000d18:	f1a9 0102 	sub.w	r1, r9, #2
 8000d1c:	443a      	add	r2, r7
 8000d1e:	e7be      	b.n	8000c9e <__udivmoddi4+0x222>
 8000d20:	45f0      	cmp	r8, lr
 8000d22:	d29d      	bcs.n	8000c60 <__udivmoddi4+0x1e4>
 8000d24:	ebbe 0302 	subs.w	r3, lr, r2
 8000d28:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	46e1      	mov	r9, ip
 8000d30:	e796      	b.n	8000c60 <__udivmoddi4+0x1e4>
 8000d32:	eba7 0909 	sub.w	r9, r7, r9
 8000d36:	4449      	add	r1, r9
 8000d38:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d3c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d40:	fb09 f804 	mul.w	r8, r9, r4
 8000d44:	e7db      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d46:	4673      	mov	r3, lr
 8000d48:	e77f      	b.n	8000c4a <__udivmoddi4+0x1ce>
 8000d4a:	4650      	mov	r0, sl
 8000d4c:	e766      	b.n	8000c1c <__udivmoddi4+0x1a0>
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e6fd      	b.n	8000b4e <__udivmoddi4+0xd2>
 8000d52:	443b      	add	r3, r7
 8000d54:	3a02      	subs	r2, #2
 8000d56:	e733      	b.n	8000bc0 <__udivmoddi4+0x144>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	443b      	add	r3, r7
 8000d5e:	e71c      	b.n	8000b9a <__udivmoddi4+0x11e>
 8000d60:	4649      	mov	r1, r9
 8000d62:	e79c      	b.n	8000c9e <__udivmoddi4+0x222>
 8000d64:	eba1 0109 	sub.w	r1, r1, r9
 8000d68:	46c4      	mov	ip, r8
 8000d6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d6e:	fb09 f804 	mul.w	r8, r9, r4
 8000d72:	e7c4      	b.n	8000cfe <__udivmoddi4+0x282>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	@ 0x28
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
 8000d98:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e58 <MX_ADC1_Init+0xe0>)
 8000d9c:	4a2f      	ldr	r2, [pc, #188]	@ (8000e5c <MX_ADC1_Init+0xe4>)
 8000d9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000da0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e58 <MX_ADC1_Init+0xe0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000da6:	4b2c      	ldr	r3, [pc, #176]	@ (8000e58 <MX_ADC1_Init+0xe0>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dac:	4b2a      	ldr	r3, [pc, #168]	@ (8000e58 <MX_ADC1_Init+0xe0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000db2:	4b29      	ldr	r3, [pc, #164]	@ (8000e58 <MX_ADC1_Init+0xe0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000db8:	4b27      	ldr	r3, [pc, #156]	@ (8000e58 <MX_ADC1_Init+0xe0>)
 8000dba:	2204      	movs	r2, #4
 8000dbc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dbe:	4b26      	ldr	r3, [pc, #152]	@ (8000e58 <MX_ADC1_Init+0xe0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dc4:	4b24      	ldr	r3, [pc, #144]	@ (8000e58 <MX_ADC1_Init+0xe0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000dca:	4b23      	ldr	r3, [pc, #140]	@ (8000e58 <MX_ADC1_Init+0xe0>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd0:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <MX_ADC1_Init+0xe0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e58 <MX_ADC1_Init+0xe0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	@ (8000e58 <MX_ADC1_Init+0xe0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000de4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <MX_ADC1_Init+0xe0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <MX_ADC1_Init+0xe0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <MX_ADC1_Init+0xe0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dfa:	4817      	ldr	r0, [pc, #92]	@ (8000e58 <MX_ADC1_Init+0xe0>)
 8000dfc:	f001 f87e 	bl	8001efc <HAL_ADC_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000e06:	f000 fab4 	bl	8001372 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	4810      	ldr	r0, [pc, #64]	@ (8000e58 <MX_ADC1_Init+0xe0>)
 8000e16:	f001 fddd 	bl	80029d4 <HAL_ADCEx_MultiModeConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e20:	f000 faa7 	bl	8001372 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000e24:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <MX_ADC1_Init+0xe8>)
 8000e26:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e28:	2306      	movs	r3, #6
 8000e2a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e30:	237f      	movs	r3, #127	@ 0x7f
 8000e32:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e34:	2304      	movs	r3, #4
 8000e36:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <MX_ADC1_Init+0xe0>)
 8000e42:	f001 f9a5 	bl	8002190 <HAL_ADC_ConfigChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000e4c:	f000 fa91 	bl	8001372 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	@ 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000084 	.word	0x20000084
 8000e5c:	50040000 	.word	0x50040000
 8000e60:	3ef08000 	.word	0x3ef08000

08000e64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	@ 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a15      	ldr	r2, [pc, #84]	@ (8000ed8 <HAL_ADC_MspInit+0x74>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d123      	bne.n	8000ece <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <HAL_ADC_MspInit+0x78>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	4a14      	ldr	r2, [pc, #80]	@ (8000edc <HAL_ADC_MspInit+0x78>)
 8000e8c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e92:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <HAL_ADC_MspInit+0x78>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <HAL_ADC_MspInit+0x78>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	4a0e      	ldr	r2, [pc, #56]	@ (8000edc <HAL_ADC_MspInit+0x78>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <HAL_ADC_MspInit+0x78>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = BATTERIE_Pin;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000eba:	230b      	movs	r3, #11
 8000ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATTERIE_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <HAL_ADC_MspInit+0x7c>)
 8000eca:	f001 ff39 	bl	8002d40 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	@ 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	50040000 	.word	0x50040000
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	48000400 	.word	0x48000400

08000ee4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb0 <MX_GPIO_Init+0xcc>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	4a2c      	ldr	r2, [pc, #176]	@ (8000fb0 <MX_GPIO_Init+0xcc>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f06:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb0 <MX_GPIO_Init+0xcc>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	4b27      	ldr	r3, [pc, #156]	@ (8000fb0 <MX_GPIO_Init+0xcc>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	4a26      	ldr	r2, [pc, #152]	@ (8000fb0 <MX_GPIO_Init+0xcc>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1e:	4b24      	ldr	r3, [pc, #144]	@ (8000fb0 <MX_GPIO_Init+0xcc>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f34:	f002 f876 	bl	8003024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2118      	movs	r1, #24
 8000f3c:	481d      	ldr	r0, [pc, #116]	@ (8000fb4 <MX_GPIO_Init+0xd0>)
 8000f3e:	f002 f871 	bl	8003024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000f42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5e:	f001 feef 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8000f62:	2318      	movs	r3, #24
 8000f64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	4619      	mov	r1, r3
 8000f78:	480e      	ldr	r0, [pc, #56]	@ (8000fb4 <MX_GPIO_Init+0xd0>)
 8000f7a:	f001 fee1 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_INT_Pin */
  GPIO_InitStruct.Pin = TOF_INT_Pin;
 8000f7e:	2320      	movs	r3, #32
 8000f80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f82:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TOF_INT_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	4619      	mov	r1, r3
 8000f92:	4808      	ldr	r0, [pc, #32]	@ (8000fb4 <MX_GPIO_Init+0xd0>)
 8000f94:	f001 fed4 	bl	8002d40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2017      	movs	r0, #23
 8000f9e:	f001 fe98 	bl	8002cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fa2:	2017      	movs	r0, #23
 8000fa4:	f001 feb1 	bl	8002d0a <HAL_NVIC_EnableIRQ>

}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	48000400 	.word	0x48000400

08000fb8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800102c <MX_I2C1_Init+0x74>)
 8000fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001030 <MX_I2C1_Init+0x78>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800102c <MX_I2C1_Init+0x74>)
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001034 <MX_I2C1_Init+0x7c>)
 8000fc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fc8:	4b18      	ldr	r3, [pc, #96]	@ (800102c <MX_I2C1_Init+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fce:	4b17      	ldr	r3, [pc, #92]	@ (800102c <MX_I2C1_Init+0x74>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd4:	4b15      	ldr	r3, [pc, #84]	@ (800102c <MX_I2C1_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fda:	4b14      	ldr	r3, [pc, #80]	@ (800102c <MX_I2C1_Init+0x74>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <MX_I2C1_Init+0x74>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	@ (800102c <MX_I2C1_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <MX_I2C1_Init+0x74>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ff2:	480e      	ldr	r0, [pc, #56]	@ (800102c <MX_I2C1_Init+0x74>)
 8000ff4:	f002 f846 	bl	8003084 <HAL_I2C_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ffe:	f000 f9b8 	bl	8001372 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001002:	2100      	movs	r1, #0
 8001004:	4809      	ldr	r0, [pc, #36]	@ (800102c <MX_I2C1_Init+0x74>)
 8001006:	f002 fd8d 	bl	8003b24 <HAL_I2CEx_ConfigAnalogFilter>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001010:	f000 f9af 	bl	8001372 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001014:	2100      	movs	r1, #0
 8001016:	4805      	ldr	r0, [pc, #20]	@ (800102c <MX_I2C1_Init+0x74>)
 8001018:	f002 fdcf 	bl	8003bba <HAL_I2CEx_ConfigDigitalFilter>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001022:	f000 f9a6 	bl	8001372 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200000e8 	.word	0x200000e8
 8001030:	40005400 	.word	0x40005400
 8001034:	10909cec 	.word	0x10909cec

08001038 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b096      	sub	sp, #88	@ 0x58
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	2234      	movs	r2, #52	@ 0x34
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f006 f951 	bl	8007300 <memset>
  if(i2cHandle->Instance==I2C1)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a1f      	ldr	r2, [pc, #124]	@ (80010e0 <HAL_I2C_MspInit+0xa8>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d136      	bne.n	80010d6 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001068:	2340      	movs	r3, #64	@ 0x40
 800106a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800106c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	4618      	mov	r0, r3
 8001078:	f003 fcd6 	bl	8004a28 <HAL_RCCEx_PeriphCLKConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001082:	f000 f976 	bl	8001372 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <HAL_I2C_MspInit+0xac>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	4a16      	ldr	r2, [pc, #88]	@ (80010e4 <HAL_I2C_MspInit+0xac>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001092:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <HAL_I2C_MspInit+0xac>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800109e:	23c0      	movs	r3, #192	@ 0xc0
 80010a0:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a2:	2312      	movs	r3, #18
 80010a4:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ae:	2304      	movs	r3, #4
 80010b0:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80010b6:	4619      	mov	r1, r3
 80010b8:	480b      	ldr	r0, [pc, #44]	@ (80010e8 <HAL_I2C_MspInit+0xb0>)
 80010ba:	f001 fe41 	bl	8002d40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <HAL_I2C_MspInit+0xac>)
 80010c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c2:	4a08      	ldr	r2, [pc, #32]	@ (80010e4 <HAL_I2C_MspInit+0xac>)
 80010c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_I2C_MspInit+0xac>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010d6:	bf00      	nop
 80010d8:	3758      	adds	r7, #88	@ 0x58
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40005400 	.word	0x40005400
 80010e4:	40021000 	.word	0x40021000
 80010e8:	48000400 	.word	0x48000400

080010ec <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int chr)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &chr, 1, HAL_MAX_DELAY);
 80010f4:	1d39      	adds	r1, r7, #4
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010fa:	2201      	movs	r2, #1
 80010fc:	4803      	ldr	r0, [pc, #12]	@ (800110c <__io_putchar+0x20>)
 80010fe:	f004 fd8f 	bl	8005c20 <HAL_UART_Transmit>
	return chr;
 8001102:	687b      	ldr	r3, [r7, #4]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200001f8 	.word	0x200001f8

08001110 <HAL_GPIO_EXTI_Callback>:

uint32_t measure_counter = 0;
uint8_t data_available = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
	if (TOF_INT_Pin == GPIO_Pin)
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	2b20      	cmp	r3, #32
 800111e:	d10a      	bne.n	8001136 <HAL_GPIO_EXTI_Callback+0x26>
	{
		measure_counter++;
 8001120:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <HAL_GPIO_EXTI_Callback+0x34>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	4a07      	ldr	r2, [pc, #28]	@ (8001144 <HAL_GPIO_EXTI_Callback+0x34>)
 8001128:	6013      	str	r3, [r2, #0]
		data_available++;
 800112a:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <HAL_GPIO_EXTI_Callback+0x38>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <HAL_GPIO_EXTI_Callback+0x38>)
 8001134:	701a      	strb	r2, [r3, #0]
	}
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000013c 	.word	0x2000013c
 8001148:	20000140 	.word	0x20000140

0800114c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001152:	f000 fc9a 	bl	8001a8a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001156:	f000 f8bd 	bl	80012d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800115a:	f7ff fec3 	bl	8000ee4 <MX_GPIO_Init>
	MX_ADC1_Init();
 800115e:	f7ff fe0b 	bl	8000d78 <MX_ADC1_Init>
	MX_I2C1_Init();
 8001162:	f7ff ff29 	bl	8000fb8 <MX_I2C1_Init>
	MX_SPI1_Init();
 8001166:	f000 f90b 	bl	8001380 <MX_SPI1_Init>
	MX_TIM2_Init();
 800116a:	f000 fa99 	bl	80016a0 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 800116e:	f000 fb6b 	bl	8001848 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001172:	f000 fb99 	bl	80018a8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	printf("\r\n===== VL53L1X-SATEL =====\r\n");
 8001176:	484d      	ldr	r0, [pc, #308]	@ (80012ac <main+0x160>)
 8001178:	f006 f8ba 	bl	80072f0 <puts>

	uint16_t id;
	if (VL53L1X_GetSensorId(VL53L1X_DEFAULT_ADDRESS, &id) != VL53L1_ERROR_NONE)
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	4619      	mov	r1, r3
 8001182:	2052      	movs	r0, #82	@ 0x52
 8001184:	f005 fe00 	bl	8006d88 <VL53L1X_GetSensorId>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <main+0x46>
	{
		Error_Handler();
 800118e:	f000 f8f0 	bl	8001372 <Error_Handler>
	}
	printf("SensorID : 0x%X\r\n", id);
 8001192:	89bb      	ldrh	r3, [r7, #12]
 8001194:	4619      	mov	r1, r3
 8001196:	4846      	ldr	r0, [pc, #280]	@ (80012b0 <main+0x164>)
 8001198:	f006 f842 	bl	8007220 <iprintf>

	VL53L1X_Version_t version;
	if (VL53L1X_GetSWVersion(&version) != VL53L1_ERROR_NONE)
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	4618      	mov	r0, r3
 80011a0:	f005 fa3d 	bl	800661e <VL53L1X_GetSWVersion>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <main+0x62>
	{
		Error_Handler();
 80011aa:	f000 f8e2 	bl	8001372 <Error_Handler>
	}
	printf("Version : %u.%ub%ur%lu\r\n", version.major, version.minor, version.build, version.revision);
 80011ae:	793b      	ldrb	r3, [r7, #4]
 80011b0:	4619      	mov	r1, r3
 80011b2:	797b      	ldrb	r3, [r7, #5]
 80011b4:	461a      	mov	r2, r3
 80011b6:	79bb      	ldrb	r3, [r7, #6]
 80011b8:	4618      	mov	r0, r3
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	4603      	mov	r3, r0
 80011c0:	483c      	ldr	r0, [pc, #240]	@ (80012b4 <main+0x168>)
 80011c2:	f006 f82d 	bl	8007220 <iprintf>

	uint8_t boot_state = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	70fb      	strb	r3, [r7, #3]
	uint8_t boot_state_counter = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]

	while(boot_state == 0)
 80011ce:	e00f      	b.n	80011f0 <main+0xa4>
	{
		boot_state_counter++;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	3301      	adds	r3, #1
 80011d4:	73fb      	strb	r3, [r7, #15]
		if (VL53L1X_BootState(VL53L1X_DEFAULT_ADDRESS, &boot_state) != VL53L1_ERROR_NONE)
 80011d6:	1cfb      	adds	r3, r7, #3
 80011d8:	4619      	mov	r1, r3
 80011da:	2052      	movs	r0, #82	@ 0x52
 80011dc:	f005 fdb8 	bl	8006d50 <VL53L1X_BootState>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <main+0x9e>
		{
			Error_Handler();
 80011e6:	f000 f8c4 	bl	8001372 <Error_Handler>
		}
		HAL_Delay(1);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f000 fcc2 	bl	8001b74 <HAL_Delay>
	while(boot_state == 0)
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0ec      	beq.n	80011d0 <main+0x84>
	}

	printf("Chip booted in %d...\r\n", boot_state_counter);
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	4619      	mov	r1, r3
 80011fa:	482f      	ldr	r0, [pc, #188]	@ (80012b8 <main+0x16c>)
 80011fc:	f006 f810 	bl	8007220 <iprintf>

	//Loads the 135 bytes default values to initialize the sensor.
	if (VL53L1X_SensorInit(VL53L1X_DEFAULT_ADDRESS) != VL53L1_ERROR_NONE)
 8001200:	2052      	movs	r0, #82	@ 0x52
 8001202:	f005 fa27 	bl	8006654 <VL53L1X_SensorInit>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <main+0xc4>
	{
		Error_Handler();
 800120c:	f000 f8b1 	bl	8001372 <Error_Handler>
	}
	printf("Sensor initialized with the default values\r\n");
 8001210:	482a      	ldr	r0, [pc, #168]	@ (80012bc <main+0x170>)
 8001212:	f006 f86d 	bl	80072f0 <puts>

	if (VL53L1X_SetDistanceMode(VL53L1X_DEFAULT_ADDRESS, 1) != VL53L1_ERROR_NONE) // 1=short, limited to 1.3m
 8001216:	2101      	movs	r1, #1
 8001218:	2052      	movs	r0, #82	@ 0x52
 800121a:	f005 fc9f 	bl	8006b5c <VL53L1X_SetDistanceMode>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <main+0xdc>
	{
		Error_Handler();
 8001224:	f000 f8a5 	bl	8001372 <Error_Handler>
	}
	printf("Short distance mode\r\n");
 8001228:	4825      	ldr	r0, [pc, #148]	@ (80012c0 <main+0x174>)
 800122a:	f006 f861 	bl	80072f0 <puts>

	if (VL53L1X_SetTimingBudgetInMs(VL53L1X_DEFAULT_ADDRESS, 50) != VL53L1_ERROR_NONE) // in ms possible values [20, 50, 100, 200, 500]
 800122e:	2132      	movs	r1, #50	@ 0x32
 8001230:	2052      	movs	r0, #82	@ 0x52
 8001232:	f005 fafe 	bl	8006832 <VL53L1X_SetTimingBudgetInMs>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <main+0xf4>
	{
		Error_Handler();
 800123c:	f000 f899 	bl	8001372 <Error_Handler>
	}

	if (VL53L1X_SetInterMeasurementInMs(VL53L1X_DEFAULT_ADDRESS, 50) != VL53L1_ERROR_NONE) // in ms, IM must be >= TB
 8001240:	2132      	movs	r1, #50	@ 0x32
 8001242:	2052      	movs	r0, #82	@ 0x52
 8001244:	f005 fd48 	bl	8006cd8 <VL53L1X_SetInterMeasurementInMs>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <main+0x106>
	{
		Error_Handler();
 800124e:	f000 f890 	bl	8001372 <Error_Handler>
	}

	printf("Timing budget set\r\n");
 8001252:	481c      	ldr	r0, [pc, #112]	@ (80012c4 <main+0x178>)
 8001254:	f006 f84c 	bl	80072f0 <puts>

	if (VL53L1X_StartRanging(VL53L1X_DEFAULT_ADDRESS) != VL53L1_ERROR_NONE)
 8001258:	2052      	movs	r0, #82	@ 0x52
 800125a:	f005 fa8f 	bl	800677c <VL53L1X_StartRanging>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <main+0x11c>
	{
		Error_Handler();
 8001264:	f000 f885 	bl	8001372 <Error_Handler>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if (data_available > 0)
 8001268:	4b17      	ldr	r3, [pc, #92]	@ (80012c8 <main+0x17c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0fb      	beq.n	8001268 <main+0x11c>
		{
			data_available = 0;
 8001270:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <main+0x17c>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
			uint16_t distance;
			if (VL53L1X_ClearInterrupt(VL53L1X_DEFAULT_ADDRESS) != VL53L1_ERROR_NONE)
 8001276:	2052      	movs	r0, #82	@ 0x52
 8001278:	f005 fa44 	bl	8006704 <VL53L1X_ClearInterrupt>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <main+0x13a>
			{
				Error_Handler();
 8001282:	f000 f876 	bl	8001372 <Error_Handler>
			}
			if (VL53L1X_GetDistance(VL53L1X_DEFAULT_ADDRESS, &distance) != VL53L1_ERROR_NONE)
 8001286:	463b      	mov	r3, r7
 8001288:	4619      	mov	r1, r3
 800128a:	2052      	movs	r0, #82	@ 0x52
 800128c:	f005 fd99 	bl	8006dc2 <VL53L1X_GetDistance>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <main+0x14e>
			{
				Error_Handler();
 8001296:	f000 f86c 	bl	8001372 <Error_Handler>
			}
			printf("distance(%lu) : %u\r\n", measure_counter, distance);
 800129a:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <main+0x180>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	883a      	ldrh	r2, [r7, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	480b      	ldr	r0, [pc, #44]	@ (80012d0 <main+0x184>)
 80012a4:	f005 ffbc 	bl	8007220 <iprintf>
		if (data_available > 0)
 80012a8:	e7de      	b.n	8001268 <main+0x11c>
 80012aa:	bf00      	nop
 80012ac:	08007fc8 	.word	0x08007fc8
 80012b0:	08007fe8 	.word	0x08007fe8
 80012b4:	08007ffc 	.word	0x08007ffc
 80012b8:	08008018 	.word	0x08008018
 80012bc:	08008030 	.word	0x08008030
 80012c0:	0800805c 	.word	0x0800805c
 80012c4:	08008074 	.word	0x08008074
 80012c8:	20000140 	.word	0x20000140
 80012cc:	2000013c 	.word	0x2000013c
 80012d0:	08008088 	.word	0x08008088

080012d4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b096      	sub	sp, #88	@ 0x58
 80012d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	2244      	movs	r2, #68	@ 0x44
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f006 f80c 	bl	8007300 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012fa:	f002 fcb9 	bl	8003c70 <HAL_PWREx_ControlVoltageScaling>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8001304:	f000 f835 	bl	8001372 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001308:	2302      	movs	r3, #2
 800130a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001310:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001312:	2340      	movs	r3, #64	@ 0x40
 8001314:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001316:	2302      	movs	r3, #2
 8001318:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800131a:	2302      	movs	r3, #2
 800131c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 800131e:	2301      	movs	r3, #1
 8001320:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001322:	230a      	movs	r3, #10
 8001324:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001326:	2302      	movs	r3, #2
 8001328:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800132a:	2302      	movs	r3, #2
 800132c:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4618      	mov	r0, r3
 8001334:	f002 fcf2 	bl	8003d1c <HAL_RCC_OscConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0x6e>
	{
		Error_Handler();
 800133e:	f000 f818 	bl	8001372 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001342:	230f      	movs	r3, #15
 8001344:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001346:	2303      	movs	r3, #3
 8001348:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001356:	463b      	mov	r3, r7
 8001358:	2104      	movs	r1, #4
 800135a:	4618      	mov	r0, r3
 800135c:	f003 f940 	bl	80045e0 <HAL_RCC_ClockConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x96>
	{
		Error_Handler();
 8001366:	f000 f804 	bl	8001372 <Error_Handler>
	}
}
 800136a:	bf00      	nop
 800136c:	3758      	adds	r7, #88	@ 0x58
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001376:	b672      	cpsid	i
}
 8001378:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800137a:	bf00      	nop
 800137c:	e7fd      	b.n	800137a <Error_Handler+0x8>
	...

08001380 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001384:	4b1b      	ldr	r3, [pc, #108]	@ (80013f4 <MX_SPI1_Init+0x74>)
 8001386:	4a1c      	ldr	r2, [pc, #112]	@ (80013f8 <MX_SPI1_Init+0x78>)
 8001388:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800138a:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <MX_SPI1_Init+0x74>)
 800138c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001390:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001392:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <MX_SPI1_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001398:	4b16      	ldr	r3, [pc, #88]	@ (80013f4 <MX_SPI1_Init+0x74>)
 800139a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800139e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a0:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <MX_SPI1_Init+0x74>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a6:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <MX_SPI1_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <MX_SPI1_Init+0x74>)
 80013ae:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80013b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <MX_SPI1_Init+0x74>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <MX_SPI1_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <MX_SPI1_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <MX_SPI1_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013cc:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <MX_SPI1_Init+0x74>)
 80013ce:	2207      	movs	r2, #7
 80013d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <MX_SPI1_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013d8:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <MX_SPI1_Init+0x74>)
 80013da:	2208      	movs	r2, #8
 80013dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <MX_SPI1_Init+0x74>)
 80013e0:	f003 fca8 	bl	8004d34 <HAL_SPI_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013ea:	f7ff ffc2 	bl	8001372 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000144 	.word	0x20000144
 80013f8:	40013000 	.word	0x40013000

080013fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	@ 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a17      	ldr	r2, [pc, #92]	@ (8001478 <HAL_SPI_MspInit+0x7c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d128      	bne.n	8001470 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800141e:	4b17      	ldr	r3, [pc, #92]	@ (800147c <HAL_SPI_MspInit+0x80>)
 8001420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001422:	4a16      	ldr	r2, [pc, #88]	@ (800147c <HAL_SPI_MspInit+0x80>)
 8001424:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001428:	6613      	str	r3, [r2, #96]	@ 0x60
 800142a:	4b14      	ldr	r3, [pc, #80]	@ (800147c <HAL_SPI_MspInit+0x80>)
 800142c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800142e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	4b11      	ldr	r3, [pc, #68]	@ (800147c <HAL_SPI_MspInit+0x80>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	4a10      	ldr	r2, [pc, #64]	@ (800147c <HAL_SPI_MspInit+0x80>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <HAL_SPI_MspInit+0x80>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800144e:	23f0      	movs	r3, #240	@ 0xf0
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800145e:	2305      	movs	r3, #5
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800146c:	f001 fc68 	bl	8002d40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001470:	bf00      	nop
 8001472:	3728      	adds	r7, #40	@ 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40013000 	.word	0x40013000
 800147c:	40021000 	.word	0x40021000

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <HAL_MspInit+0x44>)
 8001488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148a:	4a0e      	ldr	r2, [pc, #56]	@ (80014c4 <HAL_MspInit+0x44>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6613      	str	r3, [r2, #96]	@ 0x60
 8001492:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <HAL_MspInit+0x44>)
 8001494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <HAL_MspInit+0x44>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a2:	4a08      	ldr	r2, [pc, #32]	@ (80014c4 <HAL_MspInit+0x44>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_MspInit+0x44>)
 80014ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000

080014c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <NMI_Handler+0x4>

080014d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <HardFault_Handler+0x4>

080014d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <MemManage_Handler+0x4>

080014e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <BusFault_Handler+0x4>

080014e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <UsageFault_Handler+0x4>

080014f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151e:	f000 fb09 	bl	8001b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}

08001526 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOF_INT_Pin);
 800152a:	2020      	movs	r0, #32
 800152c:	f001 fd92 	bl	8003054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	e00a      	b.n	800155c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001546:	f3af 8000 	nop.w
 800154a:	4601      	mov	r1, r0
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	60ba      	str	r2, [r7, #8]
 8001552:	b2ca      	uxtb	r2, r1
 8001554:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3301      	adds	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	dbf0      	blt.n	8001546 <_read+0x12>
  }

  return len;
 8001564:	687b      	ldr	r3, [r7, #4]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	e009      	b.n	8001594 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	60ba      	str	r2, [r7, #8]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fdaf 	bl	80010ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	dbf1      	blt.n	8001580 <_write+0x12>
  }
  return len;
 800159c:	687b      	ldr	r3, [r7, #4]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_close>:

int _close(int file)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015ce:	605a      	str	r2, [r3, #4]
  return 0;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <_isatty>:

int _isatty(int file)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015e6:	2301      	movs	r3, #1
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001618:	4a14      	ldr	r2, [pc, #80]	@ (800166c <_sbrk+0x5c>)
 800161a:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <_sbrk+0x60>)
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001624:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <_sbrk+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d102      	bne.n	8001632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <_sbrk+0x64>)
 800162e:	4a12      	ldr	r2, [pc, #72]	@ (8001678 <_sbrk+0x68>)
 8001630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	429a      	cmp	r2, r3
 800163e:	d207      	bcs.n	8001650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001640:	f005 fe66 	bl	8007310 <__errno>
 8001644:	4603      	mov	r3, r0
 8001646:	220c      	movs	r2, #12
 8001648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800164e:	e009      	b.n	8001664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001650:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001656:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	4a05      	ldr	r2, [pc, #20]	@ (8001674 <_sbrk+0x64>)
 8001660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20008000 	.word	0x20008000
 8001670:	00000400 	.word	0x00000400
 8001674:	200001a8 	.word	0x200001a8
 8001678:	20000558 	.word	0x20000558

0800167c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <SystemInit+0x20>)
 8001682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001686:	4a05      	ldr	r2, [pc, #20]	@ (800169c <SystemInit+0x20>)
 8001688:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800168c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08e      	sub	sp, #56	@ 0x38
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c0:	463b      	mov	r3, r7
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016d2:	4b33      	ldr	r3, [pc, #204]	@ (80017a0 <MX_TIM2_Init+0x100>)
 80016d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016da:	4b31      	ldr	r3, [pc, #196]	@ (80017a0 <MX_TIM2_Init+0x100>)
 80016dc:	2200      	movs	r2, #0
 80016de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e0:	4b2f      	ldr	r3, [pc, #188]	@ (80017a0 <MX_TIM2_Init+0x100>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016e6:	4b2e      	ldr	r3, [pc, #184]	@ (80017a0 <MX_TIM2_Init+0x100>)
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ee:	4b2c      	ldr	r3, [pc, #176]	@ (80017a0 <MX_TIM2_Init+0x100>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f4:	4b2a      	ldr	r3, [pc, #168]	@ (80017a0 <MX_TIM2_Init+0x100>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016fa:	4829      	ldr	r0, [pc, #164]	@ (80017a0 <MX_TIM2_Init+0x100>)
 80016fc:	f003 fbbd 	bl	8004e7a <HAL_TIM_Base_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001706:	f7ff fe34 	bl	8001372 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800170a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800170e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001710:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001714:	4619      	mov	r1, r3
 8001716:	4822      	ldr	r0, [pc, #136]	@ (80017a0 <MX_TIM2_Init+0x100>)
 8001718:	f003 fd7c 	bl	8005214 <HAL_TIM_ConfigClockSource>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001722:	f7ff fe26 	bl	8001372 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001726:	481e      	ldr	r0, [pc, #120]	@ (80017a0 <MX_TIM2_Init+0x100>)
 8001728:	f003 fbfe 	bl	8004f28 <HAL_TIM_PWM_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001732:	f7ff fe1e 	bl	8001372 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800173e:	f107 031c 	add.w	r3, r7, #28
 8001742:	4619      	mov	r1, r3
 8001744:	4816      	ldr	r0, [pc, #88]	@ (80017a0 <MX_TIM2_Init+0x100>)
 8001746:	f004 f9b7 	bl	8005ab8 <HAL_TIMEx_MasterConfigSynchronization>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001750:	f7ff fe0f 	bl	8001372 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001754:	2360      	movs	r3, #96	@ 0x60
 8001756:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001764:	463b      	mov	r3, r7
 8001766:	2200      	movs	r2, #0
 8001768:	4619      	mov	r1, r3
 800176a:	480d      	ldr	r0, [pc, #52]	@ (80017a0 <MX_TIM2_Init+0x100>)
 800176c:	f003 fc3e 	bl	8004fec <HAL_TIM_PWM_ConfigChannel>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001776:	f7ff fdfc 	bl	8001372 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800177a:	463b      	mov	r3, r7
 800177c:	2204      	movs	r2, #4
 800177e:	4619      	mov	r1, r3
 8001780:	4807      	ldr	r0, [pc, #28]	@ (80017a0 <MX_TIM2_Init+0x100>)
 8001782:	f003 fc33 	bl	8004fec <HAL_TIM_PWM_ConfigChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800178c:	f7ff fdf1 	bl	8001372 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001790:	4803      	ldr	r0, [pc, #12]	@ (80017a0 <MX_TIM2_Init+0x100>)
 8001792:	f000 f825 	bl	80017e0 <HAL_TIM_MspPostInit>

}
 8001796:	bf00      	nop
 8001798:	3738      	adds	r7, #56	@ 0x38
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200001ac 	.word	0x200001ac

080017a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017b4:	d10b      	bne.n	80017ce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b6:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <HAL_TIM_Base_MspInit+0x38>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ba:	4a08      	ldr	r2, [pc, #32]	@ (80017dc <HAL_TIM_Base_MspInit+0x38>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_TIM_Base_MspInit+0x38>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017ce:	bf00      	nop
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000

080017e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001800:	d11c      	bne.n	800183c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <HAL_TIM_MspPostInit+0x64>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001806:	4a0f      	ldr	r2, [pc, #60]	@ (8001844 <HAL_TIM_MspPostInit+0x64>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800180e:	4b0d      	ldr	r3, [pc, #52]	@ (8001844 <HAL_TIM_MspPostInit+0x64>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-CK_IN     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800181a:	2303      	movs	r3, #3
 800181c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800182a:	2301      	movs	r3, #1
 800182c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	4619      	mov	r1, r3
 8001834:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001838:	f001 fa82 	bl	8002d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800183c:	bf00      	nop
 800183e:	3720      	adds	r7, #32
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40021000 	.word	0x40021000

08001848 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800184c:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <MX_USART1_UART_Init+0x58>)
 800184e:	4a15      	ldr	r2, [pc, #84]	@ (80018a4 <MX_USART1_UART_Init+0x5c>)
 8001850:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001852:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <MX_USART1_UART_Init+0x58>)
 8001854:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001858:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800185a:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <MX_USART1_UART_Init+0x58>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001860:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <MX_USART1_UART_Init+0x58>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001866:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <MX_USART1_UART_Init+0x58>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800186c:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <MX_USART1_UART_Init+0x58>)
 800186e:	220c      	movs	r2, #12
 8001870:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001872:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <MX_USART1_UART_Init+0x58>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001878:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <MX_USART1_UART_Init+0x58>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800187e:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <MX_USART1_UART_Init+0x58>)
 8001880:	2200      	movs	r2, #0
 8001882:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <MX_USART1_UART_Init+0x58>)
 8001886:	2200      	movs	r2, #0
 8001888:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800188a:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <MX_USART1_UART_Init+0x58>)
 800188c:	f004 f97a 	bl	8005b84 <HAL_UART_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001896:	f7ff fd6c 	bl	8001372 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200001f8 	.word	0x200001f8
 80018a4:	40013800 	.word	0x40013800

080018a8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018ac:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <MX_USART2_UART_Init+0x58>)
 80018ae:	4a15      	ldr	r2, [pc, #84]	@ (8001904 <MX_USART2_UART_Init+0x5c>)
 80018b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018b2:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <MX_USART2_UART_Init+0x58>)
 80018b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ba:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <MX_USART2_UART_Init+0x58>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <MX_USART2_UART_Init+0x58>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <MX_USART2_UART_Init+0x58>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <MX_USART2_UART_Init+0x58>)
 80018ce:	220c      	movs	r2, #12
 80018d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <MX_USART2_UART_Init+0x58>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d8:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <MX_USART2_UART_Init+0x58>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018de:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <MX_USART2_UART_Init+0x58>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <MX_USART2_UART_Init+0x58>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ea:	4805      	ldr	r0, [pc, #20]	@ (8001900 <MX_USART2_UART_Init+0x58>)
 80018ec:	f004 f94a 	bl	8005b84 <HAL_UART_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018f6:	f7ff fd3c 	bl	8001372 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000280 	.word	0x20000280
 8001904:	40004400 	.word	0x40004400

08001908 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b098      	sub	sp, #96	@ 0x60
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001920:	f107 0318 	add.w	r3, r7, #24
 8001924:	2234      	movs	r2, #52	@ 0x34
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f005 fce9 	bl	8007300 <memset>
  if(uartHandle->Instance==USART1)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a3e      	ldr	r2, [pc, #248]	@ (8001a2c <HAL_UART_MspInit+0x124>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d138      	bne.n	80019aa <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001938:	2301      	movs	r3, #1
 800193a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	4618      	mov	r0, r3
 8001946:	f003 f86f 	bl	8004a28 <HAL_RCCEx_PeriphCLKConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001950:	f7ff fd0f 	bl	8001372 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001954:	4b36      	ldr	r3, [pc, #216]	@ (8001a30 <HAL_UART_MspInit+0x128>)
 8001956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001958:	4a35      	ldr	r2, [pc, #212]	@ (8001a30 <HAL_UART_MspInit+0x128>)
 800195a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800195e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001960:	4b33      	ldr	r3, [pc, #204]	@ (8001a30 <HAL_UART_MspInit+0x128>)
 8001962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196c:	4b30      	ldr	r3, [pc, #192]	@ (8001a30 <HAL_UART_MspInit+0x128>)
 800196e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001970:	4a2f      	ldr	r2, [pc, #188]	@ (8001a30 <HAL_UART_MspInit+0x128>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001978:	4b2d      	ldr	r3, [pc, #180]	@ (8001a30 <HAL_UART_MspInit+0x128>)
 800197a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001984:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001988:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001996:	2307      	movs	r3, #7
 8001998:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800199e:	4619      	mov	r1, r3
 80019a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019a4:	f001 f9cc 	bl	8002d40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019a8:	e03b      	b.n	8001a22 <HAL_UART_MspInit+0x11a>
  else if(uartHandle->Instance==USART2)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a21      	ldr	r2, [pc, #132]	@ (8001a34 <HAL_UART_MspInit+0x12c>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d136      	bne.n	8001a22 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019b4:	2302      	movs	r3, #2
 80019b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019bc:	f107 0318 	add.w	r3, r7, #24
 80019c0:	4618      	mov	r0, r3
 80019c2:	f003 f831 	bl	8004a28 <HAL_RCCEx_PeriphCLKConfig>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80019cc:	f7ff fcd1 	bl	8001372 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019d0:	4b17      	ldr	r3, [pc, #92]	@ (8001a30 <HAL_UART_MspInit+0x128>)
 80019d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d4:	4a16      	ldr	r2, [pc, #88]	@ (8001a30 <HAL_UART_MspInit+0x128>)
 80019d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019da:	6593      	str	r3, [r2, #88]	@ 0x58
 80019dc:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <HAL_UART_MspInit+0x128>)
 80019de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e8:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <HAL_UART_MspInit+0x128>)
 80019ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ec:	4a10      	ldr	r2, [pc, #64]	@ (8001a30 <HAL_UART_MspInit+0x128>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a30 <HAL_UART_MspInit+0x128>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a00:	230c      	movs	r3, #12
 8001a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a10:	2307      	movs	r3, #7
 8001a12:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a1e:	f001 f98f 	bl	8002d40 <HAL_GPIO_Init>
}
 8001a22:	bf00      	nop
 8001a24:	3760      	adds	r7, #96	@ 0x60
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40013800 	.word	0x40013800
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40004400 	.word	0x40004400

08001a38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a3c:	f7ff fe1e 	bl	800167c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a40:	480c      	ldr	r0, [pc, #48]	@ (8001a74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a42:	490d      	ldr	r1, [pc, #52]	@ (8001a78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a44:	4a0d      	ldr	r2, [pc, #52]	@ (8001a7c <LoopForever+0xe>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a56:	4a0a      	ldr	r2, [pc, #40]	@ (8001a80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a58:	4c0a      	ldr	r4, [pc, #40]	@ (8001a84 <LoopForever+0x16>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a66:	f005 fc59 	bl	800731c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a6a:	f7ff fb6f 	bl	800114c <main>

08001a6e <LoopForever>:

LoopForever:
    b LoopForever
 8001a6e:	e7fe      	b.n	8001a6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a70:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a78:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a7c:	08008188 	.word	0x08008188
  ldr r2, =_sbss
 8001a80:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001a84:	20000558 	.word	0x20000558

08001a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a88:	e7fe      	b.n	8001a88 <ADC1_2_IRQHandler>

08001a8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a94:	2003      	movs	r0, #3
 8001a96:	f001 f911 	bl	8002cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a9a:	200f      	movs	r0, #15
 8001a9c:	f000 f80e 	bl	8001abc <HAL_InitTick>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	71fb      	strb	r3, [r7, #7]
 8001aaa:	e001      	b.n	8001ab0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aac:	f7ff fce8 	bl	8001480 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ac8:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <HAL_InitTick+0x6c>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ad0:	4b16      	ldr	r3, [pc, #88]	@ (8001b2c <HAL_InitTick+0x70>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <HAL_InitTick+0x6c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 f91d 	bl	8002d26 <HAL_SYSTICK_Config>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10f      	bne.n	8001b12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b0f      	cmp	r3, #15
 8001af6:	d809      	bhi.n	8001b0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af8:	2200      	movs	r2, #0
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b00:	f001 f8e7 	bl	8002cd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b04:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <HAL_InitTick+0x74>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	e007      	b.n	8001b1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	e004      	b.n	8001b1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	73fb      	strb	r3, [r7, #15]
 8001b16:	e001      	b.n	8001b1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000008 	.word	0x20000008
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000004 	.word	0x20000004

08001b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b38:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <HAL_IncTick+0x20>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <HAL_IncTick+0x24>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	4a04      	ldr	r2, [pc, #16]	@ (8001b58 <HAL_IncTick+0x24>)
 8001b46:	6013      	str	r3, [r2, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000008 	.word	0x20000008
 8001b58:	20000308 	.word	0x20000308

08001b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b60:	4b03      	ldr	r3, [pc, #12]	@ (8001b70 <HAL_GetTick+0x14>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000308 	.word	0x20000308

08001b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b7c:	f7ff ffee 	bl	8001b5c <HAL_GetTick>
 8001b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b8c:	d005      	beq.n	8001b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb8 <HAL_Delay+0x44>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4413      	add	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b9a:	bf00      	nop
 8001b9c:	f7ff ffde 	bl	8001b5c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d8f7      	bhi.n	8001b9c <HAL_Delay+0x28>
  {
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000008 	.word	0x20000008

08001bbc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3360      	adds	r3, #96	@ 0x60
 8001c36:	461a      	mov	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <LL_ADC_SetOffset+0x44>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	4313      	orrs	r3, r2
 8001c54:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c5c:	bf00      	nop
 8001c5e:	371c      	adds	r7, #28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	03fff000 	.word	0x03fff000

08001c6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3360      	adds	r3, #96	@ 0x60
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	3360      	adds	r3, #96	@ 0x60
 8001ca8:	461a      	mov	r2, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cc2:	bf00      	nop
 8001cc4:	371c      	adds	r7, #28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	615a      	str	r2, [r3, #20]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	3330      	adds	r3, #48	@ 0x30
 8001d04:	461a      	mov	r2, r3
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	4413      	add	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f003 031f 	and.w	r3, r3, #31
 8001d1e:	211f      	movs	r1, #31
 8001d20:	fa01 f303 	lsl.w	r3, r1, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	401a      	ands	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	0e9b      	lsrs	r3, r3, #26
 8001d2c:	f003 011f 	and.w	r1, r3, #31
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f003 031f 	and.w	r3, r3, #31
 8001d36:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d40:	bf00      	nop
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3314      	adds	r3, #20
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	0e5b      	lsrs	r3, r3, #25
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	4413      	add	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	0d1b      	lsrs	r3, r3, #20
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	2107      	movs	r1, #7
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	401a      	ands	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	0d1b      	lsrs	r3, r3, #20
 8001d86:	f003 031f 	and.w	r3, r3, #31
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d90:	431a      	orrs	r2, r3
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d96:	bf00      	nop
 8001d98:	371c      	adds	r7, #28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f003 0318 	and.w	r3, r3, #24
 8001dc6:	4908      	ldr	r1, [pc, #32]	@ (8001de8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001dc8:	40d9      	lsrs	r1, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	400b      	ands	r3, r1
 8001dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001dda:	bf00      	nop
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	0007ffff 	.word	0x0007ffff

08001dec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001dfc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6093      	str	r3, [r2, #8]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e24:	d101      	bne.n	8001e2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e4c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e74:	d101      	bne.n	8001e7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <LL_ADC_IsEnabled+0x18>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <LL_ADC_IsEnabled+0x1a>
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d101      	bne.n	8001ec6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d101      	bne.n	8001eec <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b089      	sub	sp, #36	@ 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e12b      	b.n	800216e <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d109      	bne.n	8001f38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7fe ff9d 	bl	8000e64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff67 	bl	8001e10 <LL_ADC_IsDeepPowerDownEnabled>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d004      	beq.n	8001f52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff4d 	bl	8001dec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff ff82 	bl	8001e60 <LL_ADC_IsInternalRegulatorEnabled>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d115      	bne.n	8001f8e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ff66 	bl	8001e38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f6c:	4b82      	ldr	r3, [pc, #520]	@ (8002178 <HAL_ADC_Init+0x27c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	099b      	lsrs	r3, r3, #6
 8001f72:	4a82      	ldr	r2, [pc, #520]	@ (800217c <HAL_ADC_Init+0x280>)
 8001f74:	fba2 2303 	umull	r2, r3, r2, r3
 8001f78:	099b      	lsrs	r3, r3, #6
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f80:	e002      	b.n	8001f88 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f9      	bne.n	8001f82 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff64 	bl	8001e60 <LL_ADC_IsInternalRegulatorEnabled>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10d      	bne.n	8001fba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa2:	f043 0210 	orr.w	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fae:	f043 0201 	orr.w	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ff75 	bl	8001eae <LL_ADC_REG_IsConversionOngoing>
 8001fc4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f040 80c4 	bne.w	800215c <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 80c0 	bne.w	800215c <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001fe4:	f043 0202 	orr.w	r2, r3, #2
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff49 	bl	8001e88 <LL_ADC_IsEnabled>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d110      	bne.n	800201e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ffc:	4860      	ldr	r0, [pc, #384]	@ (8002180 <HAL_ADC_Init+0x284>)
 8001ffe:	f7ff ff43 	bl	8001e88 <LL_ADC_IsEnabled>
 8002002:	4604      	mov	r4, r0
 8002004:	485f      	ldr	r0, [pc, #380]	@ (8002184 <HAL_ADC_Init+0x288>)
 8002006:	f7ff ff3f 	bl	8001e88 <LL_ADC_IsEnabled>
 800200a:	4603      	mov	r3, r0
 800200c:	4323      	orrs	r3, r4
 800200e:	2b00      	cmp	r3, #0
 8002010:	d105      	bne.n	800201e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4619      	mov	r1, r3
 8002018:	485b      	ldr	r0, [pc, #364]	@ (8002188 <HAL_ADC_Init+0x28c>)
 800201a:	f7ff fdcf 	bl	8001bbc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7e5b      	ldrb	r3, [r3, #25]
 8002022:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002028:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800202e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002034:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800203c:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d106      	bne.n	800205a <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002050:	3b01      	subs	r3, #1
 8002052:	045b      	lsls	r3, r3, #17
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205e:	2b00      	cmp	r3, #0
 8002060:	d009      	beq.n	8002076 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002066:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206e:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	4b43      	ldr	r3, [pc, #268]	@ (800218c <HAL_ADC_Init+0x290>)
 800207e:	4013      	ands	r3, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	69b9      	ldr	r1, [r7, #24]
 8002086:	430b      	orrs	r3, r1
 8002088:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ff20 	bl	8001ed4 <LL_ADC_INJ_IsConversionOngoing>
 8002094:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d13d      	bne.n	8002118 <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d13a      	bne.n	8002118 <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020a6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020ae:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020be:	f023 0302 	bic.w	r3, r3, #2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	69b9      	ldr	r1, [r7, #24]
 80020c8:	430b      	orrs	r3, r1
 80020ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d118      	bne.n	8002108 <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80020e0:	f023 0304 	bic.w	r3, r3, #4
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020ec:	4311      	orrs	r1, r2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80020f2:	4311      	orrs	r1, r2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020f8:	430a      	orrs	r2, r1
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0201 	orr.w	r2, r2, #1
 8002104:	611a      	str	r2, [r3, #16]
 8002106:	e007      	b.n	8002118 <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691a      	ldr	r2, [r3, #16]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0201 	bic.w	r2, r2, #1
 8002116:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d10c      	bne.n	800213a <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f023 010f 	bic.w	r1, r3, #15
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	1e5a      	subs	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	631a      	str	r2, [r3, #48]	@ 0x30
 8002138:	e007      	b.n	800214a <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 020f 	bic.w	r2, r2, #15
 8002148:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800214e:	f023 0303 	bic.w	r3, r3, #3
 8002152:	f043 0201 	orr.w	r2, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	655a      	str	r2, [r3, #84]	@ 0x54
 800215a:	e007      	b.n	800216c <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002160:	f043 0210 	orr.w	r2, r3, #16
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800216c:	7ffb      	ldrb	r3, [r7, #31]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3724      	adds	r7, #36	@ 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}
 8002176:	bf00      	nop
 8002178:	20000000 	.word	0x20000000
 800217c:	053e2d63 	.word	0x053e2d63
 8002180:	50040000 	.word	0x50040000
 8002184:	50040100 	.word	0x50040100
 8002188:	50040300 	.word	0x50040300
 800218c:	fff0c007 	.word	0xfff0c007

08002190 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b0b6      	sub	sp, #216	@ 0xd8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x22>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e3d5      	b.n	800295e <HAL_ADC_ConfigChannel+0x7ce>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fe75 	bl	8001eae <LL_ADC_REG_IsConversionOngoing>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f040 83ba 	bne.w	8002940 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b05      	cmp	r3, #5
 80021da:	d824      	bhi.n	8002226 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	3b02      	subs	r3, #2
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d81b      	bhi.n	800221e <HAL_ADC_ConfigChannel+0x8e>
 80021e6:	a201      	add	r2, pc, #4	@ (adr r2, 80021ec <HAL_ADC_ConfigChannel+0x5c>)
 80021e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ec:	080021fd 	.word	0x080021fd
 80021f0:	08002205 	.word	0x08002205
 80021f4:	0800220d 	.word	0x0800220d
 80021f8:	08002215 	.word	0x08002215
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80021fc:	230c      	movs	r3, #12
 80021fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002202:	e010      	b.n	8002226 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002204:	2312      	movs	r3, #18
 8002206:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800220a:	e00c      	b.n	8002226 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800220c:	2318      	movs	r3, #24
 800220e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002212:	e008      	b.n	8002226 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002214:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002218:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800221c:	e003      	b.n	8002226 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800221e:	2306      	movs	r3, #6
 8002220:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002224:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002234:	f7ff fd5e 	bl	8001cf4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fe36 	bl	8001eae <LL_ADC_REG_IsConversionOngoing>
 8002242:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fe42 	bl	8001ed4 <LL_ADC_INJ_IsConversionOngoing>
 8002250:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002254:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002258:	2b00      	cmp	r3, #0
 800225a:	f040 81bf 	bne.w	80025dc <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800225e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 81ba 	bne.w	80025dc <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002270:	d10f      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2200      	movs	r2, #0
 800227c:	4619      	mov	r1, r3
 800227e:	f7ff fd65 	bl	8001d4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fd1f 	bl	8001cce <LL_ADC_SetSamplingTimeCommonConfig>
 8002290:	e00e      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6819      	ldr	r1, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	461a      	mov	r2, r3
 80022a0:	f7ff fd54 	bl	8001d4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fd0f 	bl	8001cce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	08db      	lsrs	r3, r3, #3
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d00a      	beq.n	80022e8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	6919      	ldr	r1, [r3, #16]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022e2:	f7ff fc9f 	bl	8001c24 <LL_ADC_SetOffset>
 80022e6:	e179      	b.n	80025dc <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fcbc 	bl	8001c6c <LL_ADC_GetOffsetChannel>
 80022f4:	4603      	mov	r3, r0
 80022f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10a      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x184>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fcb1 	bl	8001c6c <LL_ADC_GetOffsetChannel>
 800230a:	4603      	mov	r3, r0
 800230c:	0e9b      	lsrs	r3, r3, #26
 800230e:	f003 021f 	and.w	r2, r3, #31
 8002312:	e01e      	b.n	8002352 <HAL_ADC_ConfigChannel+0x1c2>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fca6 	bl	8001c6c <LL_ADC_GetOffsetChannel>
 8002320:	4603      	mov	r3, r0
 8002322:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002332:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002336:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800233a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002342:	2320      	movs	r3, #32
 8002344:	e004      	b.n	8002350 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002346:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <HAL_ADC_ConfigChannel+0x1da>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	0e9b      	lsrs	r3, r3, #26
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	e018      	b.n	800239c <HAL_ADC_ConfigChannel+0x20c>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800237e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002382:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002386:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800238e:	2320      	movs	r3, #32
 8002390:	e004      	b.n	800239c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002392:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800239c:	429a      	cmp	r2, r3
 800239e:	d106      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2200      	movs	r2, #0
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fc75 	bl	8001c98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2101      	movs	r1, #1
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fc59 	bl	8001c6c <LL_ADC_GetOffsetChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10a      	bne.n	80023da <HAL_ADC_ConfigChannel+0x24a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2101      	movs	r1, #1
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fc4e 	bl	8001c6c <LL_ADC_GetOffsetChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	0e9b      	lsrs	r3, r3, #26
 80023d4:	f003 021f 	and.w	r2, r3, #31
 80023d8:	e01e      	b.n	8002418 <HAL_ADC_ConfigChannel+0x288>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2101      	movs	r1, #1
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fc43 	bl	8001c6c <LL_ADC_GetOffsetChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80023f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002400:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002408:	2320      	movs	r3, #32
 800240a:	e004      	b.n	8002416 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 800240c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002410:	fab3 f383 	clz	r3, r3
 8002414:	b2db      	uxtb	r3, r3
 8002416:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002420:	2b00      	cmp	r3, #0
 8002422:	d105      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x2a0>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0e9b      	lsrs	r3, r3, #26
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	e018      	b.n	8002462 <HAL_ADC_ConfigChannel+0x2d2>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002444:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002448:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800244c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e004      	b.n	8002462 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002458:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002462:	429a      	cmp	r2, r3
 8002464:	d106      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2200      	movs	r2, #0
 800246c:	2101      	movs	r1, #1
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fc12 	bl	8001c98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2102      	movs	r1, #2
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fbf6 	bl	8001c6c <LL_ADC_GetOffsetChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10a      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x310>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2102      	movs	r1, #2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fbeb 	bl	8001c6c <LL_ADC_GetOffsetChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	0e9b      	lsrs	r3, r3, #26
 800249a:	f003 021f 	and.w	r2, r3, #31
 800249e:	e01e      	b.n	80024de <HAL_ADC_ConfigChannel+0x34e>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2102      	movs	r1, #2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fbe0 	bl	8001c6c <LL_ADC_GetOffsetChannel>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80024be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80024c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80024ce:	2320      	movs	r3, #32
 80024d0:	e004      	b.n	80024dc <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80024d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d105      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x366>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	0e9b      	lsrs	r3, r3, #26
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	e014      	b.n	8002520 <HAL_ADC_ConfigChannel+0x390>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002504:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002506:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800250a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002512:	2320      	movs	r3, #32
 8002514:	e004      	b.n	8002520 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002516:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002520:	429a      	cmp	r2, r3
 8002522:	d106      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2200      	movs	r2, #0
 800252a:	2102      	movs	r1, #2
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fbb3 	bl	8001c98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2103      	movs	r1, #3
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fb97 	bl	8001c6c <LL_ADC_GetOffsetChannel>
 800253e:	4603      	mov	r3, r0
 8002540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <HAL_ADC_ConfigChannel+0x3ce>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2103      	movs	r1, #3
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fb8c 	bl	8001c6c <LL_ADC_GetOffsetChannel>
 8002554:	4603      	mov	r3, r0
 8002556:	0e9b      	lsrs	r3, r3, #26
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	e017      	b.n	800258e <HAL_ADC_ConfigChannel+0x3fe>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2103      	movs	r1, #3
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fb81 	bl	8001c6c <LL_ADC_GetOffsetChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002576:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002578:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800257a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002580:	2320      	movs	r3, #32
 8002582:	e003      	b.n	800258c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002584:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x416>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	0e9b      	lsrs	r3, r3, #26
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	e011      	b.n	80025ca <HAL_ADC_ConfigChannel+0x43a>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80025b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025b6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80025b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80025be:	2320      	movs	r3, #32
 80025c0:	e003      	b.n	80025ca <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80025c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d106      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2200      	movs	r2, #0
 80025d4:	2103      	movs	r1, #3
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fb5e 	bl	8001c98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fc51 	bl	8001e88 <LL_ADC_IsEnabled>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f040 813f 	bne.w	800286c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	461a      	mov	r2, r3
 80025fc:	f7ff fbd2 	bl	8001da4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4a8e      	ldr	r2, [pc, #568]	@ (8002840 <HAL_ADC_ConfigChannel+0x6b0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	f040 8130 	bne.w	800286c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10b      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x4a4>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0e9b      	lsrs	r3, r3, #26
 8002622:	3301      	adds	r3, #1
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	2b09      	cmp	r3, #9
 800262a:	bf94      	ite	ls
 800262c:	2301      	movls	r3, #1
 800262e:	2300      	movhi	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	e019      	b.n	8002668 <HAL_ADC_ConfigChannel+0x4d8>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002644:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002646:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800264c:	2320      	movs	r3, #32
 800264e:	e003      	b.n	8002658 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002650:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	3301      	adds	r3, #1
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	2b09      	cmp	r3, #9
 8002660:	bf94      	ite	ls
 8002662:	2301      	movls	r3, #1
 8002664:	2300      	movhi	r3, #0
 8002666:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002668:	2b00      	cmp	r3, #0
 800266a:	d079      	beq.n	8002760 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002674:	2b00      	cmp	r3, #0
 8002676:	d107      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x4f8>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	0e9b      	lsrs	r3, r3, #26
 800267e:	3301      	adds	r3, #1
 8002680:	069b      	lsls	r3, r3, #26
 8002682:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002686:	e015      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x524>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002698:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800269a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80026a0:	2320      	movs	r3, #32
 80026a2:	e003      	b.n	80026ac <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80026a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	3301      	adds	r3, #1
 80026ae:	069b      	lsls	r3, r3, #26
 80026b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d109      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x544>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	0e9b      	lsrs	r3, r3, #26
 80026c6:	3301      	adds	r3, #1
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	2101      	movs	r1, #1
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	e017      	b.n	8002704 <HAL_ADC_ConfigChannel+0x574>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80026e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026e4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80026e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80026ec:	2320      	movs	r3, #32
 80026ee:	e003      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80026f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	2101      	movs	r1, #1
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	ea42 0103 	orr.w	r1, r2, r3
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <HAL_ADC_ConfigChannel+0x59a>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	0e9b      	lsrs	r3, r3, #26
 800271a:	3301      	adds	r3, #1
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	4613      	mov	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	051b      	lsls	r3, r3, #20
 8002728:	e018      	b.n	800275c <HAL_ADC_ConfigChannel+0x5cc>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800273c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002742:	2320      	movs	r3, #32
 8002744:	e003      	b.n	800274e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002748:	fab3 f383 	clz	r3, r3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	3301      	adds	r3, #1
 8002750:	f003 021f 	and.w	r2, r3, #31
 8002754:	4613      	mov	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800275c:	430b      	orrs	r3, r1
 800275e:	e080      	b.n	8002862 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002768:	2b00      	cmp	r3, #0
 800276a:	d107      	bne.n	800277c <HAL_ADC_ConfigChannel+0x5ec>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0e9b      	lsrs	r3, r3, #26
 8002772:	3301      	adds	r3, #1
 8002774:	069b      	lsls	r3, r3, #26
 8002776:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800277a:	e015      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x618>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800278e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002794:	2320      	movs	r3, #32
 8002796:	e003      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	069b      	lsls	r3, r3, #26
 80027a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x638>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	0e9b      	lsrs	r3, r3, #26
 80027ba:	3301      	adds	r3, #1
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	2101      	movs	r1, #1
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	e017      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x668>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	61bb      	str	r3, [r7, #24]
  return result;
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80027e0:	2320      	movs	r3, #32
 80027e2:	e003      	b.n	80027ec <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	3301      	adds	r3, #1
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	2101      	movs	r1, #1
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	ea42 0103 	orr.w	r1, r2, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10d      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x694>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	0e9b      	lsrs	r3, r3, #26
 800280e:	3301      	adds	r3, #1
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	3b1e      	subs	r3, #30
 800281c:	051b      	lsls	r3, r3, #20
 800281e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002822:	e01d      	b.n	8002860 <HAL_ADC_ConfigChannel+0x6d0>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	60fb      	str	r3, [r7, #12]
  return result;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d103      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800283c:	2320      	movs	r3, #32
 800283e:	e005      	b.n	800284c <HAL_ADC_ConfigChannel+0x6bc>
 8002840:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	3301      	adds	r3, #1
 800284e:	f003 021f 	and.w	r2, r3, #31
 8002852:	4613      	mov	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	3b1e      	subs	r3, #30
 800285a:	051b      	lsls	r3, r3, #20
 800285c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002860:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002866:	4619      	mov	r1, r3
 8002868:	f7ff fa70 	bl	8001d4c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b3d      	ldr	r3, [pc, #244]	@ (8002968 <HAL_ADC_ConfigChannel+0x7d8>)
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d06c      	beq.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002878:	483c      	ldr	r0, [pc, #240]	@ (800296c <HAL_ADC_ConfigChannel+0x7dc>)
 800287a:	f7ff f9c5 	bl	8001c08 <LL_ADC_GetCommonPathInternalCh>
 800287e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a3a      	ldr	r2, [pc, #232]	@ (8002970 <HAL_ADC_ConfigChannel+0x7e0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d127      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800288c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002890:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d121      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a35      	ldr	r2, [pc, #212]	@ (8002974 <HAL_ADC_ConfigChannel+0x7e4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d157      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028aa:	4619      	mov	r1, r3
 80028ac:	482f      	ldr	r0, [pc, #188]	@ (800296c <HAL_ADC_ConfigChannel+0x7dc>)
 80028ae:	f7ff f998 	bl	8001be2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028b2:	4b31      	ldr	r3, [pc, #196]	@ (8002978 <HAL_ADC_ConfigChannel+0x7e8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	099b      	lsrs	r3, r3, #6
 80028b8:	4a30      	ldr	r2, [pc, #192]	@ (800297c <HAL_ADC_ConfigChannel+0x7ec>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	099b      	lsrs	r3, r3, #6
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028cc:	e002      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f9      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028da:	e03a      	b.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a27      	ldr	r2, [pc, #156]	@ (8002980 <HAL_ADC_ConfigChannel+0x7f0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d113      	bne.n	800290e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10d      	bne.n	800290e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002974 <HAL_ADC_ConfigChannel+0x7e4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d12a      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002900:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002904:	4619      	mov	r1, r3
 8002906:	4819      	ldr	r0, [pc, #100]	@ (800296c <HAL_ADC_ConfigChannel+0x7dc>)
 8002908:	f7ff f96b 	bl	8001be2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800290c:	e021      	b.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a1c      	ldr	r2, [pc, #112]	@ (8002984 <HAL_ADC_ConfigChannel+0x7f4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d11c      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002918:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800291c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d116      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a12      	ldr	r2, [pc, #72]	@ (8002974 <HAL_ADC_ConfigChannel+0x7e4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d111      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800292e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002932:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002936:	4619      	mov	r1, r3
 8002938:	480c      	ldr	r0, [pc, #48]	@ (800296c <HAL_ADC_ConfigChannel+0x7dc>)
 800293a:	f7ff f952 	bl	8001be2 <LL_ADC_SetCommonPathInternalCh>
 800293e:	e008      	b.n	8002952 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002944:	f043 0220 	orr.w	r2, r3, #32
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800295a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800295e:	4618      	mov	r0, r3
 8002960:	37d8      	adds	r7, #216	@ 0xd8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	80080000 	.word	0x80080000
 800296c:	50040300 	.word	0x50040300
 8002970:	c7520000 	.word	0xc7520000
 8002974:	50040000 	.word	0x50040000
 8002978:	20000000 	.word	0x20000000
 800297c:	053e2d63 	.word	0x053e2d63
 8002980:	cb840000 	.word	0xcb840000
 8002984:	80000001 	.word	0x80000001

08002988 <LL_ADC_IsEnabled>:
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <LL_ADC_IsEnabled+0x18>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <LL_ADC_IsEnabled+0x1a>
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <LL_ADC_REG_IsConversionOngoing>:
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d101      	bne.n	80029c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	b09f      	sub	sp, #124	@ 0x7c
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e089      	b.n	8002b06 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80029fa:	2300      	movs	r3, #0
 80029fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80029fe:	2300      	movs	r3, #0
 8002a00:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a42      	ldr	r2, [pc, #264]	@ (8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d102      	bne.n	8002a12 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a0c:	4b41      	ldr	r3, [pc, #260]	@ (8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	e001      	b.n	8002a16 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10b      	bne.n	8002a34 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a20:	f043 0220 	orr.w	r2, r3, #32
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e068      	b.n	8002b06 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff ffb9 	bl	80029ae <LL_ADC_REG_IsConversionOngoing>
 8002a3c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff ffb3 	bl	80029ae <LL_ADC_REG_IsConversionOngoing>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d14a      	bne.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002a4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d147      	bne.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a54:	4b30      	ldr	r3, [pc, #192]	@ (8002b18 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002a56:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d027      	beq.n	8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	6859      	ldr	r1, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a72:	035b      	lsls	r3, r3, #13
 8002a74:	430b      	orrs	r3, r1
 8002a76:	431a      	orrs	r2, r3
 8002a78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a7a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a7c:	4824      	ldr	r0, [pc, #144]	@ (8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002a7e:	f7ff ff83 	bl	8002988 <LL_ADC_IsEnabled>
 8002a82:	4604      	mov	r4, r0
 8002a84:	4823      	ldr	r0, [pc, #140]	@ (8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a86:	f7ff ff7f 	bl	8002988 <LL_ADC_IsEnabled>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4323      	orrs	r3, r4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d132      	bne.n	8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a9a:	f023 030f 	bic.w	r3, r3, #15
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	6811      	ldr	r1, [r2, #0]
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	6892      	ldr	r2, [r2, #8]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aac:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002aae:	e023      	b.n	8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ab8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002abc:	4814      	ldr	r0, [pc, #80]	@ (8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002abe:	f7ff ff63 	bl	8002988 <LL_ADC_IsEnabled>
 8002ac2:	4604      	mov	r4, r0
 8002ac4:	4813      	ldr	r0, [pc, #76]	@ (8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002ac6:	f7ff ff5f 	bl	8002988 <LL_ADC_IsEnabled>
 8002aca:	4603      	mov	r3, r0
 8002acc:	4323      	orrs	r3, r4
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d112      	bne.n	8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002ada:	f023 030f 	bic.w	r3, r3, #15
 8002ade:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ae0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ae2:	e009      	b.n	8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae8:	f043 0220 	orr.w	r2, r3, #32
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002af6:	e000      	b.n	8002afa <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002af8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b02:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	377c      	adds	r7, #124	@ 0x7c
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd90      	pop	{r4, r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	50040000 	.word	0x50040000
 8002b14:	50040100 	.word	0x50040100
 8002b18:	50040300 	.word	0x50040300

08002b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b60 <__NVIC_SetPriorityGrouping+0x44>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b4e:	4a04      	ldr	r2, [pc, #16]	@ (8002b60 <__NVIC_SetPriorityGrouping+0x44>)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	60d3      	str	r3, [r2, #12]
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b68:	4b04      	ldr	r3, [pc, #16]	@ (8002b7c <__NVIC_GetPriorityGrouping+0x18>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	0a1b      	lsrs	r3, r3, #8
 8002b6e:	f003 0307 	and.w	r3, r3, #7
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	db0b      	blt.n	8002baa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	f003 021f 	and.w	r2, r3, #31
 8002b98:	4907      	ldr	r1, [pc, #28]	@ (8002bb8 <__NVIC_EnableIRQ+0x38>)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	e000e100 	.word	0xe000e100

08002bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	6039      	str	r1, [r7, #0]
 8002bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	db0a      	blt.n	8002be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	490c      	ldr	r1, [pc, #48]	@ (8002c08 <__NVIC_SetPriority+0x4c>)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	0112      	lsls	r2, r2, #4
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	440b      	add	r3, r1
 8002be0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be4:	e00a      	b.n	8002bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	4908      	ldr	r1, [pc, #32]	@ (8002c0c <__NVIC_SetPriority+0x50>)
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	3b04      	subs	r3, #4
 8002bf4:	0112      	lsls	r2, r2, #4
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	761a      	strb	r2, [r3, #24]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000e100 	.word	0xe000e100
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b089      	sub	sp, #36	@ 0x24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f1c3 0307 	rsb	r3, r3, #7
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	bf28      	it	cs
 8002c2e:	2304      	movcs	r3, #4
 8002c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3304      	adds	r3, #4
 8002c36:	2b06      	cmp	r3, #6
 8002c38:	d902      	bls.n	8002c40 <NVIC_EncodePriority+0x30>
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3b03      	subs	r3, #3
 8002c3e:	e000      	b.n	8002c42 <NVIC_EncodePriority+0x32>
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43da      	mvns	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	401a      	ands	r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c62:	43d9      	mvns	r1, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c68:	4313      	orrs	r3, r2
         );
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3724      	adds	r7, #36	@ 0x24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c88:	d301      	bcc.n	8002c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e00f      	b.n	8002cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb8 <SysTick_Config+0x40>)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c96:	210f      	movs	r1, #15
 8002c98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c9c:	f7ff ff8e 	bl	8002bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ca0:	4b05      	ldr	r3, [pc, #20]	@ (8002cb8 <SysTick_Config+0x40>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ca6:	4b04      	ldr	r3, [pc, #16]	@ (8002cb8 <SysTick_Config+0x40>)
 8002ca8:	2207      	movs	r2, #7
 8002caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	e000e010 	.word	0xe000e010

08002cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff ff29 	bl	8002b1c <__NVIC_SetPriorityGrouping>
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b086      	sub	sp, #24
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	4603      	mov	r3, r0
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce4:	f7ff ff3e 	bl	8002b64 <__NVIC_GetPriorityGrouping>
 8002ce8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	6978      	ldr	r0, [r7, #20]
 8002cf0:	f7ff ff8e 	bl	8002c10 <NVIC_EncodePriority>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff5d 	bl	8002bbc <__NVIC_SetPriority>
}
 8002d02:	bf00      	nop
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	4603      	mov	r3, r0
 8002d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff31 	bl	8002b80 <__NVIC_EnableIRQ>
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff ffa2 	bl	8002c78 <SysTick_Config>
 8002d34:	4603      	mov	r3, r0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d4e:	e14e      	b.n	8002fee <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	2101      	movs	r1, #1
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 8140 	beq.w	8002fe8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d005      	beq.n	8002d80 <HAL_GPIO_Init+0x40>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d130      	bne.n	8002de2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002db6:	2201      	movs	r2, #1
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	f003 0201 	and.w	r2, r3, #1
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d017      	beq.n	8002e1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	2203      	movs	r2, #3
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4013      	ands	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d123      	bne.n	8002e72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	08da      	lsrs	r2, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3208      	adds	r2, #8
 8002e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	220f      	movs	r2, #15
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	08da      	lsrs	r2, r3, #3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3208      	adds	r2, #8
 8002e6c:	6939      	ldr	r1, [r7, #16]
 8002e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4013      	ands	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 0203 	and.w	r2, r3, #3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 809a 	beq.w	8002fe8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb4:	4b55      	ldr	r3, [pc, #340]	@ (800300c <HAL_GPIO_Init+0x2cc>)
 8002eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb8:	4a54      	ldr	r2, [pc, #336]	@ (800300c <HAL_GPIO_Init+0x2cc>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ec0:	4b52      	ldr	r3, [pc, #328]	@ (800300c <HAL_GPIO_Init+0x2cc>)
 8002ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ecc:	4a50      	ldr	r2, [pc, #320]	@ (8003010 <HAL_GPIO_Init+0x2d0>)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	089b      	lsrs	r3, r3, #2
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	220f      	movs	r2, #15
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ef6:	d013      	beq.n	8002f20 <HAL_GPIO_Init+0x1e0>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a46      	ldr	r2, [pc, #280]	@ (8003014 <HAL_GPIO_Init+0x2d4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00d      	beq.n	8002f1c <HAL_GPIO_Init+0x1dc>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a45      	ldr	r2, [pc, #276]	@ (8003018 <HAL_GPIO_Init+0x2d8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d007      	beq.n	8002f18 <HAL_GPIO_Init+0x1d8>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a44      	ldr	r2, [pc, #272]	@ (800301c <HAL_GPIO_Init+0x2dc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d101      	bne.n	8002f14 <HAL_GPIO_Init+0x1d4>
 8002f10:	2303      	movs	r3, #3
 8002f12:	e006      	b.n	8002f22 <HAL_GPIO_Init+0x1e2>
 8002f14:	2307      	movs	r3, #7
 8002f16:	e004      	b.n	8002f22 <HAL_GPIO_Init+0x1e2>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e002      	b.n	8002f22 <HAL_GPIO_Init+0x1e2>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <HAL_GPIO_Init+0x1e2>
 8002f20:	2300      	movs	r3, #0
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	f002 0203 	and.w	r2, r2, #3
 8002f28:	0092      	lsls	r2, r2, #2
 8002f2a:	4093      	lsls	r3, r2
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f32:	4937      	ldr	r1, [pc, #220]	@ (8003010 <HAL_GPIO_Init+0x2d0>)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	089b      	lsrs	r3, r3, #2
 8002f38:	3302      	adds	r3, #2
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f40:	4b37      	ldr	r3, [pc, #220]	@ (8003020 <HAL_GPIO_Init+0x2e0>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f64:	4a2e      	ldr	r2, [pc, #184]	@ (8003020 <HAL_GPIO_Init+0x2e0>)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f6a:	4b2d      	ldr	r3, [pc, #180]	@ (8003020 <HAL_GPIO_Init+0x2e0>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4013      	ands	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f8e:	4a24      	ldr	r2, [pc, #144]	@ (8003020 <HAL_GPIO_Init+0x2e0>)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f94:	4b22      	ldr	r3, [pc, #136]	@ (8003020 <HAL_GPIO_Init+0x2e0>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fb8:	4a19      	ldr	r2, [pc, #100]	@ (8003020 <HAL_GPIO_Init+0x2e0>)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002fbe:	4b18      	ldr	r3, [pc, #96]	@ (8003020 <HAL_GPIO_Init+0x2e0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8003020 <HAL_GPIO_Init+0x2e0>)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	3301      	adds	r3, #1
 8002fec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f47f aea9 	bne.w	8002d50 <HAL_GPIO_Init+0x10>
  }
}
 8002ffe:	bf00      	nop
 8003000:	bf00      	nop
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	40021000 	.word	0x40021000
 8003010:	40010000 	.word	0x40010000
 8003014:	48000400 	.word	0x48000400
 8003018:	48000800 	.word	0x48000800
 800301c:	48000c00 	.word	0x48000c00
 8003020:	40010400 	.word	0x40010400

08003024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	807b      	strh	r3, [r7, #2]
 8003030:	4613      	mov	r3, r2
 8003032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003034:	787b      	ldrb	r3, [r7, #1]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800303a:	887a      	ldrh	r2, [r7, #2]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003040:	e002      	b.n	8003048 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003042:	887a      	ldrh	r2, [r7, #2]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800305e:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	4013      	ands	r3, r2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d006      	beq.n	8003078 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800306a:	4a05      	ldr	r2, [pc, #20]	@ (8003080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe f84c 	bl	8001110 <HAL_GPIO_EXTI_Callback>
  }
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40010400 	.word	0x40010400

08003084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e08d      	b.n	80031b2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fd ffc4 	bl	8001038 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2224      	movs	r2, #36	@ 0x24
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0201 	bic.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d107      	bne.n	80030fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	e006      	b.n	800310c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800310a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d108      	bne.n	8003126 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003122:	605a      	str	r2, [r3, #4]
 8003124:	e007      	b.n	8003136 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003134:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003144:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003148:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003158:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69d9      	ldr	r1, [r3, #28]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1a      	ldr	r2, [r3, #32]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	461a      	mov	r2, r3
 80031c8:	460b      	mov	r3, r1
 80031ca:	817b      	strh	r3, [r7, #10]
 80031cc:	4613      	mov	r3, r2
 80031ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b20      	cmp	r3, #32
 80031da:	f040 80fd 	bne.w	80033d8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_I2C_Master_Transmit+0x30>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e0f6      	b.n	80033da <HAL_I2C_Master_Transmit+0x21e>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031f4:	f7fe fcb2 	bl	8001b5c <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	2319      	movs	r3, #25
 8003200:	2201      	movs	r2, #1
 8003202:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fa0a 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e0e1      	b.n	80033da <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2221      	movs	r2, #33	@ 0x21
 800321a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2210      	movs	r2, #16
 8003222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	893a      	ldrh	r2, [r7, #8]
 8003236:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	2bff      	cmp	r3, #255	@ 0xff
 8003246:	d906      	bls.n	8003256 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	22ff      	movs	r2, #255	@ 0xff
 800324c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800324e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	e007      	b.n	8003266 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003260:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003264:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326a:	2b00      	cmp	r3, #0
 800326c:	d024      	beq.n	80032b8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	781a      	ldrb	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	3301      	adds	r3, #1
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	8979      	ldrh	r1, [r7, #10]
 80032aa:	4b4e      	ldr	r3, [pc, #312]	@ (80033e4 <HAL_I2C_Master_Transmit+0x228>)
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 fc05 	bl	8003ac0 <I2C_TransferConfig>
 80032b6:	e066      	b.n	8003386 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	8979      	ldrh	r1, [r7, #10]
 80032c0:	4b48      	ldr	r3, [pc, #288]	@ (80033e4 <HAL_I2C_Master_Transmit+0x228>)
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 fbfa 	bl	8003ac0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80032cc:	e05b      	b.n	8003386 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	6a39      	ldr	r1, [r7, #32]
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f9fd 	bl	80036d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e07b      	b.n	80033da <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e6:	781a      	ldrb	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d034      	beq.n	8003386 <HAL_I2C_Master_Transmit+0x1ca>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003320:	2b00      	cmp	r3, #0
 8003322:	d130      	bne.n	8003386 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	2200      	movs	r2, #0
 800332c:	2180      	movs	r1, #128	@ 0x80
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f976 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e04d      	b.n	80033da <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003342:	b29b      	uxth	r3, r3
 8003344:	2bff      	cmp	r3, #255	@ 0xff
 8003346:	d90e      	bls.n	8003366 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	22ff      	movs	r2, #255	@ 0xff
 800334c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003352:	b2da      	uxtb	r2, r3
 8003354:	8979      	ldrh	r1, [r7, #10]
 8003356:	2300      	movs	r3, #0
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 fbae 	bl	8003ac0 <I2C_TransferConfig>
 8003364:	e00f      	b.n	8003386 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003374:	b2da      	uxtb	r2, r3
 8003376:	8979      	ldrh	r1, [r7, #10]
 8003378:	2300      	movs	r3, #0
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 fb9d 	bl	8003ac0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d19e      	bne.n	80032ce <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	6a39      	ldr	r1, [r7, #32]
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 f9e3 	bl	8003760 <I2C_WaitOnSTOPFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e01a      	b.n	80033da <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2220      	movs	r2, #32
 80033aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6859      	ldr	r1, [r3, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4b0c      	ldr	r3, [pc, #48]	@ (80033e8 <HAL_I2C_Master_Transmit+0x22c>)
 80033b8:	400b      	ands	r3, r1
 80033ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e000      	b.n	80033da <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
  }
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	80002000 	.word	0x80002000
 80033e8:	fe00e800 	.word	0xfe00e800

080033ec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	461a      	mov	r2, r3
 80033f8:	460b      	mov	r3, r1
 80033fa:	817b      	strh	r3, [r7, #10]
 80033fc:	4613      	mov	r3, r2
 80033fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b20      	cmp	r3, #32
 800340a:	f040 80db 	bne.w	80035c4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_I2C_Master_Receive+0x30>
 8003418:	2302      	movs	r3, #2
 800341a:	e0d4      	b.n	80035c6 <HAL_I2C_Master_Receive+0x1da>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003424:	f7fe fb9a 	bl	8001b5c <HAL_GetTick>
 8003428:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	2319      	movs	r3, #25
 8003430:	2201      	movs	r2, #1
 8003432:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f8f2 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e0bf      	b.n	80035c6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2222      	movs	r2, #34	@ 0x22
 800344a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2210      	movs	r2, #16
 8003452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	893a      	ldrh	r2, [r7, #8]
 8003466:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003472:	b29b      	uxth	r3, r3
 8003474:	2bff      	cmp	r3, #255	@ 0xff
 8003476:	d90e      	bls.n	8003496 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003482:	b2da      	uxtb	r2, r3
 8003484:	8979      	ldrh	r1, [r7, #10]
 8003486:	4b52      	ldr	r3, [pc, #328]	@ (80035d0 <HAL_I2C_Master_Receive+0x1e4>)
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 fb16 	bl	8003ac0 <I2C_TransferConfig>
 8003494:	e06d      	b.n	8003572 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	8979      	ldrh	r1, [r7, #10]
 80034a8:	4b49      	ldr	r3, [pc, #292]	@ (80035d0 <HAL_I2C_Master_Receive+0x1e4>)
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fb05 	bl	8003ac0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80034b6:	e05c      	b.n	8003572 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	6a39      	ldr	r1, [r7, #32]
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 f993 	bl	80037e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e07c      	b.n	80035c6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d034      	beq.n	8003572 <HAL_I2C_Master_Receive+0x186>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350c:	2b00      	cmp	r3, #0
 800350e:	d130      	bne.n	8003572 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	2200      	movs	r2, #0
 8003518:	2180      	movs	r1, #128	@ 0x80
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f880 	bl	8003620 <I2C_WaitOnFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e04d      	b.n	80035c6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	2bff      	cmp	r3, #255	@ 0xff
 8003532:	d90e      	bls.n	8003552 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	22ff      	movs	r2, #255	@ 0xff
 8003538:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353e:	b2da      	uxtb	r2, r3
 8003540:	8979      	ldrh	r1, [r7, #10]
 8003542:	2300      	movs	r3, #0
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fab8 	bl	8003ac0 <I2C_TransferConfig>
 8003550:	e00f      	b.n	8003572 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003560:	b2da      	uxtb	r2, r3
 8003562:	8979      	ldrh	r1, [r7, #10]
 8003564:	2300      	movs	r3, #0
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 faa7 	bl	8003ac0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d19d      	bne.n	80034b8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	6a39      	ldr	r1, [r7, #32]
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f8ed 	bl	8003760 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e01a      	b.n	80035c6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2220      	movs	r2, #32
 8003596:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	4b0c      	ldr	r3, [pc, #48]	@ (80035d4 <HAL_I2C_Master_Receive+0x1e8>)
 80035a4:	400b      	ands	r3, r1
 80035a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e000      	b.n	80035c6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80035c4:	2302      	movs	r3, #2
  }
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	80002400 	.word	0x80002400
 80035d4:	fe00e800 	.word	0xfe00e800

080035d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d103      	bne.n	80035f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2200      	movs	r2, #0
 80035f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b01      	cmp	r3, #1
 8003602:	d007      	beq.n	8003614 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0201 	orr.w	r2, r2, #1
 8003612:	619a      	str	r2, [r3, #24]
  }
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	4613      	mov	r3, r2
 800362e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003630:	e03b      	b.n	80036aa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	6839      	ldr	r1, [r7, #0]
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f962 	bl	8003900 <I2C_IsErrorOccurred>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e041      	b.n	80036ca <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800364c:	d02d      	beq.n	80036aa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364e:	f7fe fa85 	bl	8001b5c <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d302      	bcc.n	8003664 <I2C_WaitOnFlagUntilTimeout+0x44>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d122      	bne.n	80036aa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4013      	ands	r3, r2
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	429a      	cmp	r2, r3
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	429a      	cmp	r2, r3
 8003680:	d113      	bne.n	80036aa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003686:	f043 0220 	orr.w	r2, r3, #32
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e00f      	b.n	80036ca <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699a      	ldr	r2, [r3, #24]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	4013      	ands	r3, r2
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	bf0c      	ite	eq
 80036ba:	2301      	moveq	r3, #1
 80036bc:	2300      	movne	r3, #0
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	461a      	mov	r2, r3
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d0b4      	beq.n	8003632 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b084      	sub	sp, #16
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036de:	e033      	b.n	8003748 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f90b 	bl	8003900 <I2C_IsErrorOccurred>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e031      	b.n	8003758 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036fa:	d025      	beq.n	8003748 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fc:	f7fe fa2e 	bl	8001b5c <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	429a      	cmp	r2, r3
 800370a:	d302      	bcc.n	8003712 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d11a      	bne.n	8003748 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b02      	cmp	r3, #2
 800371e:	d013      	beq.n	8003748 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003724:	f043 0220 	orr.w	r2, r3, #32
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e007      	b.n	8003758 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b02      	cmp	r3, #2
 8003754:	d1c4      	bne.n	80036e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800376c:	e02f      	b.n	80037ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f8c4 	bl	8003900 <I2C_IsErrorOccurred>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e02d      	b.n	80037de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003782:	f7fe f9eb 	bl	8001b5c <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	429a      	cmp	r2, r3
 8003790:	d302      	bcc.n	8003798 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d11a      	bne.n	80037ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d013      	beq.n	80037ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037aa:	f043 0220 	orr.w	r2, r3, #32
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e007      	b.n	80037de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b20      	cmp	r3, #32
 80037da:	d1c8      	bne.n	800376e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80037f8:	e071      	b.n	80038de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f87e 	bl	8003900 <I2C_IsErrorOccurred>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b20      	cmp	r3, #32
 800381a:	d13b      	bne.n	8003894 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800381c:	7dfb      	ldrb	r3, [r7, #23]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d138      	bne.n	8003894 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b04      	cmp	r3, #4
 800382e:	d105      	bne.n	800383c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	f003 0310 	and.w	r3, r3, #16
 8003846:	2b10      	cmp	r3, #16
 8003848:	d121      	bne.n	800388e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2210      	movs	r2, #16
 8003850:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2204      	movs	r2, #4
 8003856:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2220      	movs	r2, #32
 800385e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6859      	ldr	r1, [r3, #4]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	4b24      	ldr	r3, [pc, #144]	@ (80038fc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800386c:	400b      	ands	r3, r1
 800386e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	75fb      	strb	r3, [r7, #23]
 800388c:	e002      	b.n	8003894 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003894:	f7fe f962 	bl	8001b5c <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d302      	bcc.n	80038aa <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d119      	bne.n	80038de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d116      	bne.n	80038de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d00f      	beq.n	80038de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c2:	f043 0220 	orr.w	r2, r3, #32
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b04      	cmp	r3, #4
 80038ea:	d002      	beq.n	80038f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80038ec:	7dfb      	ldrb	r3, [r7, #23]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d083      	beq.n	80037fa <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	fe00e800 	.word	0xfe00e800

08003900 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	@ 0x28
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b00      	cmp	r3, #0
 800392a:	d068      	beq.n	80039fe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2210      	movs	r2, #16
 8003932:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003934:	e049      	b.n	80039ca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800393c:	d045      	beq.n	80039ca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800393e:	f7fe f90d 	bl	8001b5c <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	429a      	cmp	r2, r3
 800394c:	d302      	bcc.n	8003954 <I2C_IsErrorOccurred+0x54>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d13a      	bne.n	80039ca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800395e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003966:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003972:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003976:	d121      	bne.n	80039bc <I2C_IsErrorOccurred+0xbc>
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800397e:	d01d      	beq.n	80039bc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003980:	7cfb      	ldrb	r3, [r7, #19]
 8003982:	2b20      	cmp	r3, #32
 8003984:	d01a      	beq.n	80039bc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003994:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003996:	f7fe f8e1 	bl	8001b5c <HAL_GetTick>
 800399a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800399c:	e00e      	b.n	80039bc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800399e:	f7fe f8dd 	bl	8001b5c <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b19      	cmp	r3, #25
 80039aa:	d907      	bls.n	80039bc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	f043 0320 	orr.w	r3, r3, #32
 80039b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80039ba:	e006      	b.n	80039ca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d1e9      	bne.n	800399e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d003      	beq.n	80039e0 <I2C_IsErrorOccurred+0xe0>
 80039d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0aa      	beq.n	8003936 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80039e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d103      	bne.n	80039f0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2220      	movs	r2, #32
 80039ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	f043 0304 	orr.w	r3, r3, #4
 80039f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00b      	beq.n	8003a28 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	f043 0308 	orr.w	r3, r3, #8
 8003a38:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00b      	beq.n	8003a6c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	f043 0302 	orr.w	r3, r3, #2
 8003a5a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d01c      	beq.n	8003aae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f7ff fdaf 	bl	80035d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6859      	ldr	r1, [r3, #4]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	4b0d      	ldr	r3, [pc, #52]	@ (8003abc <I2C_IsErrorOccurred+0x1bc>)
 8003a86:	400b      	ands	r3, r1
 8003a88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	431a      	orrs	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003aae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3728      	adds	r7, #40	@ 0x28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	fe00e800 	.word	0xfe00e800

08003ac0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	607b      	str	r3, [r7, #4]
 8003aca:	460b      	mov	r3, r1
 8003acc:	817b      	strh	r3, [r7, #10]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ad2:	897b      	ldrh	r3, [r7, #10]
 8003ad4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ad8:	7a7b      	ldrb	r3, [r7, #9]
 8003ada:	041b      	lsls	r3, r3, #16
 8003adc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ae0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003aee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	0d5b      	lsrs	r3, r3, #21
 8003afa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003afe:	4b08      	ldr	r3, [pc, #32]	@ (8003b20 <I2C_TransferConfig+0x60>)
 8003b00:	430b      	orrs	r3, r1
 8003b02:	43db      	mvns	r3, r3
 8003b04:	ea02 0103 	and.w	r1, r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b12:	bf00      	nop
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	03ff63ff 	.word	0x03ff63ff

08003b24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d138      	bne.n	8003bac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e032      	b.n	8003bae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2224      	movs	r2, #36	@ 0x24
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0201 	bic.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6819      	ldr	r1, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e000      	b.n	8003bae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bac:	2302      	movs	r3, #2
  }
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b085      	sub	sp, #20
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b20      	cmp	r3, #32
 8003bce:	d139      	bne.n	8003c44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e033      	b.n	8003c46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2224      	movs	r2, #36	@ 0x24
 8003bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0201 	bic.w	r2, r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	021b      	lsls	r3, r3, #8
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	e000      	b.n	8003c46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c44:	2302      	movs	r3, #2
  }
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c58:	4b04      	ldr	r3, [pc, #16]	@ (8003c6c <HAL_PWREx_GetVoltageRange+0x18>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40007000 	.word	0x40007000

08003c70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c7e:	d130      	bne.n	8003ce2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c80:	4b23      	ldr	r3, [pc, #140]	@ (8003d10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c8c:	d038      	beq.n	8003d00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c8e:	4b20      	ldr	r3, [pc, #128]	@ (8003d10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c96:	4a1e      	ldr	r2, [pc, #120]	@ (8003d10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2232      	movs	r2, #50	@ 0x32
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8003d18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	0c9b      	lsrs	r3, r3, #18
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cb4:	e002      	b.n	8003cbc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cbc:	4b14      	ldr	r3, [pc, #80]	@ (8003d10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc8:	d102      	bne.n	8003cd0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1f2      	bne.n	8003cb6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003d10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cdc:	d110      	bne.n	8003d00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e00f      	b.n	8003d02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8003d10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cee:	d007      	beq.n	8003d00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cf0:	4b07      	ldr	r3, [pc, #28]	@ (8003d10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003cf8:	4a05      	ldr	r2, [pc, #20]	@ (8003d10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003cfe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40007000 	.word	0x40007000
 8003d14:	20000000 	.word	0x20000000
 8003d18:	431bde83 	.word	0x431bde83

08003d1c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08a      	sub	sp, #40	@ 0x28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d102      	bne.n	8003d30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f000 bc4f 	b.w	80045ce <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d30:	4b97      	ldr	r3, [pc, #604]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 030c 	and.w	r3, r3, #12
 8003d38:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d3a:	4b95      	ldr	r3, [pc, #596]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80e6 	beq.w	8003f1e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d007      	beq.n	8003d68 <HAL_RCC_OscConfig+0x4c>
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	2b0c      	cmp	r3, #12
 8003d5c:	f040 808d 	bne.w	8003e7a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	f040 8089 	bne.w	8003e7a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d68:	4b89      	ldr	r3, [pc, #548]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d006      	beq.n	8003d82 <HAL_RCC_OscConfig+0x66>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d102      	bne.n	8003d82 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	f000 bc26 	b.w	80045ce <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d86:	4b82      	ldr	r3, [pc, #520]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d004      	beq.n	8003d9c <HAL_RCC_OscConfig+0x80>
 8003d92:	4b7f      	ldr	r3, [pc, #508]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d9a:	e005      	b.n	8003da8 <HAL_RCC_OscConfig+0x8c>
 8003d9c:	4b7c      	ldr	r3, [pc, #496]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d224      	bcs.n	8003df6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fdd9 	bl	8004968 <RCC_SetFlashLatencyFromMSIRange>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f000 bc06 	b.w	80045ce <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dc2:	4b73      	ldr	r3, [pc, #460]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a72      	ldr	r2, [pc, #456]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003dc8:	f043 0308 	orr.w	r3, r3, #8
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	4b70      	ldr	r3, [pc, #448]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dda:	496d      	ldr	r1, [pc, #436]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003de0:	4b6b      	ldr	r3, [pc, #428]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	021b      	lsls	r3, r3, #8
 8003dee:	4968      	ldr	r1, [pc, #416]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	604b      	str	r3, [r1, #4]
 8003df4:	e025      	b.n	8003e42 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003df6:	4b66      	ldr	r3, [pc, #408]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a65      	ldr	r2, [pc, #404]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003dfc:	f043 0308 	orr.w	r3, r3, #8
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	4b63      	ldr	r3, [pc, #396]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0e:	4960      	ldr	r1, [pc, #384]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e14:	4b5e      	ldr	r3, [pc, #376]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	021b      	lsls	r3, r3, #8
 8003e22:	495b      	ldr	r1, [pc, #364]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d109      	bne.n	8003e42 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fd98 	bl	8004968 <RCC_SetFlashLatencyFromMSIRange>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e3c5      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e42:	f000 fccd 	bl	80047e0 <HAL_RCC_GetSysClockFreq>
 8003e46:	4602      	mov	r2, r0
 8003e48:	4b51      	ldr	r3, [pc, #324]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	4950      	ldr	r1, [pc, #320]	@ (8003f94 <HAL_RCC_OscConfig+0x278>)
 8003e54:	5ccb      	ldrb	r3, [r1, r3]
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e5e:	4a4e      	ldr	r2, [pc, #312]	@ (8003f98 <HAL_RCC_OscConfig+0x27c>)
 8003e60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e62:	4b4e      	ldr	r3, [pc, #312]	@ (8003f9c <HAL_RCC_OscConfig+0x280>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fd fe28 	bl	8001abc <HAL_InitTick>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d052      	beq.n	8003f1c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003e76:	7dfb      	ldrb	r3, [r7, #23]
 8003e78:	e3a9      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d032      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e82:	4b43      	ldr	r3, [pc, #268]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a42      	ldr	r2, [pc, #264]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e8e:	f7fd fe65 	bl	8001b5c <HAL_GetTick>
 8003e92:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e96:	f7fd fe61 	bl	8001b5c <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e392      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ea8:	4b39      	ldr	r3, [pc, #228]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eb4:	4b36      	ldr	r3, [pc, #216]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a35      	ldr	r2, [pc, #212]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003eba:	f043 0308 	orr.w	r3, r3, #8
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	4b33      	ldr	r3, [pc, #204]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ecc:	4930      	ldr	r1, [pc, #192]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	492b      	ldr	r1, [pc, #172]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	604b      	str	r3, [r1, #4]
 8003ee6:	e01a      	b.n	8003f1e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ee8:	4b29      	ldr	r3, [pc, #164]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a28      	ldr	r2, [pc, #160]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003eee:	f023 0301 	bic.w	r3, r3, #1
 8003ef2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ef4:	f7fd fe32 	bl	8001b5c <HAL_GetTick>
 8003ef8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003efc:	f7fd fe2e 	bl	8001b5c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e35f      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f0e:	4b20      	ldr	r3, [pc, #128]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x1e0>
 8003f1a:	e000      	b.n	8003f1e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d073      	beq.n	8004012 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_OscConfig+0x220>
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	2b0c      	cmp	r3, #12
 8003f34:	d10e      	bne.n	8003f54 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	d10b      	bne.n	8003f54 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f3c:	4b14      	ldr	r3, [pc, #80]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d063      	beq.n	8004010 <HAL_RCC_OscConfig+0x2f4>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d15f      	bne.n	8004010 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e33c      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f5c:	d106      	bne.n	8003f6c <HAL_RCC_OscConfig+0x250>
 8003f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a0b      	ldr	r2, [pc, #44]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	e025      	b.n	8003fb8 <HAL_RCC_OscConfig+0x29c>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f74:	d114      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x284>
 8003f76:	4b06      	ldr	r3, [pc, #24]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a05      	ldr	r2, [pc, #20]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	4b03      	ldr	r3, [pc, #12]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a02      	ldr	r2, [pc, #8]	@ (8003f90 <HAL_RCC_OscConfig+0x274>)
 8003f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	e013      	b.n	8003fb8 <HAL_RCC_OscConfig+0x29c>
 8003f90:	40021000 	.word	0x40021000
 8003f94:	080080a0 	.word	0x080080a0
 8003f98:	20000000 	.word	0x20000000
 8003f9c:	20000004 	.word	0x20000004
 8003fa0:	4b8f      	ldr	r3, [pc, #572]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a8e      	ldr	r2, [pc, #568]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 8003fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	4b8c      	ldr	r3, [pc, #560]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a8b      	ldr	r2, [pc, #556]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 8003fb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d013      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc0:	f7fd fdcc 	bl	8001b5c <HAL_GetTick>
 8003fc4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc8:	f7fd fdc8 	bl	8001b5c <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	@ 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e2f9      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fda:	4b81      	ldr	r3, [pc, #516]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x2ac>
 8003fe6:	e014      	b.n	8004012 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fd fdb8 	bl	8001b5c <HAL_GetTick>
 8003fec:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7fd fdb4 	bl	8001b5c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	@ 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e2e5      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004002:	4b77      	ldr	r3, [pc, #476]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x2d4>
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d060      	beq.n	80040e0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	2b04      	cmp	r3, #4
 8004022:	d005      	beq.n	8004030 <HAL_RCC_OscConfig+0x314>
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	2b0c      	cmp	r3, #12
 8004028:	d119      	bne.n	800405e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d116      	bne.n	800405e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004030:	4b6b      	ldr	r3, [pc, #428]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_RCC_OscConfig+0x32c>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e2c2      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004048:	4b65      	ldr	r3, [pc, #404]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	061b      	lsls	r3, r3, #24
 8004056:	4962      	ldr	r1, [pc, #392]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 8004058:	4313      	orrs	r3, r2
 800405a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800405c:	e040      	b.n	80040e0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d023      	beq.n	80040ae <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004066:	4b5e      	ldr	r3, [pc, #376]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a5d      	ldr	r2, [pc, #372]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 800406c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004072:	f7fd fd73 	bl	8001b5c <HAL_GetTick>
 8004076:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800407a:	f7fd fd6f 	bl	8001b5c <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e2a0      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800408c:	4b54      	ldr	r3, [pc, #336]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004098:	4b51      	ldr	r3, [pc, #324]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	061b      	lsls	r3, r3, #24
 80040a6:	494e      	ldr	r1, [pc, #312]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	604b      	str	r3, [r1, #4]
 80040ac:	e018      	b.n	80040e0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ae:	4b4c      	ldr	r3, [pc, #304]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a4b      	ldr	r2, [pc, #300]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 80040b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ba:	f7fd fd4f 	bl	8001b5c <HAL_GetTick>
 80040be:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c2:	f7fd fd4b 	bl	8001b5c <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e27c      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040d4:	4b42      	ldr	r3, [pc, #264]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f0      	bne.n	80040c2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8082 	beq.w	80041f2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d05f      	beq.n	80041b6 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80040f6:	4b3a      	ldr	r3, [pc, #232]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 80040f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040fc:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	429a      	cmp	r2, r3
 800410a:	d037      	beq.n	800417c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d006      	beq.n	8004124 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e254      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d01b      	beq.n	8004166 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800412e:	4b2c      	ldr	r3, [pc, #176]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 8004130:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004134:	4a2a      	ldr	r2, [pc, #168]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 8004136:	f023 0301 	bic.w	r3, r3, #1
 800413a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800413e:	f7fd fd0d 	bl	8001b5c <HAL_GetTick>
 8004142:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004146:	f7fd fd09 	bl	8001b5c <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b11      	cmp	r3, #17
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e23a      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004158:	4b21      	ldr	r3, [pc, #132]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 800415a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1ef      	bne.n	8004146 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004166:	4b1e      	ldr	r3, [pc, #120]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 8004168:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800416c:	f023 0210 	bic.w	r2, r3, #16
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	491a      	ldr	r1, [pc, #104]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800417c:	4b18      	ldr	r3, [pc, #96]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 800417e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004182:	4a17      	ldr	r2, [pc, #92]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418c:	f7fd fce6 	bl	8001b5c <HAL_GetTick>
 8004190:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004194:	f7fd fce2 	bl	8001b5c <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b11      	cmp	r3, #17
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e213      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041a6:	4b0e      	ldr	r3, [pc, #56]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 80041a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0ef      	beq.n	8004194 <HAL_RCC_OscConfig+0x478>
 80041b4:	e01d      	b.n	80041f2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b6:	4b0a      	ldr	r3, [pc, #40]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 80041b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041bc:	4a08      	ldr	r2, [pc, #32]	@ (80041e0 <HAL_RCC_OscConfig+0x4c4>)
 80041be:	f023 0301 	bic.w	r3, r3, #1
 80041c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c6:	f7fd fcc9 	bl	8001b5c <HAL_GetTick>
 80041ca:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041cc:	e00a      	b.n	80041e4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ce:	f7fd fcc5 	bl	8001b5c <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b11      	cmp	r3, #17
 80041da:	d903      	bls.n	80041e4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e1f6      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
 80041e0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041e4:	4ba9      	ldr	r3, [pc, #676]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 80041e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1ed      	bne.n	80041ce <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 80bd 	beq.w	800437a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004200:	2300      	movs	r3, #0
 8004202:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004206:	4ba1      	ldr	r3, [pc, #644]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 8004208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10e      	bne.n	8004230 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004212:	4b9e      	ldr	r3, [pc, #632]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004216:	4a9d      	ldr	r2, [pc, #628]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 8004218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800421c:	6593      	str	r3, [r2, #88]	@ 0x58
 800421e:	4b9b      	ldr	r3, [pc, #620]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800422a:	2301      	movs	r3, #1
 800422c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004230:	4b97      	ldr	r3, [pc, #604]	@ (8004490 <HAL_RCC_OscConfig+0x774>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004238:	2b00      	cmp	r3, #0
 800423a:	d118      	bne.n	800426e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800423c:	4b94      	ldr	r3, [pc, #592]	@ (8004490 <HAL_RCC_OscConfig+0x774>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a93      	ldr	r2, [pc, #588]	@ (8004490 <HAL_RCC_OscConfig+0x774>)
 8004242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004246:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004248:	f7fd fc88 	bl	8001b5c <HAL_GetTick>
 800424c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004250:	f7fd fc84 	bl	8001b5c <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e1b5      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004262:	4b8b      	ldr	r3, [pc, #556]	@ (8004490 <HAL_RCC_OscConfig+0x774>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d02c      	beq.n	80042d4 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800427a:	4b84      	ldr	r3, [pc, #528]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 800427c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004280:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800428c:	497f      	ldr	r1, [pc, #508]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d010      	beq.n	80042c2 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80042a0:	4b7a      	ldr	r3, [pc, #488]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a6:	4a79      	ldr	r2, [pc, #484]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 80042a8:	f043 0304 	orr.w	r3, r3, #4
 80042ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80042b0:	4b76      	ldr	r3, [pc, #472]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b6:	4a75      	ldr	r2, [pc, #468]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042c0:	e018      	b.n	80042f4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80042c2:	4b72      	ldr	r3, [pc, #456]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 80042c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c8:	4a70      	ldr	r2, [pc, #448]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 80042ca:	f043 0301 	orr.w	r3, r3, #1
 80042ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042d2:	e00f      	b.n	80042f4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80042d4:	4b6d      	ldr	r3, [pc, #436]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042da:	4a6c      	ldr	r2, [pc, #432]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 80042dc:	f023 0301 	bic.w	r3, r3, #1
 80042e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80042e4:	4b69      	ldr	r3, [pc, #420]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ea:	4a68      	ldr	r2, [pc, #416]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 80042ec:	f023 0304 	bic.w	r3, r3, #4
 80042f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d016      	beq.n	800432a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fc:	f7fd fc2e 	bl	8001b5c <HAL_GetTick>
 8004300:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004302:	e00a      	b.n	800431a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004304:	f7fd fc2a 	bl	8001b5c <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e159      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800431a:	4b5c      	ldr	r3, [pc, #368]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 800431c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0ed      	beq.n	8004304 <HAL_RCC_OscConfig+0x5e8>
 8004328:	e01d      	b.n	8004366 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432a:	f7fd fc17 	bl	8001b5c <HAL_GetTick>
 800432e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004330:	e00a      	b.n	8004348 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004332:	f7fd fc13 	bl	8001b5c <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004340:	4293      	cmp	r3, r2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e142      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004348:	4b50      	ldr	r3, [pc, #320]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1ed      	bne.n	8004332 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8004356:	4b4d      	ldr	r3, [pc, #308]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 8004358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800435c:	4a4b      	ldr	r2, [pc, #300]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 800435e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004362:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004366:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800436a:	2b01      	cmp	r3, #1
 800436c:	d105      	bne.n	800437a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800436e:	4b47      	ldr	r3, [pc, #284]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 8004370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004372:	4a46      	ldr	r2, [pc, #280]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 8004374:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004378:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	d03c      	beq.n	8004400 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438a:	2b00      	cmp	r3, #0
 800438c:	d01c      	beq.n	80043c8 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800438e:	4b3f      	ldr	r3, [pc, #252]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 8004390:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004394:	4a3d      	ldr	r2, [pc, #244]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439e:	f7fd fbdd 	bl	8001b5c <HAL_GetTick>
 80043a2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043a6:	f7fd fbd9 	bl	8001b5c <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e10a      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043b8:	4b34      	ldr	r3, [pc, #208]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 80043ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0ef      	beq.n	80043a6 <HAL_RCC_OscConfig+0x68a>
 80043c6:	e01b      	b.n	8004400 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043c8:	4b30      	ldr	r3, [pc, #192]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 80043ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043ce:	4a2f      	ldr	r2, [pc, #188]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 80043d0:	f023 0301 	bic.w	r3, r3, #1
 80043d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d8:	f7fd fbc0 	bl	8001b5c <HAL_GetTick>
 80043dc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043e0:	f7fd fbbc 	bl	8001b5c <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e0ed      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043f2:	4b26      	ldr	r3, [pc, #152]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 80043f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1ef      	bne.n	80043e0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80e1 	beq.w	80045cc <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440e:	2b02      	cmp	r3, #2
 8004410:	f040 80b5 	bne.w	800457e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004414:	4b1d      	ldr	r3, [pc, #116]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	f003 0203 	and.w	r2, r3, #3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004424:	429a      	cmp	r2, r3
 8004426:	d124      	bne.n	8004472 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004432:	3b01      	subs	r3, #1
 8004434:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004436:	429a      	cmp	r2, r3
 8004438:	d11b      	bne.n	8004472 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004444:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004446:	429a      	cmp	r2, r3
 8004448:	d113      	bne.n	8004472 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004454:	085b      	lsrs	r3, r3, #1
 8004456:	3b01      	subs	r3, #1
 8004458:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800445a:	429a      	cmp	r2, r3
 800445c:	d109      	bne.n	8004472 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004468:	085b      	lsrs	r3, r3, #1
 800446a:	3b01      	subs	r3, #1
 800446c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800446e:	429a      	cmp	r2, r3
 8004470:	d05f      	beq.n	8004532 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	2b0c      	cmp	r3, #12
 8004476:	d05a      	beq.n	800452e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004478:	4b04      	ldr	r3, [pc, #16]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a03      	ldr	r2, [pc, #12]	@ (800448c <HAL_RCC_OscConfig+0x770>)
 800447e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004482:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004484:	f7fd fb6a 	bl	8001b5c <HAL_GetTick>
 8004488:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800448a:	e00c      	b.n	80044a6 <HAL_RCC_OscConfig+0x78a>
 800448c:	40021000 	.word	0x40021000
 8004490:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004494:	f7fd fb62 	bl	8001b5c <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e093      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044a6:	4b4c      	ldr	r3, [pc, #304]	@ (80045d8 <HAL_RCC_OscConfig+0x8bc>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f0      	bne.n	8004494 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044b2:	4b49      	ldr	r3, [pc, #292]	@ (80045d8 <HAL_RCC_OscConfig+0x8bc>)
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	4b49      	ldr	r3, [pc, #292]	@ (80045dc <HAL_RCC_OscConfig+0x8c0>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80044c2:	3a01      	subs	r2, #1
 80044c4:	0112      	lsls	r2, r2, #4
 80044c6:	4311      	orrs	r1, r2
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80044cc:	0212      	lsls	r2, r2, #8
 80044ce:	4311      	orrs	r1, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80044d4:	0852      	lsrs	r2, r2, #1
 80044d6:	3a01      	subs	r2, #1
 80044d8:	0552      	lsls	r2, r2, #21
 80044da:	4311      	orrs	r1, r2
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80044e0:	0852      	lsrs	r2, r2, #1
 80044e2:	3a01      	subs	r2, #1
 80044e4:	0652      	lsls	r2, r2, #25
 80044e6:	430a      	orrs	r2, r1
 80044e8:	493b      	ldr	r1, [pc, #236]	@ (80045d8 <HAL_RCC_OscConfig+0x8bc>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80044ee:	4b3a      	ldr	r3, [pc, #232]	@ (80045d8 <HAL_RCC_OscConfig+0x8bc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a39      	ldr	r2, [pc, #228]	@ (80045d8 <HAL_RCC_OscConfig+0x8bc>)
 80044f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044f8:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044fa:	4b37      	ldr	r3, [pc, #220]	@ (80045d8 <HAL_RCC_OscConfig+0x8bc>)
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	4a36      	ldr	r2, [pc, #216]	@ (80045d8 <HAL_RCC_OscConfig+0x8bc>)
 8004500:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004504:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004506:	f7fd fb29 	bl	8001b5c <HAL_GetTick>
 800450a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450e:	f7fd fb25 	bl	8001b5c <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e056      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004520:	4b2d      	ldr	r3, [pc, #180]	@ (80045d8 <HAL_RCC_OscConfig+0x8bc>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0f0      	beq.n	800450e <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800452c:	e04e      	b.n	80045cc <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e04d      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004532:	4b29      	ldr	r3, [pc, #164]	@ (80045d8 <HAL_RCC_OscConfig+0x8bc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d146      	bne.n	80045cc <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800453e:	4b26      	ldr	r3, [pc, #152]	@ (80045d8 <HAL_RCC_OscConfig+0x8bc>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a25      	ldr	r2, [pc, #148]	@ (80045d8 <HAL_RCC_OscConfig+0x8bc>)
 8004544:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004548:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800454a:	4b23      	ldr	r3, [pc, #140]	@ (80045d8 <HAL_RCC_OscConfig+0x8bc>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	4a22      	ldr	r2, [pc, #136]	@ (80045d8 <HAL_RCC_OscConfig+0x8bc>)
 8004550:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004554:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004556:	f7fd fb01 	bl	8001b5c <HAL_GetTick>
 800455a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800455e:	f7fd fafd 	bl	8001b5c <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e02e      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004570:	4b19      	ldr	r3, [pc, #100]	@ (80045d8 <HAL_RCC_OscConfig+0x8bc>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x842>
 800457c:	e026      	b.n	80045cc <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	2b0c      	cmp	r3, #12
 8004582:	d021      	beq.n	80045c8 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004584:	4b14      	ldr	r3, [pc, #80]	@ (80045d8 <HAL_RCC_OscConfig+0x8bc>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a13      	ldr	r2, [pc, #76]	@ (80045d8 <HAL_RCC_OscConfig+0x8bc>)
 800458a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800458e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004590:	f7fd fae4 	bl	8001b5c <HAL_GetTick>
 8004594:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004598:	f7fd fae0 	bl	8001b5c <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e011      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045aa:	4b0b      	ldr	r3, [pc, #44]	@ (80045d8 <HAL_RCC_OscConfig+0x8bc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f0      	bne.n	8004598 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80045b6:	4b08      	ldr	r3, [pc, #32]	@ (80045d8 <HAL_RCC_OscConfig+0x8bc>)
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	4a07      	ldr	r2, [pc, #28]	@ (80045d8 <HAL_RCC_OscConfig+0x8bc>)
 80045bc:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80045c0:	f023 0303 	bic.w	r3, r3, #3
 80045c4:	60d3      	str	r3, [r2, #12]
 80045c6:	e001      	b.n	80045cc <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3728      	adds	r7, #40	@ 0x28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40021000 	.word	0x40021000
 80045dc:	f99f808c 	.word	0xf99f808c

080045e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0e7      	b.n	80047c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045f4:	4b75      	ldr	r3, [pc, #468]	@ (80047cc <HAL_RCC_ClockConfig+0x1ec>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d910      	bls.n	8004624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004602:	4b72      	ldr	r3, [pc, #456]	@ (80047cc <HAL_RCC_ClockConfig+0x1ec>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f023 0207 	bic.w	r2, r3, #7
 800460a:	4970      	ldr	r1, [pc, #448]	@ (80047cc <HAL_RCC_ClockConfig+0x1ec>)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	4313      	orrs	r3, r2
 8004610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004612:	4b6e      	ldr	r3, [pc, #440]	@ (80047cc <HAL_RCC_ClockConfig+0x1ec>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d001      	beq.n	8004624 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0cf      	b.n	80047c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d010      	beq.n	8004652 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	4b66      	ldr	r3, [pc, #408]	@ (80047d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800463c:	429a      	cmp	r2, r3
 800463e:	d908      	bls.n	8004652 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004640:	4b63      	ldr	r3, [pc, #396]	@ (80047d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	4960      	ldr	r1, [pc, #384]	@ (80047d0 <HAL_RCC_ClockConfig+0x1f0>)
 800464e:	4313      	orrs	r3, r2
 8004650:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d04c      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b03      	cmp	r3, #3
 8004664:	d107      	bne.n	8004676 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004666:	4b5a      	ldr	r3, [pc, #360]	@ (80047d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d121      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e0a6      	b.n	80047c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d107      	bne.n	800468e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800467e:	4b54      	ldr	r3, [pc, #336]	@ (80047d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d115      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e09a      	b.n	80047c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d107      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004696:	4b4e      	ldr	r3, [pc, #312]	@ (80047d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e08e      	b.n	80047c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046a6:	4b4a      	ldr	r3, [pc, #296]	@ (80047d0 <HAL_RCC_ClockConfig+0x1f0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e086      	b.n	80047c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046b6:	4b46      	ldr	r3, [pc, #280]	@ (80047d0 <HAL_RCC_ClockConfig+0x1f0>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f023 0203 	bic.w	r2, r3, #3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	4943      	ldr	r1, [pc, #268]	@ (80047d0 <HAL_RCC_ClockConfig+0x1f0>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c8:	f7fd fa48 	bl	8001b5c <HAL_GetTick>
 80046cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ce:	e00a      	b.n	80046e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d0:	f7fd fa44 	bl	8001b5c <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046de:	4293      	cmp	r3, r2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e06e      	b.n	80047c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e6:	4b3a      	ldr	r3, [pc, #232]	@ (80047d0 <HAL_RCC_ClockConfig+0x1f0>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 020c 	and.w	r2, r3, #12
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d1eb      	bne.n	80046d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d010      	beq.n	8004726 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	4b31      	ldr	r3, [pc, #196]	@ (80047d0 <HAL_RCC_ClockConfig+0x1f0>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004710:	429a      	cmp	r2, r3
 8004712:	d208      	bcs.n	8004726 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004714:	4b2e      	ldr	r3, [pc, #184]	@ (80047d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	492b      	ldr	r1, [pc, #172]	@ (80047d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004726:	4b29      	ldr	r3, [pc, #164]	@ (80047cc <HAL_RCC_ClockConfig+0x1ec>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d210      	bcs.n	8004756 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004734:	4b25      	ldr	r3, [pc, #148]	@ (80047cc <HAL_RCC_ClockConfig+0x1ec>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f023 0207 	bic.w	r2, r3, #7
 800473c:	4923      	ldr	r1, [pc, #140]	@ (80047cc <HAL_RCC_ClockConfig+0x1ec>)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	4313      	orrs	r3, r2
 8004742:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004744:	4b21      	ldr	r3, [pc, #132]	@ (80047cc <HAL_RCC_ClockConfig+0x1ec>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d001      	beq.n	8004756 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e036      	b.n	80047c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	d008      	beq.n	8004774 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004762:	4b1b      	ldr	r3, [pc, #108]	@ (80047d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	4918      	ldr	r1, [pc, #96]	@ (80047d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004770:	4313      	orrs	r3, r2
 8004772:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d009      	beq.n	8004794 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004780:	4b13      	ldr	r3, [pc, #76]	@ (80047d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	4910      	ldr	r1, [pc, #64]	@ (80047d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004790:	4313      	orrs	r3, r2
 8004792:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004794:	f000 f824 	bl	80047e0 <HAL_RCC_GetSysClockFreq>
 8004798:	4602      	mov	r2, r0
 800479a:	4b0d      	ldr	r3, [pc, #52]	@ (80047d0 <HAL_RCC_ClockConfig+0x1f0>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	091b      	lsrs	r3, r3, #4
 80047a0:	f003 030f 	and.w	r3, r3, #15
 80047a4:	490b      	ldr	r1, [pc, #44]	@ (80047d4 <HAL_RCC_ClockConfig+0x1f4>)
 80047a6:	5ccb      	ldrb	r3, [r1, r3]
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
 80047b0:	4a09      	ldr	r2, [pc, #36]	@ (80047d8 <HAL_RCC_ClockConfig+0x1f8>)
 80047b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047b4:	4b09      	ldr	r3, [pc, #36]	@ (80047dc <HAL_RCC_ClockConfig+0x1fc>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fd f97f 	bl	8001abc <HAL_InitTick>
 80047be:	4603      	mov	r3, r0
 80047c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80047c2:	7afb      	ldrb	r3, [r7, #11]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40022000 	.word	0x40022000
 80047d0:	40021000 	.word	0x40021000
 80047d4:	080080a0 	.word	0x080080a0
 80047d8:	20000000 	.word	0x20000000
 80047dc:	20000004 	.word	0x20000004

080047e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b089      	sub	sp, #36	@ 0x24
 80047e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	61fb      	str	r3, [r7, #28]
 80047ea:	2300      	movs	r3, #0
 80047ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ee:	4b3e      	ldr	r3, [pc, #248]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047f8:	4b3b      	ldr	r3, [pc, #236]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0x34>
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	2b0c      	cmp	r3, #12
 800480c:	d121      	bne.n	8004852 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d11e      	bne.n	8004852 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004814:	4b34      	ldr	r3, [pc, #208]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b00      	cmp	r3, #0
 800481e:	d107      	bne.n	8004830 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004820:	4b31      	ldr	r3, [pc, #196]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004826:	0a1b      	lsrs	r3, r3, #8
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	61fb      	str	r3, [r7, #28]
 800482e:	e005      	b.n	800483c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004830:	4b2d      	ldr	r3, [pc, #180]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	091b      	lsrs	r3, r3, #4
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800483c:	4a2b      	ldr	r2, [pc, #172]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004844:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10d      	bne.n	8004868 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004850:	e00a      	b.n	8004868 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b04      	cmp	r3, #4
 8004856:	d102      	bne.n	800485e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004858:	4b25      	ldr	r3, [pc, #148]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800485a:	61bb      	str	r3, [r7, #24]
 800485c:	e004      	b.n	8004868 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	2b08      	cmp	r3, #8
 8004862:	d101      	bne.n	8004868 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004864:	4b23      	ldr	r3, [pc, #140]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004866:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	2b0c      	cmp	r3, #12
 800486c:	d134      	bne.n	80048d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800486e:	4b1e      	ldr	r3, [pc, #120]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d003      	beq.n	8004886 <HAL_RCC_GetSysClockFreq+0xa6>
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b03      	cmp	r3, #3
 8004882:	d003      	beq.n	800488c <HAL_RCC_GetSysClockFreq+0xac>
 8004884:	e005      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004886:	4b1a      	ldr	r3, [pc, #104]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004888:	617b      	str	r3, [r7, #20]
      break;
 800488a:	e005      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800488c:	4b19      	ldr	r3, [pc, #100]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800488e:	617b      	str	r3, [r7, #20]
      break;
 8004890:	e002      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	617b      	str	r3, [r7, #20]
      break;
 8004896:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004898:	4b13      	ldr	r3, [pc, #76]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	091b      	lsrs	r3, r3, #4
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	3301      	adds	r3, #1
 80048a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80048a6:	4b10      	ldr	r3, [pc, #64]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	0a1b      	lsrs	r3, r3, #8
 80048ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	fb03 f202 	mul.w	r2, r3, r2
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048be:	4b0a      	ldr	r3, [pc, #40]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	0e5b      	lsrs	r3, r3, #25
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	3301      	adds	r3, #1
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048d8:	69bb      	ldr	r3, [r7, #24]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3724      	adds	r7, #36	@ 0x24
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40021000 	.word	0x40021000
 80048ec:	080080b8 	.word	0x080080b8
 80048f0:	00f42400 	.word	0x00f42400
 80048f4:	007a1200 	.word	0x007a1200

080048f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048fc:	4b03      	ldr	r3, [pc, #12]	@ (800490c <HAL_RCC_GetHCLKFreq+0x14>)
 80048fe:	681b      	ldr	r3, [r3, #0]
}
 8004900:	4618      	mov	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	20000000 	.word	0x20000000

08004910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004914:	f7ff fff0 	bl	80048f8 <HAL_RCC_GetHCLKFreq>
 8004918:	4602      	mov	r2, r0
 800491a:	4b06      	ldr	r3, [pc, #24]	@ (8004934 <HAL_RCC_GetPCLK1Freq+0x24>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	0a1b      	lsrs	r3, r3, #8
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	4904      	ldr	r1, [pc, #16]	@ (8004938 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004926:	5ccb      	ldrb	r3, [r1, r3]
 8004928:	f003 031f 	and.w	r3, r3, #31
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004930:	4618      	mov	r0, r3
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40021000 	.word	0x40021000
 8004938:	080080b0 	.word	0x080080b0

0800493c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004940:	f7ff ffda 	bl	80048f8 <HAL_RCC_GetHCLKFreq>
 8004944:	4602      	mov	r2, r0
 8004946:	4b06      	ldr	r3, [pc, #24]	@ (8004960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	0adb      	lsrs	r3, r3, #11
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	4904      	ldr	r1, [pc, #16]	@ (8004964 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004952:	5ccb      	ldrb	r3, [r1, r3]
 8004954:	f003 031f 	and.w	r3, r3, #31
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800495c:	4618      	mov	r0, r3
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40021000 	.word	0x40021000
 8004964:	080080b0 	.word	0x080080b0

08004968 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004970:	2300      	movs	r3, #0
 8004972:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004974:	4b2a      	ldr	r3, [pc, #168]	@ (8004a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004980:	f7ff f968 	bl	8003c54 <HAL_PWREx_GetVoltageRange>
 8004984:	6178      	str	r0, [r7, #20]
 8004986:	e014      	b.n	80049b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004988:	4b25      	ldr	r3, [pc, #148]	@ (8004a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800498a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498c:	4a24      	ldr	r2, [pc, #144]	@ (8004a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800498e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004992:	6593      	str	r3, [r2, #88]	@ 0x58
 8004994:	4b22      	ldr	r3, [pc, #136]	@ (8004a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049a0:	f7ff f958 	bl	8003c54 <HAL_PWREx_GetVoltageRange>
 80049a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049b8:	d10b      	bne.n	80049d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b80      	cmp	r3, #128	@ 0x80
 80049be:	d919      	bls.n	80049f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80049c4:	d902      	bls.n	80049cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049c6:	2302      	movs	r3, #2
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	e013      	b.n	80049f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049cc:	2301      	movs	r3, #1
 80049ce:	613b      	str	r3, [r7, #16]
 80049d0:	e010      	b.n	80049f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b80      	cmp	r3, #128	@ 0x80
 80049d6:	d902      	bls.n	80049de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80049d8:	2303      	movs	r3, #3
 80049da:	613b      	str	r3, [r7, #16]
 80049dc:	e00a      	b.n	80049f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b80      	cmp	r3, #128	@ 0x80
 80049e2:	d102      	bne.n	80049ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049e4:	2302      	movs	r3, #2
 80049e6:	613b      	str	r3, [r7, #16]
 80049e8:	e004      	b.n	80049f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b70      	cmp	r3, #112	@ 0x70
 80049ee:	d101      	bne.n	80049f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049f0:	2301      	movs	r3, #1
 80049f2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f023 0207 	bic.w	r2, r3, #7
 80049fc:	4909      	ldr	r1, [pc, #36]	@ (8004a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a04:	4b07      	ldr	r3, [pc, #28]	@ (8004a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d001      	beq.n	8004a16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40021000 	.word	0x40021000
 8004a24:	40022000 	.word	0x40022000

08004a28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a30:	2300      	movs	r3, #0
 8004a32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a34:	2300      	movs	r3, #0
 8004a36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 809e 	beq.w	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a46:	2300      	movs	r3, #0
 8004a48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a4a:	4b46      	ldr	r3, [pc, #280]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00d      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a60:	4b40      	ldr	r3, [pc, #256]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a64:	4a3f      	ldr	r2, [pc, #252]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a74:	60bb      	str	r3, [r7, #8]
 8004a76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a7c:	4b3a      	ldr	r3, [pc, #232]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a39      	ldr	r2, [pc, #228]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004a82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a88:	f7fd f868 	bl	8001b5c <HAL_GetTick>
 8004a8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a8e:	e009      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a90:	f7fd f864 	bl	8001b5c <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d902      	bls.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	74fb      	strb	r3, [r7, #19]
        break;
 8004aa2:	e005      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004aa4:	4b30      	ldr	r3, [pc, #192]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0ef      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8004ab0:	7cfb      	ldrb	r3, [r7, #19]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d15a      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004abc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ac0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01e      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d019      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ad2:	4b24      	ldr	r3, [pc, #144]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004adc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ade:	4b21      	ldr	r3, [pc, #132]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae4:	4a1f      	ldr	r2, [pc, #124]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004aee:	4b1d      	ldr	r3, [pc, #116]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004af6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004afa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004afe:	4a19      	ldr	r2, [pc, #100]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d016      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b10:	f7fd f824 	bl	8001b5c <HAL_GetTick>
 8004b14:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b16:	e00b      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b18:	f7fd f820 	bl	8001b5c <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d902      	bls.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	74fb      	strb	r3, [r7, #19]
            break;
 8004b2e:	e006      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b30:	4b0c      	ldr	r3, [pc, #48]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0ec      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8004b3e:	7cfb      	ldrb	r3, [r7, #19]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10b      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b44:	4b07      	ldr	r3, [pc, #28]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b4a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b52:	4904      	ldr	r1, [pc, #16]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004b5a:	e009      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b5c:	7cfb      	ldrb	r3, [r7, #19]
 8004b5e:	74bb      	strb	r3, [r7, #18]
 8004b60:	e006      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004b62:	bf00      	nop
 8004b64:	40021000 	.word	0x40021000
 8004b68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b6c:	7cfb      	ldrb	r3, [r7, #19]
 8004b6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b70:	7c7b      	ldrb	r3, [r7, #17]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d105      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b76:	4b6e      	ldr	r3, [pc, #440]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b7a:	4a6d      	ldr	r2, [pc, #436]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b8e:	4b68      	ldr	r3, [pc, #416]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b94:	f023 0203 	bic.w	r2, r3, #3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	4964      	ldr	r1, [pc, #400]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bb0:	4b5f      	ldr	r3, [pc, #380]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb6:	f023 020c 	bic.w	r2, r3, #12
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	495c      	ldr	r1, [pc, #368]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bd2:	4b57      	ldr	r3, [pc, #348]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	4953      	ldr	r1, [pc, #332]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bf4:	4b4e      	ldr	r3, [pc, #312]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bfa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	494b      	ldr	r1, [pc, #300]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c16:	4b46      	ldr	r3, [pc, #280]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	4942      	ldr	r1, [pc, #264]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c38:	4b3d      	ldr	r3, [pc, #244]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c46:	493a      	ldr	r1, [pc, #232]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c5a:	4b35      	ldr	r3, [pc, #212]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c60:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	4931      	ldr	r1, [pc, #196]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c82:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	4929      	ldr	r1, [pc, #164]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c9e:	4b24      	ldr	r3, [pc, #144]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	4920      	ldr	r1, [pc, #128]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d015      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cce:	4918      	ldr	r1, [pc, #96]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cde:	d105      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ce0:	4b13      	ldr	r3, [pc, #76]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4a12      	ldr	r2, [pc, #72]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004ce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cea:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d015      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d06:	490a      	ldr	r1, [pc, #40]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d16:	d105      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d18:	4b05      	ldr	r3, [pc, #20]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4a04      	ldr	r2, [pc, #16]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d24:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	40021000 	.word	0x40021000

08004d34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e095      	b.n	8004e72 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d108      	bne.n	8004d60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d56:	d009      	beq.n	8004d6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	61da      	str	r2, [r3, #28]
 8004d5e:	e005      	b.n	8004d6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d106      	bne.n	8004d8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fc fb38 	bl	80013fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004da2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004dac:	d902      	bls.n	8004db4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	e002      	b.n	8004dba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004db4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004db8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004dc2:	d007      	beq.n	8004dd4 <HAL_SPI_Init+0xa0>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004dcc:	d002      	beq.n	8004dd4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e16:	ea42 0103 	orr.w	r1, r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	0c1b      	lsrs	r3, r3, #16
 8004e30:	f003 0204 	and.w	r2, r3, #4
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004e50:	ea42 0103 	orr.w	r1, r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b082      	sub	sp, #8
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e049      	b.n	8004f20 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d106      	bne.n	8004ea6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7fc fc7f 	bl	80017a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4610      	mov	r0, r2
 8004eba:	f000 fa75 	bl	80053a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e049      	b.n	8004fce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f841 	bl	8004fd6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3304      	adds	r3, #4
 8004f64:	4619      	mov	r1, r3
 8004f66:	4610      	mov	r0, r2
 8004f68:	f000 fa1e 	bl	80053a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
	...

08004fec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005006:	2302      	movs	r3, #2
 8005008:	e0ff      	b.n	800520a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b14      	cmp	r3, #20
 8005016:	f200 80f0 	bhi.w	80051fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800501a:	a201      	add	r2, pc, #4	@ (adr r2, 8005020 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800501c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005020:	08005075 	.word	0x08005075
 8005024:	080051fb 	.word	0x080051fb
 8005028:	080051fb 	.word	0x080051fb
 800502c:	080051fb 	.word	0x080051fb
 8005030:	080050b5 	.word	0x080050b5
 8005034:	080051fb 	.word	0x080051fb
 8005038:	080051fb 	.word	0x080051fb
 800503c:	080051fb 	.word	0x080051fb
 8005040:	080050f7 	.word	0x080050f7
 8005044:	080051fb 	.word	0x080051fb
 8005048:	080051fb 	.word	0x080051fb
 800504c:	080051fb 	.word	0x080051fb
 8005050:	08005137 	.word	0x08005137
 8005054:	080051fb 	.word	0x080051fb
 8005058:	080051fb 	.word	0x080051fb
 800505c:	080051fb 	.word	0x080051fb
 8005060:	08005179 	.word	0x08005179
 8005064:	080051fb 	.word	0x080051fb
 8005068:	080051fb 	.word	0x080051fb
 800506c:	080051fb 	.word	0x080051fb
 8005070:	080051b9 	.word	0x080051b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68b9      	ldr	r1, [r7, #8]
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fa04 	bl	8005488 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699a      	ldr	r2, [r3, #24]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0208 	orr.w	r2, r2, #8
 800508e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0204 	bic.w	r2, r2, #4
 800509e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6999      	ldr	r1, [r3, #24]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	619a      	str	r2, [r3, #24]
      break;
 80050b2:	e0a5      	b.n	8005200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68b9      	ldr	r1, [r7, #8]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 fa60 	bl	8005580 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6999      	ldr	r1, [r3, #24]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	021a      	lsls	r2, r3, #8
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	619a      	str	r2, [r3, #24]
      break;
 80050f4:	e084      	b.n	8005200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68b9      	ldr	r1, [r7, #8]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 fab9 	bl	8005674 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	69da      	ldr	r2, [r3, #28]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f042 0208 	orr.w	r2, r2, #8
 8005110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69da      	ldr	r2, [r3, #28]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0204 	bic.w	r2, r2, #4
 8005120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69d9      	ldr	r1, [r3, #28]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	61da      	str	r2, [r3, #28]
      break;
 8005134:	e064      	b.n	8005200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68b9      	ldr	r1, [r7, #8]
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fb11 	bl	8005764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69da      	ldr	r2, [r3, #28]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69d9      	ldr	r1, [r3, #28]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	021a      	lsls	r2, r3, #8
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	61da      	str	r2, [r3, #28]
      break;
 8005176:	e043      	b.n	8005200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68b9      	ldr	r1, [r7, #8]
 800517e:	4618      	mov	r0, r3
 8005180:	f000 fb4e 	bl	8005820 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0208 	orr.w	r2, r2, #8
 8005192:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0204 	bic.w	r2, r2, #4
 80051a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	691a      	ldr	r2, [r3, #16]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80051b6:	e023      	b.n	8005200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fb86 	bl	80058d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	021a      	lsls	r2, r3, #8
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80051f8:	e002      	b.n	8005200 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	75fb      	strb	r3, [r7, #23]
      break;
 80051fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005208:	7dfb      	ldrb	r3, [r7, #23]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop

08005214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_TIM_ConfigClockSource+0x1c>
 800522c:	2302      	movs	r3, #2
 800522e:	e0b6      	b.n	800539e <HAL_TIM_ConfigClockSource+0x18a>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800524e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800525a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800526c:	d03e      	beq.n	80052ec <HAL_TIM_ConfigClockSource+0xd8>
 800526e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005272:	f200 8087 	bhi.w	8005384 <HAL_TIM_ConfigClockSource+0x170>
 8005276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800527a:	f000 8086 	beq.w	800538a <HAL_TIM_ConfigClockSource+0x176>
 800527e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005282:	d87f      	bhi.n	8005384 <HAL_TIM_ConfigClockSource+0x170>
 8005284:	2b70      	cmp	r3, #112	@ 0x70
 8005286:	d01a      	beq.n	80052be <HAL_TIM_ConfigClockSource+0xaa>
 8005288:	2b70      	cmp	r3, #112	@ 0x70
 800528a:	d87b      	bhi.n	8005384 <HAL_TIM_ConfigClockSource+0x170>
 800528c:	2b60      	cmp	r3, #96	@ 0x60
 800528e:	d050      	beq.n	8005332 <HAL_TIM_ConfigClockSource+0x11e>
 8005290:	2b60      	cmp	r3, #96	@ 0x60
 8005292:	d877      	bhi.n	8005384 <HAL_TIM_ConfigClockSource+0x170>
 8005294:	2b50      	cmp	r3, #80	@ 0x50
 8005296:	d03c      	beq.n	8005312 <HAL_TIM_ConfigClockSource+0xfe>
 8005298:	2b50      	cmp	r3, #80	@ 0x50
 800529a:	d873      	bhi.n	8005384 <HAL_TIM_ConfigClockSource+0x170>
 800529c:	2b40      	cmp	r3, #64	@ 0x40
 800529e:	d058      	beq.n	8005352 <HAL_TIM_ConfigClockSource+0x13e>
 80052a0:	2b40      	cmp	r3, #64	@ 0x40
 80052a2:	d86f      	bhi.n	8005384 <HAL_TIM_ConfigClockSource+0x170>
 80052a4:	2b30      	cmp	r3, #48	@ 0x30
 80052a6:	d064      	beq.n	8005372 <HAL_TIM_ConfigClockSource+0x15e>
 80052a8:	2b30      	cmp	r3, #48	@ 0x30
 80052aa:	d86b      	bhi.n	8005384 <HAL_TIM_ConfigClockSource+0x170>
 80052ac:	2b20      	cmp	r3, #32
 80052ae:	d060      	beq.n	8005372 <HAL_TIM_ConfigClockSource+0x15e>
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d867      	bhi.n	8005384 <HAL_TIM_ConfigClockSource+0x170>
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d05c      	beq.n	8005372 <HAL_TIM_ConfigClockSource+0x15e>
 80052b8:	2b10      	cmp	r3, #16
 80052ba:	d05a      	beq.n	8005372 <HAL_TIM_ConfigClockSource+0x15e>
 80052bc:	e062      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052ce:	f000 fbd3 	bl	8005a78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80052e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	609a      	str	r2, [r3, #8]
      break;
 80052ea:	e04f      	b.n	800538c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052fc:	f000 fbbc 	bl	8005a78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800530e:	609a      	str	r2, [r3, #8]
      break;
 8005310:	e03c      	b.n	800538c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800531e:	461a      	mov	r2, r3
 8005320:	f000 fb30 	bl	8005984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2150      	movs	r1, #80	@ 0x50
 800532a:	4618      	mov	r0, r3
 800532c:	f000 fb89 	bl	8005a42 <TIM_ITRx_SetConfig>
      break;
 8005330:	e02c      	b.n	800538c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800533e:	461a      	mov	r2, r3
 8005340:	f000 fb4f 	bl	80059e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2160      	movs	r1, #96	@ 0x60
 800534a:	4618      	mov	r0, r3
 800534c:	f000 fb79 	bl	8005a42 <TIM_ITRx_SetConfig>
      break;
 8005350:	e01c      	b.n	800538c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800535e:	461a      	mov	r2, r3
 8005360:	f000 fb10 	bl	8005984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2140      	movs	r1, #64	@ 0x40
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fb69 	bl	8005a42 <TIM_ITRx_SetConfig>
      break;
 8005370:	e00c      	b.n	800538c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4619      	mov	r1, r3
 800537c:	4610      	mov	r0, r2
 800537e:	f000 fb60 	bl	8005a42 <TIM_ITRx_SetConfig>
      break;
 8005382:	e003      	b.n	800538c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	73fb      	strb	r3, [r7, #15]
      break;
 8005388:	e000      	b.n	800538c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800538a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800539c:	7bfb      	ldrb	r3, [r7, #15]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
	...

080053a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a30      	ldr	r2, [pc, #192]	@ (800547c <TIM_Base_SetConfig+0xd4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d003      	beq.n	80053c8 <TIM_Base_SetConfig+0x20>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053c6:	d108      	bne.n	80053da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a27      	ldr	r2, [pc, #156]	@ (800547c <TIM_Base_SetConfig+0xd4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00b      	beq.n	80053fa <TIM_Base_SetConfig+0x52>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053e8:	d007      	beq.n	80053fa <TIM_Base_SetConfig+0x52>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a24      	ldr	r2, [pc, #144]	@ (8005480 <TIM_Base_SetConfig+0xd8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d003      	beq.n	80053fa <TIM_Base_SetConfig+0x52>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a23      	ldr	r2, [pc, #140]	@ (8005484 <TIM_Base_SetConfig+0xdc>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d108      	bne.n	800540c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4313      	orrs	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a12      	ldr	r2, [pc, #72]	@ (800547c <TIM_Base_SetConfig+0xd4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d007      	beq.n	8005448 <TIM_Base_SetConfig+0xa0>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a11      	ldr	r2, [pc, #68]	@ (8005480 <TIM_Base_SetConfig+0xd8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d003      	beq.n	8005448 <TIM_Base_SetConfig+0xa0>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a10      	ldr	r2, [pc, #64]	@ (8005484 <TIM_Base_SetConfig+0xdc>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d103      	bne.n	8005450 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b01      	cmp	r3, #1
 8005460:	d105      	bne.n	800546e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f023 0201 	bic.w	r2, r3, #1
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	611a      	str	r2, [r3, #16]
  }
}
 800546e:	bf00      	nop
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40012c00 	.word	0x40012c00
 8005480:	40014000 	.word	0x40014000
 8005484:	40014400 	.word	0x40014400

08005488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	f023 0201 	bic.w	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0303 	bic.w	r3, r3, #3
 80054c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f023 0302 	bic.w	r3, r3, #2
 80054d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a24      	ldr	r2, [pc, #144]	@ (8005574 <TIM_OC1_SetConfig+0xec>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d007      	beq.n	80054f8 <TIM_OC1_SetConfig+0x70>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a23      	ldr	r2, [pc, #140]	@ (8005578 <TIM_OC1_SetConfig+0xf0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d003      	beq.n	80054f8 <TIM_OC1_SetConfig+0x70>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a22      	ldr	r2, [pc, #136]	@ (800557c <TIM_OC1_SetConfig+0xf4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d10c      	bne.n	8005512 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f023 0308 	bic.w	r3, r3, #8
 80054fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	4313      	orrs	r3, r2
 8005508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f023 0304 	bic.w	r3, r3, #4
 8005510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a17      	ldr	r2, [pc, #92]	@ (8005574 <TIM_OC1_SetConfig+0xec>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d007      	beq.n	800552a <TIM_OC1_SetConfig+0xa2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a16      	ldr	r2, [pc, #88]	@ (8005578 <TIM_OC1_SetConfig+0xf0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d003      	beq.n	800552a <TIM_OC1_SetConfig+0xa2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a15      	ldr	r2, [pc, #84]	@ (800557c <TIM_OC1_SetConfig+0xf4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d111      	bne.n	800554e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	4313      	orrs	r3, r2
 800554c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	621a      	str	r2, [r3, #32]
}
 8005568:	bf00      	nop
 800556a:	371c      	adds	r7, #28
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	40012c00 	.word	0x40012c00
 8005578:	40014000 	.word	0x40014000
 800557c:	40014400 	.word	0x40014400

08005580 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	f023 0210 	bic.w	r2, r3, #16
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	021b      	lsls	r3, r3, #8
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f023 0320 	bic.w	r3, r3, #32
 80055ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a22      	ldr	r2, [pc, #136]	@ (8005668 <TIM_OC2_SetConfig+0xe8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d10d      	bne.n	8005600 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a19      	ldr	r2, [pc, #100]	@ (8005668 <TIM_OC2_SetConfig+0xe8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d007      	beq.n	8005618 <TIM_OC2_SetConfig+0x98>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a18      	ldr	r2, [pc, #96]	@ (800566c <TIM_OC2_SetConfig+0xec>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d003      	beq.n	8005618 <TIM_OC2_SetConfig+0x98>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a17      	ldr	r2, [pc, #92]	@ (8005670 <TIM_OC2_SetConfig+0xf0>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d113      	bne.n	8005640 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800561e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005626:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	621a      	str	r2, [r3, #32]
}
 800565a:	bf00      	nop
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	40012c00 	.word	0x40012c00
 800566c:	40014000 	.word	0x40014000
 8005670:	40014400 	.word	0x40014400

08005674 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0303 	bic.w	r3, r3, #3
 80056ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a21      	ldr	r2, [pc, #132]	@ (8005758 <TIM_OC3_SetConfig+0xe4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d10d      	bne.n	80056f2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	021b      	lsls	r3, r3, #8
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a18      	ldr	r2, [pc, #96]	@ (8005758 <TIM_OC3_SetConfig+0xe4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d007      	beq.n	800570a <TIM_OC3_SetConfig+0x96>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a17      	ldr	r2, [pc, #92]	@ (800575c <TIM_OC3_SetConfig+0xe8>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d003      	beq.n	800570a <TIM_OC3_SetConfig+0x96>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a16      	ldr	r2, [pc, #88]	@ (8005760 <TIM_OC3_SetConfig+0xec>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d113      	bne.n	8005732 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	621a      	str	r2, [r3, #32]
}
 800574c:	bf00      	nop
 800574e:	371c      	adds	r7, #28
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	40012c00 	.word	0x40012c00
 800575c:	40014000 	.word	0x40014000
 8005760:	40014400 	.word	0x40014400

08005764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800579e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	021b      	lsls	r3, r3, #8
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	031b      	lsls	r3, r3, #12
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a14      	ldr	r2, [pc, #80]	@ (8005814 <TIM_OC4_SetConfig+0xb0>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d007      	beq.n	80057d8 <TIM_OC4_SetConfig+0x74>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a13      	ldr	r2, [pc, #76]	@ (8005818 <TIM_OC4_SetConfig+0xb4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_OC4_SetConfig+0x74>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a12      	ldr	r2, [pc, #72]	@ (800581c <TIM_OC4_SetConfig+0xb8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d109      	bne.n	80057ec <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	019b      	lsls	r3, r3, #6
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	621a      	str	r2, [r3, #32]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40012c00 	.word	0x40012c00
 8005818:	40014000 	.word	0x40014000
 800581c:	40014400 	.word	0x40014400

08005820 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800584e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005864:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	041b      	lsls	r3, r3, #16
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4313      	orrs	r3, r2
 8005870:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a13      	ldr	r2, [pc, #76]	@ (80058c4 <TIM_OC5_SetConfig+0xa4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d007      	beq.n	800588a <TIM_OC5_SetConfig+0x6a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a12      	ldr	r2, [pc, #72]	@ (80058c8 <TIM_OC5_SetConfig+0xa8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d003      	beq.n	800588a <TIM_OC5_SetConfig+0x6a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a11      	ldr	r2, [pc, #68]	@ (80058cc <TIM_OC5_SetConfig+0xac>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d109      	bne.n	800589e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005890:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	021b      	lsls	r3, r3, #8
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	621a      	str	r2, [r3, #32]
}
 80058b8:	bf00      	nop
 80058ba:	371c      	adds	r7, #28
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	40012c00 	.word	0x40012c00
 80058c8:	40014000 	.word	0x40014000
 80058cc:	40014400 	.word	0x40014400

080058d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	021b      	lsls	r3, r3, #8
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4313      	orrs	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	051b      	lsls	r3, r3, #20
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	4313      	orrs	r3, r2
 8005922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a14      	ldr	r2, [pc, #80]	@ (8005978 <TIM_OC6_SetConfig+0xa8>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d007      	beq.n	800593c <TIM_OC6_SetConfig+0x6c>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a13      	ldr	r2, [pc, #76]	@ (800597c <TIM_OC6_SetConfig+0xac>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_OC6_SetConfig+0x6c>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a12      	ldr	r2, [pc, #72]	@ (8005980 <TIM_OC6_SetConfig+0xb0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d109      	bne.n	8005950 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005942:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	029b      	lsls	r3, r3, #10
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	621a      	str	r2, [r3, #32]
}
 800596a:	bf00      	nop
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40012c00 	.word	0x40012c00
 800597c:	40014000 	.word	0x40014000
 8005980:	40014400 	.word	0x40014400

08005984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f023 0201 	bic.w	r2, r3, #1
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f023 030a 	bic.w	r3, r3, #10
 80059c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	621a      	str	r2, [r3, #32]
}
 80059d6:	bf00      	nop
 80059d8:	371c      	adds	r7, #28
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b087      	sub	sp, #28
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	f023 0210 	bic.w	r2, r3, #16
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	031b      	lsls	r3, r3, #12
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	621a      	str	r2, [r3, #32]
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b085      	sub	sp, #20
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f043 0307 	orr.w	r3, r3, #7
 8005a64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	609a      	str	r2, [r3, #8]
}
 8005a6c:	bf00      	nop
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	021a      	lsls	r2, r3, #8
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	609a      	str	r2, [r3, #8]
}
 8005aac:	bf00      	nop
 8005aae:	371c      	adds	r7, #28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e04f      	b.n	8005b70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a21      	ldr	r2, [pc, #132]	@ (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d108      	bne.n	8005b0c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005b00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a14      	ldr	r2, [pc, #80]	@ (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d009      	beq.n	8005b44 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b38:	d004      	beq.n	8005b44 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a10      	ldr	r2, [pc, #64]	@ (8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d10c      	bne.n	8005b5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	40012c00 	.word	0x40012c00
 8005b80:	40014000 	.word	0x40014000

08005b84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e040      	b.n	8005c18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7fb feae 	bl	8001908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2224      	movs	r2, #36	@ 0x24
 8005bb0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0201 	bic.w	r2, r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fb0c 	bl	80061e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f8af 	bl	8005d34 <UART_SetConfig>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d101      	bne.n	8005be0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e01b      	b.n	8005c18 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fb8b 	bl	800632c <UART_CheckIdleState>
 8005c16:	4603      	mov	r3, r0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08a      	sub	sp, #40	@ 0x28
 8005c24:	af02      	add	r7, sp, #8
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	d177      	bne.n	8005d28 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <HAL_UART_Transmit+0x24>
 8005c3e:	88fb      	ldrh	r3, [r7, #6]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e070      	b.n	8005d2a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2221      	movs	r2, #33	@ 0x21
 8005c54:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c56:	f7fb ff81 	bl	8001b5c <HAL_GetTick>
 8005c5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	88fa      	ldrh	r2, [r7, #6]
 8005c60:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	88fa      	ldrh	r2, [r7, #6]
 8005c68:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c74:	d108      	bne.n	8005c88 <HAL_UART_Transmit+0x68>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d104      	bne.n	8005c88 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	61bb      	str	r3, [r7, #24]
 8005c86:	e003      	b.n	8005c90 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c90:	e02f      	b.n	8005cf2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	2180      	movs	r1, #128	@ 0x80
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 fbed 	bl	800647c <UART_WaitOnFlagUntilTimeout>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d004      	beq.n	8005cb2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2220      	movs	r2, #32
 8005cac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e03b      	b.n	8005d2a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10b      	bne.n	8005cd0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	881a      	ldrh	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cc4:	b292      	uxth	r2, r2
 8005cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	3302      	adds	r3, #2
 8005ccc:	61bb      	str	r3, [r7, #24]
 8005cce:	e007      	b.n	8005ce0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	781a      	ldrb	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1c9      	bne.n	8005c92 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2200      	movs	r2, #0
 8005d06:	2140      	movs	r1, #64	@ 0x40
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 fbb7 	bl	800647c <UART_WaitOnFlagUntilTimeout>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d004      	beq.n	8005d1e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2220      	movs	r2, #32
 8005d18:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e005      	b.n	8005d2a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2220      	movs	r2, #32
 8005d22:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	e000      	b.n	8005d2a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005d28:	2302      	movs	r3, #2
  }
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3720      	adds	r7, #32
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d38:	b08a      	sub	sp, #40	@ 0x28
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	431a      	orrs	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4b9e      	ldr	r3, [pc, #632]	@ (8005fdc <UART_SetConfig+0x2a8>)
 8005d64:	4013      	ands	r3, r2
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a93      	ldr	r2, [pc, #588]	@ (8005fe0 <UART_SetConfig+0x2ac>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d004      	beq.n	8005da0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005db0:	430a      	orrs	r2, r1
 8005db2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a8a      	ldr	r2, [pc, #552]	@ (8005fe4 <UART_SetConfig+0x2b0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d126      	bne.n	8005e0c <UART_SetConfig+0xd8>
 8005dbe:	4b8a      	ldr	r3, [pc, #552]	@ (8005fe8 <UART_SetConfig+0x2b4>)
 8005dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc4:	f003 0303 	and.w	r3, r3, #3
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d81b      	bhi.n	8005e04 <UART_SetConfig+0xd0>
 8005dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd4 <UART_SetConfig+0xa0>)
 8005dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd2:	bf00      	nop
 8005dd4:	08005de5 	.word	0x08005de5
 8005dd8:	08005df5 	.word	0x08005df5
 8005ddc:	08005ded 	.word	0x08005ded
 8005de0:	08005dfd 	.word	0x08005dfd
 8005de4:	2301      	movs	r3, #1
 8005de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dea:	e0ab      	b.n	8005f44 <UART_SetConfig+0x210>
 8005dec:	2302      	movs	r3, #2
 8005dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df2:	e0a7      	b.n	8005f44 <UART_SetConfig+0x210>
 8005df4:	2304      	movs	r3, #4
 8005df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dfa:	e0a3      	b.n	8005f44 <UART_SetConfig+0x210>
 8005dfc:	2308      	movs	r3, #8
 8005dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e02:	e09f      	b.n	8005f44 <UART_SetConfig+0x210>
 8005e04:	2310      	movs	r3, #16
 8005e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e0a:	e09b      	b.n	8005f44 <UART_SetConfig+0x210>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a76      	ldr	r2, [pc, #472]	@ (8005fec <UART_SetConfig+0x2b8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d138      	bne.n	8005e88 <UART_SetConfig+0x154>
 8005e16:	4b74      	ldr	r3, [pc, #464]	@ (8005fe8 <UART_SetConfig+0x2b4>)
 8005e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e1c:	f003 030c 	and.w	r3, r3, #12
 8005e20:	2b0c      	cmp	r3, #12
 8005e22:	d82d      	bhi.n	8005e80 <UART_SetConfig+0x14c>
 8005e24:	a201      	add	r2, pc, #4	@ (adr r2, 8005e2c <UART_SetConfig+0xf8>)
 8005e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2a:	bf00      	nop
 8005e2c:	08005e61 	.word	0x08005e61
 8005e30:	08005e81 	.word	0x08005e81
 8005e34:	08005e81 	.word	0x08005e81
 8005e38:	08005e81 	.word	0x08005e81
 8005e3c:	08005e71 	.word	0x08005e71
 8005e40:	08005e81 	.word	0x08005e81
 8005e44:	08005e81 	.word	0x08005e81
 8005e48:	08005e81 	.word	0x08005e81
 8005e4c:	08005e69 	.word	0x08005e69
 8005e50:	08005e81 	.word	0x08005e81
 8005e54:	08005e81 	.word	0x08005e81
 8005e58:	08005e81 	.word	0x08005e81
 8005e5c:	08005e79 	.word	0x08005e79
 8005e60:	2300      	movs	r3, #0
 8005e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e66:	e06d      	b.n	8005f44 <UART_SetConfig+0x210>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e6e:	e069      	b.n	8005f44 <UART_SetConfig+0x210>
 8005e70:	2304      	movs	r3, #4
 8005e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e76:	e065      	b.n	8005f44 <UART_SetConfig+0x210>
 8005e78:	2308      	movs	r3, #8
 8005e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e7e:	e061      	b.n	8005f44 <UART_SetConfig+0x210>
 8005e80:	2310      	movs	r3, #16
 8005e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e86:	e05d      	b.n	8005f44 <UART_SetConfig+0x210>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a58      	ldr	r2, [pc, #352]	@ (8005ff0 <UART_SetConfig+0x2bc>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d125      	bne.n	8005ede <UART_SetConfig+0x1aa>
 8005e92:	4b55      	ldr	r3, [pc, #340]	@ (8005fe8 <UART_SetConfig+0x2b4>)
 8005e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e98:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e9c:	2b30      	cmp	r3, #48	@ 0x30
 8005e9e:	d016      	beq.n	8005ece <UART_SetConfig+0x19a>
 8005ea0:	2b30      	cmp	r3, #48	@ 0x30
 8005ea2:	d818      	bhi.n	8005ed6 <UART_SetConfig+0x1a2>
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	d00a      	beq.n	8005ebe <UART_SetConfig+0x18a>
 8005ea8:	2b20      	cmp	r3, #32
 8005eaa:	d814      	bhi.n	8005ed6 <UART_SetConfig+0x1a2>
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <UART_SetConfig+0x182>
 8005eb0:	2b10      	cmp	r3, #16
 8005eb2:	d008      	beq.n	8005ec6 <UART_SetConfig+0x192>
 8005eb4:	e00f      	b.n	8005ed6 <UART_SetConfig+0x1a2>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ebc:	e042      	b.n	8005f44 <UART_SetConfig+0x210>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ec4:	e03e      	b.n	8005f44 <UART_SetConfig+0x210>
 8005ec6:	2304      	movs	r3, #4
 8005ec8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ecc:	e03a      	b.n	8005f44 <UART_SetConfig+0x210>
 8005ece:	2308      	movs	r3, #8
 8005ed0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ed4:	e036      	b.n	8005f44 <UART_SetConfig+0x210>
 8005ed6:	2310      	movs	r3, #16
 8005ed8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005edc:	e032      	b.n	8005f44 <UART_SetConfig+0x210>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a3f      	ldr	r2, [pc, #252]	@ (8005fe0 <UART_SetConfig+0x2ac>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d12a      	bne.n	8005f3e <UART_SetConfig+0x20a>
 8005ee8:	4b3f      	ldr	r3, [pc, #252]	@ (8005fe8 <UART_SetConfig+0x2b4>)
 8005eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eee:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005ef2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ef6:	d01a      	beq.n	8005f2e <UART_SetConfig+0x1fa>
 8005ef8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005efc:	d81b      	bhi.n	8005f36 <UART_SetConfig+0x202>
 8005efe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f02:	d00c      	beq.n	8005f1e <UART_SetConfig+0x1ea>
 8005f04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f08:	d815      	bhi.n	8005f36 <UART_SetConfig+0x202>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <UART_SetConfig+0x1e2>
 8005f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f12:	d008      	beq.n	8005f26 <UART_SetConfig+0x1f2>
 8005f14:	e00f      	b.n	8005f36 <UART_SetConfig+0x202>
 8005f16:	2300      	movs	r3, #0
 8005f18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f1c:	e012      	b.n	8005f44 <UART_SetConfig+0x210>
 8005f1e:	2302      	movs	r3, #2
 8005f20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f24:	e00e      	b.n	8005f44 <UART_SetConfig+0x210>
 8005f26:	2304      	movs	r3, #4
 8005f28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f2c:	e00a      	b.n	8005f44 <UART_SetConfig+0x210>
 8005f2e:	2308      	movs	r3, #8
 8005f30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f34:	e006      	b.n	8005f44 <UART_SetConfig+0x210>
 8005f36:	2310      	movs	r3, #16
 8005f38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f3c:	e002      	b.n	8005f44 <UART_SetConfig+0x210>
 8005f3e:	2310      	movs	r3, #16
 8005f40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a25      	ldr	r2, [pc, #148]	@ (8005fe0 <UART_SetConfig+0x2ac>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	f040 808a 	bne.w	8006064 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d824      	bhi.n	8005fa2 <UART_SetConfig+0x26e>
 8005f58:	a201      	add	r2, pc, #4	@ (adr r2, 8005f60 <UART_SetConfig+0x22c>)
 8005f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5e:	bf00      	nop
 8005f60:	08005f85 	.word	0x08005f85
 8005f64:	08005fa3 	.word	0x08005fa3
 8005f68:	08005f8d 	.word	0x08005f8d
 8005f6c:	08005fa3 	.word	0x08005fa3
 8005f70:	08005f93 	.word	0x08005f93
 8005f74:	08005fa3 	.word	0x08005fa3
 8005f78:	08005fa3 	.word	0x08005fa3
 8005f7c:	08005fa3 	.word	0x08005fa3
 8005f80:	08005f9b 	.word	0x08005f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f84:	f7fe fcc4 	bl	8004910 <HAL_RCC_GetPCLK1Freq>
 8005f88:	61f8      	str	r0, [r7, #28]
        break;
 8005f8a:	e010      	b.n	8005fae <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f8c:	4b19      	ldr	r3, [pc, #100]	@ (8005ff4 <UART_SetConfig+0x2c0>)
 8005f8e:	61fb      	str	r3, [r7, #28]
        break;
 8005f90:	e00d      	b.n	8005fae <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f92:	f7fe fc25 	bl	80047e0 <HAL_RCC_GetSysClockFreq>
 8005f96:	61f8      	str	r0, [r7, #28]
        break;
 8005f98:	e009      	b.n	8005fae <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f9e:	61fb      	str	r3, [r7, #28]
        break;
 8005fa0:	e005      	b.n	8005fae <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005fac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 8109 	beq.w	80061c8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	4413      	add	r3, r2
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d305      	bcc.n	8005fd2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fcc:	69fa      	ldr	r2, [r7, #28]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d912      	bls.n	8005ff8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005fd8:	e0f6      	b.n	80061c8 <UART_SetConfig+0x494>
 8005fda:	bf00      	nop
 8005fdc:	efff69f3 	.word	0xefff69f3
 8005fe0:	40008000 	.word	0x40008000
 8005fe4:	40013800 	.word	0x40013800
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	40004400 	.word	0x40004400
 8005ff0:	40004800 	.word	0x40004800
 8005ff4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	461c      	mov	r4, r3
 8005ffe:	4615      	mov	r5, r2
 8006000:	f04f 0200 	mov.w	r2, #0
 8006004:	f04f 0300 	mov.w	r3, #0
 8006008:	022b      	lsls	r3, r5, #8
 800600a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800600e:	0222      	lsls	r2, r4, #8
 8006010:	68f9      	ldr	r1, [r7, #12]
 8006012:	6849      	ldr	r1, [r1, #4]
 8006014:	0849      	lsrs	r1, r1, #1
 8006016:	2000      	movs	r0, #0
 8006018:	4688      	mov	r8, r1
 800601a:	4681      	mov	r9, r0
 800601c:	eb12 0a08 	adds.w	sl, r2, r8
 8006020:	eb43 0b09 	adc.w	fp, r3, r9
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	607a      	str	r2, [r7, #4]
 800602e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006032:	4650      	mov	r0, sl
 8006034:	4659      	mov	r1, fp
 8006036:	f7fa fd09 	bl	8000a4c <__aeabi_uldivmod>
 800603a:	4602      	mov	r2, r0
 800603c:	460b      	mov	r3, r1
 800603e:	4613      	mov	r3, r2
 8006040:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006048:	d308      	bcc.n	800605c <UART_SetConfig+0x328>
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006050:	d204      	bcs.n	800605c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	60da      	str	r2, [r3, #12]
 800605a:	e0b5      	b.n	80061c8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006062:	e0b1      	b.n	80061c8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800606c:	d15d      	bne.n	800612a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800606e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006072:	2b08      	cmp	r3, #8
 8006074:	d827      	bhi.n	80060c6 <UART_SetConfig+0x392>
 8006076:	a201      	add	r2, pc, #4	@ (adr r2, 800607c <UART_SetConfig+0x348>)
 8006078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607c:	080060a1 	.word	0x080060a1
 8006080:	080060a9 	.word	0x080060a9
 8006084:	080060b1 	.word	0x080060b1
 8006088:	080060c7 	.word	0x080060c7
 800608c:	080060b7 	.word	0x080060b7
 8006090:	080060c7 	.word	0x080060c7
 8006094:	080060c7 	.word	0x080060c7
 8006098:	080060c7 	.word	0x080060c7
 800609c:	080060bf 	.word	0x080060bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060a0:	f7fe fc36 	bl	8004910 <HAL_RCC_GetPCLK1Freq>
 80060a4:	61f8      	str	r0, [r7, #28]
        break;
 80060a6:	e014      	b.n	80060d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060a8:	f7fe fc48 	bl	800493c <HAL_RCC_GetPCLK2Freq>
 80060ac:	61f8      	str	r0, [r7, #28]
        break;
 80060ae:	e010      	b.n	80060d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060b0:	4b4c      	ldr	r3, [pc, #304]	@ (80061e4 <UART_SetConfig+0x4b0>)
 80060b2:	61fb      	str	r3, [r7, #28]
        break;
 80060b4:	e00d      	b.n	80060d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060b6:	f7fe fb93 	bl	80047e0 <HAL_RCC_GetSysClockFreq>
 80060ba:	61f8      	str	r0, [r7, #28]
        break;
 80060bc:	e009      	b.n	80060d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060c2:	61fb      	str	r3, [r7, #28]
        break;
 80060c4:	e005      	b.n	80060d2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80060d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d077      	beq.n	80061c8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	005a      	lsls	r2, r3, #1
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	085b      	lsrs	r3, r3, #1
 80060e2:	441a      	add	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	2b0f      	cmp	r3, #15
 80060f2:	d916      	bls.n	8006122 <UART_SetConfig+0x3ee>
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060fa:	d212      	bcs.n	8006122 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f023 030f 	bic.w	r3, r3, #15
 8006104:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	085b      	lsrs	r3, r3, #1
 800610a:	b29b      	uxth	r3, r3
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	b29a      	uxth	r2, r3
 8006112:	8afb      	ldrh	r3, [r7, #22]
 8006114:	4313      	orrs	r3, r2
 8006116:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	8afa      	ldrh	r2, [r7, #22]
 800611e:	60da      	str	r2, [r3, #12]
 8006120:	e052      	b.n	80061c8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006128:	e04e      	b.n	80061c8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800612a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800612e:	2b08      	cmp	r3, #8
 8006130:	d827      	bhi.n	8006182 <UART_SetConfig+0x44e>
 8006132:	a201      	add	r2, pc, #4	@ (adr r2, 8006138 <UART_SetConfig+0x404>)
 8006134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006138:	0800615d 	.word	0x0800615d
 800613c:	08006165 	.word	0x08006165
 8006140:	0800616d 	.word	0x0800616d
 8006144:	08006183 	.word	0x08006183
 8006148:	08006173 	.word	0x08006173
 800614c:	08006183 	.word	0x08006183
 8006150:	08006183 	.word	0x08006183
 8006154:	08006183 	.word	0x08006183
 8006158:	0800617b 	.word	0x0800617b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800615c:	f7fe fbd8 	bl	8004910 <HAL_RCC_GetPCLK1Freq>
 8006160:	61f8      	str	r0, [r7, #28]
        break;
 8006162:	e014      	b.n	800618e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006164:	f7fe fbea 	bl	800493c <HAL_RCC_GetPCLK2Freq>
 8006168:	61f8      	str	r0, [r7, #28]
        break;
 800616a:	e010      	b.n	800618e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800616c:	4b1d      	ldr	r3, [pc, #116]	@ (80061e4 <UART_SetConfig+0x4b0>)
 800616e:	61fb      	str	r3, [r7, #28]
        break;
 8006170:	e00d      	b.n	800618e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006172:	f7fe fb35 	bl	80047e0 <HAL_RCC_GetSysClockFreq>
 8006176:	61f8      	str	r0, [r7, #28]
        break;
 8006178:	e009      	b.n	800618e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800617a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800617e:	61fb      	str	r3, [r7, #28]
        break;
 8006180:	e005      	b.n	800618e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800618c:	bf00      	nop
    }

    if (pclk != 0U)
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d019      	beq.n	80061c8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	085a      	lsrs	r2, r3, #1
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	441a      	add	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	2b0f      	cmp	r3, #15
 80061ac:	d909      	bls.n	80061c2 <UART_SetConfig+0x48e>
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061b4:	d205      	bcs.n	80061c2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	60da      	str	r2, [r3, #12]
 80061c0:	e002      	b.n	80061c8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80061d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3728      	adds	r7, #40	@ 0x28
 80061dc:	46bd      	mov	sp, r7
 80061de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061e2:	bf00      	nop
 80061e4:	00f42400 	.word	0x00f42400

080061e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f4:	f003 0308 	and.w	r3, r3, #8
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00a      	beq.n	8006212 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00a      	beq.n	8006256 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625a:	f003 0304 	and.w	r3, r3, #4
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627c:	f003 0310 	and.w	r3, r3, #16
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00a      	beq.n	800629a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01a      	beq.n	80062fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062e6:	d10a      	bne.n	80062fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	605a      	str	r2, [r3, #4]
  }
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b098      	sub	sp, #96	@ 0x60
 8006330:	af02      	add	r7, sp, #8
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800633c:	f7fb fc0e 	bl	8001b5c <HAL_GetTick>
 8006340:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0308 	and.w	r3, r3, #8
 800634c:	2b08      	cmp	r3, #8
 800634e:	d12e      	bne.n	80063ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006350:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006358:	2200      	movs	r2, #0
 800635a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f88c 	bl	800647c <UART_WaitOnFlagUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d021      	beq.n	80063ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006372:	e853 3f00 	ldrex	r3, [r3]
 8006376:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800637a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800637e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	461a      	mov	r2, r3
 8006386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006388:	647b      	str	r3, [r7, #68]	@ 0x44
 800638a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800638e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006390:	e841 2300 	strex	r3, r2, [r1]
 8006394:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1e6      	bne.n	800636a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2220      	movs	r2, #32
 80063a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e062      	b.n	8006474 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d149      	bne.n	8006450 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063c4:	2200      	movs	r2, #0
 80063c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f856 	bl	800647c <UART_WaitOnFlagUntilTimeout>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d03c      	beq.n	8006450 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	623b      	str	r3, [r7, #32]
   return(result);
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	461a      	mov	r2, r3
 80063f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80063f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e6      	bne.n	80063d6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3308      	adds	r3, #8
 800640e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	e853 3f00 	ldrex	r3, [r3]
 8006416:	60fb      	str	r3, [r7, #12]
   return(result);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0301 	bic.w	r3, r3, #1
 800641e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3308      	adds	r3, #8
 8006426:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006428:	61fa      	str	r2, [r7, #28]
 800642a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642c:	69b9      	ldr	r1, [r7, #24]
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	e841 2300 	strex	r3, r2, [r1]
 8006434:	617b      	str	r3, [r7, #20]
   return(result);
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1e5      	bne.n	8006408 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e011      	b.n	8006474 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2220      	movs	r2, #32
 800645a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3758      	adds	r7, #88	@ 0x58
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	603b      	str	r3, [r7, #0]
 8006488:	4613      	mov	r3, r2
 800648a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800648c:	e04f      	b.n	800652e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006494:	d04b      	beq.n	800652e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006496:	f7fb fb61 	bl	8001b5c <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d302      	bcc.n	80064ac <UART_WaitOnFlagUntilTimeout+0x30>
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e04e      	b.n	800654e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0304 	and.w	r3, r3, #4
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d037      	beq.n	800652e <UART_WaitOnFlagUntilTimeout+0xb2>
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2b80      	cmp	r3, #128	@ 0x80
 80064c2:	d034      	beq.n	800652e <UART_WaitOnFlagUntilTimeout+0xb2>
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b40      	cmp	r3, #64	@ 0x40
 80064c8:	d031      	beq.n	800652e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69db      	ldr	r3, [r3, #28]
 80064d0:	f003 0308 	and.w	r3, r3, #8
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d110      	bne.n	80064fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2208      	movs	r2, #8
 80064de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 f838 	bl	8006556 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2208      	movs	r2, #8
 80064ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e029      	b.n	800654e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006504:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006508:	d111      	bne.n	800652e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006512:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 f81e 	bl	8006556 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2220      	movs	r2, #32
 800651e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e00f      	b.n	800654e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69da      	ldr	r2, [r3, #28]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	4013      	ands	r3, r2
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	429a      	cmp	r2, r3
 800653c:	bf0c      	ite	eq
 800653e:	2301      	moveq	r3, #1
 8006540:	2300      	movne	r3, #0
 8006542:	b2db      	uxtb	r3, r3
 8006544:	461a      	mov	r2, r3
 8006546:	79fb      	ldrb	r3, [r7, #7]
 8006548:	429a      	cmp	r2, r3
 800654a:	d0a0      	beq.n	800648e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006556:	b480      	push	{r7}
 8006558:	b095      	sub	sp, #84	@ 0x54
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006566:	e853 3f00 	ldrex	r3, [r3]
 800656a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800656c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006572:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800657c:	643b      	str	r3, [r7, #64]	@ 0x40
 800657e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006580:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006582:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006584:	e841 2300 	strex	r3, r2, [r1]
 8006588:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800658a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1e6      	bne.n	800655e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3308      	adds	r3, #8
 8006596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	e853 3f00 	ldrex	r3, [r3]
 800659e:	61fb      	str	r3, [r7, #28]
   return(result);
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f023 0301 	bic.w	r3, r3, #1
 80065a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3308      	adds	r3, #8
 80065ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065b8:	e841 2300 	strex	r3, r2, [r1]
 80065bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1e5      	bne.n	8006590 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d118      	bne.n	80065fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	f023 0310 	bic.w	r3, r3, #16
 80065e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	461a      	mov	r2, r3
 80065e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065ea:	61bb      	str	r3, [r7, #24]
 80065ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ee:	6979      	ldr	r1, [r7, #20]
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	e841 2300 	strex	r3, r2, [r1]
 80065f6:	613b      	str	r3, [r7, #16]
   return(result);
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1e6      	bne.n	80065cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2220      	movs	r2, #32
 8006602:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006612:	bf00      	nop
 8006614:	3754      	adds	r7, #84	@ 0x54
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <VL53L1X_GetSWVersion>:
	255, 255, 9, 13, 255, 255, 255, 255, 10, 6,
	255, 255, 11, 12
};

VL53L1X_ERROR VL53L1X_GetSWVersion(VL53L1X_Version_t *pVersion)
{
 800661e:	b480      	push	{r7}
 8006620:	b085      	sub	sp, #20
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
	VL53L1X_ERROR Status = 0;
 8006626:	2300      	movs	r3, #0
 8006628:	73fb      	strb	r3, [r7, #15]

	pVersion->major = VL53L1X_IMPLEMENTATION_VER_MAJOR;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2203      	movs	r2, #3
 800662e:	701a      	strb	r2, [r3, #0]
	pVersion->minor = VL53L1X_IMPLEMENTATION_VER_MINOR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2205      	movs	r2, #5
 8006634:	705a      	strb	r2, [r3, #1]
	pVersion->build = VL53L1X_IMPLEMENTATION_VER_SUB;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	709a      	strb	r2, [r3, #2]
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	605a      	str	r2, [r3, #4]
	return Status;
 8006642:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
	...

08006654 <VL53L1X_SensorInit>:
	status = VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
	return status;
}

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	4603      	mov	r3, r0
 800665c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800665e:	2300      	movs	r3, #0
 8006660:	73bb      	strb	r3, [r7, #14]
	uint8_t Addr = 0x00, tmp;
 8006662:	2300      	movs	r3, #0
 8006664:	73fb      	strb	r3, [r7, #15]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8006666:	232d      	movs	r3, #45	@ 0x2d
 8006668:	73fb      	strb	r3, [r7, #15]
 800666a:	e00e      	b.n	800668a <VL53L1X_SensorInit+0x36>
		status = VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	b299      	uxth	r1, r3
 8006670:	7bfb      	ldrb	r3, [r7, #15]
 8006672:	3b2d      	subs	r3, #45	@ 0x2d
 8006674:	4a22      	ldr	r2, [pc, #136]	@ (8006700 <VL53L1X_SensorInit+0xac>)
 8006676:	5cd2      	ldrb	r2, [r2, r3]
 8006678:	88fb      	ldrh	r3, [r7, #6]
 800667a:	4618      	mov	r0, r3
 800667c:	f000 fbfa 	bl	8006e74 <VL53L1_WrByte>
 8006680:	4603      	mov	r3, r0
 8006682:	73bb      	strb	r3, [r7, #14]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	3301      	adds	r3, #1
 8006688:	73fb      	strb	r3, [r7, #15]
 800668a:	7bfb      	ldrb	r3, [r7, #15]
 800668c:	2b87      	cmp	r3, #135	@ 0x87
 800668e:	d9ed      	bls.n	800666c <VL53L1X_SensorInit+0x18>
	}
	status = VL53L1X_StartRanging(dev);
 8006690:	88fb      	ldrh	r3, [r7, #6]
 8006692:	4618      	mov	r0, r3
 8006694:	f000 f872 	bl	800677c <VL53L1X_StartRanging>
 8006698:	4603      	mov	r3, r0
 800669a:	73bb      	strb	r3, [r7, #14]
	tmp  = 0;
 800669c:	2300      	movs	r3, #0
 800669e:	737b      	strb	r3, [r7, #13]
	while(tmp==0){
 80066a0:	e008      	b.n	80066b4 <VL53L1X_SensorInit+0x60>
			status = VL53L1X_CheckForDataReady(dev, &tmp);
 80066a2:	f107 020d 	add.w	r2, r7, #13
 80066a6:	88fb      	ldrh	r3, [r7, #6]
 80066a8:	4611      	mov	r1, r2
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 f890 	bl	80067d0 <VL53L1X_CheckForDataReady>
 80066b0:	4603      	mov	r3, r0
 80066b2:	73bb      	strb	r3, [r7, #14]
	while(tmp==0){
 80066b4:	7b7b      	ldrb	r3, [r7, #13]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0f3      	beq.n	80066a2 <VL53L1X_SensorInit+0x4e>
	}
	status = VL53L1X_ClearInterrupt(dev);
 80066ba:	88fb      	ldrh	r3, [r7, #6]
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 f821 	bl	8006704 <VL53L1X_ClearInterrupt>
 80066c2:	4603      	mov	r3, r0
 80066c4:	73bb      	strb	r3, [r7, #14]
	status = VL53L1X_StopRanging(dev);
 80066c6:	88fb      	ldrh	r3, [r7, #6]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 f86c 	bl	80067a6 <VL53L1X_StopRanging>
 80066ce:	4603      	mov	r3, r0
 80066d0:	73bb      	strb	r3, [r7, #14]
	status = VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 80066d2:	88fb      	ldrh	r3, [r7, #6]
 80066d4:	2209      	movs	r2, #9
 80066d6:	2108      	movs	r1, #8
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 fbcb 	bl	8006e74 <VL53L1_WrByte>
 80066de:	4603      	mov	r3, r0
 80066e0:	73bb      	strb	r3, [r7, #14]
	status = VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 80066e2:	88fb      	ldrh	r3, [r7, #6]
 80066e4:	2200      	movs	r2, #0
 80066e6:	210b      	movs	r1, #11
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fbc3 	bl	8006e74 <VL53L1_WrByte>
 80066ee:	4603      	mov	r3, r0
 80066f0:	73bb      	strb	r3, [r7, #14]
	return status;
 80066f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	080080e8 	.word	0x080080e8

08006704 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	4603      	mov	r3, r0
 800670c:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8006712:	88fb      	ldrh	r3, [r7, #6]
 8006714:	2201      	movs	r2, #1
 8006716:	2186      	movs	r1, #134	@ 0x86
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fbab 	bl	8006e74 <VL53L1_WrByte>
 800671e:	4603      	mov	r3, r0
 8006720:	73fb      	strb	r3, [r7, #15]
	return status;
 8006722:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <VL53L1X_GetInterruptPolarity>:
	status = VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	4603      	mov	r3, r0
 8006736:	6039      	str	r1, [r7, #0]
 8006738:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 800673e:	f107 020e 	add.w	r2, r7, #14
 8006742:	88fb      	ldrh	r3, [r7, #6]
 8006744:	2130      	movs	r1, #48	@ 0x30
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fc30 	bl	8006fac <VL53L1_RdByte>
 800674c:	4603      	mov	r3, r0
 800674e:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8006750:	7bbb      	ldrb	r3, [r7, #14]
 8006752:	f003 0310 	and.w	r3, r3, #16
 8006756:	b2db      	uxtb	r3, r3
 8006758:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 800675a:	7bbb      	ldrb	r3, [r7, #14]
 800675c:	091b      	lsrs	r3, r3, #4
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	bf0c      	ite	eq
 8006764:	2301      	moveq	r3, #1
 8006766:	2300      	movne	r3, #0
 8006768:	b2db      	uxtb	r3, r3
 800676a:	461a      	mov	r2, r3
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	701a      	strb	r2, [r3, #0]
	return status;
 8006770:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	4603      	mov	r3, r0
 8006784:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006786:	2300      	movs	r3, #0
 8006788:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 800678a:	88fb      	ldrh	r3, [r7, #6]
 800678c:	2240      	movs	r2, #64	@ 0x40
 800678e:	2187      	movs	r1, #135	@ 0x87
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fb6f 	bl	8006e74 <VL53L1_WrByte>
 8006796:	4603      	mov	r3, r0
 8006798:	73fb      	strb	r3, [r7, #15]
	return status;
 800679a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	4603      	mov	r3, r0
 80067ae:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 80067b0:	2300      	movs	r3, #0
 80067b2:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 80067b4:	88fb      	ldrh	r3, [r7, #6]
 80067b6:	2200      	movs	r2, #0
 80067b8:	2187      	movs	r1, #135	@ 0x87
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fb5a 	bl	8006e74 <VL53L1_WrByte>
 80067c0:	4603      	mov	r3, r0
 80067c2:	73fb      	strb	r3, [r7, #15]
	return status;
 80067c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	4603      	mov	r3, r0
 80067d8:	6039      	str	r1, [r7, #0]
 80067da:	80fb      	strh	r3, [r7, #6]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	73fb      	strb	r3, [r7, #15]

	status = VL53L1X_GetInterruptPolarity(dev, &IntPol);
 80067e0:	f107 020d 	add.w	r2, r7, #13
 80067e4:	88fb      	ldrh	r3, [r7, #6]
 80067e6:	4611      	mov	r1, r2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff ffa0 	bl	800672e <VL53L1X_GetInterruptPolarity>
 80067ee:	4603      	mov	r3, r0
 80067f0:	73fb      	strb	r3, [r7, #15]
	status = VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 80067f2:	f107 020e 	add.w	r2, r7, #14
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	2131      	movs	r1, #49	@ 0x31
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 fbd6 	bl	8006fac <VL53L1_RdByte>
 8006800:	4603      	mov	r3, r0
 8006802:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8006804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10c      	bne.n	8006826 <VL53L1X_CheckForDataReady+0x56>
		if ((Temp & 1) == IntPol)
 800680c:	7bbb      	ldrb	r3, [r7, #14]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	7b7a      	ldrb	r2, [r7, #13]
 8006814:	4293      	cmp	r3, r2
 8006816:	d103      	bne.n	8006820 <VL53L1X_CheckForDataReady+0x50>
			*isDataReady = 1;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2201      	movs	r2, #1
 800681c:	701a      	strb	r2, [r3, #0]
 800681e:	e002      	b.n	8006826 <VL53L1X_CheckForDataReady+0x56>
		else
			*isDataReady = 0;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2200      	movs	r2, #0
 8006824:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8006826:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	4603      	mov	r3, r0
 800683a:	460a      	mov	r2, r1
 800683c:	80fb      	strh	r3, [r7, #6]
 800683e:	4613      	mov	r3, r2
 8006840:	80bb      	strh	r3, [r7, #4]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 8006842:	2300      	movs	r3, #0
 8006844:	73fb      	strb	r3, [r7, #15]

	status = VL53L1X_GetDistanceMode(dev, &DM);
 8006846:	f107 020c 	add.w	r2, r7, #12
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	4611      	mov	r1, r2
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fa1e 	bl	8006c90 <VL53L1X_GetDistanceMode>
 8006854:	4603      	mov	r3, r0
 8006856:	73fb      	strb	r3, [r7, #15]
	if (DM == 0)
 8006858:	89bb      	ldrh	r3, [r7, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <VL53L1X_SetTimingBudgetInMs+0x30>
		return 1;
 800685e:	2301      	movs	r3, #1
 8006860:	e0f6      	b.n	8006a50 <VL53L1X_SetTimingBudgetInMs+0x21e>
	else if (DM == 1) {	/* Short DistanceMode */
 8006862:	89bb      	ldrh	r3, [r7, #12]
 8006864:	2b01      	cmp	r3, #1
 8006866:	f040 8082 	bne.w	800696e <VL53L1X_SetTimingBudgetInMs+0x13c>
		switch (TimingBudgetInMs) {
 800686a:	88bb      	ldrh	r3, [r7, #4]
 800686c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006870:	d06b      	beq.n	800694a <VL53L1X_SetTimingBudgetInMs+0x118>
 8006872:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006876:	dc77      	bgt.n	8006968 <VL53L1X_SetTimingBudgetInMs+0x136>
 8006878:	2bc8      	cmp	r3, #200	@ 0xc8
 800687a:	d057      	beq.n	800692c <VL53L1X_SetTimingBudgetInMs+0xfa>
 800687c:	2bc8      	cmp	r3, #200	@ 0xc8
 800687e:	dc73      	bgt.n	8006968 <VL53L1X_SetTimingBudgetInMs+0x136>
 8006880:	2b64      	cmp	r3, #100	@ 0x64
 8006882:	d044      	beq.n	800690e <VL53L1X_SetTimingBudgetInMs+0xdc>
 8006884:	2b64      	cmp	r3, #100	@ 0x64
 8006886:	dc6f      	bgt.n	8006968 <VL53L1X_SetTimingBudgetInMs+0x136>
 8006888:	2b32      	cmp	r3, #50	@ 0x32
 800688a:	d031      	beq.n	80068f0 <VL53L1X_SetTimingBudgetInMs+0xbe>
 800688c:	2b32      	cmp	r3, #50	@ 0x32
 800688e:	dc6b      	bgt.n	8006968 <VL53L1X_SetTimingBudgetInMs+0x136>
 8006890:	2b21      	cmp	r3, #33	@ 0x21
 8006892:	d020      	beq.n	80068d6 <VL53L1X_SetTimingBudgetInMs+0xa4>
 8006894:	2b21      	cmp	r3, #33	@ 0x21
 8006896:	dc67      	bgt.n	8006968 <VL53L1X_SetTimingBudgetInMs+0x136>
 8006898:	2b0f      	cmp	r3, #15
 800689a:	d002      	beq.n	80068a2 <VL53L1X_SetTimingBudgetInMs+0x70>
 800689c:	2b14      	cmp	r3, #20
 800689e:	d00d      	beq.n	80068bc <VL53L1X_SetTimingBudgetInMs+0x8a>
 80068a0:	e062      	b.n	8006968 <VL53L1X_SetTimingBudgetInMs+0x136>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80068a2:	88fb      	ldrh	r3, [r7, #6]
 80068a4:	221d      	movs	r2, #29
 80068a6:	215e      	movs	r1, #94	@ 0x5e
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fb0f 	bl	8006ecc <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80068ae:	88fb      	ldrh	r3, [r7, #6]
 80068b0:	2227      	movs	r2, #39	@ 0x27
 80068b2:	2161      	movs	r1, #97	@ 0x61
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 fb09 	bl	8006ecc <VL53L1_WrWord>
					0x0027);
			break;
 80068ba:	e0c7      	b.n	8006a4c <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80068bc:	88fb      	ldrh	r3, [r7, #6]
 80068be:	2251      	movs	r2, #81	@ 0x51
 80068c0:	215e      	movs	r1, #94	@ 0x5e
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 fb02 	bl	8006ecc <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80068c8:	88fb      	ldrh	r3, [r7, #6]
 80068ca:	226e      	movs	r2, #110	@ 0x6e
 80068cc:	2161      	movs	r1, #97	@ 0x61
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 fafc 	bl	8006ecc <VL53L1_WrWord>
					0x006E);
			break;
 80068d4:	e0ba      	b.n	8006a4c <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80068d6:	88fb      	ldrh	r3, [r7, #6]
 80068d8:	22d6      	movs	r2, #214	@ 0xd6
 80068da:	215e      	movs	r1, #94	@ 0x5e
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 faf5 	bl	8006ecc <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80068e2:	88fb      	ldrh	r3, [r7, #6]
 80068e4:	226e      	movs	r2, #110	@ 0x6e
 80068e6:	2161      	movs	r1, #97	@ 0x61
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 faef 	bl	8006ecc <VL53L1_WrWord>
					0x006E);
			break;
 80068ee:	e0ad      	b.n	8006a4c <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80068f0:	88fb      	ldrh	r3, [r7, #6]
 80068f2:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 80068f6:	215e      	movs	r1, #94	@ 0x5e
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 fae7 	bl	8006ecc <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80068fe:	88fb      	ldrh	r3, [r7, #6]
 8006900:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8006904:	2161      	movs	r1, #97	@ 0x61
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fae0 	bl	8006ecc <VL53L1_WrWord>
					0x01E8);
			break;
 800690c:	e09e      	b.n	8006a4c <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800690e:	88fb      	ldrh	r3, [r7, #6]
 8006910:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8006914:	215e      	movs	r1, #94	@ 0x5e
 8006916:	4618      	mov	r0, r3
 8006918:	f000 fad8 	bl	8006ecc <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800691c:	88fb      	ldrh	r3, [r7, #6]
 800691e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8006922:	2161      	movs	r1, #97	@ 0x61
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fad1 	bl	8006ecc <VL53L1_WrWord>
					0x0388);
			break;
 800692a:	e08f      	b.n	8006a4c <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800692c:	88fb      	ldrh	r3, [r7, #6]
 800692e:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8006932:	215e      	movs	r1, #94	@ 0x5e
 8006934:	4618      	mov	r0, r3
 8006936:	f000 fac9 	bl	8006ecc <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800693a:	88fb      	ldrh	r3, [r7, #6]
 800693c:	f240 4296 	movw	r2, #1174	@ 0x496
 8006940:	2161      	movs	r1, #97	@ 0x61
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fac2 	bl	8006ecc <VL53L1_WrWord>
					0x0496);
			break;
 8006948:	e080      	b.n	8006a4c <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800694a:	88fb      	ldrh	r3, [r7, #6]
 800694c:	f240 5291 	movw	r2, #1425	@ 0x591
 8006950:	215e      	movs	r1, #94	@ 0x5e
 8006952:	4618      	mov	r0, r3
 8006954:	f000 faba 	bl	8006ecc <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	f240 52c1 	movw	r2, #1473	@ 0x5c1
 800695e:	2161      	movs	r1, #97	@ 0x61
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fab3 	bl	8006ecc <VL53L1_WrWord>
					0x05C1);
			break;
 8006966:	e071      	b.n	8006a4c <VL53L1X_SetTimingBudgetInMs+0x21a>
		default:
			status = 1;
 8006968:	2301      	movs	r3, #1
 800696a:	73fb      	strb	r3, [r7, #15]
			break;
 800696c:	e06e      	b.n	8006a4c <VL53L1X_SetTimingBudgetInMs+0x21a>
		}
	} else {
		switch (TimingBudgetInMs) {
 800696e:	88bb      	ldrh	r3, [r7, #4]
 8006970:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006974:	d058      	beq.n	8006a28 <VL53L1X_SetTimingBudgetInMs+0x1f6>
 8006976:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800697a:	dc64      	bgt.n	8006a46 <VL53L1X_SetTimingBudgetInMs+0x214>
 800697c:	2bc8      	cmp	r3, #200	@ 0xc8
 800697e:	d044      	beq.n	8006a0a <VL53L1X_SetTimingBudgetInMs+0x1d8>
 8006980:	2bc8      	cmp	r3, #200	@ 0xc8
 8006982:	dc60      	bgt.n	8006a46 <VL53L1X_SetTimingBudgetInMs+0x214>
 8006984:	2b64      	cmp	r3, #100	@ 0x64
 8006986:	d031      	beq.n	80069ec <VL53L1X_SetTimingBudgetInMs+0x1ba>
 8006988:	2b64      	cmp	r3, #100	@ 0x64
 800698a:	dc5c      	bgt.n	8006a46 <VL53L1X_SetTimingBudgetInMs+0x214>
 800698c:	2b32      	cmp	r3, #50	@ 0x32
 800698e:	d020      	beq.n	80069d2 <VL53L1X_SetTimingBudgetInMs+0x1a0>
 8006990:	2b32      	cmp	r3, #50	@ 0x32
 8006992:	dc58      	bgt.n	8006a46 <VL53L1X_SetTimingBudgetInMs+0x214>
 8006994:	2b14      	cmp	r3, #20
 8006996:	d002      	beq.n	800699e <VL53L1X_SetTimingBudgetInMs+0x16c>
 8006998:	2b21      	cmp	r3, #33	@ 0x21
 800699a:	d00d      	beq.n	80069b8 <VL53L1X_SetTimingBudgetInMs+0x186>
 800699c:	e053      	b.n	8006a46 <VL53L1X_SetTimingBudgetInMs+0x214>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800699e:	88fb      	ldrh	r3, [r7, #6]
 80069a0:	221e      	movs	r2, #30
 80069a2:	215e      	movs	r1, #94	@ 0x5e
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 fa91 	bl	8006ecc <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80069aa:	88fb      	ldrh	r3, [r7, #6]
 80069ac:	2222      	movs	r2, #34	@ 0x22
 80069ae:	2161      	movs	r1, #97	@ 0x61
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 fa8b 	bl	8006ecc <VL53L1_WrWord>
					0x0022);
			break;
 80069b6:	e049      	b.n	8006a4c <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80069b8:	88fb      	ldrh	r3, [r7, #6]
 80069ba:	2260      	movs	r2, #96	@ 0x60
 80069bc:	215e      	movs	r1, #94	@ 0x5e
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fa84 	bl	8006ecc <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80069c4:	88fb      	ldrh	r3, [r7, #6]
 80069c6:	226e      	movs	r2, #110	@ 0x6e
 80069c8:	2161      	movs	r1, #97	@ 0x61
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 fa7e 	bl	8006ecc <VL53L1_WrWord>
					0x006E);
			break;
 80069d0:	e03c      	b.n	8006a4c <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80069d2:	88fb      	ldrh	r3, [r7, #6]
 80069d4:	22ad      	movs	r2, #173	@ 0xad
 80069d6:	215e      	movs	r1, #94	@ 0x5e
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 fa77 	bl	8006ecc <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80069de:	88fb      	ldrh	r3, [r7, #6]
 80069e0:	22c6      	movs	r2, #198	@ 0xc6
 80069e2:	2161      	movs	r1, #97	@ 0x61
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fa71 	bl	8006ecc <VL53L1_WrWord>
					0x00C6);
			break;
 80069ea:	e02f      	b.n	8006a4c <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80069ec:	88fb      	ldrh	r3, [r7, #6]
 80069ee:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80069f2:	215e      	movs	r1, #94	@ 0x5e
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fa69 	bl	8006ecc <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80069fa:	88fb      	ldrh	r3, [r7, #6]
 80069fc:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 8006a00:	2161      	movs	r1, #97	@ 0x61
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 fa62 	bl	8006ecc <VL53L1_WrWord>
					0x01EA);
			break;
 8006a08:	e020      	b.n	8006a4c <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8006a0a:	88fb      	ldrh	r3, [r7, #6]
 8006a0c:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8006a10:	215e      	movs	r1, #94	@ 0x5e
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 fa5a 	bl	8006ecc <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8006a18:	88fb      	ldrh	r3, [r7, #6]
 8006a1a:	f44f 723e 	mov.w	r2, #760	@ 0x2f8
 8006a1e:	2161      	movs	r1, #97	@ 0x61
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 fa53 	bl	8006ecc <VL53L1_WrWord>
					0x02F8);
			break;
 8006a26:	e011      	b.n	8006a4c <VL53L1X_SetTimingBudgetInMs+0x21a>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8006a28:	88fb      	ldrh	r3, [r7, #6]
 8006a2a:	f240 428f 	movw	r2, #1167	@ 0x48f
 8006a2e:	215e      	movs	r1, #94	@ 0x5e
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 fa4b 	bl	8006ecc <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8006a36:	88fb      	ldrh	r3, [r7, #6]
 8006a38:	f240 42a4 	movw	r2, #1188	@ 0x4a4
 8006a3c:	2161      	movs	r1, #97	@ 0x61
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 fa44 	bl	8006ecc <VL53L1_WrWord>
					0x04A4);
			break;
 8006a44:	e002      	b.n	8006a4c <VL53L1X_SetTimingBudgetInMs+0x21a>
		default:
			status = 1;
 8006a46:	2301      	movs	r3, #1
 8006a48:	73fb      	strb	r3, [r7, #15]
			break;
 8006a4a:	bf00      	nop
		}
	}
	return status;
 8006a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	4603      	mov	r3, r0
 8006a60:	6039      	str	r1, [r7, #0]
 8006a62:	80fb      	strh	r3, [r7, #6]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 8006a64:	2300      	movs	r3, #0
 8006a66:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 8006a68:	f107 020c 	add.w	r2, r7, #12
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	215e      	movs	r1, #94	@ 0x5e
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 fad3 	bl	800701c <VL53L1_RdWord>
 8006a76:	4603      	mov	r3, r0
 8006a78:	73fb      	strb	r3, [r7, #15]
	switch (Temp) {
 8006a7a:	89bb      	ldrh	r3, [r7, #12]
 8006a7c:	f240 5291 	movw	r2, #1425	@ 0x591
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d05b      	beq.n	8006b3c <VL53L1X_GetTimingBudgetInMs+0xe4>
 8006a84:	f240 5291 	movw	r2, #1425	@ 0x591
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	dc5c      	bgt.n	8006b46 <VL53L1X_GetTimingBudgetInMs+0xee>
 8006a8c:	f240 428f 	movw	r2, #1167	@ 0x48f
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d053      	beq.n	8006b3c <VL53L1X_GetTimingBudgetInMs+0xe4>
 8006a94:	f5b3 6f92 	cmp.w	r3, #1168	@ 0x490
 8006a98:	da55      	bge.n	8006b46 <VL53L1X_GetTimingBudgetInMs+0xee>
 8006a9a:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d048      	beq.n	8006b34 <VL53L1X_GetTimingBudgetInMs+0xdc>
 8006aa2:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	dc4d      	bgt.n	8006b46 <VL53L1X_GetTimingBudgetInMs+0xee>
 8006aaa:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d03c      	beq.n	8006b2c <VL53L1X_GetTimingBudgetInMs+0xd4>
 8006ab2:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	dc45      	bgt.n	8006b46 <VL53L1X_GetTimingBudgetInMs+0xee>
 8006aba:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d038      	beq.n	8006b34 <VL53L1X_GetTimingBudgetInMs+0xdc>
 8006ac2:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	dc3d      	bgt.n	8006b46 <VL53L1X_GetTimingBudgetInMs+0xee>
 8006aca:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 8006ace:	d02d      	beq.n	8006b2c <VL53L1X_GetTimingBudgetInMs+0xd4>
 8006ad0:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 8006ad4:	dc37      	bgt.n	8006b46 <VL53L1X_GetTimingBudgetInMs+0xee>
 8006ad6:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 8006ada:	d023      	beq.n	8006b24 <VL53L1X_GetTimingBudgetInMs+0xcc>
 8006adc:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 8006ae0:	dc31      	bgt.n	8006b46 <VL53L1X_GetTimingBudgetInMs+0xee>
 8006ae2:	2bd6      	cmp	r3, #214	@ 0xd6
 8006ae4:	d01a      	beq.n	8006b1c <VL53L1X_GetTimingBudgetInMs+0xc4>
 8006ae6:	2bd6      	cmp	r3, #214	@ 0xd6
 8006ae8:	dc2d      	bgt.n	8006b46 <VL53L1X_GetTimingBudgetInMs+0xee>
 8006aea:	2bad      	cmp	r3, #173	@ 0xad
 8006aec:	d01a      	beq.n	8006b24 <VL53L1X_GetTimingBudgetInMs+0xcc>
 8006aee:	2bad      	cmp	r3, #173	@ 0xad
 8006af0:	dc29      	bgt.n	8006b46 <VL53L1X_GetTimingBudgetInMs+0xee>
 8006af2:	2b60      	cmp	r3, #96	@ 0x60
 8006af4:	d012      	beq.n	8006b1c <VL53L1X_GetTimingBudgetInMs+0xc4>
 8006af6:	2b60      	cmp	r3, #96	@ 0x60
 8006af8:	dc25      	bgt.n	8006b46 <VL53L1X_GetTimingBudgetInMs+0xee>
 8006afa:	2b51      	cmp	r3, #81	@ 0x51
 8006afc:	d00a      	beq.n	8006b14 <VL53L1X_GetTimingBudgetInMs+0xbc>
 8006afe:	2b51      	cmp	r3, #81	@ 0x51
 8006b00:	dc21      	bgt.n	8006b46 <VL53L1X_GetTimingBudgetInMs+0xee>
 8006b02:	2b1d      	cmp	r3, #29
 8006b04:	d002      	beq.n	8006b0c <VL53L1X_GetTimingBudgetInMs+0xb4>
 8006b06:	2b1e      	cmp	r3, #30
 8006b08:	d004      	beq.n	8006b14 <VL53L1X_GetTimingBudgetInMs+0xbc>
 8006b0a:	e01c      	b.n	8006b46 <VL53L1X_GetTimingBudgetInMs+0xee>
		case 0x001D :
			*pTimingBudget = 15;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	220f      	movs	r2, #15
 8006b10:	801a      	strh	r2, [r3, #0]
			break;
 8006b12:	e01d      	b.n	8006b50 <VL53L1X_GetTimingBudgetInMs+0xf8>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2214      	movs	r2, #20
 8006b18:	801a      	strh	r2, [r3, #0]
			break;
 8006b1a:	e019      	b.n	8006b50 <VL53L1X_GetTimingBudgetInMs+0xf8>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	2221      	movs	r2, #33	@ 0x21
 8006b20:	801a      	strh	r2, [r3, #0]
			break;
 8006b22:	e015      	b.n	8006b50 <VL53L1X_GetTimingBudgetInMs+0xf8>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2232      	movs	r2, #50	@ 0x32
 8006b28:	801a      	strh	r2, [r3, #0]
			break;
 8006b2a:	e011      	b.n	8006b50 <VL53L1X_GetTimingBudgetInMs+0xf8>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2264      	movs	r2, #100	@ 0x64
 8006b30:	801a      	strh	r2, [r3, #0]
			break;
 8006b32:	e00d      	b.n	8006b50 <VL53L1X_GetTimingBudgetInMs+0xf8>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	22c8      	movs	r2, #200	@ 0xc8
 8006b38:	801a      	strh	r2, [r3, #0]
			break;
 8006b3a:	e009      	b.n	8006b50 <VL53L1X_GetTimingBudgetInMs+0xf8>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8006b42:	801a      	strh	r2, [r3, #0]
			break;
 8006b44:	e004      	b.n	8006b50 <VL53L1X_GetTimingBudgetInMs+0xf8>
		default:
			status = 1;
 8006b46:	2301      	movs	r3, #1
 8006b48:	73fb      	strb	r3, [r7, #15]
			*pTimingBudget = 0;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	801a      	strh	r2, [r3, #0]
	}
	return status;
 8006b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	4603      	mov	r3, r0
 8006b64:	460a      	mov	r2, r1
 8006b66:	80fb      	strh	r3, [r7, #6]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	80bb      	strh	r3, [r7, #4]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	73fb      	strb	r3, [r7, #15]

	status = VL53L1X_GetTimingBudgetInMs(dev, &TB);
 8006b70:	f107 020c 	add.w	r2, r7, #12
 8006b74:	88fb      	ldrh	r3, [r7, #6]
 8006b76:	4611      	mov	r1, r2
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff ff6d 	bl	8006a58 <VL53L1X_GetTimingBudgetInMs>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	73fb      	strb	r3, [r7, #15]
	if (status != 0)
 8006b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <VL53L1X_SetDistanceMode+0x32>
		return 1;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e07c      	b.n	8006c88 <VL53L1X_SetDistanceMode+0x12c>
	switch (DM) {
 8006b8e:	88bb      	ldrh	r3, [r7, #4]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d002      	beq.n	8006b9a <VL53L1X_SetDistanceMode+0x3e>
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d033      	beq.n	8006c00 <VL53L1X_SetDistanceMode+0xa4>
 8006b98:	e065      	b.n	8006c66 <VL53L1X_SetDistanceMode+0x10a>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 8006b9a:	88fb      	ldrh	r3, [r7, #6]
 8006b9c:	2214      	movs	r2, #20
 8006b9e:	214b      	movs	r1, #75	@ 0x4b
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f000 f967 	bl	8006e74 <VL53L1_WrByte>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 8006baa:	88fb      	ldrh	r3, [r7, #6]
 8006bac:	2207      	movs	r2, #7
 8006bae:	2160      	movs	r1, #96	@ 0x60
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 f95f 	bl	8006e74 <VL53L1_WrByte>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 8006bba:	88fb      	ldrh	r3, [r7, #6]
 8006bbc:	2205      	movs	r2, #5
 8006bbe:	2163      	movs	r1, #99	@ 0x63
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f000 f957 	bl	8006e74 <VL53L1_WrByte>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 8006bca:	88fb      	ldrh	r3, [r7, #6]
 8006bcc:	2238      	movs	r2, #56	@ 0x38
 8006bce:	2169      	movs	r1, #105	@ 0x69
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 f94f 	bl	8006e74 <VL53L1_WrByte>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 8006bda:	88fb      	ldrh	r3, [r7, #6]
 8006bdc:	f240 7205 	movw	r2, #1797	@ 0x705
 8006be0:	2178      	movs	r1, #120	@ 0x78
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 f972 	bl	8006ecc <VL53L1_WrWord>
 8006be8:	4603      	mov	r3, r0
 8006bea:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 8006bec:	88fb      	ldrh	r3, [r7, #6]
 8006bee:	f240 6206 	movw	r2, #1542	@ 0x606
 8006bf2:	217a      	movs	r1, #122	@ 0x7a
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 f969 	bl	8006ecc <VL53L1_WrWord>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	73fb      	strb	r3, [r7, #15]
		break;
 8006bfe:	e035      	b.n	8006c6c <VL53L1X_SetDistanceMode+0x110>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 8006c00:	88fb      	ldrh	r3, [r7, #6]
 8006c02:	220a      	movs	r2, #10
 8006c04:	214b      	movs	r1, #75	@ 0x4b
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 f934 	bl	8006e74 <VL53L1_WrByte>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 8006c10:	88fb      	ldrh	r3, [r7, #6]
 8006c12:	220f      	movs	r2, #15
 8006c14:	2160      	movs	r1, #96	@ 0x60
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 f92c 	bl	8006e74 <VL53L1_WrByte>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 8006c20:	88fb      	ldrh	r3, [r7, #6]
 8006c22:	220d      	movs	r2, #13
 8006c24:	2163      	movs	r1, #99	@ 0x63
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 f924 	bl	8006e74 <VL53L1_WrByte>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 8006c30:	88fb      	ldrh	r3, [r7, #6]
 8006c32:	22b8      	movs	r2, #184	@ 0xb8
 8006c34:	2169      	movs	r1, #105	@ 0x69
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 f91c 	bl	8006e74 <VL53L1_WrByte>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 8006c40:	88fb      	ldrh	r3, [r7, #6]
 8006c42:	f640 720d 	movw	r2, #3853	@ 0xf0d
 8006c46:	2178      	movs	r1, #120	@ 0x78
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 f93f 	bl	8006ecc <VL53L1_WrWord>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	73fb      	strb	r3, [r7, #15]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	f640 620e 	movw	r2, #3598	@ 0xe0e
 8006c58:	217a      	movs	r1, #122	@ 0x7a
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 f936 	bl	8006ecc <VL53L1_WrWord>
 8006c60:	4603      	mov	r3, r0
 8006c62:	73fb      	strb	r3, [r7, #15]
		break;
 8006c64:	e002      	b.n	8006c6c <VL53L1X_SetDistanceMode+0x110>
	default:
		status = 1;
 8006c66:	2301      	movs	r3, #1
 8006c68:	73fb      	strb	r3, [r7, #15]
		break;
 8006c6a:	bf00      	nop
	}

	if (status == 0)
 8006c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d107      	bne.n	8006c84 <VL53L1X_SetDistanceMode+0x128>
		status = VL53L1X_SetTimingBudgetInMs(dev, TB);
 8006c74:	89ba      	ldrh	r2, [r7, #12]
 8006c76:	88fb      	ldrh	r3, [r7, #6]
 8006c78:	4611      	mov	r1, r2
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7ff fdd9 	bl	8006832 <VL53L1X_SetTimingBudgetInMs>
 8006c80:	4603      	mov	r3, r0
 8006c82:	73fb      	strb	r3, [r7, #15]
	return status;
 8006c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	4603      	mov	r3, r0
 8006c98:	6039      	str	r1, [r7, #0]
 8006c9a:	80fb      	strh	r3, [r7, #6]
	uint8_t TempDM, status=0;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8006ca0:	f107 020e 	add.w	r2, r7, #14
 8006ca4:	88fb      	ldrh	r3, [r7, #6]
 8006ca6:	214b      	movs	r1, #75	@ 0x4b
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 f97f 	bl	8006fac <VL53L1_RdByte>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	73fb      	strb	r3, [r7, #15]
	if (TempDM == 0x14)
 8006cb2:	7bbb      	ldrb	r3, [r7, #14]
 8006cb4:	2b14      	cmp	r3, #20
 8006cb6:	d102      	bne.n	8006cbe <VL53L1X_GetDistanceMode+0x2e>
		*DM=1;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8006cbe:	7bbb      	ldrb	r3, [r7, #14]
 8006cc0:	2b0a      	cmp	r3, #10
 8006cc2:	d102      	bne.n	8006cca <VL53L1X_GetDistanceMode+0x3a>
		*DM=2;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	801a      	strh	r2, [r3, #0]
	return status;
 8006cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	4603      	mov	r3, r0
 8006ce0:	6039      	str	r1, [r7, #0]
 8006ce2:	80fb      	strh	r3, [r7, #6]
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 8006ce8:	f107 020c 	add.w	r2, r7, #12
 8006cec:	88fb      	ldrh	r3, [r7, #6]
 8006cee:	21de      	movs	r1, #222	@ 0xde
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 f993 	bl	800701c <VL53L1_RdWord>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	73fb      	strb	r3, [r7, #15]
	ClockPLL = ClockPLL&0x3FF;
 8006cfa:	89bb      	ldrh	r3, [r7, #12]
 8006cfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	81bb      	strh	r3, [r7, #12]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 8006d04:	89bb      	ldrh	r3, [r7, #12]
 8006d06:	461a      	mov	r2, r3
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	fb02 f303 	mul.w	r3, r2, r3
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7f9 fbf0 	bl	80004f4 <__aeabi_ui2d>
 8006d14:	a30c      	add	r3, pc, #48	@ (adr r3, 8006d48 <VL53L1X_SetInterMeasurementInMs+0x70>)
 8006d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1a:	f7f9 fc65 	bl	80005e8 <__aeabi_dmul>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 8006d22:	4610      	mov	r0, r2
 8006d24:	4619      	mov	r1, r3
 8006d26:	f7f9 fe71 	bl	8000a0c <__aeabi_d2uiz>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	88fb      	ldrh	r3, [r7, #6]
 8006d2e:	216c      	movs	r1, #108	@ 0x6c
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 f8ff 	bl	8006f34 <VL53L1_WrDWord>
	return status;
 8006d36:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	f3af 8000 	nop.w
 8006d48:	33333333 	.word	0x33333333
 8006d4c:	3ff13333 	.word	0x3ff13333

08006d50 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	4603      	mov	r3, r0
 8006d58:	6039      	str	r1, [r7, #0]
 8006d5a:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8006d60:	2300      	movs	r3, #0
 8006d62:	73bb      	strb	r3, [r7, #14]

	status = VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8006d64:	f107 020e 	add.w	r2, r7, #14
 8006d68:	88fb      	ldrh	r3, [r7, #6]
 8006d6a:	21e5      	movs	r1, #229	@ 0xe5
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 f91d 	bl	8006fac <VL53L1_RdByte>
 8006d72:	4603      	mov	r3, r0
 8006d74:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 8006d76:	7bba      	ldrb	r2, [r7, #14]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	701a      	strb	r2, [r3, #0]
	return status;
 8006d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <VL53L1X_GetSensorId>:

VL53L1X_ERROR VL53L1X_GetSensorId(uint16_t dev, uint16_t *sensorId)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	4603      	mov	r3, r0
 8006d90:	6039      	str	r1, [r7, #0]
 8006d92:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006d94:	2300      	movs	r3, #0
 8006d96:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	81bb      	strh	r3, [r7, #12]

	status = VL53L1_RdWord(dev, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
 8006d9c:	f107 020c 	add.w	r2, r7, #12
 8006da0:	88fb      	ldrh	r3, [r7, #6]
 8006da2:	f240 110f 	movw	r1, #271	@ 0x10f
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 f938 	bl	800701c <VL53L1_RdWord>
 8006dac:	4603      	mov	r3, r0
 8006dae:	73fb      	strb	r3, [r7, #15]
	*sensorId = tmp;
 8006db0:	89ba      	ldrh	r2, [r7, #12]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	801a      	strh	r2, [r3, #0]
	return status;
 8006db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <VL53L1X_GetDistance>:

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	4603      	mov	r3, r0
 8006dca:	6039      	str	r1, [r7, #0]
 8006dcc:	80fb      	strh	r3, [r7, #6]
	VL53L1X_ERROR status = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status = (VL53L1_RdWord(dev,
 8006dd2:	f107 020c 	add.w	r2, r7, #12
 8006dd6:	88fb      	ldrh	r3, [r7, #6]
 8006dd8:	2196      	movs	r1, #150	@ 0x96
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 f91e 	bl	800701c <VL53L1_RdWord>
 8006de0:	4603      	mov	r3, r0
 8006de2:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8006de4:	89ba      	ldrh	r2, [r7, #12]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	801a      	strh	r2, [r3, #0]
	return status;
 8006dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af02      	add	r7, sp, #8
 8006dfe:	4603      	mov	r3, r0
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	81fb      	strh	r3, [r7, #14]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	330a      	adds	r3, #10
 8006e0a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(&hi2c1, Dev, pdata, count, i2c_time_out);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	89f9      	ldrh	r1, [r7, #14]
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	4613      	mov	r3, r2
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	4805      	ldr	r0, [pc, #20]	@ (8006e30 <_I2CWrite+0x38>)
 8006e1c:	f7fc f9ce 	bl	80031bc <HAL_I2C_Master_Transmit>
 8006e20:	4603      	mov	r3, r0
 8006e22:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8006e24:	693b      	ldr	r3, [r7, #16]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3718      	adds	r7, #24
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	200000e8 	.word	0x200000e8

08006e34 <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b088      	sub	sp, #32
 8006e38:	af02      	add	r7, sp, #8
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
 8006e40:	81fb      	strh	r3, [r7, #14]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	330a      	adds	r3, #10
 8006e46:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(&hi2c1, Dev|1, pdata, count, i2c_time_out);
 8006e48:	89fb      	ldrh	r3, [r7, #14]
 8006e4a:	f043 0301 	orr.w	r3, r3, #1
 8006e4e:	b299      	uxth	r1, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	4804      	ldr	r0, [pc, #16]	@ (8006e70 <_I2CRead+0x3c>)
 8006e5e:	f7fc fac5 	bl	80033ec <HAL_I2C_Master_Receive>
 8006e62:	4603      	mov	r3, r0
 8006e64:	613b      	str	r3, [r7, #16]
    //status = HAL_I2C_Master_Receive(&hi2c1, Dev, pdata, count, HAL_MAX_DELAY);
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8006e66:	693b      	ldr	r3, [r7, #16]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	200000e8 	.word	0x200000e8

08006e74 <VL53L1_WrByte>:
done:
    VL53L1_PutI2cBus();
    return Status;
}

int8_t VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	80fb      	strh	r3, [r7, #6]
 8006e7e:	460b      	mov	r3, r1
 8006e80:	80bb      	strh	r3, [r7, #4]
 8006e82:	4613      	mov	r3, r2
 8006e84:	70fb      	strb	r3, [r7, #3]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006e86:	2300      	movs	r3, #0
 8006e88:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8006e8a:	88bb      	ldrh	r3, [r7, #4]
 8006e8c:	0a1b      	lsrs	r3, r3, #8
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec8 <VL53L1_WrByte+0x54>)
 8006e94:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8006e96:	88bb      	ldrh	r3, [r7, #4]
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec8 <VL53L1_WrByte+0x54>)
 8006e9c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8006e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8006ec8 <VL53L1_WrByte+0x54>)
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8006ea4:	88fb      	ldrh	r3, [r7, #6]
 8006ea6:	2203      	movs	r2, #3
 8006ea8:	4907      	ldr	r1, [pc, #28]	@ (8006ec8 <VL53L1_WrByte+0x54>)
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7ff ffa4 	bl	8006df8 <_I2CWrite>
 8006eb0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <VL53L1_WrByte+0x48>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006eb8:	23f3      	movs	r3, #243	@ 0xf3
 8006eba:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8006ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	2000030c 	.word	0x2000030c

08006ecc <VL53L1_WrWord>:

int8_t VL53L1_WrWord(uint16_t Dev, uint16_t index, uint16_t data) {
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	80fb      	strh	r3, [r7, #6]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	80bb      	strh	r3, [r7, #4]
 8006eda:	4613      	mov	r3, r2
 8006edc:	807b      	strh	r3, [r7, #2]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8006ee2:	88bb      	ldrh	r3, [r7, #4]
 8006ee4:	0a1b      	lsrs	r3, r3, #8
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	4b11      	ldr	r3, [pc, #68]	@ (8006f30 <VL53L1_WrWord+0x64>)
 8006eec:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8006eee:	88bb      	ldrh	r3, [r7, #4]
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8006f30 <VL53L1_WrWord+0x64>)
 8006ef4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8006ef6:	887b      	ldrh	r3, [r7, #2]
 8006ef8:	0a1b      	lsrs	r3, r3, #8
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	4b0c      	ldr	r3, [pc, #48]	@ (8006f30 <VL53L1_WrWord+0x64>)
 8006f00:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8006f02:	887b      	ldrh	r3, [r7, #2]
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	4b0a      	ldr	r3, [pc, #40]	@ (8006f30 <VL53L1_WrWord+0x64>)
 8006f08:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8006f0a:	88fb      	ldrh	r3, [r7, #6]
 8006f0c:	2204      	movs	r2, #4
 8006f0e:	4908      	ldr	r1, [pc, #32]	@ (8006f30 <VL53L1_WrWord+0x64>)
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff ff71 	bl	8006df8 <_I2CWrite>
 8006f16:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <VL53L1_WrWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006f1e:	23f3      	movs	r3, #243	@ 0xf3
 8006f20:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8006f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	2000030c 	.word	0x2000030c

08006f34 <VL53L1_WrDWord>:

int8_t VL53L1_WrDWord(uint16_t Dev, uint16_t index, uint32_t data) {
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	603a      	str	r2, [r7, #0]
 8006f3e:	80fb      	strh	r3, [r7, #6]
 8006f40:	460b      	mov	r3, r1
 8006f42:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006f44:	2300      	movs	r3, #0
 8006f46:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
    _I2CBuffer[0] = index>>8;
 8006f48:	88bb      	ldrh	r3, [r7, #4]
 8006f4a:	0a1b      	lsrs	r3, r3, #8
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	4b15      	ldr	r3, [pc, #84]	@ (8006fa8 <VL53L1_WrDWord+0x74>)
 8006f52:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8006f54:	88bb      	ldrh	r3, [r7, #4]
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	4b13      	ldr	r3, [pc, #76]	@ (8006fa8 <VL53L1_WrDWord+0x74>)
 8006f5a:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 24) & 0xFF;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	0e1b      	lsrs	r3, r3, #24
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	4b11      	ldr	r3, [pc, #68]	@ (8006fa8 <VL53L1_WrDWord+0x74>)
 8006f64:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 16) & 0xFF;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	0c1b      	lsrs	r3, r3, #16
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa8 <VL53L1_WrDWord+0x74>)
 8006f6e:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 8)  & 0xFF;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	0a1b      	lsrs	r3, r3, #8
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	4b0c      	ldr	r3, [pc, #48]	@ (8006fa8 <VL53L1_WrDWord+0x74>)
 8006f78:	711a      	strb	r2, [r3, #4]
    _I2CBuffer[5] = (data >> 0 ) & 0xFF;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa8 <VL53L1_WrDWord+0x74>)
 8006f80:	715a      	strb	r2, [r3, #5]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 6);
 8006f82:	88fb      	ldrh	r3, [r7, #6]
 8006f84:	2206      	movs	r2, #6
 8006f86:	4908      	ldr	r1, [pc, #32]	@ (8006fa8 <VL53L1_WrDWord+0x74>)
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7ff ff35 	bl	8006df8 <_I2CWrite>
 8006f8e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <VL53L1_WrDWord+0x66>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006f96:	23f3      	movs	r3, #243	@ 0xf3
 8006f98:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8006f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	2000030c 	.word	0x2000030c

08006fac <VL53L1_RdByte>:

int8_t VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	603a      	str	r2, [r7, #0]
 8006fb6:	80fb      	strh	r3, [r7, #6]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8006fc0:	88bb      	ldrh	r3, [r7, #4]
 8006fc2:	0a1b      	lsrs	r3, r3, #8
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	4b13      	ldr	r3, [pc, #76]	@ (8007018 <VL53L1_RdByte+0x6c>)
 8006fca:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8006fcc:	88bb      	ldrh	r3, [r7, #4]
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	4b11      	ldr	r3, [pc, #68]	@ (8007018 <VL53L1_RdByte+0x6c>)
 8006fd2:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8006fd4:	88fb      	ldrh	r3, [r7, #6]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	490f      	ldr	r1, [pc, #60]	@ (8007018 <VL53L1_RdByte+0x6c>)
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7ff ff0c 	bl	8006df8 <_I2CWrite>
 8006fe0:	60b8      	str	r0, [r7, #8]
    if( status_int ){
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <VL53L1_RdByte+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006fe8:	23f3      	movs	r3, #243	@ 0xf3
 8006fea:	73fb      	strb	r3, [r7, #15]
        goto done;
 8006fec:	e00d      	b.n	800700a <VL53L1_RdByte+0x5e>
    }
    status_int = _I2CRead(Dev, data, 1);
 8006fee:	88fb      	ldrh	r3, [r7, #6]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7ff ff1d 	bl	8006e34 <_I2CRead>
 8006ffa:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d002      	beq.n	8007008 <VL53L1_RdByte+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8007002:	23f3      	movs	r3, #243	@ 0xf3
 8007004:	73fb      	strb	r3, [r7, #15]
 8007006:	e000      	b.n	800700a <VL53L1_RdByte+0x5e>
    }
done:
 8007008:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800700a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	2000030c 	.word	0x2000030c

0800701c <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data) {
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	4603      	mov	r3, r0
 8007024:	603a      	str	r2, [r7, #0]
 8007026:	80fb      	strh	r3, [r7, #6]
 8007028:	460b      	mov	r3, r1
 800702a:	80bb      	strh	r3, [r7, #4]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800702c:	2300      	movs	r3, #0
 800702e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8007030:	88bb      	ldrh	r3, [r7, #4]
 8007032:	0a1b      	lsrs	r3, r3, #8
 8007034:	b29b      	uxth	r3, r3
 8007036:	b2da      	uxtb	r2, r3
 8007038:	4b17      	ldr	r3, [pc, #92]	@ (8007098 <VL53L1_RdWord+0x7c>)
 800703a:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800703c:	88bb      	ldrh	r3, [r7, #4]
 800703e:	b2da      	uxtb	r2, r3
 8007040:	4b15      	ldr	r3, [pc, #84]	@ (8007098 <VL53L1_RdWord+0x7c>)
 8007042:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8007044:	88fb      	ldrh	r3, [r7, #6]
 8007046:	2202      	movs	r2, #2
 8007048:	4913      	ldr	r1, [pc, #76]	@ (8007098 <VL53L1_RdWord+0x7c>)
 800704a:	4618      	mov	r0, r3
 800704c:	f7ff fed4 	bl	8006df8 <_I2CWrite>
 8007050:	60b8      	str	r0, [r7, #8]

    if( status_int ){
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <VL53L1_RdWord+0x42>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8007058:	23f3      	movs	r3, #243	@ 0xf3
 800705a:	73fb      	strb	r3, [r7, #15]
        goto done;
 800705c:	e016      	b.n	800708c <VL53L1_RdWord+0x70>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800705e:	88fb      	ldrh	r3, [r7, #6]
 8007060:	2202      	movs	r2, #2
 8007062:	490d      	ldr	r1, [pc, #52]	@ (8007098 <VL53L1_RdWord+0x7c>)
 8007064:	4618      	mov	r0, r3
 8007066:	f7ff fee5 	bl	8006e34 <_I2CRead>
 800706a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <VL53L1_RdWord+0x5c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8007072:	23f3      	movs	r3, #243	@ 0xf3
 8007074:	73fb      	strb	r3, [r7, #15]
        goto done;
 8007076:	e009      	b.n	800708c <VL53L1_RdWord+0x70>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8007078:	4b07      	ldr	r3, [pc, #28]	@ (8007098 <VL53L1_RdWord+0x7c>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	021b      	lsls	r3, r3, #8
 800707e:	b29b      	uxth	r3, r3
 8007080:	4a05      	ldr	r2, [pc, #20]	@ (8007098 <VL53L1_RdWord+0x7c>)
 8007082:	7852      	ldrb	r2, [r2, #1]
 8007084:	4413      	add	r3, r2
 8007086:	b29a      	uxth	r2, r3
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800708c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	2000030c 	.word	0x2000030c

0800709c <std>:
 800709c:	2300      	movs	r3, #0
 800709e:	b510      	push	{r4, lr}
 80070a0:	4604      	mov	r4, r0
 80070a2:	e9c0 3300 	strd	r3, r3, [r0]
 80070a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070aa:	6083      	str	r3, [r0, #8]
 80070ac:	8181      	strh	r1, [r0, #12]
 80070ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80070b0:	81c2      	strh	r2, [r0, #14]
 80070b2:	6183      	str	r3, [r0, #24]
 80070b4:	4619      	mov	r1, r3
 80070b6:	2208      	movs	r2, #8
 80070b8:	305c      	adds	r0, #92	@ 0x5c
 80070ba:	f000 f921 	bl	8007300 <memset>
 80070be:	4b0d      	ldr	r3, [pc, #52]	@ (80070f4 <std+0x58>)
 80070c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80070c2:	4b0d      	ldr	r3, [pc, #52]	@ (80070f8 <std+0x5c>)
 80070c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80070c6:	4b0d      	ldr	r3, [pc, #52]	@ (80070fc <std+0x60>)
 80070c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80070ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007100 <std+0x64>)
 80070cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80070ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007104 <std+0x68>)
 80070d0:	6224      	str	r4, [r4, #32]
 80070d2:	429c      	cmp	r4, r3
 80070d4:	d006      	beq.n	80070e4 <std+0x48>
 80070d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80070da:	4294      	cmp	r4, r2
 80070dc:	d002      	beq.n	80070e4 <std+0x48>
 80070de:	33d0      	adds	r3, #208	@ 0xd0
 80070e0:	429c      	cmp	r4, r3
 80070e2:	d105      	bne.n	80070f0 <std+0x54>
 80070e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ec:	f000 b93a 	b.w	8007364 <__retarget_lock_init_recursive>
 80070f0:	bd10      	pop	{r4, pc}
 80070f2:	bf00      	nop
 80070f4:	08007bb9 	.word	0x08007bb9
 80070f8:	08007bdb 	.word	0x08007bdb
 80070fc:	08007c13 	.word	0x08007c13
 8007100:	08007c37 	.word	0x08007c37
 8007104:	2000040c 	.word	0x2000040c

08007108 <stdio_exit_handler>:
 8007108:	4a02      	ldr	r2, [pc, #8]	@ (8007114 <stdio_exit_handler+0xc>)
 800710a:	4903      	ldr	r1, [pc, #12]	@ (8007118 <stdio_exit_handler+0x10>)
 800710c:	4803      	ldr	r0, [pc, #12]	@ (800711c <stdio_exit_handler+0x14>)
 800710e:	f000 b869 	b.w	80071e4 <_fwalk_sglue>
 8007112:	bf00      	nop
 8007114:	2000000c 	.word	0x2000000c
 8007118:	08007b51 	.word	0x08007b51
 800711c:	2000001c 	.word	0x2000001c

08007120 <cleanup_stdio>:
 8007120:	6841      	ldr	r1, [r0, #4]
 8007122:	4b0c      	ldr	r3, [pc, #48]	@ (8007154 <cleanup_stdio+0x34>)
 8007124:	4299      	cmp	r1, r3
 8007126:	b510      	push	{r4, lr}
 8007128:	4604      	mov	r4, r0
 800712a:	d001      	beq.n	8007130 <cleanup_stdio+0x10>
 800712c:	f000 fd10 	bl	8007b50 <_fflush_r>
 8007130:	68a1      	ldr	r1, [r4, #8]
 8007132:	4b09      	ldr	r3, [pc, #36]	@ (8007158 <cleanup_stdio+0x38>)
 8007134:	4299      	cmp	r1, r3
 8007136:	d002      	beq.n	800713e <cleanup_stdio+0x1e>
 8007138:	4620      	mov	r0, r4
 800713a:	f000 fd09 	bl	8007b50 <_fflush_r>
 800713e:	68e1      	ldr	r1, [r4, #12]
 8007140:	4b06      	ldr	r3, [pc, #24]	@ (800715c <cleanup_stdio+0x3c>)
 8007142:	4299      	cmp	r1, r3
 8007144:	d004      	beq.n	8007150 <cleanup_stdio+0x30>
 8007146:	4620      	mov	r0, r4
 8007148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800714c:	f000 bd00 	b.w	8007b50 <_fflush_r>
 8007150:	bd10      	pop	{r4, pc}
 8007152:	bf00      	nop
 8007154:	2000040c 	.word	0x2000040c
 8007158:	20000474 	.word	0x20000474
 800715c:	200004dc 	.word	0x200004dc

08007160 <global_stdio_init.part.0>:
 8007160:	b510      	push	{r4, lr}
 8007162:	4b0b      	ldr	r3, [pc, #44]	@ (8007190 <global_stdio_init.part.0+0x30>)
 8007164:	4c0b      	ldr	r4, [pc, #44]	@ (8007194 <global_stdio_init.part.0+0x34>)
 8007166:	4a0c      	ldr	r2, [pc, #48]	@ (8007198 <global_stdio_init.part.0+0x38>)
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	4620      	mov	r0, r4
 800716c:	2200      	movs	r2, #0
 800716e:	2104      	movs	r1, #4
 8007170:	f7ff ff94 	bl	800709c <std>
 8007174:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007178:	2201      	movs	r2, #1
 800717a:	2109      	movs	r1, #9
 800717c:	f7ff ff8e 	bl	800709c <std>
 8007180:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007184:	2202      	movs	r2, #2
 8007186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800718a:	2112      	movs	r1, #18
 800718c:	f7ff bf86 	b.w	800709c <std>
 8007190:	20000544 	.word	0x20000544
 8007194:	2000040c 	.word	0x2000040c
 8007198:	08007109 	.word	0x08007109

0800719c <__sfp_lock_acquire>:
 800719c:	4801      	ldr	r0, [pc, #4]	@ (80071a4 <__sfp_lock_acquire+0x8>)
 800719e:	f000 b8e2 	b.w	8007366 <__retarget_lock_acquire_recursive>
 80071a2:	bf00      	nop
 80071a4:	20000549 	.word	0x20000549

080071a8 <__sfp_lock_release>:
 80071a8:	4801      	ldr	r0, [pc, #4]	@ (80071b0 <__sfp_lock_release+0x8>)
 80071aa:	f000 b8dd 	b.w	8007368 <__retarget_lock_release_recursive>
 80071ae:	bf00      	nop
 80071b0:	20000549 	.word	0x20000549

080071b4 <__sinit>:
 80071b4:	b510      	push	{r4, lr}
 80071b6:	4604      	mov	r4, r0
 80071b8:	f7ff fff0 	bl	800719c <__sfp_lock_acquire>
 80071bc:	6a23      	ldr	r3, [r4, #32]
 80071be:	b11b      	cbz	r3, 80071c8 <__sinit+0x14>
 80071c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c4:	f7ff bff0 	b.w	80071a8 <__sfp_lock_release>
 80071c8:	4b04      	ldr	r3, [pc, #16]	@ (80071dc <__sinit+0x28>)
 80071ca:	6223      	str	r3, [r4, #32]
 80071cc:	4b04      	ldr	r3, [pc, #16]	@ (80071e0 <__sinit+0x2c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1f5      	bne.n	80071c0 <__sinit+0xc>
 80071d4:	f7ff ffc4 	bl	8007160 <global_stdio_init.part.0>
 80071d8:	e7f2      	b.n	80071c0 <__sinit+0xc>
 80071da:	bf00      	nop
 80071dc:	08007121 	.word	0x08007121
 80071e0:	20000544 	.word	0x20000544

080071e4 <_fwalk_sglue>:
 80071e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e8:	4607      	mov	r7, r0
 80071ea:	4688      	mov	r8, r1
 80071ec:	4614      	mov	r4, r2
 80071ee:	2600      	movs	r6, #0
 80071f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071f4:	f1b9 0901 	subs.w	r9, r9, #1
 80071f8:	d505      	bpl.n	8007206 <_fwalk_sglue+0x22>
 80071fa:	6824      	ldr	r4, [r4, #0]
 80071fc:	2c00      	cmp	r4, #0
 80071fe:	d1f7      	bne.n	80071f0 <_fwalk_sglue+0xc>
 8007200:	4630      	mov	r0, r6
 8007202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007206:	89ab      	ldrh	r3, [r5, #12]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d907      	bls.n	800721c <_fwalk_sglue+0x38>
 800720c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007210:	3301      	adds	r3, #1
 8007212:	d003      	beq.n	800721c <_fwalk_sglue+0x38>
 8007214:	4629      	mov	r1, r5
 8007216:	4638      	mov	r0, r7
 8007218:	47c0      	blx	r8
 800721a:	4306      	orrs	r6, r0
 800721c:	3568      	adds	r5, #104	@ 0x68
 800721e:	e7e9      	b.n	80071f4 <_fwalk_sglue+0x10>

08007220 <iprintf>:
 8007220:	b40f      	push	{r0, r1, r2, r3}
 8007222:	b507      	push	{r0, r1, r2, lr}
 8007224:	4906      	ldr	r1, [pc, #24]	@ (8007240 <iprintf+0x20>)
 8007226:	ab04      	add	r3, sp, #16
 8007228:	6808      	ldr	r0, [r1, #0]
 800722a:	f853 2b04 	ldr.w	r2, [r3], #4
 800722e:	6881      	ldr	r1, [r0, #8]
 8007230:	9301      	str	r3, [sp, #4]
 8007232:	f000 f8c3 	bl	80073bc <_vfiprintf_r>
 8007236:	b003      	add	sp, #12
 8007238:	f85d eb04 	ldr.w	lr, [sp], #4
 800723c:	b004      	add	sp, #16
 800723e:	4770      	bx	lr
 8007240:	20000018 	.word	0x20000018

08007244 <_puts_r>:
 8007244:	6a03      	ldr	r3, [r0, #32]
 8007246:	b570      	push	{r4, r5, r6, lr}
 8007248:	6884      	ldr	r4, [r0, #8]
 800724a:	4605      	mov	r5, r0
 800724c:	460e      	mov	r6, r1
 800724e:	b90b      	cbnz	r3, 8007254 <_puts_r+0x10>
 8007250:	f7ff ffb0 	bl	80071b4 <__sinit>
 8007254:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007256:	07db      	lsls	r3, r3, #31
 8007258:	d405      	bmi.n	8007266 <_puts_r+0x22>
 800725a:	89a3      	ldrh	r3, [r4, #12]
 800725c:	0598      	lsls	r0, r3, #22
 800725e:	d402      	bmi.n	8007266 <_puts_r+0x22>
 8007260:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007262:	f000 f880 	bl	8007366 <__retarget_lock_acquire_recursive>
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	0719      	lsls	r1, r3, #28
 800726a:	d502      	bpl.n	8007272 <_puts_r+0x2e>
 800726c:	6923      	ldr	r3, [r4, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d135      	bne.n	80072de <_puts_r+0x9a>
 8007272:	4621      	mov	r1, r4
 8007274:	4628      	mov	r0, r5
 8007276:	f000 fd21 	bl	8007cbc <__swsetup_r>
 800727a:	b380      	cbz	r0, 80072de <_puts_r+0x9a>
 800727c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007280:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007282:	07da      	lsls	r2, r3, #31
 8007284:	d405      	bmi.n	8007292 <_puts_r+0x4e>
 8007286:	89a3      	ldrh	r3, [r4, #12]
 8007288:	059b      	lsls	r3, r3, #22
 800728a:	d402      	bmi.n	8007292 <_puts_r+0x4e>
 800728c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800728e:	f000 f86b 	bl	8007368 <__retarget_lock_release_recursive>
 8007292:	4628      	mov	r0, r5
 8007294:	bd70      	pop	{r4, r5, r6, pc}
 8007296:	2b00      	cmp	r3, #0
 8007298:	da04      	bge.n	80072a4 <_puts_r+0x60>
 800729a:	69a2      	ldr	r2, [r4, #24]
 800729c:	429a      	cmp	r2, r3
 800729e:	dc17      	bgt.n	80072d0 <_puts_r+0x8c>
 80072a0:	290a      	cmp	r1, #10
 80072a2:	d015      	beq.n	80072d0 <_puts_r+0x8c>
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	6022      	str	r2, [r4, #0]
 80072aa:	7019      	strb	r1, [r3, #0]
 80072ac:	68a3      	ldr	r3, [r4, #8]
 80072ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072b2:	3b01      	subs	r3, #1
 80072b4:	60a3      	str	r3, [r4, #8]
 80072b6:	2900      	cmp	r1, #0
 80072b8:	d1ed      	bne.n	8007296 <_puts_r+0x52>
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	da11      	bge.n	80072e2 <_puts_r+0x9e>
 80072be:	4622      	mov	r2, r4
 80072c0:	210a      	movs	r1, #10
 80072c2:	4628      	mov	r0, r5
 80072c4:	f000 fcbb 	bl	8007c3e <__swbuf_r>
 80072c8:	3001      	adds	r0, #1
 80072ca:	d0d7      	beq.n	800727c <_puts_r+0x38>
 80072cc:	250a      	movs	r5, #10
 80072ce:	e7d7      	b.n	8007280 <_puts_r+0x3c>
 80072d0:	4622      	mov	r2, r4
 80072d2:	4628      	mov	r0, r5
 80072d4:	f000 fcb3 	bl	8007c3e <__swbuf_r>
 80072d8:	3001      	adds	r0, #1
 80072da:	d1e7      	bne.n	80072ac <_puts_r+0x68>
 80072dc:	e7ce      	b.n	800727c <_puts_r+0x38>
 80072de:	3e01      	subs	r6, #1
 80072e0:	e7e4      	b.n	80072ac <_puts_r+0x68>
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	6022      	str	r2, [r4, #0]
 80072e8:	220a      	movs	r2, #10
 80072ea:	701a      	strb	r2, [r3, #0]
 80072ec:	e7ee      	b.n	80072cc <_puts_r+0x88>
	...

080072f0 <puts>:
 80072f0:	4b02      	ldr	r3, [pc, #8]	@ (80072fc <puts+0xc>)
 80072f2:	4601      	mov	r1, r0
 80072f4:	6818      	ldr	r0, [r3, #0]
 80072f6:	f7ff bfa5 	b.w	8007244 <_puts_r>
 80072fa:	bf00      	nop
 80072fc:	20000018 	.word	0x20000018

08007300 <memset>:
 8007300:	4402      	add	r2, r0
 8007302:	4603      	mov	r3, r0
 8007304:	4293      	cmp	r3, r2
 8007306:	d100      	bne.n	800730a <memset+0xa>
 8007308:	4770      	bx	lr
 800730a:	f803 1b01 	strb.w	r1, [r3], #1
 800730e:	e7f9      	b.n	8007304 <memset+0x4>

08007310 <__errno>:
 8007310:	4b01      	ldr	r3, [pc, #4]	@ (8007318 <__errno+0x8>)
 8007312:	6818      	ldr	r0, [r3, #0]
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	20000018 	.word	0x20000018

0800731c <__libc_init_array>:
 800731c:	b570      	push	{r4, r5, r6, lr}
 800731e:	4d0d      	ldr	r5, [pc, #52]	@ (8007354 <__libc_init_array+0x38>)
 8007320:	4c0d      	ldr	r4, [pc, #52]	@ (8007358 <__libc_init_array+0x3c>)
 8007322:	1b64      	subs	r4, r4, r5
 8007324:	10a4      	asrs	r4, r4, #2
 8007326:	2600      	movs	r6, #0
 8007328:	42a6      	cmp	r6, r4
 800732a:	d109      	bne.n	8007340 <__libc_init_array+0x24>
 800732c:	4d0b      	ldr	r5, [pc, #44]	@ (800735c <__libc_init_array+0x40>)
 800732e:	4c0c      	ldr	r4, [pc, #48]	@ (8007360 <__libc_init_array+0x44>)
 8007330:	f000 fe3e 	bl	8007fb0 <_init>
 8007334:	1b64      	subs	r4, r4, r5
 8007336:	10a4      	asrs	r4, r4, #2
 8007338:	2600      	movs	r6, #0
 800733a:	42a6      	cmp	r6, r4
 800733c:	d105      	bne.n	800734a <__libc_init_array+0x2e>
 800733e:	bd70      	pop	{r4, r5, r6, pc}
 8007340:	f855 3b04 	ldr.w	r3, [r5], #4
 8007344:	4798      	blx	r3
 8007346:	3601      	adds	r6, #1
 8007348:	e7ee      	b.n	8007328 <__libc_init_array+0xc>
 800734a:	f855 3b04 	ldr.w	r3, [r5], #4
 800734e:	4798      	blx	r3
 8007350:	3601      	adds	r6, #1
 8007352:	e7f2      	b.n	800733a <__libc_init_array+0x1e>
 8007354:	08008180 	.word	0x08008180
 8007358:	08008180 	.word	0x08008180
 800735c:	08008180 	.word	0x08008180
 8007360:	08008184 	.word	0x08008184

08007364 <__retarget_lock_init_recursive>:
 8007364:	4770      	bx	lr

08007366 <__retarget_lock_acquire_recursive>:
 8007366:	4770      	bx	lr

08007368 <__retarget_lock_release_recursive>:
 8007368:	4770      	bx	lr

0800736a <__sfputc_r>:
 800736a:	6893      	ldr	r3, [r2, #8]
 800736c:	3b01      	subs	r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	b410      	push	{r4}
 8007372:	6093      	str	r3, [r2, #8]
 8007374:	da08      	bge.n	8007388 <__sfputc_r+0x1e>
 8007376:	6994      	ldr	r4, [r2, #24]
 8007378:	42a3      	cmp	r3, r4
 800737a:	db01      	blt.n	8007380 <__sfputc_r+0x16>
 800737c:	290a      	cmp	r1, #10
 800737e:	d103      	bne.n	8007388 <__sfputc_r+0x1e>
 8007380:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007384:	f000 bc5b 	b.w	8007c3e <__swbuf_r>
 8007388:	6813      	ldr	r3, [r2, #0]
 800738a:	1c58      	adds	r0, r3, #1
 800738c:	6010      	str	r0, [r2, #0]
 800738e:	7019      	strb	r1, [r3, #0]
 8007390:	4608      	mov	r0, r1
 8007392:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007396:	4770      	bx	lr

08007398 <__sfputs_r>:
 8007398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739a:	4606      	mov	r6, r0
 800739c:	460f      	mov	r7, r1
 800739e:	4614      	mov	r4, r2
 80073a0:	18d5      	adds	r5, r2, r3
 80073a2:	42ac      	cmp	r4, r5
 80073a4:	d101      	bne.n	80073aa <__sfputs_r+0x12>
 80073a6:	2000      	movs	r0, #0
 80073a8:	e007      	b.n	80073ba <__sfputs_r+0x22>
 80073aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ae:	463a      	mov	r2, r7
 80073b0:	4630      	mov	r0, r6
 80073b2:	f7ff ffda 	bl	800736a <__sfputc_r>
 80073b6:	1c43      	adds	r3, r0, #1
 80073b8:	d1f3      	bne.n	80073a2 <__sfputs_r+0xa>
 80073ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080073bc <_vfiprintf_r>:
 80073bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c0:	460d      	mov	r5, r1
 80073c2:	b09d      	sub	sp, #116	@ 0x74
 80073c4:	4614      	mov	r4, r2
 80073c6:	4698      	mov	r8, r3
 80073c8:	4606      	mov	r6, r0
 80073ca:	b118      	cbz	r0, 80073d4 <_vfiprintf_r+0x18>
 80073cc:	6a03      	ldr	r3, [r0, #32]
 80073ce:	b90b      	cbnz	r3, 80073d4 <_vfiprintf_r+0x18>
 80073d0:	f7ff fef0 	bl	80071b4 <__sinit>
 80073d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073d6:	07d9      	lsls	r1, r3, #31
 80073d8:	d405      	bmi.n	80073e6 <_vfiprintf_r+0x2a>
 80073da:	89ab      	ldrh	r3, [r5, #12]
 80073dc:	059a      	lsls	r2, r3, #22
 80073de:	d402      	bmi.n	80073e6 <_vfiprintf_r+0x2a>
 80073e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073e2:	f7ff ffc0 	bl	8007366 <__retarget_lock_acquire_recursive>
 80073e6:	89ab      	ldrh	r3, [r5, #12]
 80073e8:	071b      	lsls	r3, r3, #28
 80073ea:	d501      	bpl.n	80073f0 <_vfiprintf_r+0x34>
 80073ec:	692b      	ldr	r3, [r5, #16]
 80073ee:	b99b      	cbnz	r3, 8007418 <_vfiprintf_r+0x5c>
 80073f0:	4629      	mov	r1, r5
 80073f2:	4630      	mov	r0, r6
 80073f4:	f000 fc62 	bl	8007cbc <__swsetup_r>
 80073f8:	b170      	cbz	r0, 8007418 <_vfiprintf_r+0x5c>
 80073fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073fc:	07dc      	lsls	r4, r3, #31
 80073fe:	d504      	bpl.n	800740a <_vfiprintf_r+0x4e>
 8007400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007404:	b01d      	add	sp, #116	@ 0x74
 8007406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740a:	89ab      	ldrh	r3, [r5, #12]
 800740c:	0598      	lsls	r0, r3, #22
 800740e:	d4f7      	bmi.n	8007400 <_vfiprintf_r+0x44>
 8007410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007412:	f7ff ffa9 	bl	8007368 <__retarget_lock_release_recursive>
 8007416:	e7f3      	b.n	8007400 <_vfiprintf_r+0x44>
 8007418:	2300      	movs	r3, #0
 800741a:	9309      	str	r3, [sp, #36]	@ 0x24
 800741c:	2320      	movs	r3, #32
 800741e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007422:	f8cd 800c 	str.w	r8, [sp, #12]
 8007426:	2330      	movs	r3, #48	@ 0x30
 8007428:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80075d8 <_vfiprintf_r+0x21c>
 800742c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007430:	f04f 0901 	mov.w	r9, #1
 8007434:	4623      	mov	r3, r4
 8007436:	469a      	mov	sl, r3
 8007438:	f813 2b01 	ldrb.w	r2, [r3], #1
 800743c:	b10a      	cbz	r2, 8007442 <_vfiprintf_r+0x86>
 800743e:	2a25      	cmp	r2, #37	@ 0x25
 8007440:	d1f9      	bne.n	8007436 <_vfiprintf_r+0x7a>
 8007442:	ebba 0b04 	subs.w	fp, sl, r4
 8007446:	d00b      	beq.n	8007460 <_vfiprintf_r+0xa4>
 8007448:	465b      	mov	r3, fp
 800744a:	4622      	mov	r2, r4
 800744c:	4629      	mov	r1, r5
 800744e:	4630      	mov	r0, r6
 8007450:	f7ff ffa2 	bl	8007398 <__sfputs_r>
 8007454:	3001      	adds	r0, #1
 8007456:	f000 80a7 	beq.w	80075a8 <_vfiprintf_r+0x1ec>
 800745a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800745c:	445a      	add	r2, fp
 800745e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007460:	f89a 3000 	ldrb.w	r3, [sl]
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 809f 	beq.w	80075a8 <_vfiprintf_r+0x1ec>
 800746a:	2300      	movs	r3, #0
 800746c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007470:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007474:	f10a 0a01 	add.w	sl, sl, #1
 8007478:	9304      	str	r3, [sp, #16]
 800747a:	9307      	str	r3, [sp, #28]
 800747c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007480:	931a      	str	r3, [sp, #104]	@ 0x68
 8007482:	4654      	mov	r4, sl
 8007484:	2205      	movs	r2, #5
 8007486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800748a:	4853      	ldr	r0, [pc, #332]	@ (80075d8 <_vfiprintf_r+0x21c>)
 800748c:	f7f8 fea0 	bl	80001d0 <memchr>
 8007490:	9a04      	ldr	r2, [sp, #16]
 8007492:	b9d8      	cbnz	r0, 80074cc <_vfiprintf_r+0x110>
 8007494:	06d1      	lsls	r1, r2, #27
 8007496:	bf44      	itt	mi
 8007498:	2320      	movmi	r3, #32
 800749a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800749e:	0713      	lsls	r3, r2, #28
 80074a0:	bf44      	itt	mi
 80074a2:	232b      	movmi	r3, #43	@ 0x2b
 80074a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074a8:	f89a 3000 	ldrb.w	r3, [sl]
 80074ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80074ae:	d015      	beq.n	80074dc <_vfiprintf_r+0x120>
 80074b0:	9a07      	ldr	r2, [sp, #28]
 80074b2:	4654      	mov	r4, sl
 80074b4:	2000      	movs	r0, #0
 80074b6:	f04f 0c0a 	mov.w	ip, #10
 80074ba:	4621      	mov	r1, r4
 80074bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074c0:	3b30      	subs	r3, #48	@ 0x30
 80074c2:	2b09      	cmp	r3, #9
 80074c4:	d94b      	bls.n	800755e <_vfiprintf_r+0x1a2>
 80074c6:	b1b0      	cbz	r0, 80074f6 <_vfiprintf_r+0x13a>
 80074c8:	9207      	str	r2, [sp, #28]
 80074ca:	e014      	b.n	80074f6 <_vfiprintf_r+0x13a>
 80074cc:	eba0 0308 	sub.w	r3, r0, r8
 80074d0:	fa09 f303 	lsl.w	r3, r9, r3
 80074d4:	4313      	orrs	r3, r2
 80074d6:	9304      	str	r3, [sp, #16]
 80074d8:	46a2      	mov	sl, r4
 80074da:	e7d2      	b.n	8007482 <_vfiprintf_r+0xc6>
 80074dc:	9b03      	ldr	r3, [sp, #12]
 80074de:	1d19      	adds	r1, r3, #4
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	9103      	str	r1, [sp, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	bfbb      	ittet	lt
 80074e8:	425b      	neglt	r3, r3
 80074ea:	f042 0202 	orrlt.w	r2, r2, #2
 80074ee:	9307      	strge	r3, [sp, #28]
 80074f0:	9307      	strlt	r3, [sp, #28]
 80074f2:	bfb8      	it	lt
 80074f4:	9204      	strlt	r2, [sp, #16]
 80074f6:	7823      	ldrb	r3, [r4, #0]
 80074f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80074fa:	d10a      	bne.n	8007512 <_vfiprintf_r+0x156>
 80074fc:	7863      	ldrb	r3, [r4, #1]
 80074fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007500:	d132      	bne.n	8007568 <_vfiprintf_r+0x1ac>
 8007502:	9b03      	ldr	r3, [sp, #12]
 8007504:	1d1a      	adds	r2, r3, #4
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	9203      	str	r2, [sp, #12]
 800750a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800750e:	3402      	adds	r4, #2
 8007510:	9305      	str	r3, [sp, #20]
 8007512:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80075e8 <_vfiprintf_r+0x22c>
 8007516:	7821      	ldrb	r1, [r4, #0]
 8007518:	2203      	movs	r2, #3
 800751a:	4650      	mov	r0, sl
 800751c:	f7f8 fe58 	bl	80001d0 <memchr>
 8007520:	b138      	cbz	r0, 8007532 <_vfiprintf_r+0x176>
 8007522:	9b04      	ldr	r3, [sp, #16]
 8007524:	eba0 000a 	sub.w	r0, r0, sl
 8007528:	2240      	movs	r2, #64	@ 0x40
 800752a:	4082      	lsls	r2, r0
 800752c:	4313      	orrs	r3, r2
 800752e:	3401      	adds	r4, #1
 8007530:	9304      	str	r3, [sp, #16]
 8007532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007536:	4829      	ldr	r0, [pc, #164]	@ (80075dc <_vfiprintf_r+0x220>)
 8007538:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800753c:	2206      	movs	r2, #6
 800753e:	f7f8 fe47 	bl	80001d0 <memchr>
 8007542:	2800      	cmp	r0, #0
 8007544:	d03f      	beq.n	80075c6 <_vfiprintf_r+0x20a>
 8007546:	4b26      	ldr	r3, [pc, #152]	@ (80075e0 <_vfiprintf_r+0x224>)
 8007548:	bb1b      	cbnz	r3, 8007592 <_vfiprintf_r+0x1d6>
 800754a:	9b03      	ldr	r3, [sp, #12]
 800754c:	3307      	adds	r3, #7
 800754e:	f023 0307 	bic.w	r3, r3, #7
 8007552:	3308      	adds	r3, #8
 8007554:	9303      	str	r3, [sp, #12]
 8007556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007558:	443b      	add	r3, r7
 800755a:	9309      	str	r3, [sp, #36]	@ 0x24
 800755c:	e76a      	b.n	8007434 <_vfiprintf_r+0x78>
 800755e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007562:	460c      	mov	r4, r1
 8007564:	2001      	movs	r0, #1
 8007566:	e7a8      	b.n	80074ba <_vfiprintf_r+0xfe>
 8007568:	2300      	movs	r3, #0
 800756a:	3401      	adds	r4, #1
 800756c:	9305      	str	r3, [sp, #20]
 800756e:	4619      	mov	r1, r3
 8007570:	f04f 0c0a 	mov.w	ip, #10
 8007574:	4620      	mov	r0, r4
 8007576:	f810 2b01 	ldrb.w	r2, [r0], #1
 800757a:	3a30      	subs	r2, #48	@ 0x30
 800757c:	2a09      	cmp	r2, #9
 800757e:	d903      	bls.n	8007588 <_vfiprintf_r+0x1cc>
 8007580:	2b00      	cmp	r3, #0
 8007582:	d0c6      	beq.n	8007512 <_vfiprintf_r+0x156>
 8007584:	9105      	str	r1, [sp, #20]
 8007586:	e7c4      	b.n	8007512 <_vfiprintf_r+0x156>
 8007588:	fb0c 2101 	mla	r1, ip, r1, r2
 800758c:	4604      	mov	r4, r0
 800758e:	2301      	movs	r3, #1
 8007590:	e7f0      	b.n	8007574 <_vfiprintf_r+0x1b8>
 8007592:	ab03      	add	r3, sp, #12
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	462a      	mov	r2, r5
 8007598:	4b12      	ldr	r3, [pc, #72]	@ (80075e4 <_vfiprintf_r+0x228>)
 800759a:	a904      	add	r1, sp, #16
 800759c:	4630      	mov	r0, r6
 800759e:	f3af 8000 	nop.w
 80075a2:	4607      	mov	r7, r0
 80075a4:	1c78      	adds	r0, r7, #1
 80075a6:	d1d6      	bne.n	8007556 <_vfiprintf_r+0x19a>
 80075a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075aa:	07d9      	lsls	r1, r3, #31
 80075ac:	d405      	bmi.n	80075ba <_vfiprintf_r+0x1fe>
 80075ae:	89ab      	ldrh	r3, [r5, #12]
 80075b0:	059a      	lsls	r2, r3, #22
 80075b2:	d402      	bmi.n	80075ba <_vfiprintf_r+0x1fe>
 80075b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075b6:	f7ff fed7 	bl	8007368 <__retarget_lock_release_recursive>
 80075ba:	89ab      	ldrh	r3, [r5, #12]
 80075bc:	065b      	lsls	r3, r3, #25
 80075be:	f53f af1f 	bmi.w	8007400 <_vfiprintf_r+0x44>
 80075c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075c4:	e71e      	b.n	8007404 <_vfiprintf_r+0x48>
 80075c6:	ab03      	add	r3, sp, #12
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	462a      	mov	r2, r5
 80075cc:	4b05      	ldr	r3, [pc, #20]	@ (80075e4 <_vfiprintf_r+0x228>)
 80075ce:	a904      	add	r1, sp, #16
 80075d0:	4630      	mov	r0, r6
 80075d2:	f000 f91b 	bl	800780c <_printf_i>
 80075d6:	e7e4      	b.n	80075a2 <_vfiprintf_r+0x1e6>
 80075d8:	08008143 	.word	0x08008143
 80075dc:	0800814d 	.word	0x0800814d
 80075e0:	00000000 	.word	0x00000000
 80075e4:	08007399 	.word	0x08007399
 80075e8:	08008149 	.word	0x08008149

080075ec <sbrk_aligned>:
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	4e0f      	ldr	r6, [pc, #60]	@ (800762c <sbrk_aligned+0x40>)
 80075f0:	460c      	mov	r4, r1
 80075f2:	6831      	ldr	r1, [r6, #0]
 80075f4:	4605      	mov	r5, r0
 80075f6:	b911      	cbnz	r1, 80075fe <sbrk_aligned+0x12>
 80075f8:	f000 fc4c 	bl	8007e94 <_sbrk_r>
 80075fc:	6030      	str	r0, [r6, #0]
 80075fe:	4621      	mov	r1, r4
 8007600:	4628      	mov	r0, r5
 8007602:	f000 fc47 	bl	8007e94 <_sbrk_r>
 8007606:	1c43      	adds	r3, r0, #1
 8007608:	d103      	bne.n	8007612 <sbrk_aligned+0x26>
 800760a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800760e:	4620      	mov	r0, r4
 8007610:	bd70      	pop	{r4, r5, r6, pc}
 8007612:	1cc4      	adds	r4, r0, #3
 8007614:	f024 0403 	bic.w	r4, r4, #3
 8007618:	42a0      	cmp	r0, r4
 800761a:	d0f8      	beq.n	800760e <sbrk_aligned+0x22>
 800761c:	1a21      	subs	r1, r4, r0
 800761e:	4628      	mov	r0, r5
 8007620:	f000 fc38 	bl	8007e94 <_sbrk_r>
 8007624:	3001      	adds	r0, #1
 8007626:	d1f2      	bne.n	800760e <sbrk_aligned+0x22>
 8007628:	e7ef      	b.n	800760a <sbrk_aligned+0x1e>
 800762a:	bf00      	nop
 800762c:	2000054c 	.word	0x2000054c

08007630 <_malloc_r>:
 8007630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007634:	1ccd      	adds	r5, r1, #3
 8007636:	f025 0503 	bic.w	r5, r5, #3
 800763a:	3508      	adds	r5, #8
 800763c:	2d0c      	cmp	r5, #12
 800763e:	bf38      	it	cc
 8007640:	250c      	movcc	r5, #12
 8007642:	2d00      	cmp	r5, #0
 8007644:	4606      	mov	r6, r0
 8007646:	db01      	blt.n	800764c <_malloc_r+0x1c>
 8007648:	42a9      	cmp	r1, r5
 800764a:	d904      	bls.n	8007656 <_malloc_r+0x26>
 800764c:	230c      	movs	r3, #12
 800764e:	6033      	str	r3, [r6, #0]
 8007650:	2000      	movs	r0, #0
 8007652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007656:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800772c <_malloc_r+0xfc>
 800765a:	f000 faa1 	bl	8007ba0 <__malloc_lock>
 800765e:	f8d8 3000 	ldr.w	r3, [r8]
 8007662:	461c      	mov	r4, r3
 8007664:	bb44      	cbnz	r4, 80076b8 <_malloc_r+0x88>
 8007666:	4629      	mov	r1, r5
 8007668:	4630      	mov	r0, r6
 800766a:	f7ff ffbf 	bl	80075ec <sbrk_aligned>
 800766e:	1c43      	adds	r3, r0, #1
 8007670:	4604      	mov	r4, r0
 8007672:	d158      	bne.n	8007726 <_malloc_r+0xf6>
 8007674:	f8d8 4000 	ldr.w	r4, [r8]
 8007678:	4627      	mov	r7, r4
 800767a:	2f00      	cmp	r7, #0
 800767c:	d143      	bne.n	8007706 <_malloc_r+0xd6>
 800767e:	2c00      	cmp	r4, #0
 8007680:	d04b      	beq.n	800771a <_malloc_r+0xea>
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	4639      	mov	r1, r7
 8007686:	4630      	mov	r0, r6
 8007688:	eb04 0903 	add.w	r9, r4, r3
 800768c:	f000 fc02 	bl	8007e94 <_sbrk_r>
 8007690:	4581      	cmp	r9, r0
 8007692:	d142      	bne.n	800771a <_malloc_r+0xea>
 8007694:	6821      	ldr	r1, [r4, #0]
 8007696:	1a6d      	subs	r5, r5, r1
 8007698:	4629      	mov	r1, r5
 800769a:	4630      	mov	r0, r6
 800769c:	f7ff ffa6 	bl	80075ec <sbrk_aligned>
 80076a0:	3001      	adds	r0, #1
 80076a2:	d03a      	beq.n	800771a <_malloc_r+0xea>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	442b      	add	r3, r5
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	f8d8 3000 	ldr.w	r3, [r8]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	bb62      	cbnz	r2, 800770c <_malloc_r+0xdc>
 80076b2:	f8c8 7000 	str.w	r7, [r8]
 80076b6:	e00f      	b.n	80076d8 <_malloc_r+0xa8>
 80076b8:	6822      	ldr	r2, [r4, #0]
 80076ba:	1b52      	subs	r2, r2, r5
 80076bc:	d420      	bmi.n	8007700 <_malloc_r+0xd0>
 80076be:	2a0b      	cmp	r2, #11
 80076c0:	d917      	bls.n	80076f2 <_malloc_r+0xc2>
 80076c2:	1961      	adds	r1, r4, r5
 80076c4:	42a3      	cmp	r3, r4
 80076c6:	6025      	str	r5, [r4, #0]
 80076c8:	bf18      	it	ne
 80076ca:	6059      	strne	r1, [r3, #4]
 80076cc:	6863      	ldr	r3, [r4, #4]
 80076ce:	bf08      	it	eq
 80076d0:	f8c8 1000 	streq.w	r1, [r8]
 80076d4:	5162      	str	r2, [r4, r5]
 80076d6:	604b      	str	r3, [r1, #4]
 80076d8:	4630      	mov	r0, r6
 80076da:	f000 fa67 	bl	8007bac <__malloc_unlock>
 80076de:	f104 000b 	add.w	r0, r4, #11
 80076e2:	1d23      	adds	r3, r4, #4
 80076e4:	f020 0007 	bic.w	r0, r0, #7
 80076e8:	1ac2      	subs	r2, r0, r3
 80076ea:	bf1c      	itt	ne
 80076ec:	1a1b      	subne	r3, r3, r0
 80076ee:	50a3      	strne	r3, [r4, r2]
 80076f0:	e7af      	b.n	8007652 <_malloc_r+0x22>
 80076f2:	6862      	ldr	r2, [r4, #4]
 80076f4:	42a3      	cmp	r3, r4
 80076f6:	bf0c      	ite	eq
 80076f8:	f8c8 2000 	streq.w	r2, [r8]
 80076fc:	605a      	strne	r2, [r3, #4]
 80076fe:	e7eb      	b.n	80076d8 <_malloc_r+0xa8>
 8007700:	4623      	mov	r3, r4
 8007702:	6864      	ldr	r4, [r4, #4]
 8007704:	e7ae      	b.n	8007664 <_malloc_r+0x34>
 8007706:	463c      	mov	r4, r7
 8007708:	687f      	ldr	r7, [r7, #4]
 800770a:	e7b6      	b.n	800767a <_malloc_r+0x4a>
 800770c:	461a      	mov	r2, r3
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	42a3      	cmp	r3, r4
 8007712:	d1fb      	bne.n	800770c <_malloc_r+0xdc>
 8007714:	2300      	movs	r3, #0
 8007716:	6053      	str	r3, [r2, #4]
 8007718:	e7de      	b.n	80076d8 <_malloc_r+0xa8>
 800771a:	230c      	movs	r3, #12
 800771c:	6033      	str	r3, [r6, #0]
 800771e:	4630      	mov	r0, r6
 8007720:	f000 fa44 	bl	8007bac <__malloc_unlock>
 8007724:	e794      	b.n	8007650 <_malloc_r+0x20>
 8007726:	6005      	str	r5, [r0, #0]
 8007728:	e7d6      	b.n	80076d8 <_malloc_r+0xa8>
 800772a:	bf00      	nop
 800772c:	20000550 	.word	0x20000550

08007730 <_printf_common>:
 8007730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007734:	4616      	mov	r6, r2
 8007736:	4698      	mov	r8, r3
 8007738:	688a      	ldr	r2, [r1, #8]
 800773a:	690b      	ldr	r3, [r1, #16]
 800773c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007740:	4293      	cmp	r3, r2
 8007742:	bfb8      	it	lt
 8007744:	4613      	movlt	r3, r2
 8007746:	6033      	str	r3, [r6, #0]
 8007748:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800774c:	4607      	mov	r7, r0
 800774e:	460c      	mov	r4, r1
 8007750:	b10a      	cbz	r2, 8007756 <_printf_common+0x26>
 8007752:	3301      	adds	r3, #1
 8007754:	6033      	str	r3, [r6, #0]
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	0699      	lsls	r1, r3, #26
 800775a:	bf42      	ittt	mi
 800775c:	6833      	ldrmi	r3, [r6, #0]
 800775e:	3302      	addmi	r3, #2
 8007760:	6033      	strmi	r3, [r6, #0]
 8007762:	6825      	ldr	r5, [r4, #0]
 8007764:	f015 0506 	ands.w	r5, r5, #6
 8007768:	d106      	bne.n	8007778 <_printf_common+0x48>
 800776a:	f104 0a19 	add.w	sl, r4, #25
 800776e:	68e3      	ldr	r3, [r4, #12]
 8007770:	6832      	ldr	r2, [r6, #0]
 8007772:	1a9b      	subs	r3, r3, r2
 8007774:	42ab      	cmp	r3, r5
 8007776:	dc26      	bgt.n	80077c6 <_printf_common+0x96>
 8007778:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800777c:	6822      	ldr	r2, [r4, #0]
 800777e:	3b00      	subs	r3, #0
 8007780:	bf18      	it	ne
 8007782:	2301      	movne	r3, #1
 8007784:	0692      	lsls	r2, r2, #26
 8007786:	d42b      	bmi.n	80077e0 <_printf_common+0xb0>
 8007788:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800778c:	4641      	mov	r1, r8
 800778e:	4638      	mov	r0, r7
 8007790:	47c8      	blx	r9
 8007792:	3001      	adds	r0, #1
 8007794:	d01e      	beq.n	80077d4 <_printf_common+0xa4>
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	6922      	ldr	r2, [r4, #16]
 800779a:	f003 0306 	and.w	r3, r3, #6
 800779e:	2b04      	cmp	r3, #4
 80077a0:	bf02      	ittt	eq
 80077a2:	68e5      	ldreq	r5, [r4, #12]
 80077a4:	6833      	ldreq	r3, [r6, #0]
 80077a6:	1aed      	subeq	r5, r5, r3
 80077a8:	68a3      	ldr	r3, [r4, #8]
 80077aa:	bf0c      	ite	eq
 80077ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077b0:	2500      	movne	r5, #0
 80077b2:	4293      	cmp	r3, r2
 80077b4:	bfc4      	itt	gt
 80077b6:	1a9b      	subgt	r3, r3, r2
 80077b8:	18ed      	addgt	r5, r5, r3
 80077ba:	2600      	movs	r6, #0
 80077bc:	341a      	adds	r4, #26
 80077be:	42b5      	cmp	r5, r6
 80077c0:	d11a      	bne.n	80077f8 <_printf_common+0xc8>
 80077c2:	2000      	movs	r0, #0
 80077c4:	e008      	b.n	80077d8 <_printf_common+0xa8>
 80077c6:	2301      	movs	r3, #1
 80077c8:	4652      	mov	r2, sl
 80077ca:	4641      	mov	r1, r8
 80077cc:	4638      	mov	r0, r7
 80077ce:	47c8      	blx	r9
 80077d0:	3001      	adds	r0, #1
 80077d2:	d103      	bne.n	80077dc <_printf_common+0xac>
 80077d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077dc:	3501      	adds	r5, #1
 80077de:	e7c6      	b.n	800776e <_printf_common+0x3e>
 80077e0:	18e1      	adds	r1, r4, r3
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	2030      	movs	r0, #48	@ 0x30
 80077e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077ea:	4422      	add	r2, r4
 80077ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077f4:	3302      	adds	r3, #2
 80077f6:	e7c7      	b.n	8007788 <_printf_common+0x58>
 80077f8:	2301      	movs	r3, #1
 80077fa:	4622      	mov	r2, r4
 80077fc:	4641      	mov	r1, r8
 80077fe:	4638      	mov	r0, r7
 8007800:	47c8      	blx	r9
 8007802:	3001      	adds	r0, #1
 8007804:	d0e6      	beq.n	80077d4 <_printf_common+0xa4>
 8007806:	3601      	adds	r6, #1
 8007808:	e7d9      	b.n	80077be <_printf_common+0x8e>
	...

0800780c <_printf_i>:
 800780c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007810:	7e0f      	ldrb	r7, [r1, #24]
 8007812:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007814:	2f78      	cmp	r7, #120	@ 0x78
 8007816:	4691      	mov	r9, r2
 8007818:	4680      	mov	r8, r0
 800781a:	460c      	mov	r4, r1
 800781c:	469a      	mov	sl, r3
 800781e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007822:	d807      	bhi.n	8007834 <_printf_i+0x28>
 8007824:	2f62      	cmp	r7, #98	@ 0x62
 8007826:	d80a      	bhi.n	800783e <_printf_i+0x32>
 8007828:	2f00      	cmp	r7, #0
 800782a:	f000 80d1 	beq.w	80079d0 <_printf_i+0x1c4>
 800782e:	2f58      	cmp	r7, #88	@ 0x58
 8007830:	f000 80b8 	beq.w	80079a4 <_printf_i+0x198>
 8007834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007838:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800783c:	e03a      	b.n	80078b4 <_printf_i+0xa8>
 800783e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007842:	2b15      	cmp	r3, #21
 8007844:	d8f6      	bhi.n	8007834 <_printf_i+0x28>
 8007846:	a101      	add	r1, pc, #4	@ (adr r1, 800784c <_printf_i+0x40>)
 8007848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800784c:	080078a5 	.word	0x080078a5
 8007850:	080078b9 	.word	0x080078b9
 8007854:	08007835 	.word	0x08007835
 8007858:	08007835 	.word	0x08007835
 800785c:	08007835 	.word	0x08007835
 8007860:	08007835 	.word	0x08007835
 8007864:	080078b9 	.word	0x080078b9
 8007868:	08007835 	.word	0x08007835
 800786c:	08007835 	.word	0x08007835
 8007870:	08007835 	.word	0x08007835
 8007874:	08007835 	.word	0x08007835
 8007878:	080079b7 	.word	0x080079b7
 800787c:	080078e3 	.word	0x080078e3
 8007880:	08007971 	.word	0x08007971
 8007884:	08007835 	.word	0x08007835
 8007888:	08007835 	.word	0x08007835
 800788c:	080079d9 	.word	0x080079d9
 8007890:	08007835 	.word	0x08007835
 8007894:	080078e3 	.word	0x080078e3
 8007898:	08007835 	.word	0x08007835
 800789c:	08007835 	.word	0x08007835
 80078a0:	08007979 	.word	0x08007979
 80078a4:	6833      	ldr	r3, [r6, #0]
 80078a6:	1d1a      	adds	r2, r3, #4
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6032      	str	r2, [r6, #0]
 80078ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078b4:	2301      	movs	r3, #1
 80078b6:	e09c      	b.n	80079f2 <_printf_i+0x1e6>
 80078b8:	6833      	ldr	r3, [r6, #0]
 80078ba:	6820      	ldr	r0, [r4, #0]
 80078bc:	1d19      	adds	r1, r3, #4
 80078be:	6031      	str	r1, [r6, #0]
 80078c0:	0606      	lsls	r6, r0, #24
 80078c2:	d501      	bpl.n	80078c8 <_printf_i+0xbc>
 80078c4:	681d      	ldr	r5, [r3, #0]
 80078c6:	e003      	b.n	80078d0 <_printf_i+0xc4>
 80078c8:	0645      	lsls	r5, r0, #25
 80078ca:	d5fb      	bpl.n	80078c4 <_printf_i+0xb8>
 80078cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078d0:	2d00      	cmp	r5, #0
 80078d2:	da03      	bge.n	80078dc <_printf_i+0xd0>
 80078d4:	232d      	movs	r3, #45	@ 0x2d
 80078d6:	426d      	negs	r5, r5
 80078d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078dc:	4858      	ldr	r0, [pc, #352]	@ (8007a40 <_printf_i+0x234>)
 80078de:	230a      	movs	r3, #10
 80078e0:	e011      	b.n	8007906 <_printf_i+0xfa>
 80078e2:	6821      	ldr	r1, [r4, #0]
 80078e4:	6833      	ldr	r3, [r6, #0]
 80078e6:	0608      	lsls	r0, r1, #24
 80078e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80078ec:	d402      	bmi.n	80078f4 <_printf_i+0xe8>
 80078ee:	0649      	lsls	r1, r1, #25
 80078f0:	bf48      	it	mi
 80078f2:	b2ad      	uxthmi	r5, r5
 80078f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80078f6:	4852      	ldr	r0, [pc, #328]	@ (8007a40 <_printf_i+0x234>)
 80078f8:	6033      	str	r3, [r6, #0]
 80078fa:	bf14      	ite	ne
 80078fc:	230a      	movne	r3, #10
 80078fe:	2308      	moveq	r3, #8
 8007900:	2100      	movs	r1, #0
 8007902:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007906:	6866      	ldr	r6, [r4, #4]
 8007908:	60a6      	str	r6, [r4, #8]
 800790a:	2e00      	cmp	r6, #0
 800790c:	db05      	blt.n	800791a <_printf_i+0x10e>
 800790e:	6821      	ldr	r1, [r4, #0]
 8007910:	432e      	orrs	r6, r5
 8007912:	f021 0104 	bic.w	r1, r1, #4
 8007916:	6021      	str	r1, [r4, #0]
 8007918:	d04b      	beq.n	80079b2 <_printf_i+0x1a6>
 800791a:	4616      	mov	r6, r2
 800791c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007920:	fb03 5711 	mls	r7, r3, r1, r5
 8007924:	5dc7      	ldrb	r7, [r0, r7]
 8007926:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800792a:	462f      	mov	r7, r5
 800792c:	42bb      	cmp	r3, r7
 800792e:	460d      	mov	r5, r1
 8007930:	d9f4      	bls.n	800791c <_printf_i+0x110>
 8007932:	2b08      	cmp	r3, #8
 8007934:	d10b      	bne.n	800794e <_printf_i+0x142>
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	07df      	lsls	r7, r3, #31
 800793a:	d508      	bpl.n	800794e <_printf_i+0x142>
 800793c:	6923      	ldr	r3, [r4, #16]
 800793e:	6861      	ldr	r1, [r4, #4]
 8007940:	4299      	cmp	r1, r3
 8007942:	bfde      	ittt	le
 8007944:	2330      	movle	r3, #48	@ 0x30
 8007946:	f806 3c01 	strble.w	r3, [r6, #-1]
 800794a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800794e:	1b92      	subs	r2, r2, r6
 8007950:	6122      	str	r2, [r4, #16]
 8007952:	f8cd a000 	str.w	sl, [sp]
 8007956:	464b      	mov	r3, r9
 8007958:	aa03      	add	r2, sp, #12
 800795a:	4621      	mov	r1, r4
 800795c:	4640      	mov	r0, r8
 800795e:	f7ff fee7 	bl	8007730 <_printf_common>
 8007962:	3001      	adds	r0, #1
 8007964:	d14a      	bne.n	80079fc <_printf_i+0x1f0>
 8007966:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800796a:	b004      	add	sp, #16
 800796c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	f043 0320 	orr.w	r3, r3, #32
 8007976:	6023      	str	r3, [r4, #0]
 8007978:	4832      	ldr	r0, [pc, #200]	@ (8007a44 <_printf_i+0x238>)
 800797a:	2778      	movs	r7, #120	@ 0x78
 800797c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	6831      	ldr	r1, [r6, #0]
 8007984:	061f      	lsls	r7, r3, #24
 8007986:	f851 5b04 	ldr.w	r5, [r1], #4
 800798a:	d402      	bmi.n	8007992 <_printf_i+0x186>
 800798c:	065f      	lsls	r7, r3, #25
 800798e:	bf48      	it	mi
 8007990:	b2ad      	uxthmi	r5, r5
 8007992:	6031      	str	r1, [r6, #0]
 8007994:	07d9      	lsls	r1, r3, #31
 8007996:	bf44      	itt	mi
 8007998:	f043 0320 	orrmi.w	r3, r3, #32
 800799c:	6023      	strmi	r3, [r4, #0]
 800799e:	b11d      	cbz	r5, 80079a8 <_printf_i+0x19c>
 80079a0:	2310      	movs	r3, #16
 80079a2:	e7ad      	b.n	8007900 <_printf_i+0xf4>
 80079a4:	4826      	ldr	r0, [pc, #152]	@ (8007a40 <_printf_i+0x234>)
 80079a6:	e7e9      	b.n	800797c <_printf_i+0x170>
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	f023 0320 	bic.w	r3, r3, #32
 80079ae:	6023      	str	r3, [r4, #0]
 80079b0:	e7f6      	b.n	80079a0 <_printf_i+0x194>
 80079b2:	4616      	mov	r6, r2
 80079b4:	e7bd      	b.n	8007932 <_printf_i+0x126>
 80079b6:	6833      	ldr	r3, [r6, #0]
 80079b8:	6825      	ldr	r5, [r4, #0]
 80079ba:	6961      	ldr	r1, [r4, #20]
 80079bc:	1d18      	adds	r0, r3, #4
 80079be:	6030      	str	r0, [r6, #0]
 80079c0:	062e      	lsls	r6, r5, #24
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	d501      	bpl.n	80079ca <_printf_i+0x1be>
 80079c6:	6019      	str	r1, [r3, #0]
 80079c8:	e002      	b.n	80079d0 <_printf_i+0x1c4>
 80079ca:	0668      	lsls	r0, r5, #25
 80079cc:	d5fb      	bpl.n	80079c6 <_printf_i+0x1ba>
 80079ce:	8019      	strh	r1, [r3, #0]
 80079d0:	2300      	movs	r3, #0
 80079d2:	6123      	str	r3, [r4, #16]
 80079d4:	4616      	mov	r6, r2
 80079d6:	e7bc      	b.n	8007952 <_printf_i+0x146>
 80079d8:	6833      	ldr	r3, [r6, #0]
 80079da:	1d1a      	adds	r2, r3, #4
 80079dc:	6032      	str	r2, [r6, #0]
 80079de:	681e      	ldr	r6, [r3, #0]
 80079e0:	6862      	ldr	r2, [r4, #4]
 80079e2:	2100      	movs	r1, #0
 80079e4:	4630      	mov	r0, r6
 80079e6:	f7f8 fbf3 	bl	80001d0 <memchr>
 80079ea:	b108      	cbz	r0, 80079f0 <_printf_i+0x1e4>
 80079ec:	1b80      	subs	r0, r0, r6
 80079ee:	6060      	str	r0, [r4, #4]
 80079f0:	6863      	ldr	r3, [r4, #4]
 80079f2:	6123      	str	r3, [r4, #16]
 80079f4:	2300      	movs	r3, #0
 80079f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079fa:	e7aa      	b.n	8007952 <_printf_i+0x146>
 80079fc:	6923      	ldr	r3, [r4, #16]
 80079fe:	4632      	mov	r2, r6
 8007a00:	4649      	mov	r1, r9
 8007a02:	4640      	mov	r0, r8
 8007a04:	47d0      	blx	sl
 8007a06:	3001      	adds	r0, #1
 8007a08:	d0ad      	beq.n	8007966 <_printf_i+0x15a>
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	079b      	lsls	r3, r3, #30
 8007a0e:	d413      	bmi.n	8007a38 <_printf_i+0x22c>
 8007a10:	68e0      	ldr	r0, [r4, #12]
 8007a12:	9b03      	ldr	r3, [sp, #12]
 8007a14:	4298      	cmp	r0, r3
 8007a16:	bfb8      	it	lt
 8007a18:	4618      	movlt	r0, r3
 8007a1a:	e7a6      	b.n	800796a <_printf_i+0x15e>
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	4632      	mov	r2, r6
 8007a20:	4649      	mov	r1, r9
 8007a22:	4640      	mov	r0, r8
 8007a24:	47d0      	blx	sl
 8007a26:	3001      	adds	r0, #1
 8007a28:	d09d      	beq.n	8007966 <_printf_i+0x15a>
 8007a2a:	3501      	adds	r5, #1
 8007a2c:	68e3      	ldr	r3, [r4, #12]
 8007a2e:	9903      	ldr	r1, [sp, #12]
 8007a30:	1a5b      	subs	r3, r3, r1
 8007a32:	42ab      	cmp	r3, r5
 8007a34:	dcf2      	bgt.n	8007a1c <_printf_i+0x210>
 8007a36:	e7eb      	b.n	8007a10 <_printf_i+0x204>
 8007a38:	2500      	movs	r5, #0
 8007a3a:	f104 0619 	add.w	r6, r4, #25
 8007a3e:	e7f5      	b.n	8007a2c <_printf_i+0x220>
 8007a40:	08008154 	.word	0x08008154
 8007a44:	08008165 	.word	0x08008165

08007a48 <__sflush_r>:
 8007a48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a50:	0716      	lsls	r6, r2, #28
 8007a52:	4605      	mov	r5, r0
 8007a54:	460c      	mov	r4, r1
 8007a56:	d454      	bmi.n	8007b02 <__sflush_r+0xba>
 8007a58:	684b      	ldr	r3, [r1, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	dc02      	bgt.n	8007a64 <__sflush_r+0x1c>
 8007a5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	dd48      	ble.n	8007af6 <__sflush_r+0xae>
 8007a64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a66:	2e00      	cmp	r6, #0
 8007a68:	d045      	beq.n	8007af6 <__sflush_r+0xae>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a70:	682f      	ldr	r7, [r5, #0]
 8007a72:	6a21      	ldr	r1, [r4, #32]
 8007a74:	602b      	str	r3, [r5, #0]
 8007a76:	d030      	beq.n	8007ada <__sflush_r+0x92>
 8007a78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	0759      	lsls	r1, r3, #29
 8007a7e:	d505      	bpl.n	8007a8c <__sflush_r+0x44>
 8007a80:	6863      	ldr	r3, [r4, #4]
 8007a82:	1ad2      	subs	r2, r2, r3
 8007a84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007a86:	b10b      	cbz	r3, 8007a8c <__sflush_r+0x44>
 8007a88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a8a:	1ad2      	subs	r2, r2, r3
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a90:	6a21      	ldr	r1, [r4, #32]
 8007a92:	4628      	mov	r0, r5
 8007a94:	47b0      	blx	r6
 8007a96:	1c43      	adds	r3, r0, #1
 8007a98:	89a3      	ldrh	r3, [r4, #12]
 8007a9a:	d106      	bne.n	8007aaa <__sflush_r+0x62>
 8007a9c:	6829      	ldr	r1, [r5, #0]
 8007a9e:	291d      	cmp	r1, #29
 8007aa0:	d82b      	bhi.n	8007afa <__sflush_r+0xb2>
 8007aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8007b4c <__sflush_r+0x104>)
 8007aa4:	40ca      	lsrs	r2, r1
 8007aa6:	07d6      	lsls	r6, r2, #31
 8007aa8:	d527      	bpl.n	8007afa <__sflush_r+0xb2>
 8007aaa:	2200      	movs	r2, #0
 8007aac:	6062      	str	r2, [r4, #4]
 8007aae:	04d9      	lsls	r1, r3, #19
 8007ab0:	6922      	ldr	r2, [r4, #16]
 8007ab2:	6022      	str	r2, [r4, #0]
 8007ab4:	d504      	bpl.n	8007ac0 <__sflush_r+0x78>
 8007ab6:	1c42      	adds	r2, r0, #1
 8007ab8:	d101      	bne.n	8007abe <__sflush_r+0x76>
 8007aba:	682b      	ldr	r3, [r5, #0]
 8007abc:	b903      	cbnz	r3, 8007ac0 <__sflush_r+0x78>
 8007abe:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ac0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ac2:	602f      	str	r7, [r5, #0]
 8007ac4:	b1b9      	cbz	r1, 8007af6 <__sflush_r+0xae>
 8007ac6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007aca:	4299      	cmp	r1, r3
 8007acc:	d002      	beq.n	8007ad4 <__sflush_r+0x8c>
 8007ace:	4628      	mov	r0, r5
 8007ad0:	f000 fa24 	bl	8007f1c <_free_r>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ad8:	e00d      	b.n	8007af6 <__sflush_r+0xae>
 8007ada:	2301      	movs	r3, #1
 8007adc:	4628      	mov	r0, r5
 8007ade:	47b0      	blx	r6
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	1c50      	adds	r0, r2, #1
 8007ae4:	d1c9      	bne.n	8007a7a <__sflush_r+0x32>
 8007ae6:	682b      	ldr	r3, [r5, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d0c6      	beq.n	8007a7a <__sflush_r+0x32>
 8007aec:	2b1d      	cmp	r3, #29
 8007aee:	d001      	beq.n	8007af4 <__sflush_r+0xac>
 8007af0:	2b16      	cmp	r3, #22
 8007af2:	d11e      	bne.n	8007b32 <__sflush_r+0xea>
 8007af4:	602f      	str	r7, [r5, #0]
 8007af6:	2000      	movs	r0, #0
 8007af8:	e022      	b.n	8007b40 <__sflush_r+0xf8>
 8007afa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007afe:	b21b      	sxth	r3, r3
 8007b00:	e01b      	b.n	8007b3a <__sflush_r+0xf2>
 8007b02:	690f      	ldr	r7, [r1, #16]
 8007b04:	2f00      	cmp	r7, #0
 8007b06:	d0f6      	beq.n	8007af6 <__sflush_r+0xae>
 8007b08:	0793      	lsls	r3, r2, #30
 8007b0a:	680e      	ldr	r6, [r1, #0]
 8007b0c:	bf08      	it	eq
 8007b0e:	694b      	ldreq	r3, [r1, #20]
 8007b10:	600f      	str	r7, [r1, #0]
 8007b12:	bf18      	it	ne
 8007b14:	2300      	movne	r3, #0
 8007b16:	eba6 0807 	sub.w	r8, r6, r7
 8007b1a:	608b      	str	r3, [r1, #8]
 8007b1c:	f1b8 0f00 	cmp.w	r8, #0
 8007b20:	dde9      	ble.n	8007af6 <__sflush_r+0xae>
 8007b22:	6a21      	ldr	r1, [r4, #32]
 8007b24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b26:	4643      	mov	r3, r8
 8007b28:	463a      	mov	r2, r7
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	47b0      	blx	r6
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	dc08      	bgt.n	8007b44 <__sflush_r+0xfc>
 8007b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b3a:	81a3      	strh	r3, [r4, #12]
 8007b3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b44:	4407      	add	r7, r0
 8007b46:	eba8 0800 	sub.w	r8, r8, r0
 8007b4a:	e7e7      	b.n	8007b1c <__sflush_r+0xd4>
 8007b4c:	20400001 	.word	0x20400001

08007b50 <_fflush_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	690b      	ldr	r3, [r1, #16]
 8007b54:	4605      	mov	r5, r0
 8007b56:	460c      	mov	r4, r1
 8007b58:	b913      	cbnz	r3, 8007b60 <_fflush_r+0x10>
 8007b5a:	2500      	movs	r5, #0
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	bd38      	pop	{r3, r4, r5, pc}
 8007b60:	b118      	cbz	r0, 8007b6a <_fflush_r+0x1a>
 8007b62:	6a03      	ldr	r3, [r0, #32]
 8007b64:	b90b      	cbnz	r3, 8007b6a <_fflush_r+0x1a>
 8007b66:	f7ff fb25 	bl	80071b4 <__sinit>
 8007b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d0f3      	beq.n	8007b5a <_fflush_r+0xa>
 8007b72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b74:	07d0      	lsls	r0, r2, #31
 8007b76:	d404      	bmi.n	8007b82 <_fflush_r+0x32>
 8007b78:	0599      	lsls	r1, r3, #22
 8007b7a:	d402      	bmi.n	8007b82 <_fflush_r+0x32>
 8007b7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b7e:	f7ff fbf2 	bl	8007366 <__retarget_lock_acquire_recursive>
 8007b82:	4628      	mov	r0, r5
 8007b84:	4621      	mov	r1, r4
 8007b86:	f7ff ff5f 	bl	8007a48 <__sflush_r>
 8007b8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b8c:	07da      	lsls	r2, r3, #31
 8007b8e:	4605      	mov	r5, r0
 8007b90:	d4e4      	bmi.n	8007b5c <_fflush_r+0xc>
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	059b      	lsls	r3, r3, #22
 8007b96:	d4e1      	bmi.n	8007b5c <_fflush_r+0xc>
 8007b98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b9a:	f7ff fbe5 	bl	8007368 <__retarget_lock_release_recursive>
 8007b9e:	e7dd      	b.n	8007b5c <_fflush_r+0xc>

08007ba0 <__malloc_lock>:
 8007ba0:	4801      	ldr	r0, [pc, #4]	@ (8007ba8 <__malloc_lock+0x8>)
 8007ba2:	f7ff bbe0 	b.w	8007366 <__retarget_lock_acquire_recursive>
 8007ba6:	bf00      	nop
 8007ba8:	20000548 	.word	0x20000548

08007bac <__malloc_unlock>:
 8007bac:	4801      	ldr	r0, [pc, #4]	@ (8007bb4 <__malloc_unlock+0x8>)
 8007bae:	f7ff bbdb 	b.w	8007368 <__retarget_lock_release_recursive>
 8007bb2:	bf00      	nop
 8007bb4:	20000548 	.word	0x20000548

08007bb8 <__sread>:
 8007bb8:	b510      	push	{r4, lr}
 8007bba:	460c      	mov	r4, r1
 8007bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc0:	f000 f956 	bl	8007e70 <_read_r>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	bfab      	itete	ge
 8007bc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007bca:	89a3      	ldrhlt	r3, [r4, #12]
 8007bcc:	181b      	addge	r3, r3, r0
 8007bce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bd2:	bfac      	ite	ge
 8007bd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bd6:	81a3      	strhlt	r3, [r4, #12]
 8007bd8:	bd10      	pop	{r4, pc}

08007bda <__swrite>:
 8007bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bde:	461f      	mov	r7, r3
 8007be0:	898b      	ldrh	r3, [r1, #12]
 8007be2:	05db      	lsls	r3, r3, #23
 8007be4:	4605      	mov	r5, r0
 8007be6:	460c      	mov	r4, r1
 8007be8:	4616      	mov	r6, r2
 8007bea:	d505      	bpl.n	8007bf8 <__swrite+0x1e>
 8007bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f000 f92a 	bl	8007e4c <_lseek_r>
 8007bf8:	89a3      	ldrh	r3, [r4, #12]
 8007bfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c02:	81a3      	strh	r3, [r4, #12]
 8007c04:	4632      	mov	r2, r6
 8007c06:	463b      	mov	r3, r7
 8007c08:	4628      	mov	r0, r5
 8007c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0e:	f000 b951 	b.w	8007eb4 <_write_r>

08007c12 <__sseek>:
 8007c12:	b510      	push	{r4, lr}
 8007c14:	460c      	mov	r4, r1
 8007c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c1a:	f000 f917 	bl	8007e4c <_lseek_r>
 8007c1e:	1c43      	adds	r3, r0, #1
 8007c20:	89a3      	ldrh	r3, [r4, #12]
 8007c22:	bf15      	itete	ne
 8007c24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c2e:	81a3      	strheq	r3, [r4, #12]
 8007c30:	bf18      	it	ne
 8007c32:	81a3      	strhne	r3, [r4, #12]
 8007c34:	bd10      	pop	{r4, pc}

08007c36 <__sclose>:
 8007c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c3a:	f000 b94d 	b.w	8007ed8 <_close_r>

08007c3e <__swbuf_r>:
 8007c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c40:	460e      	mov	r6, r1
 8007c42:	4614      	mov	r4, r2
 8007c44:	4605      	mov	r5, r0
 8007c46:	b118      	cbz	r0, 8007c50 <__swbuf_r+0x12>
 8007c48:	6a03      	ldr	r3, [r0, #32]
 8007c4a:	b90b      	cbnz	r3, 8007c50 <__swbuf_r+0x12>
 8007c4c:	f7ff fab2 	bl	80071b4 <__sinit>
 8007c50:	69a3      	ldr	r3, [r4, #24]
 8007c52:	60a3      	str	r3, [r4, #8]
 8007c54:	89a3      	ldrh	r3, [r4, #12]
 8007c56:	071a      	lsls	r2, r3, #28
 8007c58:	d501      	bpl.n	8007c5e <__swbuf_r+0x20>
 8007c5a:	6923      	ldr	r3, [r4, #16]
 8007c5c:	b943      	cbnz	r3, 8007c70 <__swbuf_r+0x32>
 8007c5e:	4621      	mov	r1, r4
 8007c60:	4628      	mov	r0, r5
 8007c62:	f000 f82b 	bl	8007cbc <__swsetup_r>
 8007c66:	b118      	cbz	r0, 8007c70 <__swbuf_r+0x32>
 8007c68:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007c6c:	4638      	mov	r0, r7
 8007c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c70:	6823      	ldr	r3, [r4, #0]
 8007c72:	6922      	ldr	r2, [r4, #16]
 8007c74:	1a98      	subs	r0, r3, r2
 8007c76:	6963      	ldr	r3, [r4, #20]
 8007c78:	b2f6      	uxtb	r6, r6
 8007c7a:	4283      	cmp	r3, r0
 8007c7c:	4637      	mov	r7, r6
 8007c7e:	dc05      	bgt.n	8007c8c <__swbuf_r+0x4e>
 8007c80:	4621      	mov	r1, r4
 8007c82:	4628      	mov	r0, r5
 8007c84:	f7ff ff64 	bl	8007b50 <_fflush_r>
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d1ed      	bne.n	8007c68 <__swbuf_r+0x2a>
 8007c8c:	68a3      	ldr	r3, [r4, #8]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	60a3      	str	r3, [r4, #8]
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	1c5a      	adds	r2, r3, #1
 8007c96:	6022      	str	r2, [r4, #0]
 8007c98:	701e      	strb	r6, [r3, #0]
 8007c9a:	6962      	ldr	r2, [r4, #20]
 8007c9c:	1c43      	adds	r3, r0, #1
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d004      	beq.n	8007cac <__swbuf_r+0x6e>
 8007ca2:	89a3      	ldrh	r3, [r4, #12]
 8007ca4:	07db      	lsls	r3, r3, #31
 8007ca6:	d5e1      	bpl.n	8007c6c <__swbuf_r+0x2e>
 8007ca8:	2e0a      	cmp	r6, #10
 8007caa:	d1df      	bne.n	8007c6c <__swbuf_r+0x2e>
 8007cac:	4621      	mov	r1, r4
 8007cae:	4628      	mov	r0, r5
 8007cb0:	f7ff ff4e 	bl	8007b50 <_fflush_r>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d0d9      	beq.n	8007c6c <__swbuf_r+0x2e>
 8007cb8:	e7d6      	b.n	8007c68 <__swbuf_r+0x2a>
	...

08007cbc <__swsetup_r>:
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	4b29      	ldr	r3, [pc, #164]	@ (8007d64 <__swsetup_r+0xa8>)
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	6818      	ldr	r0, [r3, #0]
 8007cc4:	460c      	mov	r4, r1
 8007cc6:	b118      	cbz	r0, 8007cd0 <__swsetup_r+0x14>
 8007cc8:	6a03      	ldr	r3, [r0, #32]
 8007cca:	b90b      	cbnz	r3, 8007cd0 <__swsetup_r+0x14>
 8007ccc:	f7ff fa72 	bl	80071b4 <__sinit>
 8007cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cd4:	0719      	lsls	r1, r3, #28
 8007cd6:	d422      	bmi.n	8007d1e <__swsetup_r+0x62>
 8007cd8:	06da      	lsls	r2, r3, #27
 8007cda:	d407      	bmi.n	8007cec <__swsetup_r+0x30>
 8007cdc:	2209      	movs	r2, #9
 8007cde:	602a      	str	r2, [r5, #0]
 8007ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ce4:	81a3      	strh	r3, [r4, #12]
 8007ce6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007cea:	e033      	b.n	8007d54 <__swsetup_r+0x98>
 8007cec:	0758      	lsls	r0, r3, #29
 8007cee:	d512      	bpl.n	8007d16 <__swsetup_r+0x5a>
 8007cf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cf2:	b141      	cbz	r1, 8007d06 <__swsetup_r+0x4a>
 8007cf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cf8:	4299      	cmp	r1, r3
 8007cfa:	d002      	beq.n	8007d02 <__swsetup_r+0x46>
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	f000 f90d 	bl	8007f1c <_free_r>
 8007d02:	2300      	movs	r3, #0
 8007d04:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d0c:	81a3      	strh	r3, [r4, #12]
 8007d0e:	2300      	movs	r3, #0
 8007d10:	6063      	str	r3, [r4, #4]
 8007d12:	6923      	ldr	r3, [r4, #16]
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	89a3      	ldrh	r3, [r4, #12]
 8007d18:	f043 0308 	orr.w	r3, r3, #8
 8007d1c:	81a3      	strh	r3, [r4, #12]
 8007d1e:	6923      	ldr	r3, [r4, #16]
 8007d20:	b94b      	cbnz	r3, 8007d36 <__swsetup_r+0x7a>
 8007d22:	89a3      	ldrh	r3, [r4, #12]
 8007d24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d2c:	d003      	beq.n	8007d36 <__swsetup_r+0x7a>
 8007d2e:	4621      	mov	r1, r4
 8007d30:	4628      	mov	r0, r5
 8007d32:	f000 f83f 	bl	8007db4 <__smakebuf_r>
 8007d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d3a:	f013 0201 	ands.w	r2, r3, #1
 8007d3e:	d00a      	beq.n	8007d56 <__swsetup_r+0x9a>
 8007d40:	2200      	movs	r2, #0
 8007d42:	60a2      	str	r2, [r4, #8]
 8007d44:	6962      	ldr	r2, [r4, #20]
 8007d46:	4252      	negs	r2, r2
 8007d48:	61a2      	str	r2, [r4, #24]
 8007d4a:	6922      	ldr	r2, [r4, #16]
 8007d4c:	b942      	cbnz	r2, 8007d60 <__swsetup_r+0xa4>
 8007d4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d52:	d1c5      	bne.n	8007ce0 <__swsetup_r+0x24>
 8007d54:	bd38      	pop	{r3, r4, r5, pc}
 8007d56:	0799      	lsls	r1, r3, #30
 8007d58:	bf58      	it	pl
 8007d5a:	6962      	ldrpl	r2, [r4, #20]
 8007d5c:	60a2      	str	r2, [r4, #8]
 8007d5e:	e7f4      	b.n	8007d4a <__swsetup_r+0x8e>
 8007d60:	2000      	movs	r0, #0
 8007d62:	e7f7      	b.n	8007d54 <__swsetup_r+0x98>
 8007d64:	20000018 	.word	0x20000018

08007d68 <__swhatbuf_r>:
 8007d68:	b570      	push	{r4, r5, r6, lr}
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d70:	2900      	cmp	r1, #0
 8007d72:	b096      	sub	sp, #88	@ 0x58
 8007d74:	4615      	mov	r5, r2
 8007d76:	461e      	mov	r6, r3
 8007d78:	da0d      	bge.n	8007d96 <__swhatbuf_r+0x2e>
 8007d7a:	89a3      	ldrh	r3, [r4, #12]
 8007d7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d80:	f04f 0100 	mov.w	r1, #0
 8007d84:	bf14      	ite	ne
 8007d86:	2340      	movne	r3, #64	@ 0x40
 8007d88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	6031      	str	r1, [r6, #0]
 8007d90:	602b      	str	r3, [r5, #0]
 8007d92:	b016      	add	sp, #88	@ 0x58
 8007d94:	bd70      	pop	{r4, r5, r6, pc}
 8007d96:	466a      	mov	r2, sp
 8007d98:	f000 f8ae 	bl	8007ef8 <_fstat_r>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	dbec      	blt.n	8007d7a <__swhatbuf_r+0x12>
 8007da0:	9901      	ldr	r1, [sp, #4]
 8007da2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007da6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007daa:	4259      	negs	r1, r3
 8007dac:	4159      	adcs	r1, r3
 8007dae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007db2:	e7eb      	b.n	8007d8c <__swhatbuf_r+0x24>

08007db4 <__smakebuf_r>:
 8007db4:	898b      	ldrh	r3, [r1, #12]
 8007db6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007db8:	079d      	lsls	r5, r3, #30
 8007dba:	4606      	mov	r6, r0
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	d507      	bpl.n	8007dd0 <__smakebuf_r+0x1c>
 8007dc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007dc4:	6023      	str	r3, [r4, #0]
 8007dc6:	6123      	str	r3, [r4, #16]
 8007dc8:	2301      	movs	r3, #1
 8007dca:	6163      	str	r3, [r4, #20]
 8007dcc:	b003      	add	sp, #12
 8007dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dd0:	ab01      	add	r3, sp, #4
 8007dd2:	466a      	mov	r2, sp
 8007dd4:	f7ff ffc8 	bl	8007d68 <__swhatbuf_r>
 8007dd8:	9f00      	ldr	r7, [sp, #0]
 8007dda:	4605      	mov	r5, r0
 8007ddc:	4639      	mov	r1, r7
 8007dde:	4630      	mov	r0, r6
 8007de0:	f7ff fc26 	bl	8007630 <_malloc_r>
 8007de4:	b948      	cbnz	r0, 8007dfa <__smakebuf_r+0x46>
 8007de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dea:	059a      	lsls	r2, r3, #22
 8007dec:	d4ee      	bmi.n	8007dcc <__smakebuf_r+0x18>
 8007dee:	f023 0303 	bic.w	r3, r3, #3
 8007df2:	f043 0302 	orr.w	r3, r3, #2
 8007df6:	81a3      	strh	r3, [r4, #12]
 8007df8:	e7e2      	b.n	8007dc0 <__smakebuf_r+0xc>
 8007dfa:	89a3      	ldrh	r3, [r4, #12]
 8007dfc:	6020      	str	r0, [r4, #0]
 8007dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e02:	81a3      	strh	r3, [r4, #12]
 8007e04:	9b01      	ldr	r3, [sp, #4]
 8007e06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007e0a:	b15b      	cbz	r3, 8007e24 <__smakebuf_r+0x70>
 8007e0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e10:	4630      	mov	r0, r6
 8007e12:	f000 f80b 	bl	8007e2c <_isatty_r>
 8007e16:	b128      	cbz	r0, 8007e24 <__smakebuf_r+0x70>
 8007e18:	89a3      	ldrh	r3, [r4, #12]
 8007e1a:	f023 0303 	bic.w	r3, r3, #3
 8007e1e:	f043 0301 	orr.w	r3, r3, #1
 8007e22:	81a3      	strh	r3, [r4, #12]
 8007e24:	89a3      	ldrh	r3, [r4, #12]
 8007e26:	431d      	orrs	r5, r3
 8007e28:	81a5      	strh	r5, [r4, #12]
 8007e2a:	e7cf      	b.n	8007dcc <__smakebuf_r+0x18>

08007e2c <_isatty_r>:
 8007e2c:	b538      	push	{r3, r4, r5, lr}
 8007e2e:	4d06      	ldr	r5, [pc, #24]	@ (8007e48 <_isatty_r+0x1c>)
 8007e30:	2300      	movs	r3, #0
 8007e32:	4604      	mov	r4, r0
 8007e34:	4608      	mov	r0, r1
 8007e36:	602b      	str	r3, [r5, #0]
 8007e38:	f7f9 fbd1 	bl	80015de <_isatty>
 8007e3c:	1c43      	adds	r3, r0, #1
 8007e3e:	d102      	bne.n	8007e46 <_isatty_r+0x1a>
 8007e40:	682b      	ldr	r3, [r5, #0]
 8007e42:	b103      	cbz	r3, 8007e46 <_isatty_r+0x1a>
 8007e44:	6023      	str	r3, [r4, #0]
 8007e46:	bd38      	pop	{r3, r4, r5, pc}
 8007e48:	20000554 	.word	0x20000554

08007e4c <_lseek_r>:
 8007e4c:	b538      	push	{r3, r4, r5, lr}
 8007e4e:	4d07      	ldr	r5, [pc, #28]	@ (8007e6c <_lseek_r+0x20>)
 8007e50:	4604      	mov	r4, r0
 8007e52:	4608      	mov	r0, r1
 8007e54:	4611      	mov	r1, r2
 8007e56:	2200      	movs	r2, #0
 8007e58:	602a      	str	r2, [r5, #0]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	f7f9 fbca 	bl	80015f4 <_lseek>
 8007e60:	1c43      	adds	r3, r0, #1
 8007e62:	d102      	bne.n	8007e6a <_lseek_r+0x1e>
 8007e64:	682b      	ldr	r3, [r5, #0]
 8007e66:	b103      	cbz	r3, 8007e6a <_lseek_r+0x1e>
 8007e68:	6023      	str	r3, [r4, #0]
 8007e6a:	bd38      	pop	{r3, r4, r5, pc}
 8007e6c:	20000554 	.word	0x20000554

08007e70 <_read_r>:
 8007e70:	b538      	push	{r3, r4, r5, lr}
 8007e72:	4d07      	ldr	r5, [pc, #28]	@ (8007e90 <_read_r+0x20>)
 8007e74:	4604      	mov	r4, r0
 8007e76:	4608      	mov	r0, r1
 8007e78:	4611      	mov	r1, r2
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	602a      	str	r2, [r5, #0]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	f7f9 fb58 	bl	8001534 <_read>
 8007e84:	1c43      	adds	r3, r0, #1
 8007e86:	d102      	bne.n	8007e8e <_read_r+0x1e>
 8007e88:	682b      	ldr	r3, [r5, #0]
 8007e8a:	b103      	cbz	r3, 8007e8e <_read_r+0x1e>
 8007e8c:	6023      	str	r3, [r4, #0]
 8007e8e:	bd38      	pop	{r3, r4, r5, pc}
 8007e90:	20000554 	.word	0x20000554

08007e94 <_sbrk_r>:
 8007e94:	b538      	push	{r3, r4, r5, lr}
 8007e96:	4d06      	ldr	r5, [pc, #24]	@ (8007eb0 <_sbrk_r+0x1c>)
 8007e98:	2300      	movs	r3, #0
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	4608      	mov	r0, r1
 8007e9e:	602b      	str	r3, [r5, #0]
 8007ea0:	f7f9 fbb6 	bl	8001610 <_sbrk>
 8007ea4:	1c43      	adds	r3, r0, #1
 8007ea6:	d102      	bne.n	8007eae <_sbrk_r+0x1a>
 8007ea8:	682b      	ldr	r3, [r5, #0]
 8007eaa:	b103      	cbz	r3, 8007eae <_sbrk_r+0x1a>
 8007eac:	6023      	str	r3, [r4, #0]
 8007eae:	bd38      	pop	{r3, r4, r5, pc}
 8007eb0:	20000554 	.word	0x20000554

08007eb4 <_write_r>:
 8007eb4:	b538      	push	{r3, r4, r5, lr}
 8007eb6:	4d07      	ldr	r5, [pc, #28]	@ (8007ed4 <_write_r+0x20>)
 8007eb8:	4604      	mov	r4, r0
 8007eba:	4608      	mov	r0, r1
 8007ebc:	4611      	mov	r1, r2
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	602a      	str	r2, [r5, #0]
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	f7f9 fb53 	bl	800156e <_write>
 8007ec8:	1c43      	adds	r3, r0, #1
 8007eca:	d102      	bne.n	8007ed2 <_write_r+0x1e>
 8007ecc:	682b      	ldr	r3, [r5, #0]
 8007ece:	b103      	cbz	r3, 8007ed2 <_write_r+0x1e>
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	bd38      	pop	{r3, r4, r5, pc}
 8007ed4:	20000554 	.word	0x20000554

08007ed8 <_close_r>:
 8007ed8:	b538      	push	{r3, r4, r5, lr}
 8007eda:	4d06      	ldr	r5, [pc, #24]	@ (8007ef4 <_close_r+0x1c>)
 8007edc:	2300      	movs	r3, #0
 8007ede:	4604      	mov	r4, r0
 8007ee0:	4608      	mov	r0, r1
 8007ee2:	602b      	str	r3, [r5, #0]
 8007ee4:	f7f9 fb5f 	bl	80015a6 <_close>
 8007ee8:	1c43      	adds	r3, r0, #1
 8007eea:	d102      	bne.n	8007ef2 <_close_r+0x1a>
 8007eec:	682b      	ldr	r3, [r5, #0]
 8007eee:	b103      	cbz	r3, 8007ef2 <_close_r+0x1a>
 8007ef0:	6023      	str	r3, [r4, #0]
 8007ef2:	bd38      	pop	{r3, r4, r5, pc}
 8007ef4:	20000554 	.word	0x20000554

08007ef8 <_fstat_r>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	4d07      	ldr	r5, [pc, #28]	@ (8007f18 <_fstat_r+0x20>)
 8007efc:	2300      	movs	r3, #0
 8007efe:	4604      	mov	r4, r0
 8007f00:	4608      	mov	r0, r1
 8007f02:	4611      	mov	r1, r2
 8007f04:	602b      	str	r3, [r5, #0]
 8007f06:	f7f9 fb5a 	bl	80015be <_fstat>
 8007f0a:	1c43      	adds	r3, r0, #1
 8007f0c:	d102      	bne.n	8007f14 <_fstat_r+0x1c>
 8007f0e:	682b      	ldr	r3, [r5, #0]
 8007f10:	b103      	cbz	r3, 8007f14 <_fstat_r+0x1c>
 8007f12:	6023      	str	r3, [r4, #0]
 8007f14:	bd38      	pop	{r3, r4, r5, pc}
 8007f16:	bf00      	nop
 8007f18:	20000554 	.word	0x20000554

08007f1c <_free_r>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	4605      	mov	r5, r0
 8007f20:	2900      	cmp	r1, #0
 8007f22:	d041      	beq.n	8007fa8 <_free_r+0x8c>
 8007f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f28:	1f0c      	subs	r4, r1, #4
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	bfb8      	it	lt
 8007f2e:	18e4      	addlt	r4, r4, r3
 8007f30:	f7ff fe36 	bl	8007ba0 <__malloc_lock>
 8007f34:	4a1d      	ldr	r2, [pc, #116]	@ (8007fac <_free_r+0x90>)
 8007f36:	6813      	ldr	r3, [r2, #0]
 8007f38:	b933      	cbnz	r3, 8007f48 <_free_r+0x2c>
 8007f3a:	6063      	str	r3, [r4, #4]
 8007f3c:	6014      	str	r4, [r2, #0]
 8007f3e:	4628      	mov	r0, r5
 8007f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f44:	f7ff be32 	b.w	8007bac <__malloc_unlock>
 8007f48:	42a3      	cmp	r3, r4
 8007f4a:	d908      	bls.n	8007f5e <_free_r+0x42>
 8007f4c:	6820      	ldr	r0, [r4, #0]
 8007f4e:	1821      	adds	r1, r4, r0
 8007f50:	428b      	cmp	r3, r1
 8007f52:	bf01      	itttt	eq
 8007f54:	6819      	ldreq	r1, [r3, #0]
 8007f56:	685b      	ldreq	r3, [r3, #4]
 8007f58:	1809      	addeq	r1, r1, r0
 8007f5a:	6021      	streq	r1, [r4, #0]
 8007f5c:	e7ed      	b.n	8007f3a <_free_r+0x1e>
 8007f5e:	461a      	mov	r2, r3
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	b10b      	cbz	r3, 8007f68 <_free_r+0x4c>
 8007f64:	42a3      	cmp	r3, r4
 8007f66:	d9fa      	bls.n	8007f5e <_free_r+0x42>
 8007f68:	6811      	ldr	r1, [r2, #0]
 8007f6a:	1850      	adds	r0, r2, r1
 8007f6c:	42a0      	cmp	r0, r4
 8007f6e:	d10b      	bne.n	8007f88 <_free_r+0x6c>
 8007f70:	6820      	ldr	r0, [r4, #0]
 8007f72:	4401      	add	r1, r0
 8007f74:	1850      	adds	r0, r2, r1
 8007f76:	4283      	cmp	r3, r0
 8007f78:	6011      	str	r1, [r2, #0]
 8007f7a:	d1e0      	bne.n	8007f3e <_free_r+0x22>
 8007f7c:	6818      	ldr	r0, [r3, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	6053      	str	r3, [r2, #4]
 8007f82:	4408      	add	r0, r1
 8007f84:	6010      	str	r0, [r2, #0]
 8007f86:	e7da      	b.n	8007f3e <_free_r+0x22>
 8007f88:	d902      	bls.n	8007f90 <_free_r+0x74>
 8007f8a:	230c      	movs	r3, #12
 8007f8c:	602b      	str	r3, [r5, #0]
 8007f8e:	e7d6      	b.n	8007f3e <_free_r+0x22>
 8007f90:	6820      	ldr	r0, [r4, #0]
 8007f92:	1821      	adds	r1, r4, r0
 8007f94:	428b      	cmp	r3, r1
 8007f96:	bf04      	itt	eq
 8007f98:	6819      	ldreq	r1, [r3, #0]
 8007f9a:	685b      	ldreq	r3, [r3, #4]
 8007f9c:	6063      	str	r3, [r4, #4]
 8007f9e:	bf04      	itt	eq
 8007fa0:	1809      	addeq	r1, r1, r0
 8007fa2:	6021      	streq	r1, [r4, #0]
 8007fa4:	6054      	str	r4, [r2, #4]
 8007fa6:	e7ca      	b.n	8007f3e <_free_r+0x22>
 8007fa8:	bd38      	pop	{r3, r4, r5, pc}
 8007faa:	bf00      	nop
 8007fac:	20000550 	.word	0x20000550

08007fb0 <_init>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	bf00      	nop
 8007fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb6:	bc08      	pop	{r3}
 8007fb8:	469e      	mov	lr, r3
 8007fba:	4770      	bx	lr

08007fbc <_fini>:
 8007fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbe:	bf00      	nop
 8007fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc2:	bc08      	pop	{r3}
 8007fc4:	469e      	mov	lr, r3
 8007fc6:	4770      	bx	lr
